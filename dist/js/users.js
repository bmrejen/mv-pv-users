(function () {
    'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    // CommonJS / Node have global context exposed as "global" variable.
    // We don't want to include the whole node.d.ts this this compilation unit so we'll just fake
    // the global "global" var for now.
    var __window = typeof window !== 'undefined' && window;
    var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
        self instanceof WorkerGlobalScope && self;
    var __global = typeof commonjsGlobal !== 'undefined' && commonjsGlobal;
    var _root = __window || __global || __self;
    var root_1 = _root;
    // Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.
    // This is needed when used with angular/tsickle which inserts a goog.module statement.
    // Wrap in IIFE
    (function () {
        if (!_root) {
            throw new Error('RxJS could not find any global context (window, self, global)');
        }
    })();


    var root = {
    	root: root_1
    };

    function isFunction(x) {
        return typeof x === 'function';
    }
    var isFunction_2 = isFunction;


    var isFunction_1 = {
    	isFunction: isFunction_2
    };

    var isArray_1 = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });


    var isArray = {
    	isArray: isArray_1
    };

    function isObject(x) {
        return x != null && typeof x === 'object';
    }
    var isObject_2 = isObject;


    var isObject_1 = {
    	isObject: isObject_2
    };

    // typeof any so that it we don't have to cast when comparing a result to the error object
    var errorObject_1 = { e: {} };


    var errorObject = {
    	errorObject: errorObject_1
    };

    var tryCatchTarget;
    function tryCatcher() {
        try {
            return tryCatchTarget.apply(this, arguments);
        }
        catch (e) {
            errorObject.errorObject.e = e;
            return errorObject.errorObject;
        }
    }
    function tryCatch(fn) {
        tryCatchTarget = fn;
        return tryCatcher;
    }
    var tryCatch_2 = tryCatch;


    var tryCatch_1 = {
    	tryCatch: tryCatch_2
    };

    var __extends$1 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when one or more errors have occurred during the
     * `unsubscribe` of a {@link Subscription}.
     */
    var UnsubscriptionError = (function (_super) {
        __extends$1(UnsubscriptionError, _super);
        function UnsubscriptionError(errors) {
            _super.call(this);
            this.errors = errors;
            var err = Error.call(this, errors ?
                errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
            this.name = err.name = 'UnsubscriptionError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return UnsubscriptionError;
    }(Error));
    var UnsubscriptionError_2 = UnsubscriptionError;


    var UnsubscriptionError_1 = {
    	UnsubscriptionError: UnsubscriptionError_2
    };

    /**
     * Represents a disposable resource, such as the execution of an Observable. A
     * Subscription has one important method, `unsubscribe`, that takes no argument
     * and just disposes the resource held by the subscription.
     *
     * Additionally, subscriptions may be grouped together through the `add()`
     * method, which will attach a child Subscription to the current Subscription.
     * When a Subscription is unsubscribed, all its children (and its grandchildren)
     * will be unsubscribed as well.
     *
     * @class Subscription
     */
    var Subscription = (function () {
        /**
         * @param {function(): void} [unsubscribe] A function describing how to
         * perform the disposal of resources when the `unsubscribe` method is called.
         */
        function Subscription(unsubscribe) {
            /**
             * A flag to indicate whether this Subscription has already been unsubscribed.
             * @type {boolean}
             */
            this.closed = false;
            this._parent = null;
            this._parents = null;
            this._subscriptions = null;
            if (unsubscribe) {
                this._unsubscribe = unsubscribe;
            }
        }
        /**
         * Disposes the resources held by the subscription. May, for instance, cancel
         * an ongoing Observable execution or cancel any other type of work that
         * started when the Subscription was created.
         * @return {void}
         */
        Subscription.prototype.unsubscribe = function () {
            var hasErrors = false;
            var errors;
            if (this.closed) {
                return;
            }
            var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
            this.closed = true;
            this._parent = null;
            this._parents = null;
            // null out _subscriptions first so any child subscriptions that attempt
            // to remove themselves from this subscription will noop
            this._subscriptions = null;
            var index = -1;
            var len = _parents ? _parents.length : 0;
            // if this._parent is null, then so is this._parents, and we
            // don't have to remove ourselves from any parent subscriptions.
            while (_parent) {
                _parent.remove(this);
                // if this._parents is null or index >= len,
                // then _parent is set to null, and the loop exits
                _parent = ++index < len && _parents[index] || null;
            }
            if (isFunction_1.isFunction(_unsubscribe)) {
                var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
                if (trial === errorObject.errorObject) {
                    hasErrors = true;
                    errors = errors || (errorObject.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?
                        flattenUnsubscriptionErrors(errorObject.errorObject.e.errors) : [errorObject.errorObject.e]);
                }
            }
            if (isArray.isArray(_subscriptions)) {
                index = -1;
                len = _subscriptions.length;
                while (++index < len) {
                    var sub = _subscriptions[index];
                    if (isObject_1.isObject(sub)) {
                        var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                        if (trial === errorObject.errorObject) {
                            hasErrors = true;
                            errors = errors || [];
                            var err = errorObject.errorObject.e;
                            if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                                errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                            }
                            else {
                                errors.push(err);
                            }
                        }
                    }
                }
            }
            if (hasErrors) {
                throw new UnsubscriptionError_1.UnsubscriptionError(errors);
            }
        };
        /**
         * Adds a tear down to be called during the unsubscribe() of this
         * Subscription.
         *
         * If the tear down being added is a subscription that is already
         * unsubscribed, is the same reference `add` is being called on, or is
         * `Subscription.EMPTY`, it will not be added.
         *
         * If this subscription is already in an `closed` state, the passed
         * tear down logic will be executed immediately.
         *
         * @param {TeardownLogic} teardown The additional logic to execute on
         * teardown.
         * @return {Subscription} Returns the Subscription used or created to be
         * added to the inner subscriptions list. This Subscription can be used with
         * `remove()` to remove the passed teardown logic from the inner subscriptions
         * list.
         */
        Subscription.prototype.add = function (teardown) {
            if (!teardown || (teardown === Subscription.EMPTY)) {
                return Subscription.EMPTY;
            }
            if (teardown === this) {
                return this;
            }
            var subscription = teardown;
            switch (typeof teardown) {
                case 'function':
                    subscription = new Subscription(teardown);
                case 'object':
                    if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                        return subscription;
                    }
                    else if (this.closed) {
                        subscription.unsubscribe();
                        return subscription;
                    }
                    else if (typeof subscription._addParent !== 'function' /* quack quack */) {
                        var tmp = subscription;
                        subscription = new Subscription();
                        subscription._subscriptions = [tmp];
                    }
                    break;
                default:
                    throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
            }
            var subscriptions = this._subscriptions || (this._subscriptions = []);
            subscriptions.push(subscription);
            subscription._addParent(this);
            return subscription;
        };
        /**
         * Removes a Subscription from the internal list of subscriptions that will
         * unsubscribe during the unsubscribe process of this Subscription.
         * @param {Subscription} subscription The subscription to remove.
         * @return {void}
         */
        Subscription.prototype.remove = function (subscription) {
            var subscriptions = this._subscriptions;
            if (subscriptions) {
                var subscriptionIndex = subscriptions.indexOf(subscription);
                if (subscriptionIndex !== -1) {
                    subscriptions.splice(subscriptionIndex, 1);
                }
            }
        };
        Subscription.prototype._addParent = function (parent) {
            var _a = this, _parent = _a._parent, _parents = _a._parents;
            if (!_parent || _parent === parent) {
                // If we don't have a parent, or the new parent is the same as the
                // current parent, then set this._parent to the new parent.
                this._parent = parent;
            }
            else if (!_parents) {
                // If there's already one parent, but not multiple, allocate an Array to
                // store the rest of the parent Subscriptions.
                this._parents = [parent];
            }
            else if (_parents.indexOf(parent) === -1) {
                // Only add the new parent to the _parents list if it's not already there.
                _parents.push(parent);
            }
        };
        Subscription.EMPTY = (function (empty) {
            empty.closed = true;
            return empty;
        }(new Subscription()));
        return Subscription;
    }());
    var Subscription_2 = Subscription;
    function flattenUnsubscriptionErrors(errors) {
        return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);
    }


    var Subscription_1 = {
    	Subscription: Subscription_2
    };

    var empty = {
        closed: true,
        next: function (value) { },
        error: function (err) { throw err; },
        complete: function () { }
    };


    var Observer = {
    	empty: empty
    };

    var rxSubscriber = createCommonjsModule(function (module, exports) {

    var Symbol = root.root.Symbol;
    exports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?
        Symbol.for('rxSubscriber') : '@@rxSubscriber';
    /**
     * @deprecated use rxSubscriber instead
     */
    exports.$$rxSubscriber = exports.rxSubscriber;

    });
    var rxSubscriber_1 = rxSubscriber.rxSubscriber;
    var rxSubscriber_2 = rxSubscriber.$$rxSubscriber;

    var __extends$2 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };




    /**
     * Implements the {@link Observer} interface and extends the
     * {@link Subscription} class. While the {@link Observer} is the public API for
     * consuming the values of an {@link Observable}, all Observers get converted to
     * a Subscriber, in order to provide Subscription-like capabilities such as
     * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
     * implementing operators, but it is rarely used as a public API.
     *
     * @class Subscriber<T>
     */
    var Subscriber = (function (_super) {
        __extends$2(Subscriber, _super);
        /**
         * @param {Observer|function(value: T): void} [destinationOrNext] A partially
         * defined Observer or a `next` callback function.
         * @param {function(e: ?any): void} [error] The `error` callback of an
         * Observer.
         * @param {function(): void} [complete] The `complete` callback of an
         * Observer.
         */
        function Subscriber(destinationOrNext, error, complete) {
            _super.call(this);
            this.syncErrorValue = null;
            this.syncErrorThrown = false;
            this.syncErrorThrowable = false;
            this.isStopped = false;
            switch (arguments.length) {
                case 0:
                    this.destination = Observer.empty;
                    break;
                case 1:
                    if (!destinationOrNext) {
                        this.destination = Observer.empty;
                        break;
                    }
                    if (typeof destinationOrNext === 'object') {
                        // HACK(benlesh): To resolve an issue where Node users may have multiple
                        // copies of rxjs in their node_modules directory.
                        if (isTrustedSubscriber(destinationOrNext)) {
                            var trustedSubscriber = destinationOrNext[rxSubscriber.rxSubscriber]();
                            this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;
                            this.destination = trustedSubscriber;
                            trustedSubscriber.add(this);
                        }
                        else {
                            this.syncErrorThrowable = true;
                            this.destination = new SafeSubscriber(this, destinationOrNext);
                        }
                        break;
                    }
                default:
                    this.syncErrorThrowable = true;
                    this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                    break;
            }
        }
        Subscriber.prototype[rxSubscriber.rxSubscriber] = function () { return this; };
        /**
         * A static factory for a Subscriber, given a (potentially partial) definition
         * of an Observer.
         * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
         * @param {function(e: ?any): void} [error] The `error` callback of an
         * Observer.
         * @param {function(): void} [complete] The `complete` callback of an
         * Observer.
         * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
         * Observer represented by the given arguments.
         */
        Subscriber.create = function (next, error, complete) {
            var subscriber = new Subscriber(next, error, complete);
            subscriber.syncErrorThrowable = false;
            return subscriber;
        };
        /**
         * The {@link Observer} callback to receive notifications of type `next` from
         * the Observable, with a value. The Observable may call this method 0 or more
         * times.
         * @param {T} [value] The `next` value.
         * @return {void}
         */
        Subscriber.prototype.next = function (value) {
            if (!this.isStopped) {
                this._next(value);
            }
        };
        /**
         * The {@link Observer} callback to receive notifications of type `error` from
         * the Observable, with an attached {@link Error}. Notifies the Observer that
         * the Observable has experienced an error condition.
         * @param {any} [err] The `error` exception.
         * @return {void}
         */
        Subscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                this.isStopped = true;
                this._error(err);
            }
        };
        /**
         * The {@link Observer} callback to receive a valueless notification of type
         * `complete` from the Observable. Notifies the Observer that the Observable
         * has finished sending push-based notifications.
         * @return {void}
         */
        Subscriber.prototype.complete = function () {
            if (!this.isStopped) {
                this.isStopped = true;
                this._complete();
            }
        };
        Subscriber.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
        };
        Subscriber.prototype._next = function (value) {
            this.destination.next(value);
        };
        Subscriber.prototype._error = function (err) {
            this.destination.error(err);
            this.unsubscribe();
        };
        Subscriber.prototype._complete = function () {
            this.destination.complete();
            this.unsubscribe();
        };
        /** @deprecated internal use only */ Subscriber.prototype._unsubscribeAndRecycle = function () {
            var _a = this, _parent = _a._parent, _parents = _a._parents;
            this._parent = null;
            this._parents = null;
            this.unsubscribe();
            this.closed = false;
            this.isStopped = false;
            this._parent = _parent;
            this._parents = _parents;
            return this;
        };
        return Subscriber;
    }(Subscription_1.Subscription));
    var Subscriber_2 = Subscriber;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SafeSubscriber = (function (_super) {
        __extends$2(SafeSubscriber, _super);
        function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
            _super.call(this);
            this._parentSubscriber = _parentSubscriber;
            var next;
            var context = this;
            if (isFunction_1.isFunction(observerOrNext)) {
                next = observerOrNext;
            }
            else if (observerOrNext) {
                next = observerOrNext.next;
                error = observerOrNext.error;
                complete = observerOrNext.complete;
                if (observerOrNext !== Observer.empty) {
                    context = Object.create(observerOrNext);
                    if (isFunction_1.isFunction(context.unsubscribe)) {
                        this.add(context.unsubscribe.bind(context));
                    }
                    context.unsubscribe = this.unsubscribe.bind(this);
                }
            }
            this._context = context;
            this._next = next;
            this._error = error;
            this._complete = complete;
        }
        SafeSubscriber.prototype.next = function (value) {
            if (!this.isStopped && this._next) {
                var _parentSubscriber = this._parentSubscriber;
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._next, value);
                }
                else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var _parentSubscriber = this._parentSubscriber;
                if (this._error) {
                    if (!_parentSubscriber.syncErrorThrowable) {
                        this.__tryOrUnsub(this._error, err);
                        this.unsubscribe();
                    }
                    else {
                        this.__tryOrSetError(_parentSubscriber, this._error, err);
                        this.unsubscribe();
                    }
                }
                else if (!_parentSubscriber.syncErrorThrowable) {
                    this.unsubscribe();
                    throw err;
                }
                else {
                    _parentSubscriber.syncErrorValue = err;
                    _parentSubscriber.syncErrorThrown = true;
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.complete = function () {
            var _this = this;
            if (!this.isStopped) {
                var _parentSubscriber = this._parentSubscriber;
                if (this._complete) {
                    var wrappedComplete = function () { return _this._complete.call(_this._context); };
                    if (!_parentSubscriber.syncErrorThrowable) {
                        this.__tryOrUnsub(wrappedComplete);
                        this.unsubscribe();
                    }
                    else {
                        this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                        this.unsubscribe();
                    }
                }
                else {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
            try {
                fn.call(this._context, value);
            }
            catch (err) {
                this.unsubscribe();
                throw err;
            }
        };
        SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
            try {
                fn.call(this._context, value);
            }
            catch (err) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            return false;
        };
        /** @deprecated internal use only */ SafeSubscriber.prototype._unsubscribe = function () {
            var _parentSubscriber = this._parentSubscriber;
            this._context = null;
            this._parentSubscriber = null;
            _parentSubscriber.unsubscribe();
        };
        return SafeSubscriber;
    }(Subscriber));
    function isTrustedSubscriber(obj) {
        return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriber.rxSubscriber]);
    }


    var Subscriber_1 = {
    	Subscriber: Subscriber_2
    };

    function toSubscriber(nextOrObserver, error, complete) {
        if (nextOrObserver) {
            if (nextOrObserver instanceof Subscriber_1.Subscriber) {
                return nextOrObserver;
            }
            if (nextOrObserver[rxSubscriber.rxSubscriber]) {
                return nextOrObserver[rxSubscriber.rxSubscriber]();
            }
        }
        if (!nextOrObserver && !error && !complete) {
            return new Subscriber_1.Subscriber(Observer.empty);
        }
        return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
    }
    var toSubscriber_2 = toSubscriber;


    var toSubscriber_1 = {
    	toSubscriber: toSubscriber_2
    };

    var observable = createCommonjsModule(function (module, exports) {

    function getSymbolObservable(context) {
        var $$observable;
        var Symbol = context.Symbol;
        if (typeof Symbol === 'function') {
            if (Symbol.observable) {
                $$observable = Symbol.observable;
            }
            else {
                $$observable = Symbol('observable');
                Symbol.observable = $$observable;
            }
        }
        else {
            $$observable = '@@observable';
        }
        return $$observable;
    }
    exports.getSymbolObservable = getSymbolObservable;
    exports.observable = getSymbolObservable(root.root);
    /**
     * @deprecated use observable instead
     */
    exports.$$observable = exports.observable;

    });
    var observable_1 = observable.getSymbolObservable;
    var observable_2 = observable.observable;
    var observable_3 = observable.$$observable;

    /* tslint:disable:no-empty */
    function noop() { }
    var noop_2 = noop;


    var noop_1 = {
    	noop: noop_2
    };

    /* tslint:enable:max-line-length */
    function pipe() {
        var fns = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fns[_i - 0] = arguments[_i];
        }
        return pipeFromArray(fns);
    }
    var pipe_2 = pipe;
    /* @internal */
    function pipeFromArray(fns) {
        if (!fns) {
            return noop_1.noop;
        }
        if (fns.length === 1) {
            return fns[0];
        }
        return function piped(input) {
            return fns.reduce(function (prev, fn) { return fn(prev); }, input);
        };
    }
    var pipeFromArray_1 = pipeFromArray;


    var pipe_1 = {
    	pipe: pipe_2,
    	pipeFromArray: pipeFromArray_1
    };

    /**
     * A representation of any set of values over any amount of time. This is the most basic building block
     * of RxJS.
     *
     * @class Observable<T>
     */
    var Observable = (function () {
        /**
         * @constructor
         * @param {Function} subscribe the function that is called when the Observable is
         * initially subscribed to. This function is given a Subscriber, to which new values
         * can be `next`ed, or an `error` method can be called to raise an error, or
         * `complete` can be called to notify of a successful completion.
         */
        function Observable(subscribe) {
            this._isScalar = false;
            if (subscribe) {
                this._subscribe = subscribe;
            }
        }
        /**
         * Creates a new Observable, with this Observable as the source, and the passed
         * operator defined as the new observable's operator.
         * @method lift
         * @param {Operator} operator the operator defining the operation to take on the observable
         * @return {Observable} a new observable with the Operator applied
         */
        Observable.prototype.lift = function (operator) {
            var observable$$1 = new Observable();
            observable$$1.source = this;
            observable$$1.operator = operator;
            return observable$$1;
        };
        /**
         * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.
         *
         * <span class="informal">Use it when you have all these Observables, but still nothing is happening.</span>
         *
         * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It
         * might be for example a function that you passed to a {@link create} static factory, but most of the time it is
         * a library implementation, which defines what and when will be emitted by an Observable. This means that calling
         * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often
         * thought.
         *
         * Apart from starting the execution of an Observable, this method allows you to listen for values
         * that an Observable emits, as well as for when it completes or errors. You can achieve this in two
         * following ways.
         *
         * The first way is creating an object that implements {@link Observer} interface. It should have methods
         * defined by that interface, but note that it should be just a regular JavaScript object, which you can create
         * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do
         * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also
         * that your object does not have to implement all methods. If you find yourself creating a method that doesn't
         * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will
         * be left uncaught.
         *
         * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.
         * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent
         * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,
         * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,
         * since `subscribe` recognizes these functions by where they were placed in function call. When it comes
         * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.
         *
         * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.
         * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean
         * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback
         * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.
         *
         * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.
         * It is an Observable itself that decides when these functions will be called. For example {@link of}
         * by default emits all its values synchronously. Always check documentation for how given Observable
         * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.
         *
         * @example <caption>Subscribe with an Observer</caption>
         * const sumObserver = {
         *   sum: 0,
         *   next(value) {
         *     console.log('Adding: ' + value);
         *     this.sum = this.sum + value;
         *   },
         *   error() { // We actually could just remove this method,
         *   },        // since we do not really care about errors right now.
         *   complete() {
         *     console.log('Sum equals: ' + this.sum);
         *   }
         * };
         *
         * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.
         * .subscribe(sumObserver);
         *
         * // Logs:
         * // "Adding: 1"
         * // "Adding: 2"
         * // "Adding: 3"
         * // "Sum equals: 6"
         *
         *
         * @example <caption>Subscribe with functions</caption>
         * let sum = 0;
         *
         * Rx.Observable.of(1, 2, 3)
         * .subscribe(
         *   function(value) {
         *     console.log('Adding: ' + value);
         *     sum = sum + value;
         *   },
         *   undefined,
         *   function() {
         *     console.log('Sum equals: ' + sum);
         *   }
         * );
         *
         * // Logs:
         * // "Adding: 1"
         * // "Adding: 2"
         * // "Adding: 3"
         * // "Sum equals: 6"
         *
         *
         * @example <caption>Cancel a subscription</caption>
         * const subscription = Rx.Observable.interval(1000).subscribe(
         *   num => console.log(num),
         *   undefined,
         *   () => console.log('completed!') // Will not be called, even
         * );                                // when cancelling subscription
         *
         *
         * setTimeout(() => {
         *   subscription.unsubscribe();
         *   console.log('unsubscribed!');
         * }, 2500);
         *
         * // Logs:
         * // 0 after 1s
         * // 1 after 2s
         * // "unsubscribed!" after 2.5s
         *
         *
         * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,
         *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed
         *  Observable.
         * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,
         *  the error will be thrown as unhandled.
         * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.
         * @return {ISubscription} a subscription reference to the registered handlers
         * @method subscribe
         */
        Observable.prototype.subscribe = function (observerOrNext, error, complete) {
            var operator = this.operator;
            var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
            if (operator) {
                operator.call(sink, this.source);
            }
            else {
                sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));
            }
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
            return sink;
        };
        Observable.prototype._trySubscribe = function (sink) {
            try {
                return this._subscribe(sink);
            }
            catch (err) {
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
                sink.error(err);
            }
        };
        /**
         * @method forEach
         * @param {Function} next a handler for each value emitted by the observable
         * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
         * @return {Promise} a promise that either resolves on observable completion or
         *  rejects with the handled error
         */
        Observable.prototype.forEach = function (next, PromiseCtor) {
            var _this = this;
            if (!PromiseCtor) {
                if (root.root.Rx && root.root.Rx.config && root.root.Rx.config.Promise) {
                    PromiseCtor = root.root.Rx.config.Promise;
                }
                else if (root.root.Promise) {
                    PromiseCtor = root.root.Promise;
                }
            }
            if (!PromiseCtor) {
                throw new Error('no Promise impl found');
            }
            return new PromiseCtor(function (resolve, reject) {
                // Must be declared in a separate statement to avoid a RefernceError when
                // accessing subscription below in the closure due to Temporal Dead Zone.
                var subscription;
                subscription = _this.subscribe(function (value) {
                    if (subscription) {
                        // if there is a subscription, then we can surmise
                        // the next handling is asynchronous. Any errors thrown
                        // need to be rejected explicitly and unsubscribe must be
                        // called manually
                        try {
                            next(value);
                        }
                        catch (err) {
                            reject(err);
                            subscription.unsubscribe();
                        }
                    }
                    else {
                        // if there is NO subscription, then we're getting a nexted
                        // value synchronously during subscription. We can just call it.
                        // If it errors, Observable's `subscribe` will ensure the
                        // unsubscription logic is called, then synchronously rethrow the error.
                        // After that, Promise will trap the error and send it
                        // down the rejection path.
                        next(value);
                    }
                }, reject, resolve);
            });
        };
        /** @deprecated internal use only */ Observable.prototype._subscribe = function (subscriber) {
            return this.source.subscribe(subscriber);
        };
        /**
         * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
         * @method Symbol.observable
         * @return {Observable} this instance of the observable
         */
        Observable.prototype[observable.observable] = function () {
            return this;
        };
        /* tslint:enable:max-line-length */
        /**
         * Used to stitch together functional operators into a chain.
         * @method pipe
         * @return {Observable} the Observable result of all of the operators having
         * been called in the order they were passed in.
         *
         * @example
         *
         * import { map, filter, scan } from 'rxjs/operators';
         *
         * Rx.Observable.interval(1000)
         *   .pipe(
         *     filter(x => x % 2 === 0),
         *     map(x => x + x),
         *     scan((acc, x) => acc + x)
         *   )
         *   .subscribe(x => console.log(x))
         */
        Observable.prototype.pipe = function () {
            var operations = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                operations[_i - 0] = arguments[_i];
            }
            if (operations.length === 0) {
                return this;
            }
            return pipe_1.pipeFromArray(operations)(this);
        };
        /* tslint:enable:max-line-length */
        Observable.prototype.toPromise = function (PromiseCtor) {
            var _this = this;
            if (!PromiseCtor) {
                if (root.root.Rx && root.root.Rx.config && root.root.Rx.config.Promise) {
                    PromiseCtor = root.root.Rx.config.Promise;
                }
                else if (root.root.Promise) {
                    PromiseCtor = root.root.Promise;
                }
            }
            if (!PromiseCtor) {
                throw new Error('no Promise impl found');
            }
            return new PromiseCtor(function (resolve, reject) {
                var value;
                _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
            });
        };
        // HACK: Since TypeScript inherits static properties too, we have to
        // fight against TypeScript here so Subject can have a different static create signature
        /**
         * Creates a new cold Observable by calling the Observable constructor
         * @static true
         * @owner Observable
         * @method create
         * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
         * @return {Observable} a new cold observable
         */
        Observable.create = function (subscribe) {
            return new Observable(subscribe);
        };
        return Observable;
    }());
    var Observable_2 = Observable;


    var Observable_1 = {
    	Observable: Observable_2
    };

    var __extends$3 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ScalarObservable = (function (_super) {
        __extends$3(ScalarObservable, _super);
        function ScalarObservable(value, scheduler) {
            _super.call(this);
            this.value = value;
            this.scheduler = scheduler;
            this._isScalar = true;
            if (scheduler) {
                this._isScalar = false;
            }
        }
        ScalarObservable.create = function (value, scheduler) {
            return new ScalarObservable(value, scheduler);
        };
        ScalarObservable.dispatch = function (state) {
            var done = state.done, value = state.value, subscriber = state.subscriber;
            if (done) {
                subscriber.complete();
                return;
            }
            subscriber.next(value);
            if (subscriber.closed) {
                return;
            }
            state.done = true;
            this.schedule(state);
        };
        /** @deprecated internal use only */ ScalarObservable.prototype._subscribe = function (subscriber) {
            var value = this.value;
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(ScalarObservable.dispatch, 0, {
                    done: false, value: value, subscriber: subscriber
                });
            }
            else {
                subscriber.next(value);
                if (!subscriber.closed) {
                    subscriber.complete();
                }
            }
        };
        return ScalarObservable;
    }(Observable_1.Observable));
    var ScalarObservable_2 = ScalarObservable;


    var ScalarObservable_1 = {
    	ScalarObservable: ScalarObservable_2
    };

    var __extends$4 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var EmptyObservable = (function (_super) {
        __extends$4(EmptyObservable, _super);
        function EmptyObservable(scheduler) {
            _super.call(this);
            this.scheduler = scheduler;
        }
        /**
         * Creates an Observable that emits no items to the Observer and immediately
         * emits a complete notification.
         *
         * <span class="informal">Just emits 'complete', and nothing else.
         * </span>
         *
         * <img src="./img/empty.png" width="100%">
         *
         * This static operator is useful for creating a simple Observable that only
         * emits the complete notification. It can be used for composing with other
         * Observables, such as in a {@link mergeMap}.
         *
         * @example <caption>Emit the number 7, then complete.</caption>
         * var result = Rx.Observable.empty().startWith(7);
         * result.subscribe(x => console.log(x));
         *
         * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
         * var interval = Rx.Observable.interval(1000);
         * var result = interval.mergeMap(x =>
         *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
         * );
         * result.subscribe(x => console.log(x));
         *
         * // Results in the following to the console:
         * // x is equal to the count on the interval eg(0,1,2,3,...)
         * // x will occur every 1000ms
         * // if x % 2 is equal to 1 print abc
         * // if x % 2 is not equal to 1 nothing will be output
         *
         * @see {@link create}
         * @see {@link never}
         * @see {@link of}
         * @see {@link throw}
         *
         * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
         * the emission of the complete notification.
         * @return {Observable} An "empty" Observable: emits only the complete
         * notification.
         * @static true
         * @name empty
         * @owner Observable
         */
        EmptyObservable.create = function (scheduler) {
            return new EmptyObservable(scheduler);
        };
        EmptyObservable.dispatch = function (arg) {
            var subscriber = arg.subscriber;
            subscriber.complete();
        };
        /** @deprecated internal use only */ EmptyObservable.prototype._subscribe = function (subscriber) {
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
            }
            else {
                subscriber.complete();
            }
        };
        return EmptyObservable;
    }(Observable_1.Observable));
    var EmptyObservable_2 = EmptyObservable;


    var EmptyObservable_1 = {
    	EmptyObservable: EmptyObservable_2
    };

    function isScheduler(value) {
        return value && typeof value.schedule === 'function';
    }
    var isScheduler_2 = isScheduler;


    var isScheduler_1 = {
    	isScheduler: isScheduler_2
    };

    var __extends$5 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };




    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ArrayObservable = (function (_super) {
        __extends$5(ArrayObservable, _super);
        function ArrayObservable(array, scheduler) {
            _super.call(this);
            this.array = array;
            this.scheduler = scheduler;
            if (!scheduler && array.length === 1) {
                this._isScalar = true;
                this.value = array[0];
            }
        }
        ArrayObservable.create = function (array, scheduler) {
            return new ArrayObservable(array, scheduler);
        };
        /**
         * Creates an Observable that emits some values you specify as arguments,
         * immediately one after the other, and then emits a complete notification.
         *
         * <span class="informal">Emits the arguments you provide, then completes.
         * </span>
         *
         * <img src="./img/of.png" width="100%">
         *
         * This static operator is useful for creating a simple Observable that only
         * emits the arguments given, and the complete notification thereafter. It can
         * be used for composing with other Observables, such as with {@link concat}.
         * By default, it uses a `null` IScheduler, which means the `next`
         * notifications are sent synchronously, although with a different IScheduler
         * it is possible to determine when those notifications will be delivered.
         *
         * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
         * var numbers = Rx.Observable.of(10, 20, 30);
         * var letters = Rx.Observable.of('a', 'b', 'c');
         * var interval = Rx.Observable.interval(1000);
         * var result = numbers.concat(letters).concat(interval);
         * result.subscribe(x => console.log(x));
         *
         * @see {@link create}
         * @see {@link empty}
         * @see {@link never}
         * @see {@link throw}
         *
         * @param {...T} values Arguments that represent `next` values to be emitted.
         * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
         * the emissions of the `next` notifications.
         * @return {Observable<T>} An Observable that emits each given input value.
         * @static true
         * @name of
         * @owner Observable
         */
        ArrayObservable.of = function () {
            var array = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                array[_i - 0] = arguments[_i];
            }
            var scheduler = array[array.length - 1];
            if (isScheduler_1.isScheduler(scheduler)) {
                array.pop();
            }
            else {
                scheduler = null;
            }
            var len = array.length;
            if (len > 1) {
                return new ArrayObservable(array, scheduler);
            }
            else if (len === 1) {
                return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
            }
            else {
                return new EmptyObservable_1.EmptyObservable(scheduler);
            }
        };
        ArrayObservable.dispatch = function (state) {
            var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;
            if (index >= count) {
                subscriber.complete();
                return;
            }
            subscriber.next(array[index]);
            if (subscriber.closed) {
                return;
            }
            state.index = index + 1;
            this.schedule(state);
        };
        /** @deprecated internal use only */ ArrayObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var array = this.array;
            var count = array.length;
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(ArrayObservable.dispatch, 0, {
                    array: array, index: index, count: count, subscriber: subscriber
                });
            }
            else {
                for (var i = 0; i < count && !subscriber.closed; i++) {
                    subscriber.next(array[i]);
                }
                subscriber.complete();
            }
        };
        return ArrayObservable;
    }(Observable_1.Observable));
    var ArrayObservable_2 = ArrayObservable;


    var ArrayObservable_1 = {
    	ArrayObservable: ArrayObservable_2
    };

    var isArrayLike_1 = (function (x) { return x && typeof x.length === 'number'; });


    var isArrayLike = {
    	isArrayLike: isArrayLike_1
    };

    function isPromise(value) {
        return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
    }
    var isPromise_2 = isPromise;


    var isPromise_1 = {
    	isPromise: isPromise_2
    };

    var iterator = createCommonjsModule(function (module, exports) {

    function symbolIteratorPonyfill(root$$1) {
        var Symbol = root$$1.Symbol;
        if (typeof Symbol === 'function') {
            if (!Symbol.iterator) {
                Symbol.iterator = Symbol('iterator polyfill');
            }
            return Symbol.iterator;
        }
        else {
            // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)
            var Set_1 = root$$1.Set;
            if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {
                return '@@iterator';
            }
            var Map_1 = root$$1.Map;
            // required for compatability with es6-shim
            if (Map_1) {
                var keys = Object.getOwnPropertyNames(Map_1.prototype);
                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.
                    if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {
                        return key;
                    }
                }
            }
            return '@@iterator';
        }
    }
    exports.symbolIteratorPonyfill = symbolIteratorPonyfill;
    exports.iterator = symbolIteratorPonyfill(root.root);
    /**
     * @deprecated use iterator instead
     */
    exports.$$iterator = exports.iterator;

    });
    var iterator_1 = iterator.symbolIteratorPonyfill;
    var iterator_2 = iterator.iterator;
    var iterator_3 = iterator.$$iterator;

    var __extends$6 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var InnerSubscriber = (function (_super) {
        __extends$6(InnerSubscriber, _super);
        function InnerSubscriber(parent, outerValue, outerIndex) {
            _super.call(this);
            this.parent = parent;
            this.outerValue = outerValue;
            this.outerIndex = outerIndex;
            this.index = 0;
        }
        InnerSubscriber.prototype._next = function (value) {
            this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
        };
        InnerSubscriber.prototype._error = function (error) {
            this.parent.notifyError(error, this);
            this.unsubscribe();
        };
        InnerSubscriber.prototype._complete = function () {
            this.parent.notifyComplete(this);
            this.unsubscribe();
        };
        return InnerSubscriber;
    }(Subscriber_1.Subscriber));
    var InnerSubscriber_2 = InnerSubscriber;


    var InnerSubscriber_1 = {
    	InnerSubscriber: InnerSubscriber_2
    };

    function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
        var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
        if (destination.closed) {
            return null;
        }
        if (result instanceof Observable_1.Observable) {
            if (result._isScalar) {
                destination.next(result.value);
                destination.complete();
                return null;
            }
            else {
                destination.syncErrorThrowable = true;
                return result.subscribe(destination);
            }
        }
        else if (isArrayLike.isArrayLike(result)) {
            for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
                destination.next(result[i]);
            }
            if (!destination.closed) {
                destination.complete();
            }
        }
        else if (isPromise_1.isPromise(result)) {
            result.then(function (value) {
                if (!destination.closed) {
                    destination.next(value);
                    destination.complete();
                }
            }, function (err) { return destination.error(err); })
                .then(null, function (err) {
                // Escaping the Promise trap: globally throw unhandled errors
                root.root.setTimeout(function () { throw err; });
            });
            return destination;
        }
        else if (result && typeof result[iterator.iterator] === 'function') {
            var iterator$$1 = result[iterator.iterator]();
            do {
                var item = iterator$$1.next();
                if (item.done) {
                    destination.complete();
                    break;
                }
                destination.next(item.value);
                if (destination.closed) {
                    break;
                }
            } while (true);
        }
        else if (result && typeof result[observable.observable] === 'function') {
            var obs = result[observable.observable]();
            if (typeof obs.subscribe !== 'function') {
                destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));
            }
            else {
                return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
            }
        }
        else {
            var value = isObject_1.isObject(result) ? 'an invalid object' : "'" + result + "'";
            var msg = ("You provided " + value + " where a stream was expected.")
                + ' You can provide an Observable, Promise, Array, or Iterable.';
            destination.error(new TypeError(msg));
        }
        return null;
    }
    var subscribeToResult_2 = subscribeToResult;


    var subscribeToResult_1 = {
    	subscribeToResult: subscribeToResult_2
    };

    var __extends$7 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var OuterSubscriber = (function (_super) {
        __extends$7(OuterSubscriber, _super);
        function OuterSubscriber() {
            _super.apply(this, arguments);
        }
        OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
        };
        OuterSubscriber.prototype.notifyError = function (error, innerSub) {
            this.destination.error(error);
        };
        OuterSubscriber.prototype.notifyComplete = function (innerSub) {
            this.destination.complete();
        };
        return OuterSubscriber;
    }(Subscriber_1.Subscriber));
    var OuterSubscriber_2 = OuterSubscriber;


    var OuterSubscriber_1 = {
    	OuterSubscriber: OuterSubscriber_2
    };

    var __extends$8 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };


    /* tslint:enable:max-line-length */
    /**
     * Projects each source value to an Observable which is merged in the output
     * Observable.
     *
     * <span class="informal">Maps each value to an Observable, then flattens all of
     * these inner Observables using {@link mergeAll}.</span>
     *
     * <img src="./img/mergeMap.png" width="100%">
     *
     * Returns an Observable that emits items based on applying a function that you
     * supply to each item emitted by the source Observable, where that function
     * returns an Observable, and then merging those resulting Observables and
     * emitting the results of this merger.
     *
     * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
     * var letters = Rx.Observable.of('a', 'b', 'c');
     * var result = letters.mergeMap(x =>
     *   Rx.Observable.interval(1000).map(i => x+i)
     * );
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // a0
     * // b0
     * // c0
     * // a1
     * // b1
     * // c1
     * // continues to list a,b,c with respective ascending integers
     *
     * @see {@link concatMap}
     * @see {@link exhaustMap}
     * @see {@link merge}
     * @see {@link mergeAll}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     * @see {@link switchMap}
     *
     * @param {function(value: T, ?index: number): ObservableInput} project A function
     * that, when applied to an item emitted by the source Observable, returns an
     * Observable.
     * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
     * A function to produce the value on the output Observable based on the values
     * and the indices of the source (outer) emission and the inner Observable
     * emission. The arguments passed to this function are:
     * - `outerValue`: the value that came from the source
     * - `innerValue`: the value that came from the projected Observable
     * - `outerIndex`: the "index" of the value that came from the source
     * - `innerIndex`: the "index" of the value from the projected Observable
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
     * Observables being subscribed to concurrently.
     * @return {Observable} An Observable that emits the result of applying the
     * projection function (and the optional `resultSelector`) to each item emitted
     * by the source Observable and merging the results of the Observables obtained
     * from this transformation.
     * @method mergeMap
     * @owner Observable
     */
    function mergeMap(project, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        return function mergeMapOperatorFunction(source) {
            if (typeof resultSelector === 'number') {
                concurrent = resultSelector;
                resultSelector = null;
            }
            return source.lift(new MergeMapOperator(project, resultSelector, concurrent));
        };
    }
    var mergeMap_2 = mergeMap;
    var MergeMapOperator = (function () {
        function MergeMapOperator(project, resultSelector, concurrent) {
            if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
            this.project = project;
            this.resultSelector = resultSelector;
            this.concurrent = concurrent;
        }
        MergeMapOperator.prototype.call = function (observer, source) {
            return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
        };
        return MergeMapOperator;
    }());
    var MergeMapOperator_1 = MergeMapOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MergeMapSubscriber = (function (_super) {
        __extends$8(MergeMapSubscriber, _super);
        function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
            if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
            _super.call(this, destination);
            this.project = project;
            this.resultSelector = resultSelector;
            this.concurrent = concurrent;
            this.hasCompleted = false;
            this.buffer = [];
            this.active = 0;
            this.index = 0;
        }
        MergeMapSubscriber.prototype._next = function (value) {
            if (this.active < this.concurrent) {
                this._tryNext(value);
            }
            else {
                this.buffer.push(value);
            }
        };
        MergeMapSubscriber.prototype._tryNext = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.active++;
            this._innerSub(result, value, index);
        };
        MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
            this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
        };
        MergeMapSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
        };
        MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (this.resultSelector) {
                this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
            }
            else {
                this.destination.next(innerValue);
            }
        };
        MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
            var result;
            try {
                result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            }
            else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeMapSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));
    var MergeMapSubscriber_1 = MergeMapSubscriber;


    var mergeMap_1 = {
    	mergeMap: mergeMap_2,
    	MergeMapOperator: MergeMapOperator_1,
    	MergeMapSubscriber: MergeMapSubscriber_1
    };

    function identity(x) {
        return x;
    }
    var identity_2 = identity;


    var identity_1 = {
    	identity: identity_2
    };

    /**
     * Converts a higher-order Observable into a first-order Observable which
     * concurrently delivers all values that are emitted on the inner Observables.
     *
     * <span class="informal">Flattens an Observable-of-Observables.</span>
     *
     * <img src="./img/mergeAll.png" width="100%">
     *
     * `mergeAll` subscribes to an Observable that emits Observables, also known as
     * a higher-order Observable. Each time it observes one of these emitted inner
     * Observables, it subscribes to that and delivers all the values from the
     * inner Observable on the output Observable. The output Observable only
     * completes once all inner Observables have completed. Any error delivered by
     * a inner Observable will be immediately emitted on the output Observable.
     *
     * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
     * var firstOrder = higherOrder.mergeAll();
     * firstOrder.subscribe(x => console.log(x));
     *
     * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
     * var firstOrder = higherOrder.mergeAll(2);
     * firstOrder.subscribe(x => console.log(x));
     *
     * @see {@link combineAll}
     * @see {@link concatAll}
     * @see {@link exhaust}
     * @see {@link merge}
     * @see {@link mergeMap}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     * @see {@link switch}
     * @see {@link zipAll}
     *
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
     * Observables being subscribed to concurrently.
     * @return {Observable} An Observable that emits values coming from all the
     * inner Observables emitted by the source Observable.
     * @method mergeAll
     * @owner Observable
     */
    function mergeAll(concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        return mergeMap_1.mergeMap(identity_1.identity, null, concurrent);
    }
    var mergeAll_2 = mergeAll;


    var mergeAll_1 = {
    	mergeAll: mergeAll_2
    };

    /* tslint:enable:max-line-length */
    /**
     * Creates an output Observable which concurrently emits all values from every
     * given input Observable.
     *
     * <span class="informal">Flattens multiple Observables together by blending
     * their values into one Observable.</span>
     *
     * <img src="./img/merge.png" width="100%">
     *
     * `merge` subscribes to each given input Observable (as arguments), and simply
     * forwards (without doing any transformation) all the values from all the input
     * Observables to the output Observable. The output Observable only completes
     * once all input Observables have completed. Any error delivered by an input
     * Observable will be immediately emitted on the output Observable.
     *
     * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var timer = Rx.Observable.interval(1000);
     * var clicksOrTimer = Rx.Observable.merge(clicks, timer);
     * clicksOrTimer.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // timer will emit ascending values, one every second(1000ms) to console
     * // clicks logs MouseEvents to console everytime the "document" is clicked
     * // Since the two streams are merged you see these happening
     * // as they occur.
     *
     * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
     * var timer1 = Rx.Observable.interval(1000).take(10);
     * var timer2 = Rx.Observable.interval(2000).take(6);
     * var timer3 = Rx.Observable.interval(500).take(10);
     * var concurrent = 2; // the argument
     * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);
     * merged.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // - First timer1 and timer2 will run concurrently
     * // - timer1 will emit a value every 1000ms for 10 iterations
     * // - timer2 will emit a value every 2000ms for 6 iterations
     * // - after timer1 hits it's max iteration, timer2 will
     * //   continue, and timer3 will start to run concurrently with timer2
     * // - when timer2 hits it's max iteration it terminates, and
     * //   timer3 will continue to emit a value every 500ms until it is complete
     *
     * @see {@link mergeAll}
     * @see {@link mergeMap}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     *
     * @param {...ObservableInput} observables Input Observables to merge together.
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
     * Observables being subscribed to concurrently.
     * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
     * concurrency of input Observables.
     * @return {Observable} an Observable that emits items that are the result of
     * every input Observable.
     * @static true
     * @name merge
     * @owner Observable
     */
    function merge() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i - 0] = arguments[_i];
        }
        var concurrent = Number.POSITIVE_INFINITY;
        var scheduler = null;
        var last = observables[observables.length - 1];
        if (isScheduler_1.isScheduler(last)) {
            scheduler = observables.pop();
            if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
                concurrent = observables.pop();
            }
        }
        else if (typeof last === 'number') {
            concurrent = observables.pop();
        }
        if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {
            return observables[0];
        }
        return mergeAll_1.mergeAll(concurrent)(new ArrayObservable_1.ArrayObservable(observables, scheduler));
    }
    var merge_2 = merge;

    var __extends$9 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when an action is invalid because the object has been
     * unsubscribed.
     *
     * @see {@link Subject}
     * @see {@link BehaviorSubject}
     *
     * @class ObjectUnsubscribedError
     */
    var ObjectUnsubscribedError = (function (_super) {
        __extends$9(ObjectUnsubscribedError, _super);
        function ObjectUnsubscribedError() {
            var err = _super.call(this, 'object unsubscribed');
            this.name = err.name = 'ObjectUnsubscribedError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return ObjectUnsubscribedError;
    }(Error));
    var ObjectUnsubscribedError_2 = ObjectUnsubscribedError;


    var ObjectUnsubscribedError_1 = {
    	ObjectUnsubscribedError: ObjectUnsubscribedError_2
    };

    var __extends$a = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SubjectSubscription = (function (_super) {
        __extends$a(SubjectSubscription, _super);
        function SubjectSubscription(subject, subscriber) {
            _super.call(this);
            this.subject = subject;
            this.subscriber = subscriber;
            this.closed = false;
        }
        SubjectSubscription.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.closed = true;
            var subject = this.subject;
            var observers = subject.observers;
            this.subject = null;
            if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
                return;
            }
            var subscriberIndex = observers.indexOf(this.subscriber);
            if (subscriberIndex !== -1) {
                observers.splice(subscriberIndex, 1);
            }
        };
        return SubjectSubscription;
    }(Subscription_1.Subscription));
    var SubjectSubscription_2 = SubjectSubscription;


    var SubjectSubscription_1 = {
    	SubjectSubscription: SubjectSubscription_2
    };

    var __extends$b = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };






    /**
     * @class SubjectSubscriber<T>
     */
    var SubjectSubscriber = (function (_super) {
        __extends$b(SubjectSubscriber, _super);
        function SubjectSubscriber(destination) {
            _super.call(this, destination);
            this.destination = destination;
        }
        return SubjectSubscriber;
    }(Subscriber_1.Subscriber));
    var SubjectSubscriber_1 = SubjectSubscriber;
    /**
     * @class Subject<T>
     */
    var Subject = (function (_super) {
        __extends$b(Subject, _super);
        function Subject() {
            _super.call(this);
            this.observers = [];
            this.closed = false;
            this.isStopped = false;
            this.hasError = false;
            this.thrownError = null;
        }
        Subject.prototype[rxSubscriber.rxSubscriber] = function () {
            return new SubjectSubscriber(this);
        };
        Subject.prototype.lift = function (operator) {
            var subject = new AnonymousSubject(this, this);
            subject.operator = operator;
            return subject;
        };
        Subject.prototype.next = function (value) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            if (!this.isStopped) {
                var observers = this.observers;
                var len = observers.length;
                var copy = observers.slice();
                for (var i = 0; i < len; i++) {
                    copy[i].next(value);
                }
            }
        };
        Subject.prototype.error = function (err) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            this.hasError = true;
            this.thrownError = err;
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].error(err);
            }
            this.observers.length = 0;
        };
        Subject.prototype.complete = function () {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].complete();
            }
            this.observers.length = 0;
        };
        Subject.prototype.unsubscribe = function () {
            this.isStopped = true;
            this.closed = true;
            this.observers = null;
        };
        Subject.prototype._trySubscribe = function (subscriber) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            else {
                return _super.prototype._trySubscribe.call(this, subscriber);
            }
        };
        /** @deprecated internal use only */ Subject.prototype._subscribe = function (subscriber) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            else if (this.hasError) {
                subscriber.error(this.thrownError);
                return Subscription_1.Subscription.EMPTY;
            }
            else if (this.isStopped) {
                subscriber.complete();
                return Subscription_1.Subscription.EMPTY;
            }
            else {
                this.observers.push(subscriber);
                return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
            }
        };
        Subject.prototype.asObservable = function () {
            var observable = new Observable_1.Observable();
            observable.source = this;
            return observable;
        };
        Subject.create = function (destination, source) {
            return new AnonymousSubject(destination, source);
        };
        return Subject;
    }(Observable_1.Observable));
    var Subject_2 = Subject;
    /**
     * @class AnonymousSubject<T>
     */
    var AnonymousSubject = (function (_super) {
        __extends$b(AnonymousSubject, _super);
        function AnonymousSubject(destination, source) {
            _super.call(this);
            this.destination = destination;
            this.source = source;
        }
        AnonymousSubject.prototype.next = function (value) {
            var destination = this.destination;
            if (destination && destination.next) {
                destination.next(value);
            }
        };
        AnonymousSubject.prototype.error = function (err) {
            var destination = this.destination;
            if (destination && destination.error) {
                this.destination.error(err);
            }
        };
        AnonymousSubject.prototype.complete = function () {
            var destination = this.destination;
            if (destination && destination.complete) {
                this.destination.complete();
            }
        };
        /** @deprecated internal use only */ AnonymousSubject.prototype._subscribe = function (subscriber) {
            var source = this.source;
            if (source) {
                return this.source.subscribe(subscriber);
            }
            else {
                return Subscription_1.Subscription.EMPTY;
            }
        };
        return AnonymousSubject;
    }(Subject));
    var AnonymousSubject_1 = AnonymousSubject;


    var Subject_1 = {
    	SubjectSubscriber: SubjectSubscriber_1,
    	Subject: Subject_2,
    	AnonymousSubject: AnonymousSubject_1
    };

    var __extends$c = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    function refCount() {
        return function refCountOperatorFunction(source) {
            return source.lift(new RefCountOperator(source));
        };
    }
    var refCount_2 = refCount;
    var RefCountOperator = (function () {
        function RefCountOperator(connectable) {
            this.connectable = connectable;
        }
        RefCountOperator.prototype.call = function (subscriber, source) {
            var connectable = this.connectable;
            connectable._refCount++;
            var refCounter = new RefCountSubscriber(subscriber, connectable);
            var subscription = source.subscribe(refCounter);
            if (!refCounter.closed) {
                refCounter.connection = connectable.connect();
            }
            return subscription;
        };
        return RefCountOperator;
    }());
    var RefCountSubscriber = (function (_super) {
        __extends$c(RefCountSubscriber, _super);
        function RefCountSubscriber(destination, connectable) {
            _super.call(this, destination);
            this.connectable = connectable;
        }
        /** @deprecated internal use only */ RefCountSubscriber.prototype._unsubscribe = function () {
            var connectable = this.connectable;
            if (!connectable) {
                this.connection = null;
                return;
            }
            this.connectable = null;
            var refCount = connectable._refCount;
            if (refCount <= 0) {
                this.connection = null;
                return;
            }
            connectable._refCount = refCount - 1;
            if (refCount > 1) {
                this.connection = null;
                return;
            }
            ///
            // Compare the local RefCountSubscriber's connection Subscription to the
            // connection Subscription on the shared ConnectableObservable. In cases
            // where the ConnectableObservable source synchronously emits values, and
            // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
            // execution continues to here before the RefCountOperator has a chance to
            // supply the RefCountSubscriber with the shared connection Subscription.
            // For example:
            // ```
            // Observable.range(0, 10)
            //   .publish()
            //   .refCount()
            //   .take(5)
            //   .subscribe();
            // ```
            // In order to account for this case, RefCountSubscriber should only dispose
            // the ConnectableObservable's shared connection Subscription if the
            // connection Subscription exists, *and* either:
            //   a. RefCountSubscriber doesn't have a reference to the shared connection
            //      Subscription yet, or,
            //   b. RefCountSubscriber's connection Subscription reference is identical
            //      to the shared connection Subscription
            ///
            var connection = this.connection;
            var sharedConnection = connectable._connection;
            this.connection = null;
            if (sharedConnection && (!connection || sharedConnection === connection)) {
                sharedConnection.unsubscribe();
            }
        };
        return RefCountSubscriber;
    }(Subscriber_1.Subscriber));


    var refCount_1 = {
    	refCount: refCount_2
    };

    var __extends$d = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };





    /**
     * @class ConnectableObservable<T>
     */
    var ConnectableObservable = (function (_super) {
        __extends$d(ConnectableObservable, _super);
        function ConnectableObservable(/** @deprecated internal use only */ source, 
            /** @deprecated internal use only */ subjectFactory) {
            _super.call(this);
            this.source = source;
            this.subjectFactory = subjectFactory;
            /** @deprecated internal use only */ this._refCount = 0;
            this._isComplete = false;
        }
        /** @deprecated internal use only */ ConnectableObservable.prototype._subscribe = function (subscriber) {
            return this.getSubject().subscribe(subscriber);
        };
        /** @deprecated internal use only */ ConnectableObservable.prototype.getSubject = function () {
            var subject = this._subject;
            if (!subject || subject.isStopped) {
                this._subject = this.subjectFactory();
            }
            return this._subject;
        };
        ConnectableObservable.prototype.connect = function () {
            var connection = this._connection;
            if (!connection) {
                this._isComplete = false;
                connection = this._connection = new Subscription_1.Subscription();
                connection.add(this.source
                    .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
                if (connection.closed) {
                    this._connection = null;
                    connection = Subscription_1.Subscription.EMPTY;
                }
                else {
                    this._connection = connection;
                }
            }
            return connection;
        };
        ConnectableObservable.prototype.refCount = function () {
            return refCount_1.refCount()(this);
        };
        return ConnectableObservable;
    }(Observable_1.Observable));
    var ConnectableObservable_2 = ConnectableObservable;
    var connectableProto = ConnectableObservable.prototype;
    var connectableObservableDescriptor = {
        operator: { value: null },
        _refCount: { value: 0, writable: true },
        _subject: { value: null, writable: true },
        _connection: { value: null, writable: true },
        _subscribe: { value: connectableProto._subscribe },
        _isComplete: { value: connectableProto._isComplete, writable: true },
        getSubject: { value: connectableProto.getSubject },
        connect: { value: connectableProto.connect },
        refCount: { value: connectableProto.refCount }
    };
    var ConnectableSubscriber = (function (_super) {
        __extends$d(ConnectableSubscriber, _super);
        function ConnectableSubscriber(destination, connectable) {
            _super.call(this, destination);
            this.connectable = connectable;
        }
        ConnectableSubscriber.prototype._error = function (err) {
            this._unsubscribe();
            _super.prototype._error.call(this, err);
        };
        ConnectableSubscriber.prototype._complete = function () {
            this.connectable._isComplete = true;
            this._unsubscribe();
            _super.prototype._complete.call(this);
        };
        /** @deprecated internal use only */ ConnectableSubscriber.prototype._unsubscribe = function () {
            var connectable = this.connectable;
            if (connectable) {
                this.connectable = null;
                var connection = connectable._connection;
                connectable._refCount = 0;
                connectable._subject = null;
                connectable._connection = null;
                if (connection) {
                    connection.unsubscribe();
                }
            }
        };
        return ConnectableSubscriber;
    }(Subject_1.SubjectSubscriber));
    var RefCountSubscriber$1 = (function (_super) {
        __extends$d(RefCountSubscriber, _super);
        function RefCountSubscriber(destination, connectable) {
            _super.call(this, destination);
            this.connectable = connectable;
        }
        /** @deprecated internal use only */ RefCountSubscriber.prototype._unsubscribe = function () {
            var connectable = this.connectable;
            if (!connectable) {
                this.connection = null;
                return;
            }
            this.connectable = null;
            var refCount = connectable._refCount;
            if (refCount <= 0) {
                this.connection = null;
                return;
            }
            connectable._refCount = refCount - 1;
            if (refCount > 1) {
                this.connection = null;
                return;
            }
            ///
            // Compare the local RefCountSubscriber's connection Subscription to the
            // connection Subscription on the shared ConnectableObservable. In cases
            // where the ConnectableObservable source synchronously emits values, and
            // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
            // execution continues to here before the RefCountOperator has a chance to
            // supply the RefCountSubscriber with the shared connection Subscription.
            // For example:
            // ```
            // Observable.range(0, 10)
            //   .publish()
            //   .refCount()
            //   .take(5)
            //   .subscribe();
            // ```
            // In order to account for this case, RefCountSubscriber should only dispose
            // the ConnectableObservable's shared connection Subscription if the
            // connection Subscription exists, *and* either:
            //   a. RefCountSubscriber doesn't have a reference to the shared connection
            //      Subscription yet, or,
            //   b. RefCountSubscriber's connection Subscription reference is identical
            //      to the shared connection Subscription
            ///
            var connection = this.connection;
            var sharedConnection = connectable._connection;
            this.connection = null;
            if (sharedConnection && (!connection || sharedConnection === connection)) {
                sharedConnection.unsubscribe();
            }
        };
        return RefCountSubscriber;
    }(Subscriber_1.Subscriber));


    var ConnectableObservable_1 = {
    	ConnectableObservable: ConnectableObservable_2,
    	connectableObservableDescriptor: connectableObservableDescriptor
    };

    /* tslint:enable:max-line-length */
    /**
     * Returns an Observable that emits the results of invoking a specified selector on items
     * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
     *
     * <img src="./img/multicast.png" width="100%">
     *
     * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through
     * which the source sequence's elements will be multicast to the selector function
     * or Subject to push source elements into.
     * @param {Function} [selector] - Optional selector function that can use the multicasted source stream
     * as many times as needed, without causing multiple subscriptions to the source stream.
     * Subscribers to the given source will receive all notifications of the source from the
     * time of the subscription forward.
     * @return {Observable} An Observable that emits the results of invoking the selector
     * on the items emitted by a `ConnectableObservable` that shares a single subscription to
     * the underlying stream.
     * @method multicast
     * @owner Observable
     */
    function multicast(subjectOrSubjectFactory, selector) {
        return function multicastOperatorFunction(source) {
            var subjectFactory;
            if (typeof subjectOrSubjectFactory === 'function') {
                subjectFactory = subjectOrSubjectFactory;
            }
            else {
                subjectFactory = function subjectFactory() {
                    return subjectOrSubjectFactory;
                };
            }
            if (typeof selector === 'function') {
                return source.lift(new MulticastOperator(subjectFactory, selector));
            }
            var connectable = Object.create(source, ConnectableObservable_1.connectableObservableDescriptor);
            connectable.source = source;
            connectable.subjectFactory = subjectFactory;
            return connectable;
        };
    }
    var multicast_2 = multicast;
    var MulticastOperator = (function () {
        function MulticastOperator(subjectFactory, selector) {
            this.subjectFactory = subjectFactory;
            this.selector = selector;
        }
        MulticastOperator.prototype.call = function (subscriber, source) {
            var selector = this.selector;
            var subject = this.subjectFactory();
            var subscription = selector(subject).subscribe(subscriber);
            subscription.add(source.subscribe(subject));
            return subscription;
        };
        return MulticastOperator;
    }());
    var MulticastOperator_1 = MulticastOperator;


    var multicast_1 = {
    	multicast: multicast_2,
    	MulticastOperator: MulticastOperator_1
    };

    function shareSubjectFactory() {
        return new Subject_1.Subject();
    }
    /**
     * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
     * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
     * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
     * This is an alias for .multicast(() => new Subject()).refCount().
     *
     * <img src="./img/share.png" width="100%">
     *
     * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.
     * @method share
     * @owner Observable
     */
    function share() {
        return function (source) { return refCount_1.refCount()(multicast_1.multicast(shareSubjectFactory)(source)); };
    }
    var share_2 = share;


    var share_1 = {
    	share: share_2
    };

    /**
     * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
     * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
     * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
     *
     * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.
     * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.
     * Observable.of("test").publish().refCount() will not re-emit "test" on new subscriptions, Observable.of("test").share() will
     * re-emit "test" to new subscriptions.
     *
     * <img src="./img/share.png" width="100%">
     *
     * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.
     * @method share
     * @owner Observable
     */
    function share$1() {
        return share_1.share()(this);
    }
    var share_3 = share$1;

    /**
     * Creates a token that can be used in a DI Provider.
     *
     * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))
     *
     * ```typescript
     * var t = new OpaqueToken("value");
     *
     * var injector = Injector.resolveAndCreate([
     *   {provide: t, useValue: "bindingValue"}
     * ]);
     *
     * expect(injector.get(t)).toEqual("bindingValue");
     * ```
     *
     * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions
     * caused by multiple providers using the same string as two different tokens.
     *
     * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better
     * error messages.
     * @deprecated since v4.0.0 because it does not support type information, use `InjectionToken<?>`
     * instead.
     */
    var OpaqueToken = (function () {
        /**
         * @param {?} _desc
         */
        function OpaqueToken(_desc) {
            this._desc = _desc;
        }
        /**
         * @return {?}
         */
        OpaqueToken.prototype.toString = function () { return "Token " + this._desc; };
        return OpaqueToken;
    }());
    /**
     * Creates a token that can be used in a DI Provider.
     *
     * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a
     * runtime representation) such as when injecting an interface, callable type, array or
     * parametrized type.
     *
     * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by
     * the `Injector`. This provides additional level of type safety.
     *
     * ```
     * interface MyInterface {...}
     * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));
     * // myInterface is inferred to be MyInterface.
     * ```
     *
     * ### Example
     *
     * {\@example core/di/ts/injector_spec.ts region='InjectionToken'}
     *
     * \@stable
     */
    var InjectionToken = (function (_super) {
        __extends(InjectionToken, _super);
        /**
         * @param {?} desc
         */
        function InjectionToken(desc) {
            return _super.call(this, desc) || this;
        }
        /**
         * @return {?}
         */
        InjectionToken.prototype.toString = function () { return "InjectionToken " + this._desc; };
        return InjectionToken;
    }(OpaqueToken));
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var __window$1 = typeof window !== 'undefined' && window;
    var __self$1 = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
        self instanceof WorkerGlobalScope && self;
    var __global$1 = typeof global !== 'undefined' && global;
    var _global = __window$1 || __global$1 || __self$1;
    var _symbolIterator = null;
    /**
     * @return {?}
     */
    function getSymbolIterator() {
        if (!_symbolIterator) {
            var /** @type {?} */ Symbol = _global['Symbol'];
            if (Symbol && Symbol.iterator) {
                _symbolIterator = Symbol.iterator;
            }
            else {
                // es6-shim specific logic
                var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);
                for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
                    var /** @type {?} */ key = keys[i];
                    if (key !== 'entries' && key !== 'size' &&
                        ((Map)).prototype[key] === Map.prototype['entries']) {
                        _symbolIterator = key;
                    }
                }
            }
        }
        return _symbolIterator;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    function scheduleMicroTask(fn) {
        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function looseIdentical(a, b) {
        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
    }
    /**
     * @param {?} token
     * @return {?}
     */
    function stringify(token) {
        if (typeof token === 'string') {
            return token;
        }
        if (token == null) {
            return '' + token;
        }
        if (token.overriddenName) {
            return "" + token.overriddenName;
        }
        if (token.name) {
            return "" + token.name;
        }
        var /** @type {?} */ res = token.toString();
        if (res == null) {
            return '' + res;
        }
        var /** @type {?} */ newLineIndex = res.indexOf('\n');
        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var _nextClassId = 0;
    var Reflect$1 = _global['Reflect'];
    /**
     * @param {?} annotation
     * @return {?}
     */
    function extractAnnotation(annotation) {
        if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {
            // it is a decorator, extract annotation
            annotation = annotation.annotation;
        }
        return annotation;
    }
    /**
     * @param {?} fnOrArray
     * @param {?} key
     * @return {?}
     */
    function applyParams(fnOrArray, key) {
        if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||
            fnOrArray === Number || fnOrArray === Array) {
            throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
        }
        if (typeof fnOrArray === 'function') {
            return fnOrArray;
        }
        if (Array.isArray(fnOrArray)) {
            var /** @type {?} */ annotations = (fnOrArray);
            var /** @type {?} */ annoLength = annotations.length - 1;
            var /** @type {?} */ fn = fnOrArray[annoLength];
            if (typeof fn !== 'function') {
                throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
            }
            if (annoLength != fn.length) {
                throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
            }
            var /** @type {?} */ paramsAnnotations = [];
            for (var /** @type {?} */ i = 0, /** @type {?} */ ii = annotations.length - 1; i < ii; i++) {
                var /** @type {?} */ paramAnnotations = [];
                paramsAnnotations.push(paramAnnotations);
                var /** @type {?} */ annotation = annotations[i];
                if (Array.isArray(annotation)) {
                    for (var /** @type {?} */ j = 0; j < annotation.length; j++) {
                        paramAnnotations.push(extractAnnotation(annotation[j]));
                    }
                }
                else if (typeof annotation === 'function') {
                    paramAnnotations.push(extractAnnotation(annotation));
                }
                else {
                    paramAnnotations.push(annotation);
                }
            }
            Reflect$1.defineMetadata('parameters', paramsAnnotations, fn);
            return fn;
        }
        throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
    }
    /**
     * Provides a way for expressing ES6 classes with parameter annotations in ES5.
     *
     * ## Basic Example
     *
     * ```
     * var Greeter = ng.Class({
     *   constructor: function(name) {
     *     this.name = name;
     *   },
     *
     *   greet: function() {
     *     alert('Hello ' + this.name + '!');
     *   }
     * });
     * ```
     *
     * is equivalent to ES6:
     *
     * ```
     * class Greeter {
     *   constructor(name) {
     *     this.name = name;
     *   }
     *
     *   greet() {
     *     alert('Hello ' + this.name + '!');
     *   }
     * }
     * ```
     *
     * or equivalent to ES5:
     *
     * ```
     * var Greeter = function (name) {
     *   this.name = name;
     * }
     *
     * Greeter.prototype.greet = function () {
     *   alert('Hello ' + this.name + '!');
     * }
     * ```
     *
     * ### Example with parameter annotations
     *
     * ```
     * var MyService = ng.Class({
     *   constructor: [String, [new Optional(), Service], function(name, myService) {
     *     ...
     *   }]
     * });
     * ```
     *
     * is equivalent to ES6:
     *
     * ```
     * class MyService {
     *   constructor(name: string, \@Optional() myService: Service) {
     *     ...
     *   }
     * }
     * ```
     *
     * ### Example with inheritance
     *
     * ```
     * var Shape = ng.Class({
     *   constructor: (color) {
     *     this.color = color;
     *   }
     * });
     *
     * var Square = ng.Class({
     *   extends: Shape,
     *   constructor: function(color, size) {
     *     Shape.call(this, color);
     *     this.size = size;
     *   }
     * });
     * ```
     * @suppress {globalThis}
     * \@stable
     * @param {?} clsDef
     * @return {?}
     */
    function Class(clsDef) {
        var /** @type {?} */ constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
        var /** @type {?} */ proto = constructor.prototype;
        if (clsDef.hasOwnProperty('extends')) {
            if (typeof clsDef.extends === 'function') {
                ((constructor)).prototype = proto =
                    Object.create(((clsDef.extends)).prototype);
            }
            else {
                throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
            }
        }
        for (var /** @type {?} */ key in clsDef) {
            if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {
                proto[key] = applyParams(clsDef[key], key);
            }
        }
        if (this && this.annotations instanceof Array) {
            Reflect$1.defineMetadata('annotations', this.annotations, constructor);
        }
        var /** @type {?} */ constructorName = constructor['name'];
        if (!constructorName || constructorName === 'constructor') {
            ((constructor))['overriddenName'] = "class" + _nextClassId++;
        }
        return (constructor);
    }
    /**
     * @suppress {globalThis}
     * @param {?} name
     * @param {?=} props
     * @param {?=} parentClass
     * @param {?=} chainFn
     * @return {?}
     */
    function makeDecorator(name, props, parentClass, chainFn) {
        var /** @type {?} */ metaCtor = makeMetadataCtor(props);
        /**
         * @param {?} objOrType
         * @return {?}
         */
        function DecoratorFactory(objOrType) {
            if (!(Reflect$1 && Reflect$1.getOwnMetadata)) {
                throw 'reflect-metadata shim is required when using class decorators';
            }
            if (this instanceof DecoratorFactory) {
                metaCtor.call(this, objOrType);
                return this;
            }
            var /** @type {?} */ annotationInstance = new ((DecoratorFactory))(objOrType);
            var /** @type {?} */ chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];
            chainAnnotation.push(annotationInstance);
            var /** @type {?} */ TypeDecorator = (function TypeDecorator(cls) {
                var /** @type {?} */ annotations = Reflect$1.getOwnMetadata('annotations', cls) || [];
                annotations.push(annotationInstance);
                Reflect$1.defineMetadata('annotations', annotations, cls);
                return cls;
            });
            TypeDecorator.annotations = chainAnnotation;
            TypeDecorator.Class = Class;
            if (chainFn)
                chainFn(TypeDecorator);
            return TypeDecorator;
        }
        if (parentClass) {
            DecoratorFactory.prototype = Object.create(parentClass.prototype);
        }
        DecoratorFactory.prototype.toString = function () { return "@" + name; };
        ((DecoratorFactory)).annotationCls = DecoratorFactory;
        return DecoratorFactory;
    }
    /**
     * @param {?=} props
     * @return {?}
     */
    function makeMetadataCtor(props) {
        return function ctor() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (props) {
                var /** @type {?} */ values = props.apply(void 0, args);
                for (var /** @type {?} */ propName in values) {
                    this[propName] = values[propName];
                }
            }
        };
    }
    /**
     * @param {?} name
     * @param {?=} props
     * @param {?=} parentClass
     * @return {?}
     */
    function makeParamDecorator(name, props, parentClass) {
        var /** @type {?} */ metaCtor = makeMetadataCtor(props);
        /**
         * @param {...?} args
         * @return {?}
         */
        function ParamDecoratorFactory() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (this instanceof ParamDecoratorFactory) {
                metaCtor.apply(this, args);
                return this;
            }
            var /** @type {?} */ annotationInstance = new (((ParamDecoratorFactory)).bind.apply(((ParamDecoratorFactory)), [void 0].concat(args)))();
            ((ParamDecorator)).annotation = annotationInstance;
            return ParamDecorator;
            /**
             * @param {?} cls
             * @param {?} unusedKey
             * @param {?} index
             * @return {?}
             */
            function ParamDecorator(cls, unusedKey, index) {
                var /** @type {?} */ parameters = Reflect$1.getOwnMetadata('parameters', cls) || [];
                // there might be gaps if some in between parameters do not have annotations.
                // we pad with nulls.
                while (parameters.length <= index) {
                    parameters.push(null);
                }
                parameters[index] = parameters[index] || []; /** @type {?} */
                ((parameters[index])).push(annotationInstance);
                Reflect$1.defineMetadata('parameters', parameters, cls);
                return cls;
            }
        }
        if (parentClass) {
            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
        }
        ParamDecoratorFactory.prototype.toString = function () { return "@" + name; };
        ((ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;
        return ParamDecoratorFactory;
    }
    /**
     * @param {?} name
     * @param {?=} props
     * @param {?=} parentClass
     * @return {?}
     */
    function makePropDecorator(name, props, parentClass) {
        var /** @type {?} */ metaCtor = makeMetadataCtor(props);
        /**
         * @param {...?} args
         * @return {?}
         */
        function PropDecoratorFactory() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (this instanceof PropDecoratorFactory) {
                metaCtor.apply(this, args);
                return this;
            }
            var /** @type {?} */ decoratorInstance = new (((PropDecoratorFactory)).bind.apply(((PropDecoratorFactory)), [void 0].concat(args)))();
            return function PropDecorator(target, name) {
                var /** @type {?} */ meta = Reflect$1.getOwnMetadata('propMetadata', target.constructor) || {};
                meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
                meta[name].unshift(decoratorInstance);
                Reflect$1.defineMetadata('propMetadata', meta, target.constructor);
            };
        }
        if (parentClass) {
            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
        }
        PropDecoratorFactory.prototype.toString = function () { return "@" + name; };
        ((PropDecoratorFactory)).annotationCls = PropDecoratorFactory;
        return PropDecoratorFactory;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * This token can be used to create a virtual provider that will populate the
     * `entryComponents` fields of components and ng modules based on its `useValue`.
     * All components that are referenced in the `useValue` value (either directly
     * or in a nested array or map) will be added to the `entryComponents` property.
     *
     * ### Example
     * The following example shows how the router can populate the `entryComponents`
     * field of an NgModule based on the router configuration which refers
     * to components.
     *
     * ```typescript
     * // helper function inside the router
     * function provideRoutes(routes) {
     *   return [
     *     {provide: ROUTES, useValue: routes},
     *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
     *   ];
     * }
     *
     * // user code
     * let routes = [
     *   {path: '/root', component: RootComp},
     *   {path: '/teams', component: TeamsComp}
     * ];
     *
     * \@NgModule({
     *   providers: [provideRoutes(routes)]
     * })
     * class ModuleWithRoutes {}
     * ```
     *
     * \@experimental
     */
    var ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');
    /**
     * Attribute decorator and metadata.
     *
     * \@stable
     * \@Annotation
     */
    var Attribute = makeParamDecorator('Attribute', function (attributeName) { return ({ attributeName: attributeName }); });
    /**
     * Base class for query metadata.
     *
     * See {\@link ContentChildren}, {\@link ContentChild}, {\@link ViewChildren}, {\@link ViewChild} for
     * more information.
     *
     * \@stable
     * @abstract
     */
    var Query = (function () {
        function Query() {
        }
        return Query;
    }());
    /**
     * ContentChildren decorator and metadata.
     *
     *  \@stable
     *  \@Annotation
     */
    var ContentChildren = makePropDecorator('ContentChildren', function (selector, data) {
        if (data === void 0) { data = {}; }
        return (Object.assign({ selector: selector, first: false, isViewQuery: false, descendants: false }, data));
    }, Query);
    /**
     * ContentChild decorator and metadata.
     *
     * \@stable
     * \@Annotation
     */
    var ContentChild = makePropDecorator('ContentChild', function (selector, data) {
        if (data === void 0) { data = {}; }
        return (Object.assign({ selector: selector, first: true, isViewQuery: false, descendants: true }, data));
    }, Query);
    /**
     * ViewChildren decorator and metadata.
     *
     * \@stable
     * \@Annotation
     */
    var ViewChildren = makePropDecorator('ViewChildren', function (selector, data) {
        if (data === void 0) { data = {}; }
        return (Object.assign({ selector: selector, first: false, isViewQuery: true, descendants: true }, data));
    }, Query);
    /**
     * ViewChild decorator and metadata.
     *
     * \@stable
     * \@Annotation
     */
    var ViewChild = makePropDecorator('ViewChild', function (selector, data) { return (Object.assign({ selector: selector, first: true, isViewQuery: true, descendants: true }, data)); }, Query);
    var ChangeDetectionStrategy = {};
    ChangeDetectionStrategy.OnPush = 0;
    ChangeDetectionStrategy.Default = 1;
    ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = "OnPush";
    ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = "Default";
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Directive decorator and metadata.
     *
     * \@stable
     * \@Annotation
     */
    var Directive = makeDecorator('Directive', function (dir) {
        if (dir === void 0) { dir = {}; }
        return dir;
    });
    /**
     * Component decorator and metadata.
     *
     * \@stable
     * \@Annotation
     */
    var Component = makeDecorator('Component', function (c) {
        if (c === void 0) { c = {}; }
        return (Object.assign({ changeDetection: ChangeDetectionStrategy.Default }, c));
    }, Directive);
    /**
     * Pipe decorator and metadata.
     *
     * \@stable
     * \@Annotation
     */
    var Pipe = makeDecorator('Pipe', function (p) { return (Object.assign({ pure: true }, p)); });
    /**
     * Input decorator and metadata.
     *
     * \@stable
     * \@Annotation
     */
    var Input = makePropDecorator('Input', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });
    /**
     * Output decorator and metadata.
     *
     * \@stable
     * \@Annotation
     */
    var Output = makePropDecorator('Output', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });
    /**
     * HostBinding decorator and metadata.
     *
     * \@stable
     * \@Annotation
     */
    var HostBinding = makePropDecorator('HostBinding', function (hostPropertyName) { return ({ hostPropertyName: hostPropertyName }); });
    /**
     * HostListener decorator and metadata.
     *
     * \@stable
     * \@Annotation
     */
    var HostListener = makePropDecorator('HostListener', function (eventName, args) { return ({ eventName: eventName, args: args }); });
    /**
     * NgModule decorator and metadata.
     *
     * \@stable
     * \@Annotation
     */
    var NgModule = makeDecorator('NgModule', function (ngModule) { return ngModule; });
    var ViewEncapsulation = {};
    ViewEncapsulation.Emulated = 0;
    ViewEncapsulation.Native = 1;
    ViewEncapsulation.None = 2;
    ViewEncapsulation[ViewEncapsulation.Emulated] = "Emulated";
    ViewEncapsulation[ViewEncapsulation.Native] = "Native";
    ViewEncapsulation[ViewEncapsulation.None] = "None";
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@whatItDoes Represents the version of Angular
     *
     * \@stable
     */
    var Version = (function () {
        /**
         * @param {?} full
         */
        function Version(full) {
            this.full = full;
        }
        Object.defineProperty(Version.prototype, "major", {
            /**
             * @return {?}
             */
            get: function () { return this.full.split('.')[0]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Version.prototype, "minor", {
            /**
             * @return {?}
             */
            get: function () { return this.full.split('.')[1]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Version.prototype, "patch", {
            /**
             * @return {?}
             */
            get: function () { return this.full.split('.').slice(2).join('.'); },
            enumerable: true,
            configurable: true
        });
        return Version;
    }());
    /**
     * \@stable
     */
    var VERSION = new Version('4.4.7');
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Inject decorator and metadata.
     *
     * \@stable
     * \@Annotation
     */
    var Inject = makeParamDecorator('Inject', function (token) { return ({ token: token }); });
    /**
     * Optional decorator and metadata.
     *
     * \@stable
     * \@Annotation
     */
    var Optional = makeParamDecorator('Optional');
    /**
     * Injectable decorator and metadata.
     *
     * \@stable
     * \@Annotation
     */
    var Injectable = makeDecorator('Injectable');
    /**
     * Self decorator and metadata.
     *
     * \@stable
     * \@Annotation
     */
    var Self = makeParamDecorator('Self');
    /**
     * SkipSelf decorator and metadata.
     *
     * \@stable
     * \@Annotation
     */
    var SkipSelf = makeParamDecorator('SkipSelf');
    /**
     * Host decorator and metadata.
     *
     * \@stable
     * \@Annotation
     */
    var Host = makeParamDecorator('Host');
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Allows to refer to references which are not yet defined.
     *
     * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
     * DI is declared,
     * but not yet defined. It is also used when the `token` which we use when creating a query is not
     * yet defined.
     *
     * ### Example
     * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
     * \@experimental
     * @param {?} forwardRefFn
     * @return {?}
     */
    function forwardRef(forwardRefFn) {
        ((forwardRefFn)).__forward_ref__ = forwardRef;
        ((forwardRefFn)).toString = function () { return stringify(this()); };
        return (((forwardRefFn)));
    }
    /**
     * Lazily retrieves the reference value from a forwardRef.
     *
     * Acts as the identity function when given a non-forward-ref value.
     *
     * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
     *
     * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
     *
     * See: {\@link forwardRef}
     * \@experimental
     * @param {?} type
     * @return {?}
     */
    function resolveForwardRef(type) {
        if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&
            type.__forward_ref__ === forwardRef) {
            return ((type))();
        }
        else {
            return type;
        }
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var _THROW_IF_NOT_FOUND = new Object();
    var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
    var _NullInjector = (function () {
        function _NullInjector() {
        }
        /**
         * @param {?} token
         * @param {?=} notFoundValue
         * @return {?}
         */
        _NullInjector.prototype.get = function (token, notFoundValue) {
            if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }
            if (notFoundValue === _THROW_IF_NOT_FOUND) {
                throw new Error("No provider for " + stringify(token) + "!");
            }
            return notFoundValue;
        };
        return _NullInjector;
    }());
    /**
     * \@whatItDoes Injector interface
     * \@howToUse
     * ```
     * const injector: Injector = ...;
     * injector.get(...);
     * ```
     *
     * \@description
     * For more details, see the {\@linkDocs guide/dependency-injection "Dependency Injection Guide"}.
     *
     * ### Example
     *
     * {\@example core/di/ts/injector_spec.ts region='Injector'}
     *
     * `Injector` returns itself when given `Injector` as a token:
     * {\@example core/di/ts/injector_spec.ts region='injectInjector'}
     *
     * \@stable
     * @abstract
     */
    var Injector = (function () {
        function Injector() {
        }
        /**
         * Retrieves an instance from the injector based on the provided token.
         * If not found:
         * - Throws an error if no `notFoundValue` that is not equal to
         * Injector.THROW_IF_NOT_FOUND is given
         * - Returns the `notFoundValue` otherwise
         * @abstract
         * @template T
         * @param {?} token
         * @param {?=} notFoundValue
         * @return {?}
         */
        Injector.prototype.get = function (token, notFoundValue) { };
        /**
         * @deprecated from v4.0.0 use Type<T> or InjectionToken<T>
         * @suppress {duplicate}
         * @abstract
         * @param {?} token
         * @param {?=} notFoundValue
         * @return {?}
         */
        Injector.prototype.get = function (token, notFoundValue) { };
        return Injector;
    }());
    Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
    Injector.NULL = new _NullInjector();
    var ERROR_DEBUG_CONTEXT = 'ngDebugContext';
    var ERROR_ORIGINAL_ERROR = 'ngOriginalError';
    var ERROR_LOGGER = 'ngErrorLogger';
    /**
     * @param {?} error
     * @return {?}
     */
    /**
     * @param {?} error
     * @return {?}
     */
    function getDebugContext(error) {
        return ((error))[ERROR_DEBUG_CONTEXT];
    }
    /**
     * @param {?} error
     * @return {?}
     */
    function getOriginalError(error) {
        return ((error))[ERROR_ORIGINAL_ERROR];
    }
    /**
     * @param {?} error
     * @return {?}
     */
    function getErrorLogger(error) {
        return ((error))[ERROR_LOGGER] || defaultErrorLogger;
    }
    /**
     * @param {?} console
     * @param {...?} values
     * @return {?}
     */
    function defaultErrorLogger(console) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        console.error.apply(console, values);
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@whatItDoes Provides a hook for centralized exception handling.
     *
     * \@description
     *
     * The default implementation of `ErrorHandler` prints error messages to the `console`. To
     * intercept error handling, write a custom exception handler that replaces this default as
     * appropriate for your app.
     *
     * ### Example
     *
     * ```
     * class MyErrorHandler implements ErrorHandler {
     *   handleError(error) {
     *     // do something with the exception
     *   }
     * }
     *
     * \@NgModule({
     *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
     * })
     * class MyModule {}
     * ```
     *
     * \@stable
     */
    var ErrorHandler = (function () {
        /**
         * @param {?=} deprecatedParameter
         */
        function ErrorHandler(
            /**
             * @deprecated since v4.0 parameter no longer has an effect, as ErrorHandler will never
             * rethrow.
             */
            deprecatedParameter) {
            /**
             * \@internal
             */
            this._console = console;
        }
        /**
         * @param {?} error
         * @return {?}
         */
        ErrorHandler.prototype.handleError = function (error) {
            var /** @type {?} */ originalError = this._findOriginalError(error);
            var /** @type {?} */ context = this._findContext(error);
            // Note: Browser consoles show the place from where console.error was called.
            // We can use this to give users additional information about the error.
            var /** @type {?} */ errorLogger = getErrorLogger(error);
            errorLogger(this._console, "ERROR", error);
            if (originalError) {
                errorLogger(this._console, "ORIGINAL ERROR", originalError);
            }
            if (context) {
                errorLogger(this._console, 'ERROR CONTEXT', context);
            }
        };
        /**
         * \@internal
         * @param {?} error
         * @return {?}
         */
        ErrorHandler.prototype._findContext = function (error) {
            if (error) {
                return getDebugContext(error) ? getDebugContext(error) :
                    this._findContext(getOriginalError(error));
            }
            return null;
        };
        /**
         * \@internal
         * @param {?} error
         * @return {?}
         */
        ErrorHandler.prototype._findOriginalError = function (error) {
            var /** @type {?} */ e = getOriginalError(error);
            while (e && getOriginalError(e)) {
                e = getOriginalError(e);
            }
            return e;
        };
        return ErrorHandler;
    }());
    /**
     * @param {?} message
     * @param {?} originalError
     * @return {?}
     */
    function wrappedError(message, originalError) {
        var /** @type {?} */ msg = message + " caused by: " + (originalError instanceof Error ? originalError.message : originalError);
        var /** @type {?} */ error = Error(msg);
        ((error))[ERROR_ORIGINAL_ERROR] = originalError;
        return error;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} keys
     * @return {?}
     */
    function findFirstClosedCycle(keys) {
        var /** @type {?} */ res = [];
        for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
            if (res.indexOf(keys[i]) > -1) {
                res.push(keys[i]);
                return res;
            }
            res.push(keys[i]);
        }
        return res;
    }
    /**
     * @param {?} keys
     * @return {?}
     */
    function constructResolvingPath(keys) {
        if (keys.length > 1) {
            var /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());
            var /** @type {?} */ tokenStrs = reversed.map(function (k) { return stringify(k.token); });
            return ' (' + tokenStrs.join(' -> ') + ')';
        }
        return '';
    }
    /**
     * @param {?} injector
     * @param {?} key
     * @param {?} constructResolvingMessage
     * @param {?=} originalError
     * @return {?}
     */
    function injectionError(injector, key, constructResolvingMessage, originalError) {
        var /** @type {?} */ keys = [key];
        var /** @type {?} */ errMsg = constructResolvingMessage(keys);
        var /** @type {?} */ error = ((originalError ? wrappedError(errMsg, originalError) : Error(errMsg)));
        error.addKey = addKey;
        error.keys = keys;
        error.injectors = [injector];
        error.constructResolvingMessage = constructResolvingMessage;
        ((error))[ERROR_ORIGINAL_ERROR] = originalError;
        return error;
    }
    /**
     * @this {?}
     * @param {?} injector
     * @param {?} key
     * @return {?}
     */
    function addKey(injector, key) {
        this.injectors.push(injector);
        this.keys.push(key);
        // Note: This updated message won't be reflected in the `.stack` property
        this.message = this.constructResolvingMessage(this.keys);
    }
    /**
     * Thrown when trying to retrieve a dependency by key from {\@link Injector}, but the
     * {\@link Injector} does not have a {\@link Provider} for the given key.
     *
     * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
     *
     * ```typescript
     * class A {
     *   constructor(b:B) {}
     * }
     *
     * expect(() => Injector.resolveAndCreate([A])).toThrowError();
     * ```
     * @param {?} injector
     * @param {?} key
     * @return {?}
     */
    function noProviderError(injector, key) {
        return injectionError(injector, key, function (keys) {
            var /** @type {?} */ first = stringify(keys[0].token);
            return "No provider for " + first + "!" + constructResolvingPath(keys);
        });
    }
    /**
     * Thrown when dependencies form a cycle.
     *
     * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
     *
     * ```typescript
     * var injector = Injector.resolveAndCreate([
     *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
     *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
     * ]);
     *
     * expect(() => injector.get("one")).toThrowError();
     * ```
     *
     * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
     * @param {?} injector
     * @param {?} key
     * @return {?}
     */
    function cyclicDependencyError(injector, key) {
        return injectionError(injector, key, function (keys) {
            return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
        });
    }
    /**
     * Thrown when a constructing type returns with an Error.
     *
     * The `InstantiationError` class contains the original error plus the dependency graph which caused
     * this object to be instantiated.
     *
     * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
     *
     * ```typescript
     * class A {
     *   constructor() {
     *     throw new Error('message');
     *   }
     * }
     *
     * var injector = Injector.resolveAndCreate([A]);
     * try {
     *   injector.get(A);
     * } catch (e) {
     *   expect(e instanceof InstantiationError).toBe(true);
     *   expect(e.originalException.message).toEqual("message");
     *   expect(e.originalStack).toBeDefined();
     * }
     * ```
     * @param {?} injector
     * @param {?} originalException
     * @param {?} originalStack
     * @param {?} key
     * @return {?}
     */
    function instantiationError(injector, originalException, originalStack, key) {
        return injectionError(injector, key, function (keys) {
            var /** @type {?} */ first = stringify(keys[0].token);
            return originalException.message + ": Error during instantiation of " + first + "!" + constructResolvingPath(keys) + ".";
        }, originalException);
    }
    /**
     * Thrown when an object other then {\@link Provider} (or `Type`) is passed to {\@link Injector}
     * creation.
     *
     * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
     *
     * ```typescript
     * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
     * ```
     * @param {?} provider
     * @return {?}
     */
    function invalidProviderError(provider) {
        return Error("Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
    }
    /**
     * Thrown when the class has no annotation information.
     *
     * Lack of annotation information prevents the {\@link Injector} from determining which dependencies
     * need to be injected into the constructor.
     *
     * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
     *
     * ```typescript
     * class A {
     *   constructor(b) {}
     * }
     *
     * expect(() => Injector.resolveAndCreate([A])).toThrowError();
     * ```
     *
     * This error is also thrown when the class not marked with {\@link Injectable} has parameter types.
     *
     * ```typescript
     * class B {}
     *
     * class A {
     *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
     * }
     *
     * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
     * ```
     * \@stable
     * @param {?} typeOrFunc
     * @param {?} params
     * @return {?}
     */
    function noAnnotationError(typeOrFunc, params) {
        var /** @type {?} */ signature = [];
        for (var /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {
            var /** @type {?} */ parameter = params[i];
            if (!parameter || parameter.length == 0) {
                signature.push('?');
            }
            else {
                signature.push(parameter.map(stringify).join(' '));
            }
        }
        return Error('Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' +
            signature.join(', ') + '). ' +
            'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' +
            stringify(typeOrFunc) + '\' is decorated with Injectable.');
    }
    /**
     * Thrown when getting an object by index.
     *
     * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
     *
     * ```typescript
     * class A {}
     *
     * var injector = Injector.resolveAndCreate([A]);
     *
     * expect(() => injector.getAt(100)).toThrowError();
     * ```
     * \@stable
     * @param {?} index
     * @return {?}
     */
    function outOfBoundsError(index) {
        return Error("Index " + index + " is out-of-bounds.");
    }
    /**
     * Thrown when a multi provider and a regular provider are bound to the same token.
     *
     * ### Example
     *
     * ```typescript
     * expect(() => Injector.resolveAndCreate([
     *   { provide: "Strings", useValue: "string1", multi: true},
     *   { provide: "Strings", useValue: "string2", multi: false}
     * ])).toThrowError();
     * ```
     * @param {?} provider1
     * @param {?} provider2
     * @return {?}
     */
    function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
        return Error("Cannot mix multi providers and regular providers, got: " + provider1 + " " + provider2);
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * A unique object used for retrieving items from the {\@link ReflectiveInjector}.
     *
     * Keys have:
     * - a system-wide unique `id`.
     * - a `token`.
     *
     * `Key` is used internally by {\@link ReflectiveInjector} because its system-wide unique `id` allows
     * the
     * injector to store created objects in a more efficient way.
     *
     * `Key` should not be created directly. {\@link ReflectiveInjector} creates keys automatically when
     * resolving
     * providers.
     * \@experimental
     */
    var ReflectiveKey = (function () {
        /**
         * Private
         * @param {?} token
         * @param {?} id
         */
        function ReflectiveKey(token, id) {
            this.token = token;
            this.id = id;
            if (!token) {
                throw new Error('Token must be defined!');
            }
        }
        Object.defineProperty(ReflectiveKey.prototype, "displayName", {
            /**
             * Returns a stringified token.
             * @return {?}
             */
            get: function () { return stringify(this.token); },
            enumerable: true,
            configurable: true
        });
        /**
         * Retrieves a `Key` for a token.
         * @param {?} token
         * @return {?}
         */
        ReflectiveKey.get = function (token) {
            return _globalKeyRegistry.get(resolveForwardRef(token));
        };
        Object.defineProperty(ReflectiveKey, "numberOfKeys", {
            /**
             * @return {?} the number of keys registered in the system.
             */
            get: function () { return _globalKeyRegistry.numberOfKeys; },
            enumerable: true,
            configurable: true
        });
        return ReflectiveKey;
    }());
    /**
     * \@internal
     */
    var KeyRegistry = (function () {
        function KeyRegistry() {
            this._allKeys = new Map();
        }
        /**
         * @param {?} token
         * @return {?}
         */
        KeyRegistry.prototype.get = function (token) {
            if (token instanceof ReflectiveKey)
                return token;
            if (this._allKeys.has(token)) {
                return ((this._allKeys.get(token)));
            }
            var /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
            this._allKeys.set(token, newKey);
            return newKey;
        };
        Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
            /**
             * @return {?}
             */
            get: function () { return this._allKeys.size; },
            enumerable: true,
            configurable: true
        });
        return KeyRegistry;
    }());
    var _globalKeyRegistry = new KeyRegistry();
    /**
     * \@whatItDoes Represents a type that a Component or other object is instances of.
     *
     * \@description
     *
     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
     * the `MyCustomComponent` constructor function.
     *
     * \@stable
     */
    var Type = Function;
    /**
     * @param {?} v
     * @return {?}
     */
    function isType(v) {
        return typeof v === 'function';
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Attention: This regex has to hold even if the code is minified!
     */
    var DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*arguments\)/;
    var ReflectionCapabilities = (function () {
        /**
         * @param {?=} reflect
         */
        function ReflectionCapabilities(reflect) {
            this._reflect = reflect || _global['Reflect'];
        }
        /**
         * @return {?}
         */
        ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
        /**
         * @template T
         * @param {?} t
         * @return {?}
         */
        ReflectionCapabilities.prototype.factory = function (t) { return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return new (t.bind.apply(t, [void 0].concat(args)))();
        }; };
        /**
         * \@internal
         * @param {?} paramTypes
         * @param {?} paramAnnotations
         * @return {?}
         */
        ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {
            var /** @type {?} */ result;
            if (typeof paramTypes === 'undefined') {
                result = new Array(paramAnnotations.length);
            }
            else {
                result = new Array(paramTypes.length);
            }
            for (var /** @type {?} */ i = 0; i < result.length; i++) {
                // TS outputs Object for parameters without types, while Traceur omits
                // the annotations. For now we preserve the Traceur behavior to aid
                // migration, but this can be revisited.
                if (typeof paramTypes === 'undefined') {
                    result[i] = [];
                }
                else if (paramTypes[i] != Object) {
                    result[i] = [paramTypes[i]];
                }
                else {
                    result[i] = [];
                }
                if (paramAnnotations && paramAnnotations[i] != null) {
                    result[i] = result[i].concat(paramAnnotations[i]);
                }
            }
            return result;
        };
        /**
         * @param {?} type
         * @param {?} parentCtor
         * @return {?}
         */
        ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {
            // If we have no decorators, we only have function.length as metadata.
            // In that case, to detect whether a child class declared an own constructor or not,
            // we need to look inside of that constructor to check whether it is
            // just calling the parent.
            // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
            // that sets 'design:paramtypes' to []
            // if a class inherits from another class but has no ctor declared itself.
            if (DELEGATE_CTOR.exec(type.toString())) {
                return null;
            }
            // Prefer the direct API.
            if (((type)).parameters && ((type)).parameters !== parentCtor.parameters) {
                return ((type)).parameters;
            }
            // API of tsickle for lowering decorators to properties on the class.
            var /** @type {?} */ tsickleCtorParams = ((type)).ctorParameters;
            if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
                // Newer tsickle uses a function closure
                // Retain the non-function case for compatibility with older tsickle
                var /** @type {?} */ ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
                var /** @type {?} */ paramTypes = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });
                var /** @type {?} */ paramAnnotations = ctorParameters.map(function (ctorParam) { return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators); });
                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
            }
            // API for metadata created by invoking the decorators.
            if (this._reflect != null && this._reflect.getOwnMetadata != null) {
                var /** @type {?} */ paramAnnotations = this._reflect.getOwnMetadata('parameters', type);
                var /** @type {?} */ paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);
                if (paramTypes || paramAnnotations) {
                    return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
                }
            }
            // If a class has no decorators, at least create metadata
            // based on function.length.
            // Note: We know that this is a real constructor as we checked
            // the content of the constructor above.
            return new Array(((type.length))).fill(undefined);
        };
        /**
         * @param {?} type
         * @return {?}
         */
        ReflectionCapabilities.prototype.parameters = function (type) {
            // Note: only report metadata if we have at least one class decorator
            // to stay in sync with the static reflector.
            if (!isType(type)) {
                return [];
            }
            var /** @type {?} */ parentCtor = getParentCtor(type);
            var /** @type {?} */ parameters = this._ownParameters(type, parentCtor);
            if (!parameters && parentCtor !== Object) {
                parameters = this.parameters(parentCtor);
            }
            return parameters || [];
        };
        /**
         * @param {?} typeOrFunc
         * @param {?} parentCtor
         * @return {?}
         */
        ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {
            // Prefer the direct API.
            if (((typeOrFunc)).annotations && ((typeOrFunc)).annotations !== parentCtor.annotations) {
                var /** @type {?} */ annotations = ((typeOrFunc)).annotations;
                if (typeof annotations === 'function' && annotations.annotations) {
                    annotations = annotations.annotations;
                }
                return annotations;
            }
            // API of tsickle for lowering decorators to properties on the class.
            if (((typeOrFunc)).decorators && ((typeOrFunc)).decorators !== parentCtor.decorators) {
                return convertTsickleDecoratorIntoMetadata(((typeOrFunc)).decorators);
            }
            // API for metadata created by invoking the decorators.
            if (this._reflect && this._reflect.getOwnMetadata) {
                return this._reflect.getOwnMetadata('annotations', typeOrFunc);
            }
            return null;
        };
        /**
         * @param {?} typeOrFunc
         * @return {?}
         */
        ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
            if (!isType(typeOrFunc)) {
                return [];
            }
            var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);
            var /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
            var /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
            return parentAnnotations.concat(ownAnnotations);
        };
        /**
         * @param {?} typeOrFunc
         * @param {?} parentCtor
         * @return {?}
         */
        ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {
            // Prefer the direct API.
            if (((typeOrFunc)).propMetadata &&
                ((typeOrFunc)).propMetadata !== parentCtor.propMetadata) {
                var /** @type {?} */ propMetadata = ((typeOrFunc)).propMetadata;
                if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
                    propMetadata = propMetadata.propMetadata;
                }
                return propMetadata;
            }
            // API of tsickle for lowering decorators to properties on the class.
            if (((typeOrFunc)).propDecorators &&
                ((typeOrFunc)).propDecorators !== parentCtor.propDecorators) {
                var /** @type {?} */ propDecorators_1 = ((typeOrFunc)).propDecorators;
                var /** @type {?} */ propMetadata_1 = ({});
                Object.keys(propDecorators_1).forEach(function (prop) {
                    propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
                });
                return propMetadata_1;
            }
            // API for metadata created by invoking the decorators.
            if (this._reflect && this._reflect.getOwnMetadata) {
                return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);
            }
            return null;
        };
        /**
         * @param {?} typeOrFunc
         * @return {?}
         */
        ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
            if (!isType(typeOrFunc)) {
                return {};
            }
            var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);
            var /** @type {?} */ propMetadata = {};
            if (parentCtor !== Object) {
                var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentCtor);
                Object.keys(parentPropMetadata_1).forEach(function (propName) {
                    propMetadata[propName] = parentPropMetadata_1[propName];
                });
            }
            var /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
            if (ownPropMetadata) {
                Object.keys(ownPropMetadata).forEach(function (propName) {
                    var /** @type {?} */ decorators = [];
                    if (propMetadata.hasOwnProperty(propName)) {
                        decorators.push.apply(decorators, propMetadata[propName]);
                    }
                    decorators.push.apply(decorators, ownPropMetadata[propName]);
                    propMetadata[propName] = decorators;
                });
            }
            return propMetadata;
        };
        /**
         * @param {?} type
         * @param {?} lcProperty
         * @return {?}
         */
        ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
            return type instanceof Type && lcProperty in type.prototype;
        };
        /**
         * @param {?} name
         * @return {?}
         */
        ReflectionCapabilities.prototype.getter = function (name) { return (new Function('o', 'return o.' + name + ';')); };
        /**
         * @param {?} name
         * @return {?}
         */
        ReflectionCapabilities.prototype.setter = function (name) {
            return (new Function('o', 'v', 'return o.' + name + ' = v;'));
        };
        /**
         * @param {?} name
         * @return {?}
         */
        ReflectionCapabilities.prototype.method = function (name) {
            var /** @type {?} */ functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
            return (new Function('o', 'args', functionBody));
        };
        /**
         * @param {?} type
         * @return {?}
         */
        ReflectionCapabilities.prototype.importUri = function (type) {
            // StaticSymbol
            if (typeof type === 'object' && type['filePath']) {
                return type['filePath'];
            }
            // Runtime type
            return "./" + stringify(type);
        };
        /**
         * @param {?} type
         * @return {?}
         */
        ReflectionCapabilities.prototype.resourceUri = function (type) { return "./" + stringify(type); };
        /**
         * @param {?} name
         * @param {?} moduleUrl
         * @param {?} members
         * @param {?} runtime
         * @return {?}
         */
        ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
            return runtime;
        };
        /**
         * @param {?} enumIdentifier
         * @param {?} name
         * @return {?}
         */
        ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };
        return ReflectionCapabilities;
    }());
    /**
     * @param {?} decoratorInvocations
     * @return {?}
     */
    function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
        if (!decoratorInvocations) {
            return [];
        }
        return decoratorInvocations.map(function (decoratorInvocation) {
            var /** @type {?} */ decoratorType = decoratorInvocation.type;
            var /** @type {?} */ annotationCls = decoratorType.annotationCls;
            var /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
            return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();
        });
    }
    /**
     * @param {?} ctor
     * @return {?}
     */
    function getParentCtor(ctor) {
        var /** @type {?} */ parentProto = Object.getPrototypeOf(ctor.prototype);
        var /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;
        // Note: We always use `Object` as the null value
        // to simplify checking later on.
        return parentCtor || Object;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Provides access to reflection data about symbols. Used internally by Angular
     * to power dependency injection and compilation.
     */
    var Reflector = (function () {
        /**
         * @param {?} reflectionCapabilities
         */
        function Reflector(reflectionCapabilities) {
            this.reflectionCapabilities = reflectionCapabilities;
        }
        /**
         * @param {?} caps
         * @return {?}
         */
        Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };
        /**
         * @param {?} type
         * @return {?}
         */
        Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };
        /**
         * @param {?} typeOrFunc
         * @return {?}
         */
        Reflector.prototype.parameters = function (typeOrFunc) {
            return this.reflectionCapabilities.parameters(typeOrFunc);
        };
        /**
         * @param {?} typeOrFunc
         * @return {?}
         */
        Reflector.prototype.annotations = function (typeOrFunc) {
            return this.reflectionCapabilities.annotations(typeOrFunc);
        };
        /**
         * @param {?} typeOrFunc
         * @return {?}
         */
        Reflector.prototype.propMetadata = function (typeOrFunc) {
            return this.reflectionCapabilities.propMetadata(typeOrFunc);
        };
        /**
         * @param {?} type
         * @param {?} lcProperty
         * @return {?}
         */
        Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {
            return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
        };
        /**
         * @param {?} name
         * @return {?}
         */
        Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };
        /**
         * @param {?} name
         * @return {?}
         */
        Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };
        /**
         * @param {?} name
         * @return {?}
         */
        Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };
        /**
         * @param {?} type
         * @return {?}
         */
        Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };
        /**
         * @param {?} type
         * @return {?}
         */
        Reflector.prototype.resourceUri = function (type) { return this.reflectionCapabilities.resourceUri(type); };
        /**
         * @param {?} name
         * @param {?} moduleUrl
         * @param {?} members
         * @param {?} runtime
         * @return {?}
         */
        Reflector.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
            return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);
        };
        /**
         * @param {?} identifier
         * @param {?} name
         * @return {?}
         */
        Reflector.prototype.resolveEnum = function (identifier, name) {
            return this.reflectionCapabilities.resolveEnum(identifier, name);
        };
        return Reflector;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * The {\@link Reflector} used internally in Angular to access metadata
     * about symbols.
     */
    var reflector = new Reflector(new ReflectionCapabilities());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * `Dependency` is used by the framework to extend DI.
     * This is internal to Angular and should not be used directly.
     */
    var ReflectiveDependency = (function () {
        /**
         * @param {?} key
         * @param {?} optional
         * @param {?} visibility
         */
        function ReflectiveDependency(key, optional, visibility) {
            this.key = key;
            this.optional = optional;
            this.visibility = visibility;
        }
        /**
         * @param {?} key
         * @return {?}
         */
        ReflectiveDependency.fromKey = function (key) {
            return new ReflectiveDependency(key, false, null);
        };
        return ReflectiveDependency;
    }());
    var _EMPTY_LIST = [];
    var ResolvedReflectiveProvider_ = (function () {
        /**
         * @param {?} key
         * @param {?} resolvedFactories
         * @param {?} multiProvider
         */
        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
            this.key = key;
            this.resolvedFactories = resolvedFactories;
            this.multiProvider = multiProvider;
        }
        Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
            /**
             * @return {?}
             */
            get: function () { return this.resolvedFactories[0]; },
            enumerable: true,
            configurable: true
        });
        return ResolvedReflectiveProvider_;
    }());
    /**
     * An internal resolved representation of a factory function created by resolving {\@link
     * Provider}.
     * \@experimental
     */
    var ResolvedReflectiveFactory = (function () {
        /**
         * @param {?} factory
         * @param {?} dependencies
         */
        function ResolvedReflectiveFactory(factory, dependencies) {
            this.factory = factory;
            this.dependencies = dependencies;
        }
        return ResolvedReflectiveFactory;
    }());
    /**
     * Resolve a single provider.
     * @param {?} provider
     * @return {?}
     */
    function resolveReflectiveFactory(provider) {
        var /** @type {?} */ factoryFn;
        var /** @type {?} */ resolvedDeps;
        if (provider.useClass) {
            var /** @type {?} */ useClass = resolveForwardRef(provider.useClass);
            factoryFn = reflector.factory(useClass);
            resolvedDeps = _dependenciesFor(useClass);
        }
        else if (provider.useExisting) {
            factoryFn = function (aliasInstance) { return aliasInstance; };
            resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
        }
        else if (provider.useFactory) {
            factoryFn = provider.useFactory;
            resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
        }
        else {
            factoryFn = function () { return provider.useValue; };
            resolvedDeps = _EMPTY_LIST;
        }
        return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
    }
    /**
     * Converts the {\@link Provider} into {\@link ResolvedProvider}.
     *
     * {\@link Injector} internally only uses {\@link ResolvedProvider}, {\@link Provider} contains
     * convenience provider syntax.
     * @param {?} provider
     * @return {?}
     */
    function resolveReflectiveProvider(provider) {
        return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);
    }
    /**
     * Resolve a list of Providers.
     * @param {?} providers
     * @return {?}
     */
    function resolveReflectiveProviders(providers) {
        var /** @type {?} */ normalized = _normalizeProviders(providers, []);
        var /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);
        var /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
        return Array.from(resolvedProviderMap.values());
    }
    /**
     * Merges a list of ResolvedProviders into a list where
     * each key is contained exactly once and multi providers
     * have been merged.
     * @param {?} providers
     * @param {?} normalizedProvidersMap
     * @return {?}
     */
    function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
        for (var /** @type {?} */ i = 0; i < providers.length; i++) {
            var /** @type {?} */ provider = providers[i];
            var /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);
            if (existing) {
                if (provider.multiProvider !== existing.multiProvider) {
                    throw mixingMultiProvidersWithRegularProvidersError(existing, provider);
                }
                if (provider.multiProvider) {
                    for (var /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {
                        existing.resolvedFactories.push(provider.resolvedFactories[j]);
                    }
                }
                else {
                    normalizedProvidersMap.set(provider.key.id, provider);
                }
            }
            else {
                var /** @type {?} */ resolvedProvider = void 0;
                if (provider.multiProvider) {
                    resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
                }
                else {
                    resolvedProvider = provider;
                }
                normalizedProvidersMap.set(provider.key.id, resolvedProvider);
            }
        }
        return normalizedProvidersMap;
    }
    /**
     * @param {?} providers
     * @param {?} res
     * @return {?}
     */
    function _normalizeProviders(providers, res) {
        providers.forEach(function (b) {
            if (b instanceof Type) {
                res.push({ provide: b, useClass: b });
            }
            else if (b && typeof b == 'object' && ((b)).provide !== undefined) {
                res.push(/** @type {?} */ (b));
            }
            else if (b instanceof Array) {
                _normalizeProviders(b, res);
            }
            else {
                throw invalidProviderError(b);
            }
        });
        return res;
    }
    /**
     * @param {?} typeOrFunc
     * @param {?=} dependencies
     * @return {?}
     */
    function constructDependencies(typeOrFunc, dependencies) {
        if (!dependencies) {
            return _dependenciesFor(typeOrFunc);
        }
        else {
            var /** @type {?} */ params_1 = dependencies.map(function (t) { return [t]; });
            return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });
        }
    }
    /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    function _dependenciesFor(typeOrFunc) {
        var /** @type {?} */ params = reflector.parameters(typeOrFunc);
        if (!params)
            return [];
        if (params.some(function (p) { return p == null; })) {
            throw noAnnotationError(typeOrFunc, params);
        }
        return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });
    }
    /**
     * @param {?} typeOrFunc
     * @param {?} metadata
     * @param {?} params
     * @return {?}
     */
    function _extractToken(typeOrFunc, metadata, params) {
        var /** @type {?} */ token = null;
        var /** @type {?} */ optional = false;
        if (!Array.isArray(metadata)) {
            if (metadata instanceof Inject) {
                return _createDependency(metadata.token, optional, null);
            }
            else {
                return _createDependency(metadata, optional, null);
            }
        }
        var /** @type {?} */ visibility = null;
        for (var /** @type {?} */ i = 0; i < metadata.length; ++i) {
            var /** @type {?} */ paramMetadata = metadata[i];
            if (paramMetadata instanceof Type) {
                token = paramMetadata;
            }
            else if (paramMetadata instanceof Inject) {
                token = paramMetadata.token;
            }
            else if (paramMetadata instanceof Optional) {
                optional = true;
            }
            else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {
                visibility = paramMetadata;
            }
            else if (paramMetadata instanceof InjectionToken) {
                token = paramMetadata;
            }
        }
        token = resolveForwardRef(token);
        if (token != null) {
            return _createDependency(token, optional, visibility);
        }
        else {
            throw noAnnotationError(typeOrFunc, params);
        }
    }
    /**
     * @param {?} token
     * @param {?} optional
     * @param {?} visibility
     * @return {?}
     */
    function _createDependency(token, optional, visibility) {
        return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // Threshold for the dynamic version
    var UNDEFINED = new Object();
    /**
     * A ReflectiveDependency injection container used for instantiating objects and resolving
     * dependencies.
     *
     * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
     * constructor dependencies.
     *
     * In typical use, application code asks for the dependencies in the constructor and they are
     * resolved by the `Injector`.
     *
     * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
     *
     * The following example creates an `Injector` configured to create `Engine` and `Car`.
     *
     * ```typescript
     * \@Injectable()
     * class Engine {
     * }
     *
     * \@Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
     * var car = injector.get(Car);
     * expect(car instanceof Car).toBe(true);
     * expect(car.engine instanceof Engine).toBe(true);
     * ```
     *
     * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
     * resolve all of the object's dependencies automatically.
     *
     * \@stable
     * @abstract
     */
    var ReflectiveInjector = (function () {
        function ReflectiveInjector() {
        }
        /**
         * Turns an array of provider definitions into an array of resolved providers.
         *
         * A resolution is a process of flattening multiple nested arrays and converting individual
         * providers into an array of {\@link ResolvedReflectiveProvider}s.
         *
         * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
         *
         * ```typescript
         * \@Injectable()
         * class Engine {
         * }
         *
         * \@Injectable()
         * class Car {
         *   constructor(public engine:Engine) {}
         * }
         *
         * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
         *
         * expect(providers.length).toEqual(2);
         *
         * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
         * expect(providers[0].key.displayName).toBe("Car");
         * expect(providers[0].dependencies.length).toEqual(1);
         * expect(providers[0].factory).toBeDefined();
         *
         * expect(providers[1].key.displayName).toBe("Engine");
         * });
         * ```
         *
         * See {\@link ReflectiveInjector#fromResolvedProviders} for more info.
         * @param {?} providers
         * @return {?}
         */
        ReflectiveInjector.resolve = function (providers) {
            return resolveReflectiveProviders(providers);
        };
        /**
         * Resolves an array of providers and creates an injector from those providers.
         *
         * The passed-in providers can be an array of `Type`, {\@link Provider},
         * or a recursive array of more providers.
         *
         * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
         *
         * ```typescript
         * \@Injectable()
         * class Engine {
         * }
         *
         * \@Injectable()
         * class Car {
         *   constructor(public engine:Engine) {}
         * }
         *
         * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
         * expect(injector.get(Car) instanceof Car).toBe(true);
         * ```
         *
         * This function is slower than the corresponding `fromResolvedProviders`
         * because it needs to resolve the passed-in providers first.
         * See {\@link ReflectiveInjector#resolve} and {\@link ReflectiveInjector#fromResolvedProviders}.
         * @param {?} providers
         * @param {?=} parent
         * @return {?}
         */
        ReflectiveInjector.resolveAndCreate = function (providers, parent) {
            var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
            return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
        };
        /**
         * Creates an injector from previously resolved providers.
         *
         * This API is the recommended way to construct injectors in performance-sensitive parts.
         *
         * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
         *
         * ```typescript
         * \@Injectable()
         * class Engine {
         * }
         *
         * \@Injectable()
         * class Car {
         *   constructor(public engine:Engine) {}
         * }
         *
         * var providers = ReflectiveInjector.resolve([Car, Engine]);
         * var injector = ReflectiveInjector.fromResolvedProviders(providers);
         * expect(injector.get(Car) instanceof Car).toBe(true);
         * ```
         * \@experimental
         * @param {?} providers
         * @param {?=} parent
         * @return {?}
         */
        ReflectiveInjector.fromResolvedProviders = function (providers, parent) {
            return new ReflectiveInjector_(providers, parent);
        };
        /**
         * Parent of this injector.
         *
         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
         * -->
         *
         * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))
         *
         * ```typescript
         * var parent = ReflectiveInjector.resolveAndCreate([]);
         * var child = parent.resolveAndCreateChild([]);
         * expect(child.parent).toBe(parent);
         * ```
         * @abstract
         * @return {?}
         */
        ReflectiveInjector.prototype.parent = function () { };
        /**
         * Resolves an array of providers and creates a child injector from those providers.
         *
         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
         * -->
         *
         * The passed-in providers can be an array of `Type`, {\@link Provider},
         * or a recursive array of more providers.
         *
         * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))
         *
         * ```typescript
         * class ParentProvider {}
         * class ChildProvider {}
         *
         * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);
         * var child = parent.resolveAndCreateChild([ChildProvider]);
         *
         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
         * ```
         *
         * This function is slower than the corresponding `createChildFromResolved`
         * because it needs to resolve the passed-in providers first.
         * See {\@link ReflectiveInjector#resolve} and {\@link ReflectiveInjector#createChildFromResolved}.
         * @abstract
         * @param {?} providers
         * @return {?}
         */
        ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { };
        /**
         * Creates a child injector from previously resolved providers.
         *
         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
         * -->
         *
         * This API is the recommended way to construct injectors in performance-sensitive parts.
         *
         * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))
         *
         * ```typescript
         * class ParentProvider {}
         * class ChildProvider {}
         *
         * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);
         * var childProviders = ReflectiveInjector.resolve([ChildProvider]);
         *
         * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);
         * var child = parent.createChildFromResolved(childProviders);
         *
         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
         * ```
         * @abstract
         * @param {?} providers
         * @return {?}
         */
        ReflectiveInjector.prototype.createChildFromResolved = function (providers) { };
        /**
         * Resolves a provider and instantiates an object in the context of the injector.
         *
         * The created object does not get cached by the injector.
         *
         * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))
         *
         * ```typescript
         * \@Injectable()
         * class Engine {
         * }
         *
         * \@Injectable()
         * class Car {
         *   constructor(public engine:Engine) {}
         * }
         *
         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
         *
         * var car = injector.resolveAndInstantiate(Car);
         * expect(car.engine).toBe(injector.get(Engine));
         * expect(car).not.toBe(injector.resolveAndInstantiate(Car));
         * ```
         * @abstract
         * @param {?} provider
         * @return {?}
         */
        ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { };
        /**
         * Instantiates an object using a resolved provider in the context of the injector.
         *
         * The created object does not get cached by the injector.
         *
         * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))
         *
         * ```typescript
         * \@Injectable()
         * class Engine {
         * }
         *
         * \@Injectable()
         * class Car {
         *   constructor(public engine:Engine) {}
         * }
         *
         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
         * var carProvider = ReflectiveInjector.resolve([Car])[0];
         * var car = injector.instantiateResolved(carProvider);
         * expect(car.engine).toBe(injector.get(Engine));
         * expect(car).not.toBe(injector.instantiateResolved(carProvider));
         * ```
         * @abstract
         * @param {?} provider
         * @return {?}
         */
        ReflectiveInjector.prototype.instantiateResolved = function (provider) { };
        /**
         * @abstract
         * @param {?} token
         * @param {?=} notFoundValue
         * @return {?}
         */
        ReflectiveInjector.prototype.get = function (token, notFoundValue) { };
        return ReflectiveInjector;
    }());
    var ReflectiveInjector_ = (function () {
        /**
         * Private
         * @param {?} _providers
         * @param {?=} _parent
         */
        function ReflectiveInjector_(_providers, _parent) {
            /**
             * \@internal
             */
            this._constructionCounter = 0;
            this._providers = _providers;
            this._parent = _parent || null;
            var len = _providers.length;
            this.keyIds = new Array(len);
            this.objs = new Array(len);
            for (var i = 0; i < len; i++) {
                this.keyIds[i] = _providers[i].key.id;
                this.objs[i] = UNDEFINED;
            }
        }
        /**
         * @param {?} token
         * @param {?=} notFoundValue
         * @return {?}
         */
        ReflectiveInjector_.prototype.get = function (token, notFoundValue) {
            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
            return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
        };
        Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
            /**
             * @return {?}
             */
            get: function () { return this._parent; },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} providers
         * @return {?}
         */
        ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {
            var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
            return this.createChildFromResolved(ResolvedReflectiveProviders);
        };
        /**
         * @param {?} providers
         * @return {?}
         */
        ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {
            var /** @type {?} */ inj = new ReflectiveInjector_(providers);
            inj._parent = this;
            return inj;
        };
        /**
         * @param {?} provider
         * @return {?}
         */
        ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {
            return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
        };
        /**
         * @param {?} provider
         * @return {?}
         */
        ReflectiveInjector_.prototype.instantiateResolved = function (provider) {
            return this._instantiateProvider(provider);
        };
        /**
         * @param {?} index
         * @return {?}
         */
        ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {
            if (index < 0 || index >= this._providers.length) {
                throw outOfBoundsError(index);
            }
            return this._providers[index];
        };
        /**
         * \@internal
         * @param {?} provider
         * @return {?}
         */
        ReflectiveInjector_.prototype._new = function (provider) {
            if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
                throw cyclicDependencyError(this, provider.key);
            }
            return this._instantiateProvider(provider);
        };
        /**
         * @return {?}
         */
        ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () { return this.objs.length; };
        /**
         * @param {?} provider
         * @return {?}
         */
        ReflectiveInjector_.prototype._instantiateProvider = function (provider) {
            if (provider.multiProvider) {
                var /** @type {?} */ res = new Array(provider.resolvedFactories.length);
                for (var /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {
                    res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
                }
                return res;
            }
            else {
                return this._instantiate(provider, provider.resolvedFactories[0]);
            }
        };
        /**
         * @param {?} provider
         * @param {?} ResolvedReflectiveFactory
         * @return {?}
         */
        ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory$$1) {
            var _this = this;
            var /** @type {?} */ factory = ResolvedReflectiveFactory$$1.factory;
            var /** @type {?} */ deps;
            try {
                deps =
                    ResolvedReflectiveFactory$$1.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });
            }
            catch (e) {
                if (e.addKey) {
                    e.addKey(this, provider.key);
                }
                throw e;
            }
            var /** @type {?} */ obj;
            try {
                obj = factory.apply(void 0, deps);
            }
            catch (e) {
                throw instantiationError(this, e, e.stack, provider.key);
            }
            return obj;
        };
        /**
         * @param {?} dep
         * @return {?}
         */
        ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {
            return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
        };
        /**
         * @param {?} key
         * @param {?} visibility
         * @param {?} notFoundValue
         * @return {?}
         */
        ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {
            if (key === INJECTOR_KEY) {
                return this;
            }
            if (visibility instanceof Self) {
                return this._getByKeySelf(key, notFoundValue);
            }
            else {
                return this._getByKeyDefault(key, notFoundValue, visibility);
            }
        };
        /**
         * @param {?} keyId
         * @return {?}
         */
        ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {
            for (var /** @type {?} */ i = 0; i < this.keyIds.length; i++) {
                if (this.keyIds[i] === keyId) {
                    if (this.objs[i] === UNDEFINED) {
                        this.objs[i] = this._new(this._providers[i]);
                    }
                    return this.objs[i];
                }
            }
            return UNDEFINED;
        };
        /**
         * \@internal
         * @param {?} key
         * @param {?} notFoundValue
         * @return {?}
         */
        ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {
            if (notFoundValue !== THROW_IF_NOT_FOUND) {
                return notFoundValue;
            }
            else {
                throw noProviderError(this, key);
            }
        };
        /**
         * \@internal
         * @param {?} key
         * @param {?} notFoundValue
         * @return {?}
         */
        ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {
            var /** @type {?} */ obj = this._getObjByKeyId(key.id);
            return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
        };
        /**
         * \@internal
         * @param {?} key
         * @param {?} notFoundValue
         * @param {?} visibility
         * @return {?}
         */
        ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, visibility) {
            var /** @type {?} */ inj;
            if (visibility instanceof SkipSelf) {
                inj = this._parent;
            }
            else {
                inj = this;
            }
            while (inj instanceof ReflectiveInjector_) {
                var /** @type {?} */ inj_ = (inj);
                var /** @type {?} */ obj = inj_._getObjByKeyId(key.id);
                if (obj !== UNDEFINED)
                    return obj;
                inj = inj_._parent;
            }
            if (inj !== null) {
                return inj.get(key.token, notFoundValue);
            }
            else {
                return this._throwOrNull(key, notFoundValue);
            }
        };
        Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
            /**
             * @return {?}
             */
            get: function () {
                var /** @type {?} */ providers = _mapProviders(this, function (b) { return ' "' + b.key.displayName + '" '; })
                    .join(', ');
                return "ReflectiveInjector(providers: [" + providers + "])";
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ReflectiveInjector_.prototype.toString = function () { return this.displayName; };
        return ReflectiveInjector_;
    }());
    var INJECTOR_KEY = ReflectiveKey.get(Injector);
    /**
     * @param {?} injector
     * @param {?} fn
     * @return {?}
     */
    function _mapProviders(injector, fn) {
        var /** @type {?} */ res = new Array(injector._providers.length);
        for (var /** @type {?} */ i = 0; i < injector._providers.length; ++i) {
            res[i] = fn(injector.getProviderAtIndex(i));
        }
        return res;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @module
     * @description
     * The `di` module provides dependency injection container services.
     */
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Determine if the argument is shaped like a Promise
     * @param {?} obj
     * @return {?}
     */
    function isPromise$1(obj) {
        // allow any Promise/A+ compliant thenable.
        // It's up to the caller to ensure that obj.then conforms to the spec
        return !!obj && typeof obj.then === 'function';
    }
    /**
     * Determine if the argument is an Observable
     * @param {?} obj
     * @return {?}
     */
    function isObservable(obj) {
        // TODO use Symbol.observable when https://github.com/ReactiveX/rxjs/issues/2415 will be resolved
        return !!obj && typeof obj.subscribe === 'function';
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * A function that will be executed when an application is initialized.
     * \@experimental
     */
    var APP_INITIALIZER = new InjectionToken('Application Initializer');
    /**
     * A class that reflects the state of running {\@link APP_INITIALIZER}s.
     *
     * \@experimental
     */
    var ApplicationInitStatus = (function () {
        /**
         * @param {?} appInits
         */
        function ApplicationInitStatus(appInits) {
            var _this = this;
            this.appInits = appInits;
            this.initialized = false;
            this._done = false;
            this._donePromise = new Promise(function (res, rej) {
                _this.resolve = res;
                _this.reject = rej;
            });
        }
        /**
         * \@internal
         * @return {?}
         */
        ApplicationInitStatus.prototype.runInitializers = function () {
            var _this = this;
            if (this.initialized) {
                return;
            }
            var /** @type {?} */ asyncInitPromises = [];
            var /** @type {?} */ complete = function () {
                _this._done = true;
                _this.resolve();
            };
            if (this.appInits) {
                for (var /** @type {?} */ i = 0; i < this.appInits.length; i++) {
                    var /** @type {?} */ initResult = this.appInits[i]();
                    if (isPromise$1(initResult)) {
                        asyncInitPromises.push(initResult);
                    }
                }
            }
            Promise.all(asyncInitPromises).then(function () { complete(); }).catch(function (e) { _this.reject(e); });
            if (asyncInitPromises.length === 0) {
                complete();
            }
            this.initialized = true;
        };
        Object.defineProperty(ApplicationInitStatus.prototype, "done", {
            /**
             * @return {?}
             */
            get: function () { return this._done; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
            /**
             * @return {?}
             */
            get: function () { return this._donePromise; },
            enumerable: true,
            configurable: true
        });
        return ApplicationInitStatus;
    }());
    ApplicationInitStatus.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    ApplicationInitStatus.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * A DI Token representing a unique string id assigned to the application by Angular and used
     * primarily for prefixing application attributes and CSS styles when
     * {\@link ViewEncapsulation#Emulated} is being used.
     *
     * If you need to avoid randomly generated value to be used as an application id, you can provide
     * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\@link Injector}
     * using this token.
     * \@experimental
     */
    var APP_ID = new InjectionToken('AppId');
    /**
     * @return {?}
     */
    function _appIdRandomProviderFactory() {
        return "" + _randomChar() + _randomChar() + _randomChar();
    }
    /**
     * Providers that will generate a random APP_ID_TOKEN.
     * \@experimental
     */
    var APP_ID_RANDOM_PROVIDER = {
        provide: APP_ID,
        useFactory: _appIdRandomProviderFactory,
        deps: [],
    };
    /**
     * @return {?}
     */
    function _randomChar() {
        return String.fromCharCode(97 + Math.floor(Math.random() * 25));
    }
    /**
     * A function that will be executed when a platform is initialized.
     * \@experimental
     */
    var PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');
    /**
     * A token that indicates an opaque platform id.
     * \@experimental
     */
    var PLATFORM_ID = new InjectionToken('Platform ID');
    /**
     * All callbacks provided via this token will be called for every component that is bootstrapped.
     * Signature of the callback:
     *
     * `(componentRef: ComponentRef) => void`.
     *
     * \@experimental
     */
    var APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');
    /**
     * A token which indicates the root directory of the application
     * \@experimental
     */
    var PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var Console = (function () {
        function Console() {
        }
        /**
         * @param {?} message
         * @return {?}
         */
        Console.prototype.log = function (message) {
            // tslint:disable-next-line:no-console
            console.log(message);
        };
        /**
         * @param {?} message
         * @return {?}
         */
        Console.prototype.warn = function (message) {
            // tslint:disable-next-line:no-console
            console.warn(message);
        };
        return Console;
    }());
    Console.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    Console.ctorParameters = function () { return []; };
    /**
     * @return {?}
     */
    function _throwError() {
        throw new Error("Runtime compiler is not loaded");
    }
    /**
     * Low-level service for running the angular compiler during runtime
     * to create {\@link ComponentFactory}s, which
     * can later be used to create and render a Component instance.
     *
     * Each `\@NgModule` provides an own `Compiler` to its injector,
     * that will use the directives/pipes of the ng module for compilation
     * of components.
     * \@stable
     */
    var Compiler = (function () {
        function Compiler() {
        }
        /**
         * Compiles the given NgModule and all of its components. All templates of the components listed
         * in `entryComponents` have to be inlined.
         * @template T
         * @param {?} moduleType
         * @return {?}
         */
        Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };
        /**
         * Compiles the given NgModule and all of its components
         * @template T
         * @param {?} moduleType
         * @return {?}
         */
        Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };
        /**
         * Same as {\@link #compileModuleSync} but also creates ComponentFactories for all components.
         * @template T
         * @param {?} moduleType
         * @return {?}
         */
        Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
            throw _throwError();
        };
        /**
         * Same as {\@link #compileModuleAsync} but also creates ComponentFactories for all components.
         * @template T
         * @param {?} moduleType
         * @return {?}
         */
        Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
            throw _throwError();
        };
        /**
         * Exposes the CSS-style selectors that have been used in `ngContent` directives within
         * the template of the given component.
         * This is used by the `upgrade` library to compile the appropriate transclude content
         * in the AngularJS wrapper component.
         *
         * @deprecated since v4. Use ComponentFactory.ngContentSelectors instead.
         * @param {?} component
         * @return {?}
         */
        Compiler.prototype.getNgContentSelectors = function (component) { throw _throwError(); };
        /**
         * Clears all caches.
         * @return {?}
         */
        Compiler.prototype.clearCache = function () { };
        /**
         * Clears the cache for the given component/ngModule.
         * @param {?} type
         * @return {?}
         */
        Compiler.prototype.clearCacheFor = function (type) { };
        return Compiler;
    }());
    Compiler.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    Compiler.ctorParameters = function () { return []; };
    /**
     * Token to provide CompilerOptions in the platform injector.
     *
     * \@experimental
     */
    var COMPILER_OPTIONS = new InjectionToken('compilerOptions');
    /**
     * A factory for creating a Compiler
     *
     * \@experimental
     * @abstract
     */
    var CompilerFactory = (function () {
        function CompilerFactory() {
        }
        /**
         * @abstract
         * @param {?=} options
         * @return {?}
         */
        CompilerFactory.prototype.createCompiler = function (options) { };
        return CompilerFactory;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Represents an instance of a Component created via a {\@link ComponentFactory}.
     *
     * `ComponentRef` provides access to the Component Instance as well other objects related to this
     * Component Instance and allows you to destroy the Component Instance via the {\@link #destroy}
     * method.
     * \@stable
     * @abstract
     */
    var ComponentRef = (function () {
        function ComponentRef() {
        }
        /**
         * Location of the Host Element of this Component Instance.
         * @abstract
         * @return {?}
         */
        ComponentRef.prototype.location = function () { };
        /**
         * The injector on which the component instance exists.
         * @abstract
         * @return {?}
         */
        ComponentRef.prototype.injector = function () { };
        /**
         * The instance of the Component.
         * @abstract
         * @return {?}
         */
        ComponentRef.prototype.instance = function () { };
        /**
         * The {\@link ViewRef} of the Host View of this Component instance.
         * @abstract
         * @return {?}
         */
        ComponentRef.prototype.hostView = function () { };
        /**
         * The {\@link ChangeDetectorRef} of the Component instance.
         * @abstract
         * @return {?}
         */
        ComponentRef.prototype.changeDetectorRef = function () { };
        /**
         * The component type.
         * @abstract
         * @return {?}
         */
        ComponentRef.prototype.componentType = function () { };
        /**
         * Destroys the component instance and all of the data structures associated with it.
         * @abstract
         * @return {?}
         */
        ComponentRef.prototype.destroy = function () { };
        /**
         * Allows to register a callback that will be called when the component is destroyed.
         * @abstract
         * @param {?} callback
         * @return {?}
         */
        ComponentRef.prototype.onDestroy = function (callback) { };
        return ComponentRef;
    }());
    /**
     * \@stable
     * @abstract
     */
    var ComponentFactory = (function () {
        function ComponentFactory() {
        }
        /**
         * @abstract
         * @return {?}
         */
        ComponentFactory.prototype.selector = function () { };
        /**
         * @abstract
         * @return {?}
         */
        ComponentFactory.prototype.componentType = function () { };
        /**
         * selector for all <ng-content> elements in the component.
         * @abstract
         * @return {?}
         */
        ComponentFactory.prototype.ngContentSelectors = function () { };
        /**
         * the inputs of the component.
         * @abstract
         * @return {?}
         */
        ComponentFactory.prototype.inputs = function () { };
        /**
         * the outputs of the component.
         * @abstract
         * @return {?}
         */
        ComponentFactory.prototype.outputs = function () { };
        /**
         * Creates a new component.
         * @abstract
         * @param {?} injector
         * @param {?=} projectableNodes
         * @param {?=} rootSelectorOrNode
         * @param {?=} ngModule
         * @return {?}
         */
        ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) { };
        return ComponentFactory;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} component
     * @return {?}
     */
    function noComponentFactoryError(component) {
        var /** @type {?} */ error = Error("No component factory found for " + stringify(component) + ". Did you add it to @NgModule.entryComponents?");
        ((error))[ERROR_COMPONENT] = component;
        return error;
    }
    var ERROR_COMPONENT = 'ngComponent';
    /**
     * @param {?} error
     * @return {?}
     */
    var _NullComponentFactoryResolver = (function () {
        function _NullComponentFactoryResolver() {
        }
        /**
         * @template T
         * @param {?} component
         * @return {?}
         */
        _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
            throw noComponentFactoryError(component);
        };
        return _NullComponentFactoryResolver;
    }());
    /**
     * \@stable
     * @abstract
     */
    var ComponentFactoryResolver = (function () {
        function ComponentFactoryResolver() {
        }
        /**
         * @abstract
         * @template T
         * @param {?} component
         * @return {?}
         */
        ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };
        return ComponentFactoryResolver;
    }());
    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
    var CodegenComponentFactoryResolver = (function () {
        /**
         * @param {?} factories
         * @param {?} _parent
         * @param {?} _ngModule
         */
        function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {
            this._parent = _parent;
            this._ngModule = _ngModule;
            this._factories = new Map();
            for (var i = 0; i < factories.length; i++) {
                var factory = factories[i];
                this._factories.set(factory.componentType, factory);
            }
        }
        /**
         * @template T
         * @param {?} component
         * @return {?}
         */
        CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
            var /** @type {?} */ factory = this._factories.get(component);
            if (!factory && this._parent) {
                factory = this._parent.resolveComponentFactory(component);
            }
            if (!factory) {
                throw noComponentFactoryError(component);
            }
            return new ComponentFactoryBoundToModule(factory, this._ngModule);
        };
        return CodegenComponentFactoryResolver;
    }());
    var ComponentFactoryBoundToModule = (function (_super) {
        __extends(ComponentFactoryBoundToModule, _super);
        /**
         * @param {?} factory
         * @param {?} ngModule
         */
        function ComponentFactoryBoundToModule(factory, ngModule) {
            var _this = _super.call(this) || this;
            _this.factory = factory;
            _this.ngModule = ngModule;
            return _this;
        }
        Object.defineProperty(ComponentFactoryBoundToModule.prototype, "selector", {
            /**
             * @return {?}
             */
            get: function () { return this.factory.selector; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentFactoryBoundToModule.prototype, "componentType", {
            /**
             * @return {?}
             */
            get: function () { return this.factory.componentType; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentFactoryBoundToModule.prototype, "ngContentSelectors", {
            /**
             * @return {?}
             */
            get: function () { return this.factory.ngContentSelectors; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentFactoryBoundToModule.prototype, "inputs", {
            /**
             * @return {?}
             */
            get: function () { return this.factory.inputs; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentFactoryBoundToModule.prototype, "outputs", {
            /**
             * @return {?}
             */
            get: function () { return this.factory.outputs; },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} injector
         * @param {?=} projectableNodes
         * @param {?=} rootSelectorOrNode
         * @param {?=} ngModule
         * @return {?}
         */
        ComponentFactoryBoundToModule.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
            return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);
        };
        return ComponentFactoryBoundToModule;
    }(ComponentFactory));
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Represents an instance of an NgModule created via a {\@link NgModuleFactory}.
     *
     * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this
     * NgModule Instance.
     *
     * \@stable
     * @abstract
     */
    var NgModuleRef = (function () {
        function NgModuleRef() {
        }
        /**
         * The injector that contains all of the providers of the NgModule.
         * @abstract
         * @return {?}
         */
        NgModuleRef.prototype.injector = function () { };
        /**
         * The ComponentFactoryResolver to get hold of the ComponentFactories
         * declared in the `entryComponents` property of the module.
         * @abstract
         * @return {?}
         */
        NgModuleRef.prototype.componentFactoryResolver = function () { };
        /**
         * The NgModule instance.
         * @abstract
         * @return {?}
         */
        NgModuleRef.prototype.instance = function () { };
        /**
         * Destroys the module instance and all of the data structures associated with it.
         * @abstract
         * @return {?}
         */
        NgModuleRef.prototype.destroy = function () { };
        /**
         * Allows to register a callback that will be called when the module is destroyed.
         * @abstract
         * @param {?} callback
         * @return {?}
         */
        NgModuleRef.prototype.onDestroy = function (callback) { };
        return NgModuleRef;
    }());
    /**
     * \@experimental
     * @abstract
     */
    var NgModuleFactory = (function () {
        function NgModuleFactory() {
        }
        /**
         * @abstract
         * @return {?}
         */
        NgModuleFactory.prototype.moduleType = function () { };
        /**
         * @abstract
         * @param {?} parentInjector
         * @return {?}
         */
        NgModuleFactory.prototype.create = function (parentInjector) { };
        return NgModuleFactory;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var trace;
    var events;
    /**
     * @return {?}
     */
    function detectWTF() {
        var /** @type {?} */ wtf = ((_global) /** TODO #9100 */)['wtf'];
        if (wtf) {
            trace = wtf['trace'];
            if (trace) {
                events = trace['events'];
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?} signature
     * @param {?=} flags
     * @return {?}
     */
    function createScope$1(signature, flags) {
        if (flags === void 0) { flags = null; }
        return events.createScope(signature, flags);
    }
    /**
     * @template T
     * @param {?} scope
     * @param {?=} returnValue
     * @return {?}
     */
    function leave(scope, returnValue) {
        trace.leaveScope(scope, returnValue);
        return returnValue;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * True if WTF is enabled.
     */
    var wtfEnabled = detectWTF();
    /**
     * @param {?=} arg0
     * @param {?=} arg1
     * @return {?}
     */
    function noopScope(arg0, arg1) {
        return null;
    }
    /**
     * Create trace scope.
     *
     * Scopes must be strictly nested and are analogous to stack frames, but
     * do not have to follow the stack frames. Instead it is recommended that they follow logical
     * nesting. You may want to use
     * [Event
     * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
     * as they are defined in WTF.
     *
     * Used to mark scope entry. The return value is used to leave the scope.
     *
     *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
     *
     *     someMethod() {
     *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
     *        // DO SOME WORK HERE
     *        return wtfLeave(s, 123); // Return value 123
     *     }
     *
     * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
     * negatively impact the performance of your application. For this reason we recommend that
     * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
     * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
     * exception, will produce incorrect trace, but presence of exception signifies logic error which
     * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
     * an exception is expected during normal execution while profiling.
     *
     * \@experimental
     */
    var wtfCreateScope = wtfEnabled ? createScope$1 : function (signature, flags) { return noopScope; };
    /**
     * Used to mark end of Scope.
     *
     * - `scope` to end.
     * - `returnValue` (optional) to be passed to the WTF.
     *
     * Returns the `returnValue for easy chaining.
     * \@experimental
     */
    var wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Use by directives and components to emit custom Events.
     *
     * ### Examples
     *
     * In the following example, `Zippy` alternatively emits `open` and `close` events when its
     * title gets clicked:
     *
     * ```
     * \@Component({
     *   selector: 'zippy',
     *   template: `
     *   <div class="zippy">
     *     <div (click)="toggle()">Toggle</div>
     *     <div [hidden]="!visible">
     *       <ng-content></ng-content>
     *     </div>
     *  </div>`})
     * export class Zippy {
     *   visible: boolean = true;
     *   \@Output() open: EventEmitter<any> = new EventEmitter();
     *   \@Output() close: EventEmitter<any> = new EventEmitter();
     *
     *   toggle() {
     *     this.visible = !this.visible;
     *     if (this.visible) {
     *       this.open.emit(null);
     *     } else {
     *       this.close.emit(null);
     *     }
     *   }
     * }
     * ```
     *
     * The events payload can be accessed by the parameter `$event` on the components output event
     * handler:
     *
     * ```
     * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
     * ```
     *
     * Uses Rx.Observable but provides an adapter to make it work as specified here:
     * https://github.com/jhusain/observable-spec
     *
     * Once a reference implementation of the spec is available, switch to it.
     * \@stable
     */
    var EventEmitter = (function (_super) {
        __extends(EventEmitter, _super);
        /**
         * Creates an instance of {\@link EventEmitter}, which depending on `isAsync`,
         * delivers events synchronously or asynchronously.
         *
         * @param {?=} isAsync By default, events are delivered synchronously (default value: `false`).
         * Set to `true` for asynchronous event delivery.
         */
        function EventEmitter(isAsync) {
            if (isAsync === void 0) { isAsync = false; }
            var _this = _super.call(this) || this;
            _this.__isAsync = isAsync;
            return _this;
        }
        /**
         * @param {?=} value
         * @return {?}
         */
        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
        /**
         * @param {?=} generatorOrNext
         * @param {?=} error
         * @param {?=} complete
         * @return {?}
         */
        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
            var /** @type {?} */ schedulerFn;
            var /** @type {?} */ errorFn = function (err) { return null; };
            var /** @type {?} */ completeFn = function () { return null; };
            if (generatorOrNext && typeof generatorOrNext === 'object') {
                schedulerFn = this.__isAsync ? function (value) {
                    setTimeout(function () { return generatorOrNext.next(value); });
                } : function (value) { generatorOrNext.next(value); };
                if (generatorOrNext.error) {
                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
                        function (err) { generatorOrNext.error(err); };
                }
                if (generatorOrNext.complete) {
                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
                        function () { generatorOrNext.complete(); };
                }
            }
            else {
                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
                    function (value) { generatorOrNext(value); };
                if (error) {
                    errorFn =
                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
                }
                if (complete) {
                    completeFn =
                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
                }
            }
            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
        };
        return EventEmitter;
    }(Subject_2));
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * An injectable service for executing work inside or outside of the Angular zone.
     *
     * The most common use of this service is to optimize performance when starting a work consisting of
     * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
     * Angular. Such tasks can be kicked off via {\@link #runOutsideAngular} and if needed, these tasks
     * can reenter the Angular zone via {\@link #run}.
     *
     * <!-- TODO: add/fix links to:
     *   - docs explaining zones and the use of zones in Angular and change-detection
     *   - link to runOutsideAngular/run (throughout this file!)
     *   -->
     *
     * ### Example
     *
     * ```
     * import {Component, NgZone} from '\@angular/core';
     * import {NgIf} from '\@angular/common';
     *
     * \@Component({
     *   selector: 'ng-zone-demo'.
     *   template: `
     *     <h2>Demo: NgZone</h2>
     *
     *     <p>Progress: {{progress}}%</p>
     *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
     *
     *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
     *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
     *   `,
     * })
     * export class NgZoneDemo {
     *   progress: number = 0;
     *   label: string;
     *
     *   constructor(private _ngZone: NgZone) {}
     *
     *   // Loop inside the Angular zone
     *   // so the UI DOES refresh after each setTimeout cycle
     *   processWithinAngularZone() {
     *     this.label = 'inside';
     *     this.progress = 0;
     *     this._increaseProgress(() => console.log('Inside Done!'));
     *   }
     *
     *   // Loop outside of the Angular zone
     *   // so the UI DOES NOT refresh after each setTimeout cycle
     *   processOutsideOfAngularZone() {
     *     this.label = 'outside';
     *     this.progress = 0;
     *     this._ngZone.runOutsideAngular(() => {
     *       this._increaseProgress(() => {
     *       // reenter the Angular zone and display done
     *       this._ngZone.run(() => {console.log('Outside Done!') });
     *     }}));
     *   }
     *
     *   _increaseProgress(doneCallback: () => void) {
     *     this.progress += 1;
     *     console.log(`Current progress: ${this.progress}%`);
     *
     *     if (this.progress < 100) {
     *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
     *     } else {
     *       doneCallback();
     *     }
     *   }
     * }
     * ```
     *
     * \@experimental
     */
    var NgZone = (function () {
        /**
         * @param {?} __0
         */
        function NgZone(_a) {
            var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;
            this.hasPendingMicrotasks = false;
            this.hasPendingMacrotasks = false;
            /**
             * Whether there are no outstanding microtasks or macrotasks.
             */
            this.isStable = true;
            /**
             * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
             */
            this.onUnstable = new EventEmitter(false);
            /**
             * Notifies when there is no more microtasks enqueue in the current VM Turn.
             * This is a hint for Angular to do change detection, which may enqueue more microtasks.
             * For this reason this event can fire multiple times per VM Turn.
             */
            this.onMicrotaskEmpty = new EventEmitter(false);
            /**
             * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
             * implies we are about to relinquish VM turn.
             * This event gets called just once.
             */
            this.onStable = new EventEmitter(false);
            /**
             * Notifies that an error has been delivered.
             */
            this.onError = new EventEmitter(false);
            if (typeof Zone == 'undefined') {
                throw new Error('Angular requires Zone.js prolyfill.');
            }
            Zone.assertZonePatched();
            var self = this;
            self._nesting = 0;
            self._outer = self._inner = Zone.current;
            if (Zone['wtfZoneSpec']) {
                self._inner = self._inner.fork(Zone['wtfZoneSpec']);
            }
            if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
                self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);
            }
            forkInnerZoneWithAngularBehavior(self);
        }
        /**
         * @return {?}
         */
        NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };
        /**
         * @return {?}
         */
        NgZone.assertInAngularZone = function () {
            if (!NgZone.isInAngularZone()) {
                throw new Error('Expected to be in Angular Zone, but it is not!');
            }
        };
        /**
         * @return {?}
         */
        NgZone.assertNotInAngularZone = function () {
            if (NgZone.isInAngularZone()) {
                throw new Error('Expected to not be in Angular Zone, but it is!');
            }
        };
        /**
         * Executes the `fn` function synchronously within the Angular zone and returns value returned by
         * the function.
         *
         * Running functions via `run` allows you to reenter Angular zone from a task that was executed
         * outside of the Angular zone (typically started via {\@link #runOutsideAngular}).
         *
         * Any future tasks or microtasks scheduled from within this function will continue executing from
         * within the Angular zone.
         *
         * If a synchronous error happens it will be rethrown and not reported via `onError`.
         * @param {?} fn
         * @return {?}
         */
        NgZone.prototype.run = function (fn) { return (((this)))._inner.run(fn); };
        /**
         * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
         * rethrown.
         * @param {?} fn
         * @return {?}
         */
        NgZone.prototype.runGuarded = function (fn) { return (((this)))._inner.runGuarded(fn); };
        /**
         * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
         * the function.
         *
         * Running functions via {\@link #runOutsideAngular} allows you to escape Angular's zone and do
         * work that
         * doesn't trigger Angular change-detection or is subject to Angular's error handling.
         *
         * Any future tasks or microtasks scheduled from within this function will continue executing from
         * outside of the Angular zone.
         *
         * Use {\@link #run} to reenter the Angular zone and do work that updates the application model.
         * @param {?} fn
         * @return {?}
         */
        NgZone.prototype.runOutsideAngular = function (fn) { return (((this)))._outer.run(fn); };
        return NgZone;
    }());
    /**
     * @param {?} zone
     * @return {?}
     */
    function checkStable(zone) {
        if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {
            try {
                zone._nesting++;
                zone.onMicrotaskEmpty.emit(null);
            }
            finally {
                zone._nesting--;
                if (!zone.hasPendingMicrotasks) {
                    try {
                        zone.runOutsideAngular(function () { return zone.onStable.emit(null); });
                    }
                    finally {
                        zone.isStable = true;
                    }
                }
            }
        }
    }
    /**
     * @param {?} zone
     * @return {?}
     */
    function forkInnerZoneWithAngularBehavior(zone) {
        zone._inner = zone._inner.fork({
            name: 'angular',
            properties: /** @type {?} */ ({ 'isAngularZone': true }),
            onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
                try {
                    onEnter(zone);
                    return delegate.invokeTask(target, task, applyThis, applyArgs);
                }
                finally {
                    onLeave(zone);
                }
            },
            onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
                try {
                    onEnter(zone);
                    return delegate.invoke(target, callback, applyThis, applyArgs, source);
                }
                finally {
                    onLeave(zone);
                }
            },
            onHasTask: function (delegate, current, target, hasTaskState) {
                delegate.hasTask(target, hasTaskState);
                if (current === target) {
                    // We are only interested in hasTask events which originate from our zone
                    // (A child hasTask event is not interesting to us)
                    if (hasTaskState.change == 'microTask') {
                        zone.hasPendingMicrotasks = hasTaskState.microTask;
                        checkStable(zone);
                    }
                    else if (hasTaskState.change == 'macroTask') {
                        zone.hasPendingMacrotasks = hasTaskState.macroTask;
                    }
                }
            },
            onHandleError: function (delegate, current, target, error) {
                delegate.handleError(target, error);
                zone.runOutsideAngular(function () { return zone.onError.emit(error); });
                return false;
            }
        });
    }
    /**
     * @param {?} zone
     * @return {?}
     */
    function onEnter(zone) {
        zone._nesting++;
        if (zone.isStable) {
            zone.isStable = false;
            zone.onUnstable.emit(null);
        }
    }
    /**
     * @param {?} zone
     * @return {?}
     */
    function onLeave(zone) {
        zone._nesting--;
        checkStable(zone);
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * The Testability service provides testing hooks that can be accessed from
     * the browser and by services such as Protractor. Each bootstrapped Angular
     * application on the page will have an instance of Testability.
     * \@experimental
     */
    var Testability = (function () {
        /**
         * @param {?} _ngZone
         */
        function Testability(_ngZone) {
            this._ngZone = _ngZone;
            /**
             * \@internal
             */
            this._pendingCount = 0;
            /**
             * \@internal
             */
            this._isZoneStable = true;
            /**
             * Whether any work was done since the last 'whenStable' callback. This is
             * useful to detect if this could have potentially destabilized another
             * component while it is stabilizing.
             * \@internal
             */
            this._didWork = false;
            /**
             * \@internal
             */
            this._callbacks = [];
            this._watchAngularEvents();
        }
        /**
         * \@internal
         * @return {?}
         */
        Testability.prototype._watchAngularEvents = function () {
            var _this = this;
            this._ngZone.onUnstable.subscribe({
                next: function () {
                    _this._didWork = true;
                    _this._isZoneStable = false;
                }
            });
            this._ngZone.runOutsideAngular(function () {
                _this._ngZone.onStable.subscribe({
                    next: function () {
                        NgZone.assertNotInAngularZone();
                        scheduleMicroTask(function () {
                            _this._isZoneStable = true;
                            _this._runCallbacksIfReady();
                        });
                    }
                });
            });
        };
        /**
         * @return {?}
         */
        Testability.prototype.increasePendingRequestCount = function () {
            this._pendingCount += 1;
            this._didWork = true;
            return this._pendingCount;
        };
        /**
         * @return {?}
         */
        Testability.prototype.decreasePendingRequestCount = function () {
            this._pendingCount -= 1;
            if (this._pendingCount < 0) {
                throw new Error('pending async requests below zero');
            }
            this._runCallbacksIfReady();
            return this._pendingCount;
        };
        /**
         * @return {?}
         */
        Testability.prototype.isStable = function () {
            return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
        };
        /**
         * \@internal
         * @return {?}
         */
        Testability.prototype._runCallbacksIfReady = function () {
            var _this = this;
            if (this.isStable()) {
                // Schedules the call backs in a new frame so that it is always async.
                scheduleMicroTask(function () {
                    while (_this._callbacks.length !== 0) {
                        (((_this._callbacks.pop())))(_this._didWork);
                    }
                    _this._didWork = false;
                });
            }
            else {
                // Not Ready
                this._didWork = true;
            }
        };
        /**
         * @param {?} callback
         * @return {?}
         */
        Testability.prototype.whenStable = function (callback) {
            this._callbacks.push(callback);
            this._runCallbacksIfReady();
        };
        /**
         * @return {?}
         */
        Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };
        /**
         * @deprecated use findProviders
         * @param {?} using
         * @param {?} provider
         * @param {?} exactMatch
         * @return {?}
         */
        Testability.prototype.findBindings = function (using, provider, exactMatch) {
            // TODO(juliemr): implement.
            return [];
        };
        /**
         * @param {?} using
         * @param {?} provider
         * @param {?} exactMatch
         * @return {?}
         */
        Testability.prototype.findProviders = function (using, provider, exactMatch) {
            // TODO(juliemr): implement.
            return [];
        };
        return Testability;
    }());
    Testability.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    Testability.ctorParameters = function () { return [
        { type: NgZone, },
    ]; };
    /**
     * A global registry of {\@link Testability} instances for specific elements.
     * \@experimental
     */
    var TestabilityRegistry = (function () {
        function TestabilityRegistry() {
            /**
             * \@internal
             */
            this._applications = new Map();
            _testabilityGetter.addToWindow(this);
        }
        /**
         * @param {?} token
         * @param {?} testability
         * @return {?}
         */
        TestabilityRegistry.prototype.registerApplication = function (token, testability) {
            this._applications.set(token, testability);
        };
        /**
         * @param {?} elem
         * @return {?}
         */
        TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem) || null; };
        /**
         * @return {?}
         */
        TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };
        /**
         * @return {?}
         */
        TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };
        /**
         * @param {?} elem
         * @param {?=} findInAncestors
         * @return {?}
         */
        TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
            if (findInAncestors === void 0) { findInAncestors = true; }
            return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
        };
        return TestabilityRegistry;
    }());
    TestabilityRegistry.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    TestabilityRegistry.ctorParameters = function () { return []; };
    var _NoopGetTestability = (function () {
        function _NoopGetTestability() {
        }
        /**
         * @param {?} registry
         * @return {?}
         */
        _NoopGetTestability.prototype.addToWindow = function (registry) { };
        /**
         * @param {?} registry
         * @param {?} elem
         * @param {?} findInAncestors
         * @return {?}
         */
        _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
            return null;
        };
        return _NoopGetTestability;
    }());
    /**
     * Set the {\@link GetTestability} implementation used by the Angular testing framework.
     * \@experimental
     * @param {?} getter
     * @return {?}
     */
    function setTestabilityGetter(getter) {
        _testabilityGetter = getter;
    }
    var _testabilityGetter = new _NoopGetTestability();
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var _devMode = true;
    var _runModeLocked = false;
    var _platform;
    var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');
    /**
     * Disable Angular's development mode, which turns off assertions and other
     * checks within the framework.
     *
     * One important assertion this disables verifies that a change detection pass
     * does not result in additional changes to any bindings (also known as
     * unidirectional data flow).
     *
     * \@stable
     * @return {?}
     */
    function enableProdMode() {
        if (_runModeLocked) {
            throw new Error('Cannot enable prod mode after platform setup.');
        }
        _devMode = false;
    }
    /**
     * Returns whether Angular is in development mode. After called once,
     * the value is locked and won't change any more.
     *
     * By default, this is true, unless a user calls `enableProdMode` before calling this.
     *
     * \@experimental APIs related to application bootstrap are currently under review.
     * @return {?}
     */
    function isDevMode() {
        _runModeLocked = true;
        return _devMode;
    }
    /**
     * A token for third-party components that can register themselves with NgProbe.
     *
     * \@experimental
     */
    var NgProbeToken = (function () {
        /**
         * @param {?} name
         * @param {?} token
         */
        function NgProbeToken(name, token) {
            this.name = name;
            this.token = token;
        }
        return NgProbeToken;
    }());
    /**
     * Creates a platform.
     * Platforms have to be eagerly created via this function.
     *
     * \@experimental APIs related to application bootstrap are currently under review.
     * @param {?} injector
     * @return {?}
     */
    function createPlatform(injector) {
        if (_platform && !_platform.destroyed &&
            !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
            throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
        }
        _platform = injector.get(PlatformRef);
        var /** @type {?} */ inits = injector.get(PLATFORM_INITIALIZER, null);
        if (inits)
            inits.forEach(function (init) { return init(); });
        return _platform;
    }
    /**
     * Creates a factory for a platform
     *
     * \@experimental APIs related to application bootstrap are currently under review.
     * @param {?} parentPlatformFactory
     * @param {?} name
     * @param {?=} providers
     * @return {?}
     */
    function createPlatformFactory(parentPlatformFactory, name, providers) {
        if (providers === void 0) { providers = []; }
        var /** @type {?} */ marker = new InjectionToken("Platform: " + name);
        return function (extraProviders) {
            if (extraProviders === void 0) { extraProviders = []; }
            var /** @type {?} */ platform = getPlatform();
            if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
                if (parentPlatformFactory) {
                    parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
                }
                else {
                    createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));
                }
            }
            return assertPlatform(marker);
        };
    }
    /**
     * Checks that there currently is a platform which contains the given token as a provider.
     *
     * \@experimental APIs related to application bootstrap are currently under review.
     * @param {?} requiredToken
     * @return {?}
     */
    function assertPlatform(requiredToken) {
        var /** @type {?} */ platform = getPlatform();
        if (!platform) {
            throw new Error('No platform exists!');
        }
        if (!platform.injector.get(requiredToken, null)) {
            throw new Error('A platform with a different configuration has been created. Please destroy it first.');
        }
        return platform;
    }
    /**
     * Returns the current platform.
     *
     * \@experimental APIs related to application bootstrap are currently under review.
     * @return {?}
     */
    function getPlatform() {
        return _platform && !_platform.destroyed ? _platform : null;
    }
    /**
     * The Angular platform is the entry point for Angular on a web page. Each page
     * has exactly one platform, and services (such as reflection) which are common
     * to every Angular application running on the page are bound in its scope.
     *
     * A page's platform is initialized implicitly when a platform is created via a platform factory
     * (e.g. {\@link platformBrowser}), or explicitly by calling the {\@link createPlatform} function.
     *
     * \@stable
     * @abstract
     */
    var PlatformRef = (function () {
        function PlatformRef() {
        }
        /**
         * Creates an instance of an `\@NgModule` for the given platform
         * for offline compilation.
         *
         * ## Simple Example
         *
         * ```typescript
         * my_module.ts:
         *
         * \@NgModule({
         *   imports: [BrowserModule]
         * })
         * class MyModule {}
         *
         * main.ts:
         * import {MyModuleNgFactory} from './my_module.ngfactory';
         * import {platformBrowser} from '\@angular/platform-browser';
         *
         * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
         * ```
         *
         * \@experimental APIs related to application bootstrap are currently under review.
         * @abstract
         * @template M
         * @param {?} moduleFactory
         * @return {?}
         */
        PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) { };
        /**
         * Creates an instance of an `\@NgModule` for a given platform using the given runtime compiler.
         *
         * ## Simple Example
         *
         * ```typescript
         * \@NgModule({
         *   imports: [BrowserModule]
         * })
         * class MyModule {}
         *
         * let moduleRef = platformBrowser().bootstrapModule(MyModule);
         * ```
         * \@stable
         * @abstract
         * @template M
         * @param {?} moduleType
         * @param {?=} compilerOptions
         * @return {?}
         */
        PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) { };
        /**
         * Register a listener to be called when the platform is disposed.
         * @abstract
         * @param {?} callback
         * @return {?}
         */
        PlatformRef.prototype.onDestroy = function (callback) { };
        /**
         * Retrieve the platform {\@link Injector}, which is the parent injector for
         * every Angular application on the page and provides singleton providers.
         * @abstract
         * @return {?}
         */
        PlatformRef.prototype.injector = function () { };
        /**
         * Destroy the Angular platform and all Angular applications on the page.
         * @abstract
         * @return {?}
         */
        PlatformRef.prototype.destroy = function () { };
        /**
         * @abstract
         * @return {?}
         */
        PlatformRef.prototype.destroyed = function () { };
        return PlatformRef;
    }());
    /**
     * @param {?} errorHandler
     * @param {?} ngZone
     * @param {?} callback
     * @return {?}
     */
    function _callAndReportToErrorHandler(errorHandler, ngZone, callback) {
        try {
            var /** @type {?} */ result = callback();
            if (isPromise$1(result)) {
                return result.catch(function (e) {
                    ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });
                    // rethrow as the exception handler might not do it
                    throw e;
                });
            }
            return result;
        }
        catch (e) {
            ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });
            // rethrow as the exception handler might not do it
            throw e;
        }
    }
    /**
     * workaround https://github.com/angular/tsickle/issues/350
     * @suppress {checkTypes}
     */
    var PlatformRef_ = (function (_super) {
        __extends(PlatformRef_, _super);
        /**
         * @param {?} _injector
         */
        function PlatformRef_(_injector) {
            var _this = _super.call(this) || this;
            _this._injector = _injector;
            _this._modules = [];
            _this._destroyListeners = [];
            _this._destroyed = false;
            return _this;
        }
        /**
         * @param {?} callback
         * @return {?}
         */
        PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
        Object.defineProperty(PlatformRef_.prototype, "injector", {
            /**
             * @return {?}
             */
            get: function () { return this._injector; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlatformRef_.prototype, "destroyed", {
            /**
             * @return {?}
             */
            get: function () { return this._destroyed; },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        PlatformRef_.prototype.destroy = function () {
            if (this._destroyed) {
                throw new Error('The platform has already been destroyed!');
            }
            this._modules.slice().forEach(function (module) { return module.destroy(); });
            this._destroyListeners.forEach(function (listener) { return listener(); });
            this._destroyed = true;
        };
        /**
         * @template M
         * @param {?} moduleFactory
         * @return {?}
         */
        PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {
            return this._bootstrapModuleFactoryWithZone(moduleFactory);
        };
        /**
         * @template M
         * @param {?} moduleFactory
         * @param {?=} ngZone
         * @return {?}
         */
        PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {
            var _this = this;
            // Note: We need to create the NgZone _before_ we instantiate the module,
            // as instantiating the module creates some providers eagerly.
            // So we create a mini parent injector that just contains the new NgZone and
            // pass that as parent to the NgModuleFactory.
            if (!ngZone)
                ngZone = new NgZone({ enableLongStackTrace: isDevMode() });
            // Attention: Don't use ApplicationRef.run here,
            // as we want to be sure that all possible constructor calls are inside `ngZone.run`!
            return ngZone.run(function () {
                var /** @type {?} */ ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector);
                var /** @type {?} */ moduleRef = (moduleFactory.create(ngZoneInjector));
                var /** @type {?} */ exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
                if (!exceptionHandler) {
                    throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
                }
                moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); }); /** @type {?} */
                ((ngZone)).runOutsideAngular(function () { return ((ngZone)).onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } }); });
                return _callAndReportToErrorHandler(exceptionHandler, /** @type {?} */ ((ngZone)), function () {
                    var /** @type {?} */ initStatus = moduleRef.injector.get(ApplicationInitStatus);
                    initStatus.runInitializers();
                    return initStatus.donePromise.then(function () {
                        _this._moduleDoBootstrap(moduleRef);
                        return moduleRef;
                    });
                });
            });
        };
        /**
         * @template M
         * @param {?} moduleType
         * @param {?=} compilerOptions
         * @return {?}
         */
        PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {
            if (compilerOptions === void 0) { compilerOptions = []; }
            return this._bootstrapModuleWithZone(moduleType, compilerOptions);
        };
        /**
         * @template M
         * @param {?} moduleType
         * @param {?=} compilerOptions
         * @param {?=} ngZone
         * @return {?}
         */
        PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone) {
            var _this = this;
            if (compilerOptions === void 0) { compilerOptions = []; }
            var /** @type {?} */ compilerFactory = this.injector.get(CompilerFactory);
            var /** @type {?} */ compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);
            return compiler.compileModuleAsync(moduleType)
                .then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone); });
        };
        /**
         * @param {?} moduleRef
         * @return {?}
         */
        PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {
            var /** @type {?} */ appRef = (moduleRef.injector.get(ApplicationRef));
            if (moduleRef._bootstrapComponents.length > 0) {
                moduleRef._bootstrapComponents.forEach(function (f) { return appRef.bootstrap(f); });
            }
            else if (moduleRef.instance.ngDoBootstrap) {
                moduleRef.instance.ngDoBootstrap(appRef);
            }
            else {
                throw new Error("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. " +
                    "Please define one of these.");
            }
            this._modules.push(moduleRef);
        };
        return PlatformRef_;
    }(PlatformRef));
    PlatformRef_.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    PlatformRef_.ctorParameters = function () { return [
        { type: Injector, },
    ]; };
    /**
     * A reference to an Angular application running on a page.
     *
     * \@stable
     * @abstract
     */
    var ApplicationRef = (function () {
        function ApplicationRef() {
        }
        /**
         * Bootstrap a new component at the root level of the application.
         *
         * ### Bootstrap process
         *
         * When bootstrapping a new root component into an application, Angular mounts the
         * specified application component onto DOM elements identified by the [componentType]'s
         * selector and kicks off automatic change detection to finish initializing the component.
         *
         * Optionally, a component can be mounted onto a DOM element that does not match the
         * [componentType]'s selector.
         *
         * ### Example
         * {\@example core/ts/platform/platform.ts region='longform'}
         * @abstract
         * @template C
         * @param {?} componentFactory
         * @param {?=} rootSelectorOrNode
         * @return {?}
         */
        ApplicationRef.prototype.bootstrap = function (componentFactory, rootSelectorOrNode) { };
        /**
         * Invoke this method to explicitly process change detection and its side-effects.
         *
         * In development mode, `tick()` also performs a second change detection cycle to ensure that no
         * further changes are detected. If additional changes are picked up during this second cycle,
         * bindings in the app have side-effects that cannot be resolved in a single change detection
         * pass.
         * In this case, Angular throws an error, since an Angular application can only have one change
         * detection pass during which all change detection must complete.
         * @abstract
         * @return {?}
         */
        ApplicationRef.prototype.tick = function () { };
        /**
         * Get a list of component types registered to this application.
         * This list is populated even before the component is created.
         * @abstract
         * @return {?}
         */
        ApplicationRef.prototype.componentTypes = function () { };
        /**
         * Get a list of components registered to this application.
         * @abstract
         * @return {?}
         */
        ApplicationRef.prototype.components = function () { };
        /**
         * Attaches a view so that it will be dirty checked.
         * The view will be automatically detached when it is destroyed.
         * This will throw if the view is already attached to a ViewContainer.
         * @abstract
         * @param {?} view
         * @return {?}
         */
        ApplicationRef.prototype.attachView = function (view) { };
        /**
         * Detaches a view from dirty checking again.
         * @abstract
         * @param {?} view
         * @return {?}
         */
        ApplicationRef.prototype.detachView = function (view) { };
        /**
         * Returns the number of attached views.
         * @abstract
         * @return {?}
         */
        ApplicationRef.prototype.viewCount = function () { };
        /**
         * Returns an Observable that indicates when the application is stable or unstable.
         * @abstract
         * @return {?}
         */
        ApplicationRef.prototype.isStable = function () { };
        return ApplicationRef;
    }());
    /**
     * workaround https://github.com/angular/tsickle/issues/350
     * @suppress {checkTypes}
     */
    var ApplicationRef_ = (function (_super) {
        __extends(ApplicationRef_, _super);
        /**
         * @param {?} _zone
         * @param {?} _console
         * @param {?} _injector
         * @param {?} _exceptionHandler
         * @param {?} _componentFactoryResolver
         * @param {?} _initStatus
         */
        function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {
            var _this = _super.call(this) || this;
            _this._zone = _zone;
            _this._console = _console;
            _this._injector = _injector;
            _this._exceptionHandler = _exceptionHandler;
            _this._componentFactoryResolver = _componentFactoryResolver;
            _this._initStatus = _initStatus;
            _this._bootstrapListeners = [];
            _this._rootComponents = [];
            _this._rootComponentTypes = [];
            _this._views = [];
            _this._runningTick = false;
            _this._enforceNoNewChanges = false;
            _this._stable = true;
            _this._enforceNoNewChanges = isDevMode();
            _this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });
            var isCurrentlyStable = new Observable_2(function (observer) {
                _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&
                    !_this._zone.hasPendingMicrotasks;
                _this._zone.runOutsideAngular(function () {
                    observer.next(_this._stable);
                    observer.complete();
                });
            });
            var isStable = new Observable_2(function (observer) {
                // Create the subscription to onStable outside the Angular Zone so that
                // the callback is run outside the Angular Zone.
                var stableSub;
                _this._zone.runOutsideAngular(function () {
                    stableSub = _this._zone.onStable.subscribe(function () {
                        NgZone.assertNotInAngularZone();
                        // Check whether there are no pending macro/micro tasks in the next tick
                        // to allow for NgZone to update the state.
                        scheduleMicroTask(function () {
                            if (!_this._stable && !_this._zone.hasPendingMacrotasks &&
                                !_this._zone.hasPendingMicrotasks) {
                                _this._stable = true;
                                observer.next(true);
                            }
                        });
                    });
                });
                var unstableSub = _this._zone.onUnstable.subscribe(function () {
                    NgZone.assertInAngularZone();
                    if (_this._stable) {
                        _this._stable = false;
                        _this._zone.runOutsideAngular(function () { observer.next(false); });
                    }
                });
                return function () {
                    stableSub.unsubscribe();
                    unstableSub.unsubscribe();
                };
            });
            _this._isStable = merge_2(isCurrentlyStable, share_3.call(isStable));
            return _this;
        }
        /**
         * @param {?} viewRef
         * @return {?}
         */
        ApplicationRef_.prototype.attachView = function (viewRef) {
            var /** @type {?} */ view = ((viewRef));
            this._views.push(view);
            view.attachToAppRef(this);
        };
        /**
         * @param {?} viewRef
         * @return {?}
         */
        ApplicationRef_.prototype.detachView = function (viewRef) {
            var /** @type {?} */ view = ((viewRef));
            remove(this._views, view);
            view.detachFromAppRef();
        };
        /**
         * @template C
         * @param {?} componentOrFactory
         * @param {?=} rootSelectorOrNode
         * @return {?}
         */
        ApplicationRef_.prototype.bootstrap = function (componentOrFactory, rootSelectorOrNode) {
            var _this = this;
            if (!this._initStatus.done) {
                throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
            }
            var /** @type {?} */ componentFactory;
            if (componentOrFactory instanceof ComponentFactory) {
                componentFactory = componentOrFactory;
            }
            else {
                componentFactory = ((this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));
            }
            this._rootComponentTypes.push(componentFactory.componentType);
            // Create a factory associated with the current module if it's not bound to some other
            var /** @type {?} */ ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?
                null :
                this._injector.get(NgModuleRef);
            var /** @type {?} */ selectorOrNode = rootSelectorOrNode || componentFactory.selector;
            var /** @type {?} */ compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);
            compRef.onDestroy(function () { _this._unloadComponent(compRef); });
            var /** @type {?} */ testability = compRef.injector.get(Testability, null);
            if (testability) {
                compRef.injector.get(TestabilityRegistry)
                    .registerApplication(compRef.location.nativeElement, testability);
            }
            this._loadComponent(compRef);
            if (isDevMode()) {
                this._console.log("Angular is running in the development mode. Call enableProdMode() to enable the production mode.");
            }
            return compRef;
        };
        /**
         * @param {?} componentRef
         * @return {?}
         */
        ApplicationRef_.prototype._loadComponent = function (componentRef) {
            this.attachView(componentRef.hostView);
            this.tick();
            this._rootComponents.push(componentRef);
            // Get the listeners lazily to prevent DI cycles.
            var /** @type {?} */ listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
            listeners.forEach(function (listener) { return listener(componentRef); });
        };
        /**
         * @param {?} componentRef
         * @return {?}
         */
        ApplicationRef_.prototype._unloadComponent = function (componentRef) {
            this.detachView(componentRef.hostView);
            remove(this._rootComponents, componentRef);
        };
        /**
         * @return {?}
         */
        ApplicationRef_.prototype.tick = function () {
            var _this = this;
            if (this._runningTick) {
                throw new Error('ApplicationRef.tick is called recursively');
            }
            var /** @type {?} */ scope = ApplicationRef_._tickScope();
            try {
                this._runningTick = true;
                this._views.forEach(function (view) { return view.detectChanges(); });
                if (this._enforceNoNewChanges) {
                    this._views.forEach(function (view) { return view.checkNoChanges(); });
                }
            }
            catch (e) {
                // Attention: Don't rethrow as it could cancel subscriptions to Observables!
                this._zone.runOutsideAngular(function () { return _this._exceptionHandler.handleError(e); });
            }
            finally {
                this._runningTick = false;
                wtfLeave(scope);
            }
        };
        /**
         * @return {?}
         */
        ApplicationRef_.prototype.ngOnDestroy = function () {
            // TODO(alxhub): Dispose of the NgZone.
            this._views.slice().forEach(function (view) { return view.destroy(); });
        };
        Object.defineProperty(ApplicationRef_.prototype, "viewCount", {
            /**
             * @return {?}
             */
            get: function () { return this._views.length; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
            /**
             * @return {?}
             */
            get: function () { return this._rootComponentTypes; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationRef_.prototype, "components", {
            /**
             * @return {?}
             */
            get: function () { return this._rootComponents; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationRef_.prototype, "isStable", {
            /**
             * @return {?}
             */
            get: function () { return this._isStable; },
            enumerable: true,
            configurable: true
        });
        return ApplicationRef_;
    }(ApplicationRef));
    /**
     * \@internal
     */
    ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
    ApplicationRef_.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    ApplicationRef_.ctorParameters = function () { return [
        { type: NgZone, },
        { type: Console, },
        { type: Injector, },
        { type: ErrorHandler, },
        { type: ComponentFactoryResolver, },
        { type: ApplicationInitStatus, },
    ]; };
    /**
     * @template T
     * @param {?} list
     * @param {?} el
     * @return {?}
     */
    function remove(list, el) {
        var /** @type {?} */ index = list.indexOf(el);
        if (index > -1) {
            list.splice(index, 1);
        }
    }
    /**
     * @deprecated Use the `Renderer2` instead.
     * @abstract
     */
    var Renderer = (function () {
        function Renderer() {
        }
        /**
         * @abstract
         * @param {?} selectorOrNode
         * @param {?=} debugInfo
         * @return {?}
         */
        Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };
        /**
         * @abstract
         * @param {?} parentElement
         * @param {?} name
         * @param {?=} debugInfo
         * @return {?}
         */
        Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };
        /**
         * @abstract
         * @param {?} hostElement
         * @return {?}
         */
        Renderer.prototype.createViewRoot = function (hostElement) { };
        /**
         * @abstract
         * @param {?} parentElement
         * @param {?=} debugInfo
         * @return {?}
         */
        Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };
        /**
         * @abstract
         * @param {?} parentElement
         * @param {?} value
         * @param {?=} debugInfo
         * @return {?}
         */
        Renderer.prototype.createText = function (parentElement, value, debugInfo) { };
        /**
         * @abstract
         * @param {?} parentElement
         * @param {?} nodes
         * @return {?}
         */
        Renderer.prototype.projectNodes = function (parentElement, nodes) { };
        /**
         * @abstract
         * @param {?} node
         * @param {?} viewRootNodes
         * @return {?}
         */
        Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };
        /**
         * @abstract
         * @param {?} viewRootNodes
         * @return {?}
         */
        Renderer.prototype.detachView = function (viewRootNodes) { };
        /**
         * @abstract
         * @param {?} hostElement
         * @param {?} viewAllNodes
         * @return {?}
         */
        Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };
        /**
         * @abstract
         * @param {?} renderElement
         * @param {?} name
         * @param {?} callback
         * @return {?}
         */
        Renderer.prototype.listen = function (renderElement, name, callback) { };
        /**
         * @abstract
         * @param {?} target
         * @param {?} name
         * @param {?} callback
         * @return {?}
         */
        Renderer.prototype.listenGlobal = function (target, name, callback) { };
        /**
         * @abstract
         * @param {?} renderElement
         * @param {?} propertyName
         * @param {?} propertyValue
         * @return {?}
         */
        Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };
        /**
         * @abstract
         * @param {?} renderElement
         * @param {?} attributeName
         * @param {?} attributeValue
         * @return {?}
         */
        Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };
        /**
         * Used only in debug mode to serialize property changes to dom nodes as attributes.
         * @abstract
         * @param {?} renderElement
         * @param {?} propertyName
         * @param {?} propertyValue
         * @return {?}
         */
        Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };
        /**
         * @abstract
         * @param {?} renderElement
         * @param {?} className
         * @param {?} isAdd
         * @return {?}
         */
        Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };
        /**
         * @abstract
         * @param {?} renderElement
         * @param {?} styleName
         * @param {?} styleValue
         * @return {?}
         */
        Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };
        /**
         * @abstract
         * @param {?} renderElement
         * @param {?} methodName
         * @param {?=} args
         * @return {?}
         */
        Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };
        /**
         * @abstract
         * @param {?} renderNode
         * @param {?} text
         * @return {?}
         */
        Renderer.prototype.setText = function (renderNode, text) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} startingStyles
         * @param {?} keyframes
         * @param {?} duration
         * @param {?} delay
         * @param {?} easing
         * @param {?=} previousPlayers
         * @return {?}
         */
        Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };
        return Renderer;
    }());
    var Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');
    /**
     * \@experimental
     * @abstract
     */
    var RendererFactory2 = (function () {
        function RendererFactory2() {
        }
        /**
         * @abstract
         * @param {?} hostElement
         * @param {?} type
         * @return {?}
         */
        RendererFactory2.prototype.createRenderer = function (hostElement, type) { };
        /**
         * @abstract
         * @return {?}
         */
        RendererFactory2.prototype.begin = function () { };
        /**
         * @abstract
         * @return {?}
         */
        RendererFactory2.prototype.end = function () { };
        /**
         * @abstract
         * @return {?}
         */
        RendererFactory2.prototype.whenRenderingDone = function () { };
        return RendererFactory2;
    }());
    var RendererStyleFlags2 = {};
    RendererStyleFlags2.Important = 1;
    RendererStyleFlags2.DashCase = 2;
    RendererStyleFlags2[RendererStyleFlags2.Important] = "Important";
    RendererStyleFlags2[RendererStyleFlags2.DashCase] = "DashCase";
    /**
     * \@experimental
     * @abstract
     */
    var Renderer2 = (function () {
        function Renderer2() {
        }
        /**
         * This field can be used to store arbitrary data on this renderer instance.
         * This is useful for renderers that delegate to other renderers.
         * @abstract
         * @return {?}
         */
        Renderer2.prototype.data = function () { };
        /**
         * @abstract
         * @return {?}
         */
        Renderer2.prototype.destroy = function () { };
        /**
         * @abstract
         * @param {?} name
         * @param {?=} namespace
         * @return {?}
         */
        Renderer2.prototype.createElement = function (name, namespace) { };
        /**
         * @abstract
         * @param {?} value
         * @return {?}
         */
        Renderer2.prototype.createComment = function (value) { };
        /**
         * @abstract
         * @param {?} value
         * @return {?}
         */
        Renderer2.prototype.createText = function (value) { };
        /**
         * @abstract
         * @param {?} parent
         * @param {?} newChild
         * @return {?}
         */
        Renderer2.prototype.appendChild = function (parent, newChild) { };
        /**
         * @abstract
         * @param {?} parent
         * @param {?} newChild
         * @param {?} refChild
         * @return {?}
         */
        Renderer2.prototype.insertBefore = function (parent, newChild, refChild) { };
        /**
         * @abstract
         * @param {?} parent
         * @param {?} oldChild
         * @return {?}
         */
        Renderer2.prototype.removeChild = function (parent, oldChild) { };
        /**
         * @abstract
         * @param {?} selectorOrNode
         * @return {?}
         */
        Renderer2.prototype.selectRootElement = function (selectorOrNode) { };
        /**
         * Attention: On WebWorkers, this will always return a value,
         * as we are asking for a result synchronously. I.e.
         * the caller can't rely on checking whether this is null or not.
         * @abstract
         * @param {?} node
         * @return {?}
         */
        Renderer2.prototype.parentNode = function (node) { };
        /**
         * Attention: On WebWorkers, this will always return a value,
         * as we are asking for a result synchronously. I.e.
         * the caller can't rely on checking whether this is null or not.
         * @abstract
         * @param {?} node
         * @return {?}
         */
        Renderer2.prototype.nextSibling = function (node) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} name
         * @param {?} value
         * @param {?=} namespace
         * @return {?}
         */
        Renderer2.prototype.setAttribute = function (el, name, value, namespace) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} name
         * @param {?=} namespace
         * @return {?}
         */
        Renderer2.prototype.removeAttribute = function (el, name, namespace) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} name
         * @return {?}
         */
        Renderer2.prototype.addClass = function (el, name) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} name
         * @return {?}
         */
        Renderer2.prototype.removeClass = function (el, name) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} style
         * @param {?} value
         * @param {?=} flags
         * @return {?}
         */
        Renderer2.prototype.setStyle = function (el, style, value, flags) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} style
         * @param {?=} flags
         * @return {?}
         */
        Renderer2.prototype.removeStyle = function (el, style, flags) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        Renderer2.prototype.setProperty = function (el, name, value) { };
        /**
         * @abstract
         * @param {?} node
         * @param {?} value
         * @return {?}
         */
        Renderer2.prototype.setValue = function (node, value) { };
        /**
         * @abstract
         * @param {?} target
         * @param {?} eventName
         * @param {?} callback
         * @return {?}
         */
        Renderer2.prototype.listen = function (target, eventName, callback) { };
        return Renderer2;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // Public API for render
    var ElementRef = (function () {
        /**
         * @param {?} nativeElement
         */
        function ElementRef(nativeElement) {
            this.nativeElement = nativeElement;
        }
        return ElementRef;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Used to load ng module factories.
     * \@stable
     * @abstract
     */
    var NgModuleFactoryLoader = (function () {
        function NgModuleFactoryLoader() {
        }
        /**
         * @abstract
         * @param {?} path
         * @return {?}
         */
        NgModuleFactoryLoader.prototype.load = function (path) { };
        return NgModuleFactoryLoader;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * An unmodifiable list of items that Angular keeps up to date when the state
     * of the application changes.
     *
     * The type of object that {\@link ViewChildren}, {\@link ContentChildren}, and {\@link QueryList}
     * provide.
     *
     * Implements an iterable interface, therefore it can be used in both ES6
     * javascript `for (var i of items)` loops as well as in Angular templates with
     * `*ngFor="let i of myList"`.
     *
     * Changes can be observed by subscribing to the changes `Observable`.
     *
     * NOTE: In the future this class will implement an `Observable` interface.
     *
     * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
     * ```typescript
     * \@Component({...})
     * class Container {
     *   \@ViewChildren(Item) items:QueryList<Item>;
     * }
     * ```
     * \@stable
     */
    var QueryList = (function () {
        function QueryList() {
            this._dirty = true;
            this._results = [];
            this._emitter = new EventEmitter();
        }
        Object.defineProperty(QueryList.prototype, "changes", {
            /**
             * @return {?}
             */
            get: function () { return this._emitter; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QueryList.prototype, "length", {
            /**
             * @return {?}
             */
            get: function () { return this._results.length; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QueryList.prototype, "first", {
            /**
             * @return {?}
             */
            get: function () { return this._results[0]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QueryList.prototype, "last", {
            /**
             * @return {?}
             */
            get: function () { return this._results[this.length - 1]; },
            enumerable: true,
            configurable: true
        });
        /**
         * See
         * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
         * @template U
         * @param {?} fn
         * @return {?}
         */
        QueryList.prototype.map = function (fn) { return this._results.map(fn); };
        /**
         * See
         * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
         * @param {?} fn
         * @return {?}
         */
        QueryList.prototype.filter = function (fn) {
            return this._results.filter(fn);
        };
        /**
         * See
         * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
         * @param {?} fn
         * @return {?}
         */
        QueryList.prototype.find = function (fn) {
            return this._results.find(fn);
        };
        /**
         * See
         * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
         * @template U
         * @param {?} fn
         * @param {?} init
         * @return {?}
         */
        QueryList.prototype.reduce = function (fn, init) {
            return this._results.reduce(fn, init);
        };
        /**
         * See
         * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
         * @param {?} fn
         * @return {?}
         */
        QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };
        /**
         * See
         * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
         * @param {?} fn
         * @return {?}
         */
        QueryList.prototype.some = function (fn) {
            return this._results.some(fn);
        };
        /**
         * @return {?}
         */
        QueryList.prototype.toArray = function () { return this._results.slice(); };
        /**
         * @return {?}
         */
        QueryList.prototype[getSymbolIterator()] = function () { return ((this._results))[getSymbolIterator()](); };
        /**
         * @return {?}
         */
        QueryList.prototype.toString = function () { return this._results.toString(); };
        /**
         * @param {?} res
         * @return {?}
         */
        QueryList.prototype.reset = function (res) {
            this._results = flatten(res);
            this._dirty = false;
        };
        /**
         * @return {?}
         */
        QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };
        /**
         * internal
         * @return {?}
         */
        QueryList.prototype.setDirty = function () { this._dirty = true; };
        Object.defineProperty(QueryList.prototype, "dirty", {
            /**
             * internal
             * @return {?}
             */
            get: function () { return this._dirty; },
            enumerable: true,
            configurable: true
        });
        /**
         * internal
         * @return {?}
         */
        QueryList.prototype.destroy = function () {
            this._emitter.complete();
            this._emitter.unsubscribe();
        };
        return QueryList;
    }());
    /**
     * @template T
     * @param {?} list
     * @return {?}
     */
    function flatten(list) {
        return list.reduce(function (flat, item) {
            var /** @type {?} */ flatItem = Array.isArray(item) ? flatten(item) : item;
            return ((flat)).concat(flatItem);
        }, []);
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var _SEPARATOR = '#';
    var FACTORY_CLASS_SUFFIX = 'NgFactory';
    /**
     * Configuration for SystemJsNgModuleLoader.
     * token.
     *
     * \@experimental
     * @abstract
     */
    var SystemJsNgModuleLoaderConfig = (function () {
        function SystemJsNgModuleLoaderConfig() {
        }
        return SystemJsNgModuleLoaderConfig;
    }());
    var DEFAULT_CONFIG = {
        factoryPathPrefix: '',
        factoryPathSuffix: '.ngfactory',
    };
    /**
     * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory
     * \@experimental
     */
    var SystemJsNgModuleLoader = (function () {
        /**
         * @param {?} _compiler
         * @param {?=} config
         */
        function SystemJsNgModuleLoader(_compiler, config) {
            this._compiler = _compiler;
            this._config = config || DEFAULT_CONFIG;
        }
        /**
         * @param {?} path
         * @return {?}
         */
        SystemJsNgModuleLoader.prototype.load = function (path) {
            var /** @type {?} */ offlineMode = this._compiler instanceof Compiler;
            return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
        };
        /**
         * @param {?} path
         * @return {?}
         */
        SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {
            var _this = this;
            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
            if (exportName === undefined) {
                exportName = 'default';
            }
            return System.import(module)
                .then(function (module) { return module[exportName]; })
                .then(function (type) { return checkNotEmpty(type, module, exportName); })
                .then(function (type) { return _this._compiler.compileModuleAsync(type); });
        };
        /**
         * @param {?} path
         * @return {?}
         */
        SystemJsNgModuleLoader.prototype.loadFactory = function (path) {
            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
            var /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;
            if (exportName === undefined) {
                exportName = 'default';
                factoryClassSuffix = '';
            }
            return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)
                .then(function (module) { return module[exportName + factoryClassSuffix]; })
                .then(function (factory) { return checkNotEmpty(factory, module, exportName); });
        };
        return SystemJsNgModuleLoader;
    }());
    SystemJsNgModuleLoader.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    SystemJsNgModuleLoader.ctorParameters = function () { return [
        { type: Compiler, },
        { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },
    ]; };
    /**
     * @param {?} value
     * @param {?} modulePath
     * @param {?} exportName
     * @return {?}
     */
    function checkNotEmpty(value, modulePath, exportName) {
        if (!value) {
            throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
        }
        return value;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Represents an Embedded Template that can be used to instantiate Embedded Views.
     *
     * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<ng-template>` element
     * (or directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into
     * the constructor of the directive using the `TemplateRef` Token. Alternatively you can query for
     * the `TemplateRef` from a Component or a Directive via {\@link Query}.
     *
     * To instantiate Embedded Views based on a Template, use
     * {\@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the
     * View Container.
     * \@stable
     * @abstract
     */
    var TemplateRef = (function () {
        function TemplateRef() {
        }
        /**
         * @abstract
         * @return {?}
         */
        TemplateRef.prototype.elementRef = function () { };
        /**
         * @abstract
         * @param {?} context
         * @return {?}
         */
        TemplateRef.prototype.createEmbeddedView = function (context) { };
        return TemplateRef;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Represents a container where one or more Views can be attached.
     *
     * The container can contain two kinds of Views. Host Views, created by instantiating a
     * {\@link Component} via {\@link #createComponent}, and Embedded Views, created by instantiating an
     * {\@link TemplateRef Embedded Template} via {\@link #createEmbeddedView}.
     *
     * The location of the View Container within the containing View is specified by the Anchor
     * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
     * have a single View Container.
     *
     * Root elements of Views attached to this container become siblings of the Anchor Element in
     * the Rendered View.
     *
     * To access a `ViewContainerRef` of an Element, you can either place a {\@link Directive} injected
     * with `ViewContainerRef` on the Element, or you obtain it via a {\@link ViewChild} query.
     * \@stable
     * @abstract
     */
    var ViewContainerRef = (function () {
        function ViewContainerRef() {
        }
        /**
         * Anchor element that specifies the location of this container in the containing View.
         * <!-- TODO: rename to anchorElement -->
         * @abstract
         * @return {?}
         */
        ViewContainerRef.prototype.element = function () { };
        /**
         * @abstract
         * @return {?}
         */
        ViewContainerRef.prototype.injector = function () { };
        /**
         * @abstract
         * @return {?}
         */
        ViewContainerRef.prototype.parentInjector = function () { };
        /**
         * Destroys all Views in this container.
         * @abstract
         * @return {?}
         */
        ViewContainerRef.prototype.clear = function () { };
        /**
         * Returns the {\@link ViewRef} for the View located in this container at the specified index.
         * @abstract
         * @param {?} index
         * @return {?}
         */
        ViewContainerRef.prototype.get = function (index) { };
        /**
         * Returns the number of Views currently attached to this container.
         * @abstract
         * @return {?}
         */
        ViewContainerRef.prototype.length = function () { };
        /**
         * Instantiates an Embedded View based on the {\@link TemplateRef `templateRef`} and inserts it
         * into this container at the specified `index`.
         *
         * If `index` is not specified, the new View will be inserted as the last View in the container.
         *
         * Returns the {\@link ViewRef} for the newly created View.
         * @abstract
         * @template C
         * @param {?} templateRef
         * @param {?=} context
         * @param {?=} index
         * @return {?}
         */
        ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { };
        /**
         * Instantiates a single {\@link Component} and inserts its Host View into this container at the
         * specified `index`.
         *
         * The component is instantiated using its {\@link ComponentFactory} which can be
         * obtained via {\@link ComponentFactoryResolver#resolveComponentFactory}.
         *
         * If `index` is not specified, the new View will be inserted as the last View in the container.
         *
         * You can optionally specify the {\@link Injector} that will be used as parent for the Component.
         *
         * Returns the {\@link ComponentRef} of the Host View created for the newly instantiated Component.
         * @abstract
         * @template C
         * @param {?} componentFactory
         * @param {?=} index
         * @param {?=} injector
         * @param {?=} projectableNodes
         * @param {?=} ngModule
         * @return {?}
         */
        ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModule) { };
        /**
         * Inserts a View identified by a {\@link ViewRef} into the container at the specified `index`.
         *
         * If `index` is not specified, the new View will be inserted as the last View in the container.
         *
         * Returns the inserted {\@link ViewRef}.
         * @abstract
         * @param {?} viewRef
         * @param {?=} index
         * @return {?}
         */
        ViewContainerRef.prototype.insert = function (viewRef, index) { };
        /**
         * Moves a View identified by a {\@link ViewRef} into the container at the specified `index`.
         *
         * Returns the inserted {\@link ViewRef}.
         * @abstract
         * @param {?} viewRef
         * @param {?} currentIndex
         * @return {?}
         */
        ViewContainerRef.prototype.move = function (viewRef, currentIndex) { };
        /**
         * Returns the index of the View, specified via {\@link ViewRef}, within the current container or
         * `-1` if this container doesn't contain the View.
         * @abstract
         * @param {?} viewRef
         * @return {?}
         */
        ViewContainerRef.prototype.indexOf = function (viewRef) { };
        /**
         * Destroys a View attached to this container at the specified `index`.
         *
         * If `index` is not specified, the last View in the container will be removed.
         * @abstract
         * @param {?=} index
         * @return {?}
         */
        ViewContainerRef.prototype.remove = function (index) { };
        /**
         * Use along with {\@link #insert} to move a View within the current container.
         *
         * If the `index` param is omitted, the last {\@link ViewRef} is detached.
         * @abstract
         * @param {?=} index
         * @return {?}
         */
        ViewContainerRef.prototype.detach = function (index) { };
        return ViewContainerRef;
    }());
    /**
     * \@stable
     * @abstract
     */
    var ChangeDetectorRef = (function () {
        function ChangeDetectorRef() {
        }
        /**
         * Marks all {\@link ChangeDetectionStrategy#OnPush} ancestors as to be checked.
         *
         * <!-- TODO: Add a link to a chapter on OnPush components -->
         *
         * ### Example ([live demo](http://plnkr.co/edit/GC512b?p=preview))
         *
         * ```typescript
         * \@Component({
         *   selector: 'cmp',
         *   changeDetection: ChangeDetectionStrategy.OnPush,
         *   template: `Number of ticks: {{numberOfTicks}}`
         * })
         * class Cmp {
         *   numberOfTicks = 0;
         *
         *   constructor(private ref: ChangeDetectorRef) {
         *     setInterval(() => {
         *       this.numberOfTicks++;
         *       // the following is required, otherwise the view will not be updated
         *       this.ref.markForCheck();
         *     }, 1000);
         *   }
         * }
         *
         * \@Component({
         *   selector: 'app',
         *   changeDetection: ChangeDetectionStrategy.OnPush,
         *   template: `
         *     <cmp><cmp>
         *   `,
         * })
         * class App {
         * }
         * ```
         * @abstract
         * @return {?}
         */
        ChangeDetectorRef.prototype.markForCheck = function () { };
        /**
         * Detaches the change detector from the change detector tree.
         *
         * The detached change detector will not be checked until it is reattached.
         *
         * This can also be used in combination with {\@link ChangeDetectorRef#detectChanges} to implement
         * local change
         * detection checks.
         *
         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
         *
         * ### Example
         *
         * The following example defines a component with a large list of readonly data.
         * Imagine the data changes constantly, many times per second. For performance reasons,
         * we want to check and update the list every five seconds. We can do that by detaching
         * the component's change detector and doing a local check every five seconds.
         *
         * ```typescript
         * class DataProvider {
         *   // in a real application the returned data will be different every time
         *   get data() {
         *     return [1,2,3,4,5];
         *   }
         * }
         *
         * \@Component({
         *   selector: 'giant-list',
         *   template: `
         *     <li *ngFor="let d of dataProvider.data">Data {{d}}</li>
         *   `,
         * })
         * class GiantList {
         *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {
         *     ref.detach();
         *     setInterval(() => {
         *       this.ref.detectChanges();
         *     }, 5000);
         *   }
         * }
         *
         * \@Component({
         *   selector: 'app',
         *   providers: [DataProvider],
         *   template: `
         *     <giant-list><giant-list>
         *   `,
         * })
         * class App {
         * }
         * ```
         * @abstract
         * @return {?}
         */
        ChangeDetectorRef.prototype.detach = function () { };
        /**
         * Checks the change detector and its children.
         *
         * This can also be used in combination with {\@link ChangeDetectorRef#detach} to implement local
         * change detection
         * checks.
         *
         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
         *
         * ### Example
         *
         * The following example defines a component with a large list of readonly data.
         * Imagine, the data changes constantly, many times per second. For performance reasons,
         * we want to check and update the list every five seconds.
         *
         * We can do that by detaching the component's change detector and doing a local change detection
         * check
         * every five seconds.
         *
         * See {\@link ChangeDetectorRef#detach} for more information.
         * @abstract
         * @return {?}
         */
        ChangeDetectorRef.prototype.detectChanges = function () { };
        /**
         * Checks the change detector and its children, and throws if any changes are detected.
         *
         * This is used in development mode to verify that running change detection doesn't introduce
         * other changes.
         * @abstract
         * @return {?}
         */
        ChangeDetectorRef.prototype.checkNoChanges = function () { };
        /**
         * Reattach the change detector to the change detector tree.
         *
         * This also marks OnPush ancestors as to be checked. This reattached change detector will be
         * checked during the next change detection run.
         *
         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
         *
         * ### Example ([live demo](http://plnkr.co/edit/aUhZha?p=preview))
         *
         * The following example creates a component displaying `live` data. The component will detach
         * its change detector from the main change detector tree when the component's live property
         * is set to false.
         *
         * ```typescript
         * class DataProvider {
         *   data = 1;
         *
         *   constructor() {
         *     setInterval(() => {
         *       this.data = this.data * 2;
         *     }, 500);
         *   }
         * }
         *
         * \@Component({
         *   selector: 'live-data',
         *   inputs: ['live'],
         *   template: 'Data: {{dataProvider.data}}'
         * })
         * class LiveData {
         *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}
         *
         *   set live(value) {
         *     if (value) {
         *       this.ref.reattach();
         *     } else {
         *       this.ref.detach();
         *     }
         *   }
         * }
         *
         * \@Component({
         *   selector: 'app',
         *   providers: [DataProvider],
         *   template: `
         *     Live Update: <input type="checkbox" [(ngModel)]="live">
         *     <live-data [live]="live"><live-data>
         *   `,
         * })
         * class App {
         *   live = true;
         * }
         * ```
         * @abstract
         * @return {?}
         */
        ChangeDetectorRef.prototype.reattach = function () { };
        return ChangeDetectorRef;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@stable
     * @abstract
     */
    var ViewRef = (function (_super) {
        __extends(ViewRef, _super);
        function ViewRef() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Destroys the view and all of the data structures associated with it.
         * @abstract
         * @return {?}
         */
        ViewRef.prototype.destroy = function () { };
        /**
         * @abstract
         * @return {?}
         */
        ViewRef.prototype.destroyed = function () { };
        /**
         * @abstract
         * @param {?} callback
         * @return {?}
         */
        ViewRef.prototype.onDestroy = function (callback) { };
        return ViewRef;
    }(ChangeDetectorRef));
    /**
     * Represents an Angular View.
     *
     * <!-- TODO: move the next two paragraphs to the dev guide -->
     * A View is a fundamental building block of the application UI. It is the smallest grouping of
     * Elements which are created and destroyed together.
     *
     * Properties of elements in a View can change, but the structure (number and order) of elements in
     * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
     * removing nested Views via a {\@link ViewContainerRef}. Each View can contain many View Containers.
     * <!-- /TODO -->
     *
     * ### Example
     *
     * Given this template...
     *
     * ```
     * Count: {{items.length}}
     * <ul>
     *   <li *ngFor="let  item of items">{{item}}</li>
     * </ul>
     * ```
     *
     * We have two {\@link TemplateRef}s:
     *
     * Outer {\@link TemplateRef}:
     * ```
     * Count: {{items.length}}
     * <ul>
     *   <ng-template ngFor let-item [ngForOf]="items"></ng-template>
     * </ul>
     * ```
     *
     * Inner {\@link TemplateRef}:
     * ```
     *   <li>{{item}}</li>
     * ```
     *
     * Notice that the original template is broken down into two separate {\@link TemplateRef}s.
     *
     * The outer/inner {\@link TemplateRef}s are then assembled into views like so:
     *
     * ```
     * <!-- ViewRef: outer-0 -->
     * Count: 2
     * <ul>
     *   <ng-template view-container-ref></ng-template>
     *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
     *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
     * </ul>
     * <!-- /ViewRef: outer-0 -->
     * ```
     * \@experimental
     * @abstract
     */
    var EmbeddedViewRef = (function (_super) {
        __extends(EmbeddedViewRef, _super);
        function EmbeddedViewRef() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @abstract
         * @return {?}
         */
        EmbeddedViewRef.prototype.context = function () { };
        /**
         * @abstract
         * @return {?}
         */
        EmbeddedViewRef.prototype.rootNodes = function () { };
        return EmbeddedViewRef;
    }(ViewRef));
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // Public API for compiler
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var EventListener = (function () {
        /**
         * @param {?} name
         * @param {?} callback
         */
        function EventListener(name, callback) {
            this.name = name;
            this.callback = callback;
        }
        return EventListener;
    }());
    /**
     * \@experimental All debugging apis are currently experimental.
     */
    var DebugNode = (function () {
        /**
         * @param {?} nativeNode
         * @param {?} parent
         * @param {?} _debugContext
         */
        function DebugNode(nativeNode, parent, _debugContext) {
            this._debugContext = _debugContext;
            this.nativeNode = nativeNode;
            if (parent && parent instanceof DebugElement) {
                parent.addChild(this);
            }
            else {
                this.parent = null;
            }
            this.listeners = [];
        }
        Object.defineProperty(DebugNode.prototype, "injector", {
            /**
             * @return {?}
             */
            get: function () { return this._debugContext.injector; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "componentInstance", {
            /**
             * @return {?}
             */
            get: function () { return this._debugContext.component; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "context", {
            /**
             * @return {?}
             */
            get: function () { return this._debugContext.context; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "references", {
            /**
             * @return {?}
             */
            get: function () { return this._debugContext.references; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "providerTokens", {
            /**
             * @return {?}
             */
            get: function () { return this._debugContext.providerTokens; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "source", {
            /**
             * @deprecated since v4
             * @return {?}
             */
            get: function () { return 'Deprecated since v4'; },
            enumerable: true,
            configurable: true
        });
        return DebugNode;
    }());
    /**
     * \@experimental All debugging apis are currently experimental.
     */
    var DebugElement = (function (_super) {
        __extends(DebugElement, _super);
        /**
         * @param {?} nativeNode
         * @param {?} parent
         * @param {?} _debugContext
         */
        function DebugElement(nativeNode, parent, _debugContext) {
            var _this = _super.call(this, nativeNode, parent, _debugContext) || this;
            _this.properties = {};
            _this.attributes = {};
            _this.classes = {};
            _this.styles = {};
            _this.childNodes = [];
            _this.nativeElement = nativeNode;
            return _this;
        }
        /**
         * @param {?} child
         * @return {?}
         */
        DebugElement.prototype.addChild = function (child) {
            if (child) {
                this.childNodes.push(child);
                child.parent = this;
            }
        };
        /**
         * @param {?} child
         * @return {?}
         */
        DebugElement.prototype.removeChild = function (child) {
            var /** @type {?} */ childIndex = this.childNodes.indexOf(child);
            if (childIndex !== -1) {
                child.parent = null;
                this.childNodes.splice(childIndex, 1);
            }
        };
        /**
         * @param {?} child
         * @param {?} newChildren
         * @return {?}
         */
        DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {
            var _this = this;
            var /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);
            if (siblingIndex !== -1) {
                (_a = this.childNodes).splice.apply(_a, [siblingIndex + 1, 0].concat(newChildren));
                newChildren.forEach(function (c) {
                    if (c.parent) {
                        c.parent.removeChild(c);
                    }
                    c.parent = _this;
                });
            }
            var _a;
        };
        /**
         * @param {?} refChild
         * @param {?} newChild
         * @return {?}
         */
        DebugElement.prototype.insertBefore = function (refChild, newChild) {
            var /** @type {?} */ refIndex = this.childNodes.indexOf(refChild);
            if (refIndex === -1) {
                this.addChild(newChild);
            }
            else {
                if (newChild.parent) {
                    newChild.parent.removeChild(newChild);
                }
                newChild.parent = this;
                this.childNodes.splice(refIndex, 0, newChild);
            }
        };
        /**
         * @param {?} predicate
         * @return {?}
         */
        DebugElement.prototype.query = function (predicate) {
            var /** @type {?} */ results = this.queryAll(predicate);
            return results[0] || null;
        };
        /**
         * @param {?} predicate
         * @return {?}
         */
        DebugElement.prototype.queryAll = function (predicate) {
            var /** @type {?} */ matches = [];
            _queryElementChildren(this, predicate, matches);
            return matches;
        };
        /**
         * @param {?} predicate
         * @return {?}
         */
        DebugElement.prototype.queryAllNodes = function (predicate) {
            var /** @type {?} */ matches = [];
            _queryNodeChildren(this, predicate, matches);
            return matches;
        };
        Object.defineProperty(DebugElement.prototype, "children", {
            /**
             * @return {?}
             */
            get: function () {
                return (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} eventName
         * @param {?} eventObj
         * @return {?}
         */
        DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {
            this.listeners.forEach(function (listener) {
                if (listener.name == eventName) {
                    listener.callback(eventObj);
                }
            });
        };
        return DebugElement;
    }(DebugNode));
    /**
     * @param {?} element
     * @param {?} predicate
     * @param {?} matches
     * @return {?}
     */
    function _queryElementChildren(element, predicate, matches) {
        element.childNodes.forEach(function (node) {
            if (node instanceof DebugElement) {
                if (predicate(node)) {
                    matches.push(node);
                }
                _queryElementChildren(node, predicate, matches);
            }
        });
    }
    /**
     * @param {?} parentNode
     * @param {?} predicate
     * @param {?} matches
     * @return {?}
     */
    function _queryNodeChildren(parentNode, predicate, matches) {
        if (parentNode instanceof DebugElement) {
            parentNode.childNodes.forEach(function (node) {
                if (predicate(node)) {
                    matches.push(node);
                }
                if (node instanceof DebugElement) {
                    _queryNodeChildren(node, predicate, matches);
                }
            });
        }
    }
    // Need to keep the nodes in a global Map so that multiple angular apps are supported.
    var _nativeNodeToDebugNode = new Map();
    /**
     * \@experimental
     * @param {?} nativeNode
     * @return {?}
     */
    function getDebugNode(nativeNode) {
        return _nativeNodeToDebugNode.get(nativeNode) || null;
    }
    /**
     * @return {?}
     */
    /**
     * @param {?} node
     * @return {?}
     */
    function indexDebugNode(node) {
        _nativeNodeToDebugNode.set(node.nativeNode, node);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    function removeDebugNodeFromIndex(node) {
        _nativeNodeToDebugNode.delete(node.nativeNode);
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function devModeEqual(a, b) {
        var /** @type {?} */ isListLikeIterableA = isListLikeIterable(a);
        var /** @type {?} */ isListLikeIterableB = isListLikeIterable(b);
        if (isListLikeIterableA && isListLikeIterableB) {
            return areIterablesEqual(a, b, devModeEqual);
        }
        else {
            var /** @type {?} */ isAObject = a && (typeof a === 'object' || typeof a === 'function');
            var /** @type {?} */ isBObject = b && (typeof b === 'object' || typeof b === 'function');
            if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
                return true;
            }
            else {
                return looseIdentical(a, b);
            }
        }
    }
    /**
     * Indicates that the result of a {\@link Pipe} transformation has changed even though the
     * reference
     * has not changed.
     *
     * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
     *
     * Example:
     *
     * ```
     * if (this._latestValue === this._latestReturnedValue) {
     *    return this._latestReturnedValue;
     *  } else {
     *    this._latestReturnedValue = this._latestValue;
     *    return WrappedValue.wrap(this._latestValue); // this will force update
     *  }
     * ```
     * \@stable
     */
    var WrappedValue = (function () {
        /**
         * @param {?} wrapped
         */
        function WrappedValue(wrapped) {
            this.wrapped = wrapped;
        }
        /**
         * @param {?} value
         * @return {?}
         */
        WrappedValue.wrap = function (value) { return new WrappedValue(value); };
        return WrappedValue;
    }());
    /**
     * Represents a basic change from a previous to a new value.
     * \@stable
     */
    var SimpleChange = (function () {
        /**
         * @param {?} previousValue
         * @param {?} currentValue
         * @param {?} firstChange
         */
        function SimpleChange(previousValue, currentValue, firstChange) {
            this.previousValue = previousValue;
            this.currentValue = currentValue;
            this.firstChange = firstChange;
        }
        /**
         * Check whether the new value is the first value assigned.
         * @return {?}
         */
        SimpleChange.prototype.isFirstChange = function () { return this.firstChange; };
        return SimpleChange;
    }());
    /**
     * @param {?} obj
     * @return {?}
     */
    function isListLikeIterable(obj) {
        if (!isJsObject(obj))
            return false;
        return Array.isArray(obj) ||
            (!(obj instanceof Map) &&
                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
    }
    /**
     * @param {?} a
     * @param {?} b
     * @param {?} comparator
     * @return {?}
     */
    function areIterablesEqual(a, b, comparator) {
        var /** @type {?} */ iterator1 = a[getSymbolIterator()]();
        var /** @type {?} */ iterator2 = b[getSymbolIterator()]();
        while (true) {
            var /** @type {?} */ item1 = iterator1.next();
            var /** @type {?} */ item2 = iterator2.next();
            if (item1.done && item2.done)
                return true;
            if (item1.done || item2.done)
                return false;
            if (!comparator(item1.value, item2.value))
                return false;
        }
    }
    /**
     * @param {?} obj
     * @param {?} fn
     * @return {?}
     */
    function iterateListLike(obj, fn) {
        if (Array.isArray(obj)) {
            for (var /** @type {?} */ i = 0; i < obj.length; i++) {
                fn(obj[i]);
            }
        }
        else {
            var /** @type {?} */ iterator = obj[getSymbolIterator()]();
            var /** @type {?} */ item = void 0;
            while (!((item = iterator.next()).done)) {
                fn(item.value);
            }
        }
    }
    /**
     * @param {?} o
     * @return {?}
     */
    function isJsObject(o) {
        return o !== null && (typeof o === 'function' || typeof o === 'object');
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var DefaultIterableDifferFactory = (function () {
        function DefaultIterableDifferFactory() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };
        /**
         * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter
         * @template V
         * @param {?=} cdRefOrTrackBy
         * @param {?=} trackByFn
         * @return {?}
         */
        DefaultIterableDifferFactory.prototype.create = function (cdRefOrTrackBy, trackByFn) {
            return new DefaultIterableDiffer(trackByFn || (cdRefOrTrackBy));
        };
        return DefaultIterableDifferFactory;
    }());
    var trackByIdentity = function (index, item) { return item; };
    /**
     * @deprecated v4.0.0 - Should not be part of public API.
     */
    var DefaultIterableDiffer = (function () {
        /**
         * @param {?=} trackByFn
         */
        function DefaultIterableDiffer(trackByFn) {
            this._length = 0;
            this._collection = null;
            this._linkedRecords = null;
            this._unlinkedRecords = null;
            this._previousItHead = null;
            this._itHead = null;
            this._itTail = null;
            this._additionsHead = null;
            this._additionsTail = null;
            this._movesHead = null;
            this._movesTail = null;
            this._removalsHead = null;
            this._removalsTail = null;
            this._identityChangesHead = null;
            this._identityChangesTail = null;
            this._trackByFn = trackByFn || trackByIdentity;
        }
        Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
            /**
             * @return {?}
             */
            get: function () { return this._collection; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
            /**
             * @return {?}
             */
            get: function () { return this._length; },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} fn
         * @return {?}
         */
        DefaultIterableDiffer.prototype.forEachItem = function (fn) {
            var /** @type {?} */ record;
            for (record = this._itHead; record !== null; record = record._next) {
                fn(record);
            }
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        DefaultIterableDiffer.prototype.forEachOperation = function (fn) {
            var /** @type {?} */ nextIt = this._itHead;
            var /** @type {?} */ nextRemove = this._removalsHead;
            var /** @type {?} */ addRemoveOffset = 0;
            var /** @type {?} */ moveOffsets = null;
            while (nextIt || nextRemove) {
                // Figure out which is the next record to process
                // Order: remove, add, move
                var /** @type {?} */ record = !nextRemove ||
                    nextIt && ((nextIt.currentIndex)) <
                        getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? ((nextIt)) :
                    nextRemove;
                var /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
                var /** @type {?} */ currentIndex = record.currentIndex;
                // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary
                if (record === nextRemove) {
                    addRemoveOffset--;
                    nextRemove = nextRemove._nextRemoved;
                }
                else {
                    nextIt = ((nextIt))._next;
                    if (record.previousIndex == null) {
                        addRemoveOffset++;
                    }
                    else {
                        // INVARIANT:  currentIndex < previousIndex
                        if (!moveOffsets)
                            moveOffsets = [];
                        var /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
                        var /** @type {?} */ localCurrentIndex = ((currentIndex)) - addRemoveOffset;
                        if (localMovePreviousIndex != localCurrentIndex) {
                            for (var /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {
                                var /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
                                var /** @type {?} */ index = offset + i;
                                if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                                    moveOffsets[i] = offset + 1;
                                }
                            }
                            var /** @type {?} */ previousIndex = record.previousIndex;
                            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
                        }
                    }
                }
                if (adjPreviousIndex !== currentIndex) {
                    fn(record, adjPreviousIndex, currentIndex);
                }
            }
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
            var /** @type {?} */ record;
            for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
                fn(record);
            }
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
            var /** @type {?} */ record;
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                fn(record);
            }
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
            var /** @type {?} */ record;
            for (record = this._movesHead; record !== null; record = record._nextMoved) {
                fn(record);
            }
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
            var /** @type {?} */ record;
            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
                fn(record);
            }
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
            var /** @type {?} */ record;
            for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
                fn(record);
            }
        };
        /**
         * @param {?} collection
         * @return {?}
         */
        DefaultIterableDiffer.prototype.diff = function (collection) {
            if (collection == null)
                collection = [];
            if (!isListLikeIterable(collection)) {
                throw new Error("Error trying to diff '" + stringify(collection) + "'. Only arrays and iterables are allowed");
            }
            if (this.check(collection)) {
                return this;
            }
            else {
                return null;
            }
        };
        /**
         * @return {?}
         */
        DefaultIterableDiffer.prototype.onDestroy = function () { };
        /**
         * @param {?} collection
         * @return {?}
         */
        DefaultIterableDiffer.prototype.check = function (collection) {
            var _this = this;
            this._reset();
            var /** @type {?} */ record = this._itHead;
            var /** @type {?} */ mayBeDirty = false;
            var /** @type {?} */ index;
            var /** @type {?} */ item;
            var /** @type {?} */ itemTrackBy;
            if (Array.isArray(collection)) {
                this._length = collection.length;
                for (var /** @type {?} */ index_1 = 0; index_1 < this._length; index_1++) {
                    item = collection[index_1];
                    itemTrackBy = this._trackByFn(index_1, item);
                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                        record = this._mismatch(record, item, itemTrackBy, index_1);
                        mayBeDirty = true;
                    }
                    else {
                        if (mayBeDirty) {
                            // TODO(misko): can we limit this to duplicates only?
                            record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
                        }
                        if (!looseIdentical(record.item, item))
                            this._addIdentityChange(record, item);
                    }
                    record = record._next;
                }
            }
            else {
                index = 0;
                iterateListLike(collection, function (item) {
                    itemTrackBy = _this._trackByFn(index, item);
                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                        record = _this._mismatch(record, item, itemTrackBy, index);
                        mayBeDirty = true;
                    }
                    else {
                        if (mayBeDirty) {
                            // TODO(misko): can we limit this to duplicates only?
                            record = _this._verifyReinsertion(record, item, itemTrackBy, index);
                        }
                        if (!looseIdentical(record.item, item))
                            _this._addIdentityChange(record, item);
                    }
                    record = record._next;
                    index++;
                });
                this._length = index;
            }
            this._truncate(record);
            this._collection = collection;
            return this.isDirty;
        };
        Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
            /**
             * @return {?}
             */
            get: function () {
                return this._additionsHead !== null || this._movesHead !== null ||
                    this._removalsHead !== null || this._identityChangesHead !== null;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Reset the state of the change objects to show no changes. This means set previousKey to
         * currentKey, and clear all of the queues (additions, moves, removals).
         * Set the previousIndexes of moved and added items to their currentIndexes
         * Reset the list of additions, moves and removals
         *
         * \@internal
         * @return {?}
         */
        DefaultIterableDiffer.prototype._reset = function () {
            if (this.isDirty) {
                var /** @type {?} */ record = void 0;
                var /** @type {?} */ nextRecord = void 0;
                for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
                    record._nextPrevious = record._next;
                }
                for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                    record.previousIndex = record.currentIndex;
                }
                this._additionsHead = this._additionsTail = null;
                for (record = this._movesHead; record !== null; record = nextRecord) {
                    record.previousIndex = record.currentIndex;
                    nextRecord = record._nextMoved;
                }
                this._movesHead = this._movesTail = null;
                this._removalsHead = this._removalsTail = null;
                this._identityChangesHead = this._identityChangesTail = null;
                // todo(vicb) when assert gets supported
                // assert(!this.isDirty);
            }
        };
        /**
         * This is the core function which handles differences between collections.
         *
         * - `record` is the record which we saw at this position last time. If null then it is a new
         *   item.
         * - `item` is the current item in the collection
         * - `index` is the position of the item in the collection
         *
         * \@internal
         * @param {?} record
         * @param {?} item
         * @param {?} itemTrackBy
         * @param {?} index
         * @return {?}
         */
        DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
            // The previous record after which we will append the current one.
            var /** @type {?} */ previousRecord;
            if (record === null) {
                previousRecord = this._itTail;
            }
            else {
                previousRecord = record._prev;
                // Remove the record from the collection since we know it does not match the item.
                this._remove(record);
            }
            // Attempt to see if we have seen the item before.
            record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
            if (record !== null) {
                // We have seen this before, we need to move it forward in the collection.
                // But first we need to check if identity changed, so we can update in view if necessary
                if (!looseIdentical(record.item, item))
                    this._addIdentityChange(record, item);
                this._moveAfter(record, previousRecord, index);
            }
            else {
                // Never seen it, check evicted list.
                record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
                if (record !== null) {
                    // It is an item which we have evicted earlier: reinsert it back into the list.
                    // But first we need to check if identity changed, so we can update in view if necessary
                    if (!looseIdentical(record.item, item))
                        this._addIdentityChange(record, item);
                    this._reinsertAfter(record, previousRecord, index);
                }
                else {
                    // It is a new item: add it.
                    record =
                        this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
                }
            }
            return record;
        };
        /**
         * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
         *
         * Use case: `[a, a]` => `[b, a, a]`
         *
         * If we did not have this check then the insertion of `b` would:
         *   1) evict first `a`
         *   2) insert `b` at `0` index.
         *   3) leave `a` at index `1` as is. <-- this is wrong!
         *   3) reinsert `a` at index 2. <-- this is wrong!
         *
         * The correct behavior is:
         *   1) evict first `a`
         *   2) insert `b` at `0` index.
         *   3) reinsert `a` at index 1.
         *   3) move `a` at from `1` to `2`.
         *
         *
         * Double check that we have not evicted a duplicate item. We need to check if the item type may
         * have already been removed:
         * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
         * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
         * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
         * at the end.
         *
         * \@internal
         * @param {?} record
         * @param {?} item
         * @param {?} itemTrackBy
         * @param {?} index
         * @return {?}
         */
        DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
            var /** @type {?} */ reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
            if (reinsertRecord !== null) {
                record = this._reinsertAfter(reinsertRecord, /** @type {?} */ ((record._prev)), index);
            }
            else if (record.currentIndex != index) {
                record.currentIndex = index;
                this._addToMoves(record, index);
            }
            return record;
        };
        /**
         * Get rid of any excess {\@link IterableChangeRecord_}s from the previous collection
         *
         * - `record` The first excess {\@link IterableChangeRecord_}.
         *
         * \@internal
         * @param {?} record
         * @return {?}
         */
        DefaultIterableDiffer.prototype._truncate = function (record) {
            // Anything after that needs to be removed;
            while (record !== null) {
                var /** @type {?} */ nextRecord = record._next;
                this._addToRemovals(this._unlink(record));
                record = nextRecord;
            }
            if (this._unlinkedRecords !== null) {
                this._unlinkedRecords.clear();
            }
            if (this._additionsTail !== null) {
                this._additionsTail._nextAdded = null;
            }
            if (this._movesTail !== null) {
                this._movesTail._nextMoved = null;
            }
            if (this._itTail !== null) {
                this._itTail._next = null;
            }
            if (this._removalsTail !== null) {
                this._removalsTail._nextRemoved = null;
            }
            if (this._identityChangesTail !== null) {
                this._identityChangesTail._nextIdentityChange = null;
            }
        };
        /**
         * \@internal
         * @param {?} record
         * @param {?} prevRecord
         * @param {?} index
         * @return {?}
         */
        DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
            if (this._unlinkedRecords !== null) {
                this._unlinkedRecords.remove(record);
            }
            var /** @type {?} */ prev = record._prevRemoved;
            var /** @type {?} */ next = record._nextRemoved;
            if (prev === null) {
                this._removalsHead = next;
            }
            else {
                prev._nextRemoved = next;
            }
            if (next === null) {
                this._removalsTail = prev;
            }
            else {
                next._prevRemoved = prev;
            }
            this._insertAfter(record, prevRecord, index);
            this._addToMoves(record, index);
            return record;
        };
        /**
         * \@internal
         * @param {?} record
         * @param {?} prevRecord
         * @param {?} index
         * @return {?}
         */
        DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
            this._unlink(record);
            this._insertAfter(record, prevRecord, index);
            this._addToMoves(record, index);
            return record;
        };
        /**
         * \@internal
         * @param {?} record
         * @param {?} prevRecord
         * @param {?} index
         * @return {?}
         */
        DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
            this._insertAfter(record, prevRecord, index);
            if (this._additionsTail === null) {
                // todo(vicb)
                // assert(this._additionsHead === null);
                this._additionsTail = this._additionsHead = record;
            }
            else {
                // todo(vicb)
                // assert(_additionsTail._nextAdded === null);
                // assert(record._nextAdded === null);
                this._additionsTail = this._additionsTail._nextAdded = record;
            }
            return record;
        };
        /**
         * \@internal
         * @param {?} record
         * @param {?} prevRecord
         * @param {?} index
         * @return {?}
         */
        DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
            // todo(vicb)
            // assert(record != prevRecord);
            // assert(record._next === null);
            // assert(record._prev === null);
            var /** @type {?} */ next = prevRecord === null ? this._itHead : prevRecord._next;
            // todo(vicb)
            // assert(next != record);
            // assert(prevRecord != record);
            record._next = next;
            record._prev = prevRecord;
            if (next === null) {
                this._itTail = record;
            }
            else {
                next._prev = record;
            }
            if (prevRecord === null) {
                this._itHead = record;
            }
            else {
                prevRecord._next = record;
            }
            if (this._linkedRecords === null) {
                this._linkedRecords = new _DuplicateMap();
            }
            this._linkedRecords.put(record);
            record.currentIndex = index;
            return record;
        };
        /**
         * \@internal
         * @param {?} record
         * @return {?}
         */
        DefaultIterableDiffer.prototype._remove = function (record) {
            return this._addToRemovals(this._unlink(record));
        };
        /**
         * \@internal
         * @param {?} record
         * @return {?}
         */
        DefaultIterableDiffer.prototype._unlink = function (record) {
            if (this._linkedRecords !== null) {
                this._linkedRecords.remove(record);
            }
            var /** @type {?} */ prev = record._prev;
            var /** @type {?} */ next = record._next;
            // todo(vicb)
            // assert((record._prev = null) === null);
            // assert((record._next = null) === null);
            if (prev === null) {
                this._itHead = next;
            }
            else {
                prev._next = next;
            }
            if (next === null) {
                this._itTail = prev;
            }
            else {
                next._prev = prev;
            }
            return record;
        };
        /**
         * \@internal
         * @param {?} record
         * @param {?} toIndex
         * @return {?}
         */
        DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
            // todo(vicb)
            // assert(record._nextMoved === null);
            if (record.previousIndex === toIndex) {
                return record;
            }
            if (this._movesTail === null) {
                // todo(vicb)
                // assert(_movesHead === null);
                this._movesTail = this._movesHead = record;
            }
            else {
                // todo(vicb)
                // assert(_movesTail._nextMoved === null);
                this._movesTail = this._movesTail._nextMoved = record;
            }
            return record;
        };
        /**
         * @param {?} record
         * @return {?}
         */
        DefaultIterableDiffer.prototype._addToRemovals = function (record) {
            if (this._unlinkedRecords === null) {
                this._unlinkedRecords = new _DuplicateMap();
            }
            this._unlinkedRecords.put(record);
            record.currentIndex = null;
            record._nextRemoved = null;
            if (this._removalsTail === null) {
                // todo(vicb)
                // assert(_removalsHead === null);
                this._removalsTail = this._removalsHead = record;
                record._prevRemoved = null;
            }
            else {
                // todo(vicb)
                // assert(_removalsTail._nextRemoved === null);
                // assert(record._nextRemoved === null);
                record._prevRemoved = this._removalsTail;
                this._removalsTail = this._removalsTail._nextRemoved = record;
            }
            return record;
        };
        /**
         * \@internal
         * @param {?} record
         * @param {?} item
         * @return {?}
         */
        DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
            record.item = item;
            if (this._identityChangesTail === null) {
                this._identityChangesTail = this._identityChangesHead = record;
            }
            else {
                this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
            }
            return record;
        };
        /**
         * @return {?}
         */
        DefaultIterableDiffer.prototype.toString = function () {
            var /** @type {?} */ list = [];
            this.forEachItem(function (record) { return list.push(record); });
            var /** @type {?} */ previous = [];
            this.forEachPreviousItem(function (record) { return previous.push(record); });
            var /** @type {?} */ additions = [];
            this.forEachAddedItem(function (record) { return additions.push(record); });
            var /** @type {?} */ moves = [];
            this.forEachMovedItem(function (record) { return moves.push(record); });
            var /** @type {?} */ removals = [];
            this.forEachRemovedItem(function (record) { return removals.push(record); });
            var /** @type {?} */ identityChanges = [];
            this.forEachIdentityChange(function (record) { return identityChanges.push(record); });
            return 'collection: ' + list.join(', ') + '\n' +
                'previous: ' + previous.join(', ') + '\n' +
                'additions: ' + additions.join(', ') + '\n' +
                'moves: ' + moves.join(', ') + '\n' +
                'removals: ' + removals.join(', ') + '\n' +
                'identityChanges: ' + identityChanges.join(', ') + '\n';
        };
        return DefaultIterableDiffer;
    }());
    /**
     * \@stable
     */
    var IterableChangeRecord_ = (function () {
        /**
         * @param {?} item
         * @param {?} trackById
         */
        function IterableChangeRecord_(item, trackById) {
            this.item = item;
            this.trackById = trackById;
            this.currentIndex = null;
            this.previousIndex = null;
            /**
             * \@internal
             */
            this._nextPrevious = null;
            /**
             * \@internal
             */
            this._prev = null;
            /**
             * \@internal
             */
            this._next = null;
            /**
             * \@internal
             */
            this._prevDup = null;
            /**
             * \@internal
             */
            this._nextDup = null;
            /**
             * \@internal
             */
            this._prevRemoved = null;
            /**
             * \@internal
             */
            this._nextRemoved = null;
            /**
             * \@internal
             */
            this._nextAdded = null;
            /**
             * \@internal
             */
            this._nextMoved = null;
            /**
             * \@internal
             */
            this._nextIdentityChange = null;
        }
        /**
         * @return {?}
         */
        IterableChangeRecord_.prototype.toString = function () {
            return this.previousIndex === this.currentIndex ? stringify(this.item) :
                stringify(this.item) + '[' +
                    stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';
        };
        return IterableChangeRecord_;
    }());
    var _DuplicateItemRecordList = (function () {
        function _DuplicateItemRecordList() {
            /**
             * \@internal
             */
            this._head = null;
            /**
             * \@internal
             */
            this._tail = null;
        }
        /**
         * Append the record to the list of duplicates.
         *
         * Note: by design all records in the list of duplicates hold the same value in record.item.
         * @param {?} record
         * @return {?}
         */
        _DuplicateItemRecordList.prototype.add = function (record) {
            if (this._head === null) {
                this._head = this._tail = record;
                record._nextDup = null;
                record._prevDup = null;
            }
            else {
                ((
                // todo(vicb)
                // assert(record.item ==  _head.item ||
                //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
                this._tail))._nextDup = record;
                record._prevDup = this._tail;
                record._nextDup = null;
                this._tail = record;
            }
        };
        /**
         * @param {?} trackById
         * @param {?} atOrAfterIndex
         * @return {?}
         */
        _DuplicateItemRecordList.prototype.get = function (trackById, atOrAfterIndex) {
            var /** @type {?} */ record;
            for (record = this._head; record !== null; record = record._nextDup) {
                if ((atOrAfterIndex === null || atOrAfterIndex <= ((record.currentIndex))) &&
                    looseIdentical(record.trackById, trackById)) {
                    return record;
                }
            }
            return null;
        };
        /**
         * Remove one {\@link IterableChangeRecord_} from the list of duplicates.
         *
         * Returns whether the list of duplicates is empty.
         * @param {?} record
         * @return {?}
         */
        _DuplicateItemRecordList.prototype.remove = function (record) {
            // todo(vicb)
            // assert(() {
            //  // verify that the record being removed is in the list.
            //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {
            //    if (identical(cursor, record)) return true;
            //  }
            //  return false;
            //});
            var /** @type {?} */ prev = record._prevDup;
            var /** @type {?} */ next = record._nextDup;
            if (prev === null) {
                this._head = next;
            }
            else {
                prev._nextDup = next;
            }
            if (next === null) {
                this._tail = prev;
            }
            else {
                next._prevDup = prev;
            }
            return this._head === null;
        };
        return _DuplicateItemRecordList;
    }());
    var _DuplicateMap = (function () {
        function _DuplicateMap() {
            this.map = new Map();
        }
        /**
         * @param {?} record
         * @return {?}
         */
        _DuplicateMap.prototype.put = function (record) {
            var /** @type {?} */ key = record.trackById;
            var /** @type {?} */ duplicates = this.map.get(key);
            if (!duplicates) {
                duplicates = new _DuplicateItemRecordList();
                this.map.set(key, duplicates);
            }
            duplicates.add(record);
        };
        /**
         * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
         * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.
         *
         * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
         * have any more `a`s needs to return the second `a`.
         * @param {?} trackById
         * @param {?} atOrAfterIndex
         * @return {?}
         */
        _DuplicateMap.prototype.get = function (trackById, atOrAfterIndex) {
            var /** @type {?} */ key = trackById;
            var /** @type {?} */ recordList = this.map.get(key);
            return recordList ? recordList.get(trackById, atOrAfterIndex) : null;
        };
        /**
         * Removes a {\@link IterableChangeRecord_} from the list of duplicates.
         *
         * The list of duplicates also is removed from the map if it gets empty.
         * @param {?} record
         * @return {?}
         */
        _DuplicateMap.prototype.remove = function (record) {
            var /** @type {?} */ key = record.trackById;
            var /** @type {?} */ recordList = ((this.map.get(key)));
            // Remove the list of duplicates when it gets empty
            if (recordList.remove(record)) {
                this.map.delete(key);
            }
            return record;
        };
        Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
            /**
             * @return {?}
             */
            get: function () { return this.map.size === 0; },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        _DuplicateMap.prototype.clear = function () { this.map.clear(); };
        /**
         * @return {?}
         */
        _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + stringify(this.map) + ')'; };
        return _DuplicateMap;
    }());
    /**
     * @param {?} item
     * @param {?} addRemoveOffset
     * @param {?} moveOffsets
     * @return {?}
     */
    function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
        var /** @type {?} */ previousIndex = item.previousIndex;
        if (previousIndex === null)
            return previousIndex;
        var /** @type {?} */ moveOffset = 0;
        if (moveOffsets && previousIndex < moveOffsets.length) {
            moveOffset = moveOffsets[previousIndex];
        }
        return previousIndex + addRemoveOffset + moveOffset;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var DefaultKeyValueDifferFactory = (function () {
        function DefaultKeyValueDifferFactory() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };
        /**
         * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter
         * @template K, V
         * @param {?=} cd
         * @return {?}
         */
        DefaultKeyValueDifferFactory.prototype.create = function (cd) {
            return new DefaultKeyValueDiffer();
        };
        return DefaultKeyValueDifferFactory;
    }());
    var DefaultKeyValueDiffer = (function () {
        function DefaultKeyValueDiffer() {
            this._records = new Map();
            this._mapHead = null;
            this._appendAfter = null;
            this._previousMapHead = null;
            this._changesHead = null;
            this._changesTail = null;
            this._additionsHead = null;
            this._additionsTail = null;
            this._removalsHead = null;
            this._removalsTail = null;
        }
        Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
            /**
             * @return {?}
             */
            get: function () {
                return this._additionsHead !== null || this._changesHead !== null ||
                    this._removalsHead !== null;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} fn
         * @return {?}
         */
        DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
            var /** @type {?} */ record;
            for (record = this._mapHead; record !== null; record = record._next) {
                fn(record);
            }
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
            var /** @type {?} */ record;
            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
                fn(record);
            }
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
            var /** @type {?} */ record;
            for (record = this._changesHead; record !== null; record = record._nextChanged) {
                fn(record);
            }
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
            var /** @type {?} */ record;
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                fn(record);
            }
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
            var /** @type {?} */ record;
            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
                fn(record);
            }
        };
        /**
         * @param {?=} map
         * @return {?}
         */
        DefaultKeyValueDiffer.prototype.diff = function (map) {
            if (!map) {
                map = new Map();
            }
            else if (!(map instanceof Map || isJsObject(map))) {
                throw new Error("Error trying to diff '" + stringify(map) + "'. Only maps and objects are allowed");
            }
            return this.check(map) ? this : null;
        };
        /**
         * @return {?}
         */
        DefaultKeyValueDiffer.prototype.onDestroy = function () { };
        /**
         * Check the current state of the map vs the previous.
         * The algorithm is optimised for when the keys do no change.
         * @param {?} map
         * @return {?}
         */
        DefaultKeyValueDiffer.prototype.check = function (map) {
            var _this = this;
            this._reset();
            var /** @type {?} */ insertBefore = this._mapHead;
            this._appendAfter = null;
            this._forEach(map, function (value, key) {
                if (insertBefore && insertBefore.key === key) {
                    _this._maybeAddToChanges(insertBefore, value);
                    _this._appendAfter = insertBefore;
                    insertBefore = insertBefore._next;
                }
                else {
                    var /** @type {?} */ record = _this._getOrCreateRecordForKey(key, value);
                    insertBefore = _this._insertBeforeOrAppend(insertBefore, record);
                }
            });
            // Items remaining at the end of the list have been deleted
            if (insertBefore) {
                if (insertBefore._prev) {
                    insertBefore._prev._next = null;
                }
                this._removalsHead = insertBefore;
                for (var /** @type {?} */ record = insertBefore; record !== null; record = record._nextRemoved) {
                    if (record === this._mapHead) {
                        this._mapHead = null;
                    }
                    this._records.delete(record.key);
                    record._nextRemoved = record._next;
                    record.previousValue = record.currentValue;
                    record.currentValue = null;
                    record._prev = null;
                    record._next = null;
                }
            }
            // Make sure tails have no next records from previous runs
            if (this._changesTail)
                this._changesTail._nextChanged = null;
            if (this._additionsTail)
                this._additionsTail._nextAdded = null;
            return this.isDirty;
        };
        /**
         * Inserts a record before `before` or append at the end of the list when `before` is null.
         *
         * Notes:
         * - This method appends at `this._appendAfter`,
         * - This method updates `this._appendAfter`,
         * - The return value is the new value for the insertion pointer.
         * @param {?} before
         * @param {?} record
         * @return {?}
         */
        DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = function (before, record) {
            if (before) {
                var /** @type {?} */ prev = before._prev;
                record._next = before;
                record._prev = prev;
                before._prev = record;
                if (prev) {
                    prev._next = record;
                }
                if (before === this._mapHead) {
                    this._mapHead = record;
                }
                this._appendAfter = before;
                return before;
            }
            if (this._appendAfter) {
                this._appendAfter._next = record;
                record._prev = this._appendAfter;
            }
            else {
                this._mapHead = record;
            }
            this._appendAfter = record;
            return null;
        };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = function (key, value) {
            if (this._records.has(key)) {
                var /** @type {?} */ record_1 = ((this._records.get(key)));
                this._maybeAddToChanges(record_1, value);
                var /** @type {?} */ prev = record_1._prev;
                var /** @type {?} */ next = record_1._next;
                if (prev) {
                    prev._next = next;
                }
                if (next) {
                    next._prev = prev;
                }
                record_1._next = null;
                record_1._prev = null;
                return record_1;
            }
            var /** @type {?} */ record = new KeyValueChangeRecord_(key);
            this._records.set(key, record);
            record.currentValue = value;
            this._addToAdditions(record);
            return record;
        };
        /**
         * \@internal
         * @return {?}
         */
        DefaultKeyValueDiffer.prototype._reset = function () {
            if (this.isDirty) {
                var /** @type {?} */ record = void 0;
                // let `_previousMapHead` contain the state of the map before the changes
                this._previousMapHead = this._mapHead;
                for (record = this._previousMapHead; record !== null; record = record._next) {
                    record._nextPrevious = record._next;
                }
                // Update `record.previousValue` with the value of the item before the changes
                // We need to update all changed items (that's those which have been added and changed)
                for (record = this._changesHead; record !== null; record = record._nextChanged) {
                    record.previousValue = record.currentValue;
                }
                for (record = this._additionsHead; record != null; record = record._nextAdded) {
                    record.previousValue = record.currentValue;
                }
                this._changesHead = this._changesTail = null;
                this._additionsHead = this._additionsTail = null;
                this._removalsHead = null;
            }
        };
        /**
         * @param {?} record
         * @param {?} newValue
         * @return {?}
         */
        DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {
            if (!looseIdentical(newValue, record.currentValue)) {
                record.previousValue = record.currentValue;
                record.currentValue = newValue;
                this._addToChanges(record);
            }
        };
        /**
         * @param {?} record
         * @return {?}
         */
        DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
            if (this._additionsHead === null) {
                this._additionsHead = this._additionsTail = record;
            }
            else {
                ((this._additionsTail))._nextAdded = record;
                this._additionsTail = record;
            }
        };
        /**
         * @param {?} record
         * @return {?}
         */
        DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
            if (this._changesHead === null) {
                this._changesHead = this._changesTail = record;
            }
            else {
                ((this._changesTail))._nextChanged = record;
                this._changesTail = record;
            }
        };
        /**
         * \@internal
         * @template K, V
         * @param {?} obj
         * @param {?} fn
         * @return {?}
         */
        DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
            if (obj instanceof Map) {
                obj.forEach(fn);
            }
            else {
                Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });
            }
        };
        return DefaultKeyValueDiffer;
    }());
    /**
     * \@stable
     */
    var KeyValueChangeRecord_ = (function () {
        /**
         * @param {?} key
         */
        function KeyValueChangeRecord_(key) {
            this.key = key;
            this.previousValue = null;
            this.currentValue = null;
            /**
             * \@internal
             */
            this._nextPrevious = null;
            /**
             * \@internal
             */
            this._next = null;
            /**
             * \@internal
             */
            this._prev = null;
            /**
             * \@internal
             */
            this._nextAdded = null;
            /**
             * \@internal
             */
            this._nextRemoved = null;
            /**
             * \@internal
             */
            this._nextChanged = null;
        }
        return KeyValueChangeRecord_;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
     * \@stable
     */
    var IterableDiffers = (function () {
        /**
         * @param {?} factories
         */
        function IterableDiffers(factories) {
            this.factories = factories;
        }
        /**
         * @param {?} factories
         * @param {?=} parent
         * @return {?}
         */
        IterableDiffers.create = function (factories, parent) {
            if (parent != null) {
                var /** @type {?} */ copied = parent.factories.slice();
                factories = factories.concat(copied);
                return new IterableDiffers(factories);
            }
            else {
                return new IterableDiffers(factories);
            }
        };
        /**
         * Takes an array of {\@link IterableDifferFactory} and returns a provider used to extend the
         * inherited {\@link IterableDiffers} instance with the provided factories and return a new
         * {\@link IterableDiffers} instance.
         *
         * The following example shows how to extend an existing list of factories,
         * which will only be applied to the injector for this component and its children.
         * This step is all that's required to make a new {\@link IterableDiffer} available.
         *
         * ### Example
         *
         * ```
         * \@Component({
         *   viewProviders: [
         *     IterableDiffers.extend([new ImmutableListDiffer()])
         *   ]
         * })
         * ```
         * @param {?} factories
         * @return {?}
         */
        IterableDiffers.extend = function (factories) {
            return {
                provide: IterableDiffers,
                useFactory: function (parent) {
                    if (!parent) {
                        // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
                        // to
                        // bootstrap(), which would override default pipes instead of extending them.
                        throw new Error('Cannot extend IterableDiffers without a parent injector');
                    }
                    return IterableDiffers.create(factories, parent);
                },
                // Dependency technically isn't optional, but we can provide a better error message this way.
                deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
            };
        };
        /**
         * @param {?} iterable
         * @return {?}
         */
        IterableDiffers.prototype.find = function (iterable) {
            var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(iterable); });
            if (factory != null) {
                return factory;
            }
            else {
                throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
            }
        };
        return IterableDiffers;
    }());
    /**
     * @param {?} type
     * @return {?}
     */
    function getTypeNameForDebugging(type) {
        return type['name'] || typeof type;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
     * \@stable
     */
    var KeyValueDiffers = (function () {
        /**
         * @param {?} factories
         */
        function KeyValueDiffers(factories) {
            this.factories = factories;
        }
        /**
         * @template S
         * @param {?} factories
         * @param {?=} parent
         * @return {?}
         */
        KeyValueDiffers.create = function (factories, parent) {
            if (parent) {
                var /** @type {?} */ copied = parent.factories.slice();
                factories = factories.concat(copied);
            }
            return new KeyValueDiffers(factories);
        };
        /**
         * Takes an array of {\@link KeyValueDifferFactory} and returns a provider used to extend the
         * inherited {\@link KeyValueDiffers} instance with the provided factories and return a new
         * {\@link KeyValueDiffers} instance.
         *
         * The following example shows how to extend an existing list of factories,
         * which will only be applied to the injector for this component and its children.
         * This step is all that's required to make a new {\@link KeyValueDiffer} available.
         *
         * ### Example
         *
         * ```
         * \@Component({
         *   viewProviders: [
         *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
         *   ]
         * })
         * ```
         * @template S
         * @param {?} factories
         * @return {?}
         */
        KeyValueDiffers.extend = function (factories) {
            return {
                provide: KeyValueDiffers,
                useFactory: function (parent) {
                    if (!parent) {
                        // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
                        // to bootstrap(), which would override default pipes instead of extending them.
                        throw new Error('Cannot extend KeyValueDiffers without a parent injector');
                    }
                    return KeyValueDiffers.create(factories, parent);
                },
                // Dependency technically isn't optional, but we can provide a better error message this way.
                deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
            };
        };
        /**
         * @param {?} kv
         * @return {?}
         */
        KeyValueDiffers.prototype.find = function (kv) {
            var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(kv); });
            if (factory) {
                return factory;
            }
            throw new Error("Cannot find a differ supporting object '" + kv + "'");
        };
        return KeyValueDiffers;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Structural diffing for `Object`s and `Map`s.
     */
    var keyValDiff = [new DefaultKeyValueDifferFactory()];
    /**
     * Structural diffing for `Iterable` types such as `Array`s.
     */
    var iterableDiff = [new DefaultIterableDifferFactory()];
    var defaultIterableDiffers = new IterableDiffers(iterableDiff);
    var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @module
     * @description
     * Change detection enables data binding in Angular.
     */
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @return {?}
     */
    function _reflector() {
        return reflector;
    }
    var _CORE_PLATFORM_PROVIDERS = [
        // Set a default platform name for platforms that don't set it explicitly.
        { provide: PLATFORM_ID, useValue: 'unknown' },
        PlatformRef_,
        { provide: PlatformRef, useExisting: PlatformRef_ },
        { provide: Reflector, useFactory: _reflector, deps: [] },
        TestabilityRegistry,
        Console,
    ];
    /**
     * This platform has to be included in any other platform
     *
     * \@experimental
     */
    var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@experimental i18n support is experimental.
     */
    var LOCALE_ID = new InjectionToken('LocaleId');
    /**
     * \@experimental i18n support is experimental.
     */
    var TRANSLATIONS = new InjectionToken('Translations');
    /**
     * \@experimental i18n support is experimental.
     */
    var TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @return {?}
     */
    function _iterableDiffersFactory() {
        return defaultIterableDiffers;
    }
    /**
     * @return {?}
     */
    function _keyValueDiffersFactory() {
        return defaultKeyValueDiffers;
    }
    /**
     * @param {?=} locale
     * @return {?}
     */
    function _localeFactory(locale) {
        return locale || 'en-US';
    }
    /**
     * This module includes the providers of \@angular/core that are needed
     * to bootstrap components via `ApplicationRef`.
     *
     * \@experimental
     */
    var ApplicationModule = (function () {
        /**
         * @param {?} appRef
         */
        function ApplicationModule(appRef) {
        }
        return ApplicationModule;
    }());
    ApplicationModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        ApplicationRef_,
                        { provide: ApplicationRef, useExisting: ApplicationRef_ },
                        ApplicationInitStatus,
                        Compiler,
                        APP_ID_RANDOM_PROVIDER,
                        { provide: IterableDiffers, useFactory: _iterableDiffersFactory },
                        { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },
                        {
                            provide: LOCALE_ID,
                            useFactory: _localeFactory,
                            deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]
                        },
                    ]
                },] },
    ];
    /**
     * @nocollapse
     */
    ApplicationModule.ctorParameters = function () { return [
        { type: ApplicationRef, },
    ]; };
    var SecurityContext = {};
    SecurityContext.NONE = 0;
    SecurityContext.HTML = 1;
    SecurityContext.STYLE = 2;
    SecurityContext.SCRIPT = 3;
    SecurityContext.URL = 4;
    SecurityContext.RESOURCE_URL = 5;
    SecurityContext[SecurityContext.NONE] = "NONE";
    SecurityContext[SecurityContext.HTML] = "HTML";
    SecurityContext[SecurityContext.STYLE] = "STYLE";
    SecurityContext[SecurityContext.SCRIPT] = "SCRIPT";
    SecurityContext[SecurityContext.URL] = "URL";
    SecurityContext[SecurityContext.RESOURCE_URL] = "RESOURCE_URL";
    /**
     * Sanitizer is used by the views to sanitize potentially dangerous values.
     *
     * \@stable
     * @abstract
     */
    var Sanitizer = (function () {
        function Sanitizer() {
        }
        /**
         * @abstract
         * @param {?} context
         * @param {?} value
         * @return {?}
         */
        Sanitizer.prototype.sanitize = function (context, value) { };
        return Sanitizer;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Node instance data.
     *
     * We have a separate type per NodeType to save memory
     * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)
     *
     * To keep our code monomorphic,
     * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).
     * This way, no usage site can get a `NodeData` from view.nodes and then use it for different
     * purposes.
     */
    /**
     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
     * @param {?} view
     * @param {?} index
     * @return {?}
     */
    function asTextData(view, index) {
        return (view.nodes[index]);
    }
    /**
     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
     * @param {?} view
     * @param {?} index
     * @return {?}
     */
    function asElementData(view, index) {
        return (view.nodes[index]);
    }
    /**
     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
     * @param {?} view
     * @param {?} index
     * @return {?}
     */
    function asProviderData(view, index) {
        return (view.nodes[index]);
    }
    /**
     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
     * @param {?} view
     * @param {?} index
     * @return {?}
     */
    function asPureExpressionData(view, index) {
        return (view.nodes[index]);
    }
    /**
     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
     * @param {?} view
     * @param {?} index
     * @return {?}
     */
    function asQueryList(view, index) {
        return (view.nodes[index]);
    }
    /**
     * This object is used to prevent cycles in the source files and to have a place where
     * debug mode can hook it. It is lazily filled when `isDevMode` is known.
     */
    var Services = {
        setCurrentNode: undefined,
        createRootView: undefined,
        createEmbeddedView: undefined,
        createComponentView: undefined,
        createNgModuleRef: undefined,
        overrideProvider: undefined,
        clearProviderOverrides: undefined,
        checkAndUpdateView: undefined,
        checkNoChangesView: undefined,
        destroyView: undefined,
        resolveDep: undefined,
        createDebugContext: undefined,
        handleEvent: undefined,
        updateDirectives: undefined,
        updateRenderer: undefined,
        dirtyParentQueries: undefined,
    };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} context
     * @param {?} oldValue
     * @param {?} currValue
     * @param {?} isFirstCheck
     * @return {?}
     */
    function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {
        var /** @type {?} */ msg = "ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
        if (isFirstCheck) {
            msg +=
                " It seems like the view has been created after its parent and its children have been dirty checked." +
                    " Has it been created in a change detection hook ?";
        }
        return viewDebugError(msg, context);
    }
    /**
     * @param {?} err
     * @param {?} context
     * @return {?}
     */
    function viewWrappedDebugError(err, context) {
        if (!(err instanceof Error)) {
            // errors that are not Error instances don't have a stack,
            // so it is ok to wrap them into a new Error object...
            err = new Error(err.toString());
        }
        _addDebugContext(err, context);
        return err;
    }
    /**
     * @param {?} msg
     * @param {?} context
     * @return {?}
     */
    function viewDebugError(msg, context) {
        var /** @type {?} */ err = new Error(msg);
        _addDebugContext(err, context);
        return err;
    }
    /**
     * @param {?} err
     * @param {?} context
     * @return {?}
     */
    function _addDebugContext(err, context) {
        ((err))[ERROR_DEBUG_CONTEXT] = context;
        ((err))[ERROR_LOGGER] = context.logError.bind(context);
    }
    /**
     * @param {?} err
     * @return {?}
     */
    function isViewDebugError(err) {
        return !!getDebugContext(err);
    }
    /**
     * @param {?} action
     * @return {?}
     */
    function viewDestroyedError(action) {
        return new Error("ViewDestroyedError: Attempt to use a destroyed view: " + action);
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var NOOP = function () { };
    var _tokenKeyCache = new Map();
    /**
     * @param {?} token
     * @return {?}
     */
    function tokenKey(token) {
        var /** @type {?} */ key = _tokenKeyCache.get(token);
        if (!key) {
            key = stringify(token) + '_' + _tokenKeyCache.size;
            _tokenKeyCache.set(token, key);
        }
        return key;
    }
    /**
     * @param {?} view
     * @param {?} nodeIdx
     * @param {?} bindingIdx
     * @param {?} value
     * @return {?}
     */
    function unwrapValue(view, nodeIdx, bindingIdx, value) {
        if (value instanceof WrappedValue) {
            value = value.wrapped;
            var /** @type {?} */ globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;
            var /** @type {?} */ oldValue = view.oldValues[globalBindingIdx];
            if (oldValue instanceof WrappedValue) {
                oldValue = oldValue.wrapped;
            }
            view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);
        }
        return value;
    }
    var UNDEFINED_RENDERER_TYPE_ID = '$$undefined';
    var EMPTY_RENDERER_TYPE_ID = '$$empty';
    /**
     * @param {?} values
     * @return {?}
     */
    function createRendererType2(values) {
        return {
            id: UNDEFINED_RENDERER_TYPE_ID,
            styles: values.styles,
            encapsulation: values.encapsulation,
            data: values.data
        };
    }
    var _renderCompCount = 0;
    /**
     * @param {?=} type
     * @return {?}
     */
    function resolveRendererType2(type) {
        if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {
            // first time we see this RendererType2. Initialize it...
            var /** @type {?} */ isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||
                type.styles.length || Object.keys(type.data).length);
            if (isFilled) {
                type.id = "c" + _renderCompCount++;
            }
            else {
                type.id = EMPTY_RENDERER_TYPE_ID;
            }
        }
        if (type && type.id === EMPTY_RENDERER_TYPE_ID) {
            type = null;
        }
        return type || null;
    }
    /**
     * @param {?} view
     * @param {?} def
     * @param {?} bindingIdx
     * @param {?} value
     * @return {?}
     */
    function checkBinding(view, def, bindingIdx, value) {
        var /** @type {?} */ oldValues = view.oldValues;
        if ((view.state & 2 /* FirstCheck */) ||
            !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {
            return true;
        }
        return false;
    }
    /**
     * @param {?} view
     * @param {?} def
     * @param {?} bindingIdx
     * @param {?} value
     * @return {?}
     */
    function checkAndUpdateBinding(view, def, bindingIdx, value) {
        if (checkBinding(view, def, bindingIdx, value)) {
            view.oldValues[def.bindingIndex + bindingIdx] = value;
            return true;
        }
        return false;
    }
    /**
     * @param {?} view
     * @param {?} def
     * @param {?} bindingIdx
     * @param {?} value
     * @return {?}
     */
    function checkBindingNoChanges(view, def, bindingIdx, value) {
        var /** @type {?} */ oldValue = view.oldValues[def.bindingIndex + bindingIdx];
        if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {
            throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), oldValue, value, (view.state & 1 /* BeforeFirstCheck */) !== 0);
        }
    }
    /**
     * @param {?} view
     * @return {?}
     */
    function markParentViewsForCheck(view) {
        var /** @type {?} */ currView = view;
        while (currView) {
            if (currView.def.flags & 2 /* OnPush */) {
                currView.state |= 8 /* ChecksEnabled */;
            }
            currView = currView.viewContainerParent || currView.parent;
        }
    }
    /**
     * @param {?} view
     * @param {?} endView
     * @return {?}
     */
    function markParentViewsForCheckProjectedViews(view, endView) {
        var /** @type {?} */ currView = view;
        while (currView && currView !== endView) {
            currView.state |= 64 /* CheckProjectedViews */;
            currView = currView.viewContainerParent || currView.parent;
        }
    }
    /**
     * @param {?} view
     * @param {?} nodeIndex
     * @param {?} eventName
     * @param {?} event
     * @return {?}
     */
    function dispatchEvent(view, nodeIndex, eventName, event) {
        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
        var /** @type {?} */ startView = nodeDef.flags & 33554432 /* ComponentView */ ? asElementData(view, nodeIndex).componentView : view;
        markParentViewsForCheck(startView);
        return Services.handleEvent(view, nodeIndex, eventName, event);
    }
    /**
     * @param {?} view
     * @return {?}
     */
    function declaredViewContainer(view) {
        if (view.parent) {
            var /** @type {?} */ parentView = view.parent;
            return asElementData(parentView, /** @type {?} */ ((view.parentNodeDef)).nodeIndex);
        }
        return null;
    }
    /**
     * for component views, this is the host element.
     * for embedded views, this is the index of the parent node
     * that contains the view container.
     * @param {?} view
     * @return {?}
     */
    function viewParentEl(view) {
        var /** @type {?} */ parentView = view.parent;
        if (parentView) {
            return ((view.parentNodeDef)).parent;
        }
        else {
            return null;
        }
    }
    /**
     * @param {?} view
     * @param {?} def
     * @return {?}
     */
    function renderNode(view, def) {
        switch (def.flags & 201347067 /* Types */) {
            case 1 /* TypeElement */:
                return asElementData(view, def.nodeIndex).renderElement;
            case 2 /* TypeText */:
                return asTextData(view, def.nodeIndex).renderText;
        }
    }
    /**
     * @param {?} target
     * @param {?} name
     * @return {?}
     */
    function elementEventFullName(target, name) {
        return target ? target + ":" + name : name;
    }
    /**
     * @param {?} view
     * @return {?}
     */
    function isComponentView(view) {
        return !!view.parent && !!(((view.parentNodeDef)).flags & 32768 /* Component */);
    }
    /**
     * @param {?} view
     * @return {?}
     */
    function isEmbeddedView(view) {
        return !!view.parent && !(((view.parentNodeDef)).flags & 32768 /* Component */);
    }
    /**
     * @param {?} queryId
     * @return {?}
     */
    function filterQueryId(queryId) {
        return 1 << (queryId % 32);
    }
    /**
     * @param {?} matchedQueriesDsl
     * @return {?}
     */
    function splitMatchedQueriesDsl(matchedQueriesDsl) {
        var /** @type {?} */ matchedQueries = {};
        var /** @type {?} */ matchedQueryIds = 0;
        var /** @type {?} */ references = {};
        if (matchedQueriesDsl) {
            matchedQueriesDsl.forEach(function (_a) {
                var queryId = _a[0], valueType = _a[1];
                if (typeof queryId === 'number') {
                    matchedQueries[queryId] = valueType;
                    matchedQueryIds |= filterQueryId(queryId);
                }
                else {
                    references[queryId] = valueType;
                }
            });
        }
        return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };
    }
    /**
     * @param {?} deps
     * @return {?}
     */
    function splitDepsDsl(deps) {
        return deps.map(function (value) {
            var /** @type {?} */ token;
            var /** @type {?} */ flags;
            if (Array.isArray(value)) {
                flags = value[0], token = value[1];
            }
            else {
                flags = 0 /* None */;
                token = value;
            }
            return { flags: flags, token: token, tokenKey: tokenKey(token) };
        });
    }
    /**
     * @param {?} view
     * @param {?} renderHost
     * @param {?} def
     * @return {?}
     */
    function getParentRenderElement(view, renderHost, def) {
        var /** @type {?} */ renderParent = def.renderParent;
        if (renderParent) {
            if ((renderParent.flags & 1 /* TypeElement */) === 0 ||
                (renderParent.flags & 33554432 /* ComponentView */) === 0 ||
                (((renderParent.element)).componentRendererType && ((((renderParent.element)).componentRendererType)).encapsulation ===
                    ViewEncapsulation.Native)) {
                // only children of non components, or children of components with native encapsulation should
                // be attached.
                return asElementData(view, /** @type {?} */ ((def.renderParent)).nodeIndex).renderElement;
            }
        }
        else {
            return renderHost;
        }
    }
    var DEFINITION_CACHE = new WeakMap();
    /**
     * @template D
     * @param {?} factory
     * @return {?}
     */
    function resolveDefinition(factory) {
        var /** @type {?} */ value = (((DEFINITION_CACHE.get(factory))));
        if (!value) {
            value = factory(function () { return NOOP; });
            value.factory = factory;
            DEFINITION_CACHE.set(factory, value);
        }
        return value;
    }
    /**
     * @param {?} view
     * @return {?}
     */
    function rootRenderNodes(view) {
        var /** @type {?} */ renderNodes = [];
        visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);
        return renderNodes;
    }
    /**
     * @param {?} view
     * @param {?} action
     * @param {?} parentNode
     * @param {?} nextSibling
     * @param {?=} target
     * @return {?}
     */
    function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {
        // We need to re-compute the parent node in case the nodes have been moved around manually
        if (action === 3 /* RemoveChild */) {
            parentNode = view.renderer.parentNode(renderNode(view, /** @type {?} */ ((view.def.lastRenderRootNode))));
        }
        visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);
    }
    /**
     * @param {?} view
     * @param {?} action
     * @param {?} startIndex
     * @param {?} endIndex
     * @param {?} parentNode
     * @param {?} nextSibling
     * @param {?=} target
     * @return {?}
     */
    function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {
        for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {
            var /** @type {?} */ nodeDef = view.def.nodes[i];
            if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {
                visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);
            }
            // jump to next sibling
            i += nodeDef.childCount;
        }
    }
    /**
     * @param {?} view
     * @param {?} ngContentIndex
     * @param {?} action
     * @param {?} parentNode
     * @param {?} nextSibling
     * @param {?=} target
     * @return {?}
     */
    function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {
        var /** @type {?} */ compView = view;
        while (compView && !isComponentView(compView)) {
            compView = compView.parent;
        }
        var /** @type {?} */ hostView = ((compView)).parent;
        var /** @type {?} */ hostElDef = viewParentEl(/** @type {?} */ ((compView)));
        var /** @type {?} */ startIndex = ((hostElDef)).nodeIndex + 1;
        var /** @type {?} */ endIndex = ((hostElDef)).nodeIndex + ((hostElDef)).childCount;
        for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {
            var /** @type {?} */ nodeDef = ((hostView)).def.nodes[i];
            if (nodeDef.ngContentIndex === ngContentIndex) {
                visitRenderNode(/** @type {?} */ ((hostView)), nodeDef, action, parentNode, nextSibling, target);
            }
            // jump to next sibling
            i += nodeDef.childCount;
        }
        if (!((hostView)).parent) {
            // a root view
            var /** @type {?} */ projectedNodes = view.root.projectableNodes[ngContentIndex];
            if (projectedNodes) {
                for (var /** @type {?} */ i = 0; i < projectedNodes.length; i++) {
                    execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);
                }
            }
        }
    }
    /**
     * @param {?} view
     * @param {?} nodeDef
     * @param {?} action
     * @param {?} parentNode
     * @param {?} nextSibling
     * @param {?=} target
     * @return {?}
     */
    function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {
        if (nodeDef.flags & 8 /* TypeNgContent */) {
            visitProjectedRenderNodes(view, /** @type {?} */ ((nodeDef.ngContent)).index, action, parentNode, nextSibling, target);
        }
        else {
            var /** @type {?} */ rn = renderNode(view, nodeDef);
            if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&
                (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {
                // Note: we might need to do both actions.
                if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {
                    execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
                }
                if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {
                    var /** @type {?} */ compView = asElementData(view, nodeDef.nodeIndex).componentView;
                    execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);
                }
            }
            else {
                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
            }
            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
                var /** @type {?} */ embeddedViews = ((asElementData(view, nodeDef.nodeIndex).viewContainer))._embeddedViews;
                for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {
                    visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);
                }
            }
            if (nodeDef.flags & 1 /* TypeElement */ && !((nodeDef.element)).name) {
                visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);
            }
        }
    }
    /**
     * @param {?} view
     * @param {?} renderNode
     * @param {?} action
     * @param {?} parentNode
     * @param {?} nextSibling
     * @param {?=} target
     * @return {?}
     */
    function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {
        var /** @type {?} */ renderer = view.renderer;
        switch (action) {
            case 1 /* AppendChild */:
                renderer.appendChild(parentNode, renderNode);
                break;
            case 2 /* InsertBefore */:
                renderer.insertBefore(parentNode, renderNode, nextSibling);
                break;
            case 3 /* RemoveChild */:
                renderer.removeChild(parentNode, renderNode);
                break;
            case 0 /* Collect */:
                ((target)).push(renderNode);
                break;
        }
    }
    var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
    /**
     * @param {?} name
     * @return {?}
     */
    function splitNamespace(name) {
        if (name[0] === ':') {
            var /** @type {?} */ match = ((name.match(NS_PREFIX_RE)));
            return [match[1], match[2]];
        }
        return ['', name];
    }
    /**
     * @param {?} bindings
     * @return {?}
     */
    function calcBindingFlags(bindings) {
        var /** @type {?} */ flags = 0;
        for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
            flags |= bindings[i].flags;
        }
        return flags;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} flags
     * @param {?} matchedQueriesDsl
     * @param {?} ngContentIndex
     * @param {?} childCount
     * @param {?=} handleEvent
     * @param {?=} templateFactory
     * @return {?}
     */
    function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {
        flags |= 1 /* TypeElement */;
        var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
        var /** @type {?} */ template = templateFactory ? resolveDefinition(templateFactory) : null;
        return {
            // will bet set by the view definition
            nodeIndex: -1,
            parent: null,
            renderParent: null,
            bindingIndex: -1,
            outputIndex: -1,
            // regular values
            flags: flags,
            checkIndex: -1,
            childFlags: 0,
            directChildFlags: 0,
            childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,
            bindings: [],
            bindingFlags: 0,
            outputs: [],
            element: {
                ns: null,
                name: null,
                attrs: null, template: template,
                componentProvider: null,
                componentView: null,
                componentRendererType: null,
                publicProviders: null,
                allProviders: null,
                handleEvent: handleEvent || NOOP
            },
            provider: null,
            text: null,
            query: null,
            ngContent: null
        };
    }
    /**
     * @param {?} checkIndex
     * @param {?} flags
     * @param {?} matchedQueriesDsl
     * @param {?} ngContentIndex
     * @param {?} childCount
     * @param {?} namespaceAndName
     * @param {?=} fixedAttrs
     * @param {?=} bindings
     * @param {?=} outputs
     * @param {?=} handleEvent
     * @param {?=} componentView
     * @param {?=} componentRendererType
     * @return {?}
     */
    function elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {
        if (fixedAttrs === void 0) { fixedAttrs = []; }
        if (!handleEvent) {
            handleEvent = NOOP;
        }
        var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
        var /** @type {?} */ ns = ((null));
        var /** @type {?} */ name = ((null));
        if (namespaceAndName) {
            _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];
        }
        bindings = bindings || [];
        var /** @type {?} */ bindingDefs = new Array(bindings.length);
        for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
            var _c = bindings[i], bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];
            var _d = splitNamespace(namespaceAndName_1), ns_1 = _d[0], name_1 = _d[1];
            var /** @type {?} */ securityContext = ((undefined));
            var /** @type {?} */ suffix = ((undefined));
            switch (bindingFlags & 15 /* Types */) {
                case 4 /* TypeElementStyle */:
                    suffix = (suffixOrSecurityContext);
                    break;
                case 1 /* TypeElementAttribute */:
                case 8 /* TypeProperty */:
                    securityContext = (suffixOrSecurityContext);
                    break;
            }
            bindingDefs[i] =
                { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };
        }
        outputs = outputs || [];
        var /** @type {?} */ outputDefs = new Array(outputs.length);
        for (var /** @type {?} */ i = 0; i < outputs.length; i++) {
            var _e = outputs[i], target = _e[0], eventName = _e[1];
            outputDefs[i] = {
                type: 0 /* ElementOutput */,
                target: /** @type {?} */ (target), eventName: eventName,
                propName: null
            };
        }
        fixedAttrs = fixedAttrs || [];
        var /** @type {?} */ attrs = (fixedAttrs.map(function (_a) {
            var namespaceAndName = _a[0], value = _a[1];
            var _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];
            return [ns, name, value];
        }));
        componentRendererType = resolveRendererType2(componentRendererType);
        if (componentView) {
            flags |= 33554432 /* ComponentView */;
        }
        flags |= 1 /* TypeElement */;
        return {
            // will bet set by the view definition
            nodeIndex: -1,
            parent: null,
            renderParent: null,
            bindingIndex: -1,
            outputIndex: -1,
            // regular values
            checkIndex: checkIndex,
            flags: flags,
            childFlags: 0,
            directChildFlags: 0,
            childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,
            bindings: bindingDefs,
            bindingFlags: calcBindingFlags(bindingDefs),
            outputs: outputDefs,
            element: {
                ns: ns,
                name: name,
                attrs: attrs,
                template: null,
                // will bet set by the view definition
                componentProvider: null,
                componentView: componentView || null,
                componentRendererType: componentRendererType,
                publicProviders: null,
                allProviders: null,
                handleEvent: handleEvent || NOOP,
            },
            provider: null,
            text: null,
            query: null,
            ngContent: null
        };
        var _b;
    }
    /**
     * @param {?} view
     * @param {?} renderHost
     * @param {?} def
     * @return {?}
     */
    function createElement(view, renderHost, def) {
        var /** @type {?} */ elDef = ((def.element));
        var /** @type {?} */ rootSelectorOrNode = view.root.selectorOrNode;
        var /** @type {?} */ renderer = view.renderer;
        var /** @type {?} */ el;
        if (view.parent || !rootSelectorOrNode) {
            if (elDef.name) {
                el = renderer.createElement(elDef.name, elDef.ns);
            }
            else {
                el = renderer.createComment('');
            }
            var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);
            if (parentEl) {
                renderer.appendChild(parentEl, el);
            }
        }
        else {
            el = renderer.selectRootElement(rootSelectorOrNode);
        }
        if (elDef.attrs) {
            for (var /** @type {?} */ i = 0; i < elDef.attrs.length; i++) {
                var _a = elDef.attrs[i], ns = _a[0], name = _a[1], value = _a[2];
                renderer.setAttribute(el, name, value, ns);
            }
        }
        return el;
    }
    /**
     * @param {?} view
     * @param {?} compView
     * @param {?} def
     * @param {?} el
     * @return {?}
     */
    function listenToElementOutputs(view, compView, def, el) {
        for (var /** @type {?} */ i = 0; i < def.outputs.length; i++) {
            var /** @type {?} */ output = def.outputs[i];
            var /** @type {?} */ handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));
            var /** @type {?} */ listenTarget = output.target;
            var /** @type {?} */ listenerView = view;
            if (output.target === 'component') {
                listenTarget = null;
                listenerView = compView;
            }
            var /** @type {?} */ disposable = (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure)); /** @type {?} */
            ((view.disposables))[def.outputIndex + i] = disposable;
        }
    }
    /**
     * @param {?} view
     * @param {?} index
     * @param {?} eventName
     * @return {?}
     */
    function renderEventHandlerClosure(view, index, eventName) {
        return function (event) {
            try {
                return dispatchEvent(view, index, eventName, event);
            }
            catch (e) {
                // Attention: Don't rethrow, to keep in sync with directive events.
                view.root.errorHandler.handleError(e);
            }
        };
    }
    /**
     * @param {?} view
     * @param {?} def
     * @param {?} v0
     * @param {?} v1
     * @param {?} v2
     * @param {?} v3
     * @param {?} v4
     * @param {?} v5
     * @param {?} v6
     * @param {?} v7
     * @param {?} v8
     * @param {?} v9
     * @return {?}
     */
    function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var /** @type {?} */ bindLen = def.bindings.length;
        var /** @type {?} */ changed = false;
        if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))
            changed = true;
        if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))
            changed = true;
        if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))
            changed = true;
        if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))
            changed = true;
        if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))
            changed = true;
        if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))
            changed = true;
        if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))
            changed = true;
        if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))
            changed = true;
        if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))
            changed = true;
        if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))
            changed = true;
        return changed;
    }
    /**
     * @param {?} view
     * @param {?} def
     * @param {?} values
     * @return {?}
     */
    function checkAndUpdateElementDynamic(view, def, values) {
        var /** @type {?} */ changed = false;
        for (var /** @type {?} */ i = 0; i < values.length; i++) {
            if (checkAndUpdateElementValue(view, def, i, values[i]))
                changed = true;
        }
        return changed;
    }
    /**
     * @param {?} view
     * @param {?} def
     * @param {?} bindingIdx
     * @param {?} value
     * @return {?}
     */
    function checkAndUpdateElementValue(view, def, bindingIdx, value) {
        if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {
            return false;
        }
        var /** @type {?} */ binding = def.bindings[bindingIdx];
        var /** @type {?} */ elData = asElementData(view, def.nodeIndex);
        var /** @type {?} */ renderNode$$1 = elData.renderElement;
        var /** @type {?} */ name = ((binding.name));
        switch (binding.flags & 15 /* Types */) {
            case 1 /* TypeElementAttribute */:
                setElementAttribute(view, binding, renderNode$$1, binding.ns, name, value);
                break;
            case 2 /* TypeElementClass */:
                setElementClass(view, renderNode$$1, name, value);
                break;
            case 4 /* TypeElementStyle */:
                setElementStyle(view, binding, renderNode$$1, name, value);
                break;
            case 8 /* TypeProperty */:
                var /** @type {?} */ bindView = (def.flags & 33554432 /* ComponentView */ &&
                    binding.flags & 32 /* SyntheticHostProperty */) ?
                    elData.componentView :
                    view;
                setElementProperty(bindView, binding, renderNode$$1, name, value);
                break;
        }
        return true;
    }
    /**
     * @param {?} view
     * @param {?} binding
     * @param {?} renderNode
     * @param {?} ns
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function setElementAttribute(view, binding, renderNode$$1, ns, name, value) {
        var /** @type {?} */ securityContext = binding.securityContext;
        var /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
        renderValue = renderValue != null ? renderValue.toString() : null;
        var /** @type {?} */ renderer = view.renderer;
        if (value != null) {
            renderer.setAttribute(renderNode$$1, name, renderValue, ns);
        }
        else {
            renderer.removeAttribute(renderNode$$1, name, ns);
        }
    }
    /**
     * @param {?} view
     * @param {?} renderNode
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function setElementClass(view, renderNode$$1, name, value) {
        var /** @type {?} */ renderer = view.renderer;
        if (value) {
            renderer.addClass(renderNode$$1, name);
        }
        else {
            renderer.removeClass(renderNode$$1, name);
        }
    }
    /**
     * @param {?} view
     * @param {?} binding
     * @param {?} renderNode
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function setElementStyle(view, binding, renderNode$$1, name, value) {
        var /** @type {?} */ renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, /** @type {?} */ (value));
        if (renderValue != null) {
            renderValue = renderValue.toString();
            var /** @type {?} */ unit = binding.suffix;
            if (unit != null) {
                renderValue = renderValue + unit;
            }
        }
        else {
            renderValue = null;
        }
        var /** @type {?} */ renderer = view.renderer;
        if (renderValue != null) {
            renderer.setStyle(renderNode$$1, name, renderValue);
        }
        else {
            renderer.removeStyle(renderNode$$1, name);
        }
    }
    /**
     * @param {?} view
     * @param {?} binding
     * @param {?} renderNode
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function setElementProperty(view, binding, renderNode$$1, name, value) {
        var /** @type {?} */ securityContext = binding.securityContext;
        var /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
        view.renderer.setProperty(renderNode$$1, name, renderValue);
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var UNDEFINED_VALUE = new Object();
    var InjectorRefTokenKey$1 = tokenKey(Injector);
    var NgModuleRefTokenKey = tokenKey(NgModuleRef);
    /**
     * @param {?} flags
     * @param {?} token
     * @param {?} value
     * @param {?} deps
     * @return {?}
     */
    function moduleProvideDef(flags, token, value, deps) {
        var /** @type {?} */ depDefs = splitDepsDsl(deps);
        return {
            // will bet set by the module definition
            index: -1,
            deps: depDefs, flags: flags, token: token, value: value
        };
    }
    /**
     * @param {?} providers
     * @return {?}
     */
    function moduleDef(providers) {
        var /** @type {?} */ providersByKey = {};
        for (var /** @type {?} */ i = 0; i < providers.length; i++) {
            var /** @type {?} */ provider = providers[i];
            provider.index = i;
            providersByKey[tokenKey(provider.token)] = provider;
        }
        return {
            // Will be filled later...
            factory: null,
            providersByKey: providersByKey,
            providers: providers
        };
    }
    /**
     * @param {?} data
     * @return {?}
     */
    function initNgModule(data) {
        var /** @type {?} */ def = data._def;
        var /** @type {?} */ providers = data._providers = new Array(def.providers.length);
        for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {
            var /** @type {?} */ provDef = def.providers[i];
            if (!(provDef.flags & 4096 /* LazyProvider */)) {
                providers[i] = _createProviderInstance$1(data, provDef);
            }
        }
    }
    /**
     * @param {?} data
     * @param {?} depDef
     * @param {?=} notFoundValue
     * @return {?}
     */
    function resolveNgModuleDep(data, depDef, notFoundValue) {
        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
        if (depDef.flags & 8 /* Value */) {
            return depDef.token;
        }
        if (depDef.flags & 2 /* Optional */) {
            notFoundValue = null;
        }
        if (depDef.flags & 1 /* SkipSelf */) {
            return data._parent.get(depDef.token, notFoundValue);
        }
        var /** @type {?} */ tokenKey$$1 = depDef.tokenKey;
        switch (tokenKey$$1) {
            case InjectorRefTokenKey$1:
            case NgModuleRefTokenKey:
                return data;
        }
        var /** @type {?} */ providerDef = data._def.providersByKey[tokenKey$$1];
        if (providerDef) {
            var /** @type {?} */ providerInstance = data._providers[providerDef.index];
            if (providerInstance === undefined) {
                providerInstance = data._providers[providerDef.index] =
                    _createProviderInstance$1(data, providerDef);
            }
            return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;
        }
        return data._parent.get(depDef.token, notFoundValue);
    }
    /**
     * @param {?} ngModule
     * @param {?} providerDef
     * @return {?}
     */
    function _createProviderInstance$1(ngModule, providerDef) {
        var /** @type {?} */ injectable;
        switch (providerDef.flags & 201347067 /* Types */) {
            case 512 /* TypeClassProvider */:
                injectable = _createClass(ngModule, providerDef.value, providerDef.deps);
                break;
            case 1024 /* TypeFactoryProvider */:
                injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);
                break;
            case 2048 /* TypeUseExistingProvider */:
                injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);
                break;
            case 256 /* TypeValueProvider */:
                injectable = providerDef.value;
                break;
        }
        return injectable === undefined ? UNDEFINED_VALUE : injectable;
    }
    /**
     * @param {?} ngModule
     * @param {?} ctor
     * @param {?} deps
     * @return {?}
     */
    function _createClass(ngModule, ctor, deps) {
        var /** @type {?} */ len = deps.length;
        switch (len) {
            case 0:
                return new ctor();
            case 1:
                return new ctor(resolveNgModuleDep(ngModule, deps[0]));
            case 2:
                return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));
            case 3:
                return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));
            default:
                var /** @type {?} */ depValues = new Array(len);
                for (var /** @type {?} */ i = 0; i < len; i++) {
                    depValues[i] = resolveNgModuleDep(ngModule, deps[i]);
                }
                return new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();
        }
    }
    /**
     * @param {?} ngModule
     * @param {?} factory
     * @param {?} deps
     * @return {?}
     */
    function _callFactory(ngModule, factory, deps) {
        var /** @type {?} */ len = deps.length;
        switch (len) {
            case 0:
                return factory();
            case 1:
                return factory(resolveNgModuleDep(ngModule, deps[0]));
            case 2:
                return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));
            case 3:
                return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));
            default:
                var /** @type {?} */ depValues = Array(len);
                for (var /** @type {?} */ i = 0; i < len; i++) {
                    depValues[i] = resolveNgModuleDep(ngModule, deps[i]);
                }
                return factory.apply(void 0, depValues);
        }
    }
    /**
     * @param {?} ngModule
     * @param {?} lifecycles
     * @return {?}
     */
    function callNgModuleLifecycle(ngModule, lifecycles) {
        var /** @type {?} */ def = ngModule._def;
        for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {
            var /** @type {?} */ provDef = def.providers[i];
            if (provDef.flags & 131072 /* OnDestroy */) {
                var /** @type {?} */ instance = ngModule._providers[i];
                if (instance && instance !== UNDEFINED_VALUE) {
                    instance.ngOnDestroy();
                }
            }
        }
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} parentView
     * @param {?} elementData
     * @param {?} viewIndex
     * @param {?} view
     * @return {?}
     */
    function attachEmbeddedView(parentView, elementData, viewIndex, view) {
        var /** @type {?} */ embeddedViews = ((elementData.viewContainer))._embeddedViews;
        if (viewIndex === null || viewIndex === undefined) {
            viewIndex = embeddedViews.length;
        }
        view.viewContainerParent = parentView;
        addToArray(embeddedViews, /** @type {?} */ ((viewIndex)), view);
        attachProjectedView(elementData, view);
        Services.dirtyParentQueries(view);
        var /** @type {?} */ prevView = ((viewIndex)) > 0 ? embeddedViews[((viewIndex)) - 1] : null;
        renderAttachEmbeddedView(elementData, prevView, view);
    }
    /**
     * @param {?} vcElementData
     * @param {?} view
     * @return {?}
     */
    function attachProjectedView(vcElementData, view) {
        var /** @type {?} */ dvcElementData = declaredViewContainer(view);
        if (!dvcElementData || dvcElementData === vcElementData ||
            view.state & 16 /* IsProjectedView */) {
            return;
        }
        // Note: For performance reasons, we
        // - add a view to template._projectedViews only 1x throughout its lifetime,
        //   and remove it not until the view is destroyed.
        //   (hard, as when a parent view is attached/detached we would need to attach/detach all
        //    nested projected views as well, even accross component boundaries).
        // - don't track the insertion order of views in the projected views array
        //   (hard, as when the views of the same template are inserted different view containers)
        view.state |= 16 /* IsProjectedView */;
        var /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;
        if (!projectedViews) {
            projectedViews = dvcElementData.template._projectedViews = [];
        }
        projectedViews.push(view);
        // Note: we are changing the NodeDef here as we cannot calculate
        // the fact whether a template is used for projection during compilation.
        markNodeAsProjectedTemplate(/** @type {?} */ ((view.parent)).def, /** @type {?} */ ((view.parentNodeDef)));
    }
    /**
     * @param {?} viewDef
     * @param {?} nodeDef
     * @return {?}
     */
    function markNodeAsProjectedTemplate(viewDef, nodeDef) {
        if (nodeDef.flags & 4 /* ProjectedTemplate */) {
            return;
        }
        viewDef.nodeFlags |= 4 /* ProjectedTemplate */;
        nodeDef.flags |= 4 /* ProjectedTemplate */;
        var /** @type {?} */ parentNodeDef = nodeDef.parent;
        while (parentNodeDef) {
            parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;
            parentNodeDef = parentNodeDef.parent;
        }
    }
    /**
     * @param {?} elementData
     * @param {?=} viewIndex
     * @return {?}
     */
    function detachEmbeddedView(elementData, viewIndex) {
        var /** @type {?} */ embeddedViews = ((elementData.viewContainer))._embeddedViews;
        if (viewIndex == null || viewIndex >= embeddedViews.length) {
            viewIndex = embeddedViews.length - 1;
        }
        if (viewIndex < 0) {
            return null;
        }
        var /** @type {?} */ view = embeddedViews[viewIndex];
        view.viewContainerParent = null;
        removeFromArray(embeddedViews, viewIndex);
        // See attachProjectedView for why we don't update projectedViews here.
        Services.dirtyParentQueries(view);
        renderDetachView(view);
        return view;
    }
    /**
     * @param {?} view
     * @return {?}
     */
    function detachProjectedView(view) {
        if (!(view.state & 16 /* IsProjectedView */)) {
            return;
        }
        var /** @type {?} */ dvcElementData = declaredViewContainer(view);
        if (dvcElementData) {
            var /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;
            if (projectedViews) {
                removeFromArray(projectedViews, projectedViews.indexOf(view));
                Services.dirtyParentQueries(view);
            }
        }
    }
    /**
     * @param {?} elementData
     * @param {?} oldViewIndex
     * @param {?} newViewIndex
     * @return {?}
     */
    function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {
        var /** @type {?} */ embeddedViews = ((elementData.viewContainer))._embeddedViews;
        var /** @type {?} */ view = embeddedViews[oldViewIndex];
        removeFromArray(embeddedViews, oldViewIndex);
        if (newViewIndex == null) {
            newViewIndex = embeddedViews.length;
        }
        addToArray(embeddedViews, newViewIndex, view);
        // Note: Don't need to change projectedViews as the order in there
        // as always invalid...
        Services.dirtyParentQueries(view);
        renderDetachView(view);
        var /** @type {?} */ prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;
        renderAttachEmbeddedView(elementData, prevView, view);
        return view;
    }
    /**
     * @param {?} elementData
     * @param {?} prevView
     * @param {?} view
     * @return {?}
     */
    function renderAttachEmbeddedView(elementData, prevView, view) {
        var /** @type {?} */ prevRenderNode = prevView ? renderNode(prevView, /** @type {?} */ ((prevView.def.lastRenderRootNode))) :
            elementData.renderElement;
        var /** @type {?} */ parentNode = view.renderer.parentNode(prevRenderNode);
        var /** @type {?} */ nextSibling = view.renderer.nextSibling(prevRenderNode);
        // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!
        // However, browsers automatically do `appendChild` when there is no `nextSibling`.
        visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);
    }
    /**
     * @param {?} view
     * @return {?}
     */
    function renderDetachView(view) {
        visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);
    }
    /**
     * @param {?} arr
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    function addToArray(arr, index, value) {
        // perf: array.push is faster than array.splice!
        if (index >= arr.length) {
            arr.push(value);
        }
        else {
            arr.splice(index, 0, value);
        }
    }
    /**
     * @param {?} arr
     * @param {?} index
     * @return {?}
     */
    function removeFromArray(arr, index) {
        // perf: array.pop is faster than array.splice!
        if (index >= arr.length - 1) {
            arr.pop();
        }
        else {
            arr.splice(index, 1);
        }
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var EMPTY_CONTEXT = new Object();
    /**
     * @param {?} selector
     * @param {?} componentType
     * @param {?} viewDefFactory
     * @param {?} inputs
     * @param {?} outputs
     * @param {?} ngContentSelectors
     * @return {?}
     */
    function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {
        return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);
    }
    var ComponentFactory_ = (function (_super) {
        __extends(ComponentFactory_, _super);
        /**
         * @param {?} selector
         * @param {?} componentType
         * @param {?} viewDefFactory
         * @param {?} _inputs
         * @param {?} _outputs
         * @param {?} ngContentSelectors
         */
        function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {
            var _this = 
            // Attention: this ctor is called as top level function.
            // Putting any logic in here will destroy closure tree shaking!
            _super.call(this) || this;
            _this.selector = selector;
            _this.componentType = componentType;
            _this._inputs = _inputs;
            _this._outputs = _outputs;
            _this.ngContentSelectors = ngContentSelectors;
            _this.viewDefFactory = viewDefFactory;
            return _this;
        }
        Object.defineProperty(ComponentFactory_.prototype, "inputs", {
            /**
             * @return {?}
             */
            get: function () {
                var /** @type {?} */ inputsArr = [];
                var /** @type {?} */ inputs = ((this._inputs));
                for (var /** @type {?} */ propName in inputs) {
                    var /** @type {?} */ templateName = inputs[propName];
                    inputsArr.push({ propName: propName, templateName: templateName });
                }
                return inputsArr;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentFactory_.prototype, "outputs", {
            /**
             * @return {?}
             */
            get: function () {
                var /** @type {?} */ outputsArr = [];
                for (var /** @type {?} */ propName in this._outputs) {
                    var /** @type {?} */ templateName = this._outputs[propName];
                    outputsArr.push({ propName: propName, templateName: templateName });
                }
                return outputsArr;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new component.
         * @param {?} injector
         * @param {?=} projectableNodes
         * @param {?=} rootSelectorOrNode
         * @param {?=} ngModule
         * @return {?}
         */
        ComponentFactory_.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
            if (!ngModule) {
                throw new Error('ngModule should be provided');
            }
            var /** @type {?} */ viewDef = resolveDefinition(this.viewDefFactory);
            var /** @type {?} */ componentNodeIndex = ((((viewDef.nodes[0].element)).componentProvider)).nodeIndex;
            var /** @type {?} */ view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);
            var /** @type {?} */ component = asProviderData(view, componentNodeIndex).instance;
            if (rootSelectorOrNode) {
                view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);
            }
            return new ComponentRef_(view, new ViewRef_(view), component);
        };
        return ComponentFactory_;
    }(ComponentFactory));
    var ComponentRef_ = (function (_super) {
        __extends(ComponentRef_, _super);
        /**
         * @param {?} _view
         * @param {?} _viewRef
         * @param {?} _component
         */
        function ComponentRef_(_view, _viewRef, _component) {
            var _this = _super.call(this) || this;
            _this._view = _view;
            _this._viewRef = _viewRef;
            _this._component = _component;
            _this._elDef = _this._view.def.nodes[0];
            return _this;
        }
        Object.defineProperty(ComponentRef_.prototype, "location", {
            /**
             * @return {?}
             */
            get: function () {
                return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentRef_.prototype, "injector", {
            /**
             * @return {?}
             */
            get: function () { return new Injector_(this._view, this._elDef); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentRef_.prototype, "instance", {
            /**
             * @return {?}
             */
            get: function () { return this._component; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentRef_.prototype, "hostView", {
            /**
             * @return {?}
             */
            get: function () { return this._viewRef; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
            /**
             * @return {?}
             */
            get: function () { return this._viewRef; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentRef_.prototype, "componentType", {
            /**
             * @return {?}
             */
            get: function () { return (this._component.constructor); },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ComponentRef_.prototype.destroy = function () { this._viewRef.destroy(); };
        /**
         * @param {?} callback
         * @return {?}
         */
        ComponentRef_.prototype.onDestroy = function (callback) { this._viewRef.onDestroy(callback); };
        return ComponentRef_;
    }(ComponentRef));
    /**
     * @param {?} view
     * @param {?} elDef
     * @param {?} elData
     * @return {?}
     */
    function createViewContainerData(view, elDef, elData) {
        return new ViewContainerRef_(view, elDef, elData);
    }
    var ViewContainerRef_ = (function () {
        /**
         * @param {?} _view
         * @param {?} _elDef
         * @param {?} _data
         */
        function ViewContainerRef_(_view, _elDef, _data) {
            this._view = _view;
            this._elDef = _elDef;
            this._data = _data;
            /**
             * \@internal
             */
            this._embeddedViews = [];
        }
        Object.defineProperty(ViewContainerRef_.prototype, "element", {
            /**
             * @return {?}
             */
            get: function () { return new ElementRef(this._data.renderElement); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewContainerRef_.prototype, "injector", {
            /**
             * @return {?}
             */
            get: function () { return new Injector_(this._view, this._elDef); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
            /**
             * @return {?}
             */
            get: function () {
                var /** @type {?} */ view = this._view;
                var /** @type {?} */ elDef = this._elDef.parent;
                while (!elDef && view) {
                    elDef = viewParentEl(view);
                    view = ((view.parent));
                }
                return view ? new Injector_(view, elDef) : new Injector_(this._view, null);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ViewContainerRef_.prototype.clear = function () {
            var /** @type {?} */ len = this._embeddedViews.length;
            for (var /** @type {?} */ i = len - 1; i >= 0; i--) {
                var /** @type {?} */ view = ((detachEmbeddedView(this._data, i)));
                Services.destroyView(view);
            }
        };
        /**
         * @param {?} index
         * @return {?}
         */
        ViewContainerRef_.prototype.get = function (index) {
            var /** @type {?} */ view = this._embeddedViews[index];
            if (view) {
                var /** @type {?} */ ref = new ViewRef_(view);
                ref.attachToViewContainerRef(this);
                return ref;
            }
            return null;
        };
        Object.defineProperty(ViewContainerRef_.prototype, "length", {
            /**
             * @return {?}
             */
            get: function () { return this._embeddedViews.length; },
            enumerable: true,
            configurable: true
        });
        /**
         * @template C
         * @param {?} templateRef
         * @param {?=} context
         * @param {?=} index
         * @return {?}
         */
        ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {
            var /** @type {?} */ viewRef = templateRef.createEmbeddedView(context || ({}));
            this.insert(viewRef, index);
            return viewRef;
        };
        /**
         * @template C
         * @param {?} componentFactory
         * @param {?=} index
         * @param {?=} injector
         * @param {?=} projectableNodes
         * @param {?=} ngModuleRef
         * @return {?}
         */
        ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {
            var /** @type {?} */ contextInjector = injector || this.parentInjector;
            if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {
                ngModuleRef = contextInjector.get(NgModuleRef);
            }
            var /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
            this.insert(componentRef.hostView, index);
            return componentRef;
        };
        /**
         * @param {?} viewRef
         * @param {?=} index
         * @return {?}
         */
        ViewContainerRef_.prototype.insert = function (viewRef, index) {
            if (viewRef.destroyed) {
                throw new Error('Cannot insert a destroyed View in a ViewContainer!');
            }
            var /** @type {?} */ viewRef_ = (viewRef);
            var /** @type {?} */ viewData = viewRef_._view;
            attachEmbeddedView(this._view, this._data, index, viewData);
            viewRef_.attachToViewContainerRef(this);
            return viewRef;
        };
        /**
         * @param {?} viewRef
         * @param {?} currentIndex
         * @return {?}
         */
        ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {
            if (viewRef.destroyed) {
                throw new Error('Cannot move a destroyed View in a ViewContainer!');
            }
            var /** @type {?} */ previousIndex = this._embeddedViews.indexOf(viewRef._view);
            moveEmbeddedView(this._data, previousIndex, currentIndex);
            return viewRef;
        };
        /**
         * @param {?} viewRef
         * @return {?}
         */
        ViewContainerRef_.prototype.indexOf = function (viewRef) {
            return this._embeddedViews.indexOf(((viewRef))._view);
        };
        /**
         * @param {?=} index
         * @return {?}
         */
        ViewContainerRef_.prototype.remove = function (index) {
            var /** @type {?} */ viewData = detachEmbeddedView(this._data, index);
            if (viewData) {
                Services.destroyView(viewData);
            }
        };
        /**
         * @param {?=} index
         * @return {?}
         */
        ViewContainerRef_.prototype.detach = function (index) {
            var /** @type {?} */ view = detachEmbeddedView(this._data, index);
            return view ? new ViewRef_(view) : null;
        };
        return ViewContainerRef_;
    }());
    /**
     * @param {?} view
     * @return {?}
     */
    function createChangeDetectorRef(view) {
        return new ViewRef_(view);
    }
    var ViewRef_ = (function () {
        /**
         * @param {?} _view
         */
        function ViewRef_(_view) {
            this._view = _view;
            this._viewContainerRef = null;
            this._appRef = null;
        }
        Object.defineProperty(ViewRef_.prototype, "rootNodes", {
            /**
             * @return {?}
             */
            get: function () { return rootRenderNodes(this._view); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewRef_.prototype, "context", {
            /**
             * @return {?}
             */
            get: function () { return this._view.context; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewRef_.prototype, "destroyed", {
            /**
             * @return {?}
             */
            get: function () { return (this._view.state & 128 /* Destroyed */) !== 0; },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ViewRef_.prototype.markForCheck = function () { markParentViewsForCheck(this._view); };
        /**
         * @return {?}
         */
        ViewRef_.prototype.detach = function () { this._view.state &= ~4 /* Attached */; };
        /**
         * @return {?}
         */
        ViewRef_.prototype.detectChanges = function () {
            var /** @type {?} */ fs = this._view.root.rendererFactory;
            if (fs.begin) {
                fs.begin();
            }
            Services.checkAndUpdateView(this._view);
            if (fs.end) {
                fs.end();
            }
        };
        /**
         * @return {?}
         */
        ViewRef_.prototype.checkNoChanges = function () { Services.checkNoChangesView(this._view); };
        /**
         * @return {?}
         */
        ViewRef_.prototype.reattach = function () { this._view.state |= 4 /* Attached */; };
        /**
         * @param {?} callback
         * @return {?}
         */
        ViewRef_.prototype.onDestroy = function (callback) {
            if (!this._view.disposables) {
                this._view.disposables = [];
            }
            this._view.disposables.push(/** @type {?} */ (callback));
        };
        /**
         * @return {?}
         */
        ViewRef_.prototype.destroy = function () {
            if (this._appRef) {
                this._appRef.detachView(this);
            }
            else if (this._viewContainerRef) {
                this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));
            }
            Services.destroyView(this._view);
        };
        /**
         * @return {?}
         */
        ViewRef_.prototype.detachFromAppRef = function () {
            this._appRef = null;
            renderDetachView(this._view);
            Services.dirtyParentQueries(this._view);
        };
        /**
         * @param {?} appRef
         * @return {?}
         */
        ViewRef_.prototype.attachToAppRef = function (appRef) {
            if (this._viewContainerRef) {
                throw new Error('This view is already attached to a ViewContainer!');
            }
            this._appRef = appRef;
        };
        /**
         * @param {?} vcRef
         * @return {?}
         */
        ViewRef_.prototype.attachToViewContainerRef = function (vcRef) {
            if (this._appRef) {
                throw new Error('This view is already attached directly to the ApplicationRef!');
            }
            this._viewContainerRef = vcRef;
        };
        return ViewRef_;
    }());
    /**
     * @param {?} view
     * @param {?} def
     * @return {?}
     */
    function createTemplateData(view, def) {
        return new TemplateRef_(view, def);
    }
    var TemplateRef_ = (function (_super) {
        __extends(TemplateRef_, _super);
        /**
         * @param {?} _parentView
         * @param {?} _def
         */
        function TemplateRef_(_parentView, _def) {
            var _this = _super.call(this) || this;
            _this._parentView = _parentView;
            _this._def = _def;
            return _this;
        }
        /**
         * @param {?} context
         * @return {?}
         */
        TemplateRef_.prototype.createEmbeddedView = function (context) {
            return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, /** @type {?} */ ((((this._def.element)).template)), context));
        };
        Object.defineProperty(TemplateRef_.prototype, "elementRef", {
            /**
             * @return {?}
             */
            get: function () {
                return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);
            },
            enumerable: true,
            configurable: true
        });
        return TemplateRef_;
    }(TemplateRef));
    /**
     * @param {?} view
     * @param {?} elDef
     * @return {?}
     */
    function createInjector(view, elDef) {
        return new Injector_(view, elDef);
    }
    var Injector_ = (function () {
        /**
         * @param {?} view
         * @param {?} elDef
         */
        function Injector_(view, elDef) {
            this.view = view;
            this.elDef = elDef;
        }
        /**
         * @param {?} token
         * @param {?=} notFoundValue
         * @return {?}
         */
        Injector_.prototype.get = function (token, notFoundValue) {
            if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
            var /** @type {?} */ allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;
            return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);
        };
        return Injector_;
    }());
    /**
     * @param {?} view
     * @param {?} index
     * @return {?}
     */
    function nodeValue(view, index) {
        var /** @type {?} */ def = view.def.nodes[index];
        if (def.flags & 1 /* TypeElement */) {
            var /** @type {?} */ elData = asElementData(view, def.nodeIndex);
            return ((def.element)).template ? elData.template : elData.renderElement;
        }
        else if (def.flags & 2 /* TypeText */) {
            return asTextData(view, def.nodeIndex).renderText;
        }
        else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {
            return asProviderData(view, def.nodeIndex).instance;
        }
        throw new Error("Illegal state: read nodeValue for node index " + index);
    }
    /**
     * @param {?} view
     * @return {?}
     */
    function createRendererV1(view) {
        return new RendererAdapter(view.renderer);
    }
    var RendererAdapter = (function () {
        /**
         * @param {?} delegate
         */
        function RendererAdapter(delegate) {
            this.delegate = delegate;
        }
        /**
         * @param {?} selectorOrNode
         * @return {?}
         */
        RendererAdapter.prototype.selectRootElement = function (selectorOrNode) {
            return this.delegate.selectRootElement(selectorOrNode);
        };
        /**
         * @param {?} parent
         * @param {?} namespaceAndName
         * @return {?}
         */
        RendererAdapter.prototype.createElement = function (parent, namespaceAndName) {
            var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];
            var /** @type {?} */ el = this.delegate.createElement(name, ns);
            if (parent) {
                this.delegate.appendChild(parent, el);
            }
            return el;
        };
        /**
         * @param {?} hostElement
         * @return {?}
         */
        RendererAdapter.prototype.createViewRoot = function (hostElement) { return hostElement; };
        /**
         * @param {?} parentElement
         * @return {?}
         */
        RendererAdapter.prototype.createTemplateAnchor = function (parentElement) {
            var /** @type {?} */ comment = this.delegate.createComment('');
            if (parentElement) {
                this.delegate.appendChild(parentElement, comment);
            }
            return comment;
        };
        /**
         * @param {?} parentElement
         * @param {?} value
         * @return {?}
         */
        RendererAdapter.prototype.createText = function (parentElement, value) {
            var /** @type {?} */ node = this.delegate.createText(value);
            if (parentElement) {
                this.delegate.appendChild(parentElement, node);
            }
            return node;
        };
        /**
         * @param {?} parentElement
         * @param {?} nodes
         * @return {?}
         */
        RendererAdapter.prototype.projectNodes = function (parentElement, nodes) {
            for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
                this.delegate.appendChild(parentElement, nodes[i]);
            }
        };
        /**
         * @param {?} node
         * @param {?} viewRootNodes
         * @return {?}
         */
        RendererAdapter.prototype.attachViewAfter = function (node, viewRootNodes) {
            var /** @type {?} */ parentElement = this.delegate.parentNode(node);
            var /** @type {?} */ nextSibling = this.delegate.nextSibling(node);
            for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {
                this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);
            }
        };
        /**
         * @param {?} viewRootNodes
         * @return {?}
         */
        RendererAdapter.prototype.detachView = function (viewRootNodes) {
            for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {
                var /** @type {?} */ node = viewRootNodes[i];
                var /** @type {?} */ parentElement = this.delegate.parentNode(node);
                this.delegate.removeChild(parentElement, node);
            }
        };
        /**
         * @param {?} hostElement
         * @param {?} viewAllNodes
         * @return {?}
         */
        RendererAdapter.prototype.destroyView = function (hostElement, viewAllNodes) {
            for (var /** @type {?} */ i = 0; i < viewAllNodes.length; i++) {
                ((this.delegate.destroyNode))(viewAllNodes[i]);
            }
        };
        /**
         * @param {?} renderElement
         * @param {?} name
         * @param {?} callback
         * @return {?}
         */
        RendererAdapter.prototype.listen = function (renderElement, name, callback) {
            return this.delegate.listen(renderElement, name, /** @type {?} */ (callback));
        };
        /**
         * @param {?} target
         * @param {?} name
         * @param {?} callback
         * @return {?}
         */
        RendererAdapter.prototype.listenGlobal = function (target, name, callback) {
            return this.delegate.listen(target, name, /** @type {?} */ (callback));
        };
        /**
         * @param {?} renderElement
         * @param {?} propertyName
         * @param {?} propertyValue
         * @return {?}
         */
        RendererAdapter.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
            this.delegate.setProperty(renderElement, propertyName, propertyValue);
        };
        /**
         * @param {?} renderElement
         * @param {?} namespaceAndName
         * @param {?} attributeValue
         * @return {?}
         */
        RendererAdapter.prototype.setElementAttribute = function (renderElement, namespaceAndName, attributeValue) {
            var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];
            if (attributeValue != null) {
                this.delegate.setAttribute(renderElement, name, attributeValue, ns);
            }
            else {
                this.delegate.removeAttribute(renderElement, name, ns);
            }
        };
        /**
         * @param {?} renderElement
         * @param {?} propertyName
         * @param {?} propertyValue
         * @return {?}
         */
        RendererAdapter.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };
        /**
         * @param {?} renderElement
         * @param {?} className
         * @param {?} isAdd
         * @return {?}
         */
        RendererAdapter.prototype.setElementClass = function (renderElement, className, isAdd) {
            if (isAdd) {
                this.delegate.addClass(renderElement, className);
            }
            else {
                this.delegate.removeClass(renderElement, className);
            }
        };
        /**
         * @param {?} renderElement
         * @param {?} styleName
         * @param {?} styleValue
         * @return {?}
         */
        RendererAdapter.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
            if (styleValue != null) {
                this.delegate.setStyle(renderElement, styleName, styleValue);
            }
            else {
                this.delegate.removeStyle(renderElement, styleName);
            }
        };
        /**
         * @param {?} renderElement
         * @param {?} methodName
         * @param {?} args
         * @return {?}
         */
        RendererAdapter.prototype.invokeElementMethod = function (renderElement, methodName, args) {
            ((renderElement))[methodName].apply(renderElement, args);
        };
        /**
         * @param {?} renderNode
         * @param {?} text
         * @return {?}
         */
        RendererAdapter.prototype.setText = function (renderNode$$1, text) { this.delegate.setValue(renderNode$$1, text); };
        /**
         * @return {?}
         */
        RendererAdapter.prototype.animate = function () { throw new Error('Renderer.animate is no longer supported!'); };
        return RendererAdapter;
    }());
    /**
     * @param {?} moduleType
     * @param {?} parent
     * @param {?} bootstrapComponents
     * @param {?} def
     * @return {?}
     */
    function createNgModuleRef(moduleType, parent, bootstrapComponents, def) {
        return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);
    }
    var NgModuleRef_ = (function () {
        /**
         * @param {?} _moduleType
         * @param {?} _parent
         * @param {?} _bootstrapComponents
         * @param {?} _def
         */
        function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {
            this._moduleType = _moduleType;
            this._parent = _parent;
            this._bootstrapComponents = _bootstrapComponents;
            this._def = _def;
            this._destroyListeners = [];
            this._destroyed = false;
            initNgModule(this);
        }
        /**
         * @param {?} token
         * @param {?=} notFoundValue
         * @return {?}
         */
        NgModuleRef_.prototype.get = function (token, notFoundValue) {
            if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
            return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: 0 /* None */ }, notFoundValue);
        };
        Object.defineProperty(NgModuleRef_.prototype, "instance", {
            /**
             * @return {?}
             */
            get: function () { return this.get(this._moduleType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgModuleRef_.prototype, "componentFactoryResolver", {
            /**
             * @return {?}
             */
            get: function () { return this.get(ComponentFactoryResolver); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgModuleRef_.prototype, "injector", {
            /**
             * @return {?}
             */
            get: function () { return this; },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgModuleRef_.prototype.destroy = function () {
            if (this._destroyed) {
                throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
            }
            this._destroyed = true;
            callNgModuleLifecycle(this, 131072 /* OnDestroy */);
            this._destroyListeners.forEach(function (listener) { return listener(); });
        };
        /**
         * @param {?} callback
         * @return {?}
         */
        NgModuleRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
        return NgModuleRef_;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var RendererV1TokenKey = tokenKey(Renderer);
    var Renderer2TokenKey = tokenKey(Renderer2);
    var ElementRefTokenKey = tokenKey(ElementRef);
    var ViewContainerRefTokenKey = tokenKey(ViewContainerRef);
    var TemplateRefTokenKey = tokenKey(TemplateRef);
    var ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);
    var InjectorRefTokenKey = tokenKey(Injector);
    /**
     * @param {?} checkIndex
     * @param {?} flags
     * @param {?} matchedQueries
     * @param {?} childCount
     * @param {?} ctor
     * @param {?} deps
     * @param {?=} props
     * @param {?=} outputs
     * @return {?}
     */
    function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {
        var /** @type {?} */ bindings = [];
        if (props) {
            for (var /** @type {?} */ prop in props) {
                var _a = props[prop], bindingIndex = _a[0], nonMinifiedName = _a[1];
                bindings[bindingIndex] = {
                    flags: 8 /* TypeProperty */,
                    name: prop, nonMinifiedName: nonMinifiedName,
                    ns: null,
                    securityContext: null,
                    suffix: null
                };
            }
        }
        var /** @type {?} */ outputDefs = [];
        if (outputs) {
            for (var /** @type {?} */ propName in outputs) {
                outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });
            }
        }
        flags |= 16384 /* TypeDirective */;
        return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);
    }
    /**
     * @param {?} flags
     * @param {?} ctor
     * @param {?} deps
     * @return {?}
     */
    function pipeDef(flags, ctor, deps) {
        flags |= 16 /* TypePipe */;
        return _def(-1, flags, null, 0, ctor, ctor, deps);
    }
    /**
     * @param {?} flags
     * @param {?} matchedQueries
     * @param {?} token
     * @param {?} value
     * @param {?} deps
     * @return {?}
     */
    function providerDef(flags, matchedQueries, token, value, deps) {
        return _def(-1, flags, matchedQueries, 0, token, value, deps);
    }
    /**
     * @param {?} checkIndex
     * @param {?} flags
     * @param {?} matchedQueriesDsl
     * @param {?} childCount
     * @param {?} token
     * @param {?} value
     * @param {?} deps
     * @param {?=} bindings
     * @param {?=} outputs
     * @return {?}
     */
    function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {
        var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
        if (!outputs) {
            outputs = [];
        }
        if (!bindings) {
            bindings = [];
        }
        var /** @type {?} */ depDefs = splitDepsDsl(deps);
        return {
            // will bet set by the view definition
            nodeIndex: -1,
            parent: null,
            renderParent: null,
            bindingIndex: -1,
            outputIndex: -1,
            // regular values
            checkIndex: checkIndex,
            flags: flags,
            childFlags: 0,
            directChildFlags: 0,
            childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,
            ngContentIndex: -1, childCount: childCount, bindings: bindings,
            bindingFlags: calcBindingFlags(bindings), outputs: outputs,
            element: null,
            provider: { token: token, value: value, deps: depDefs },
            text: null,
            query: null,
            ngContent: null
        };
    }
    /**
     * @param {?} view
     * @param {?} def
     * @return {?}
     */
    function createProviderInstance(view, def) {
        return _createProviderInstance(view, def);
    }
    /**
     * @param {?} view
     * @param {?} def
     * @return {?}
     */
    function createPipeInstance(view, def) {
        // deps are looked up from component.
        var /** @type {?} */ compView = view;
        while (compView.parent && !isComponentView(compView)) {
            compView = compView.parent;
        }
        // pipes can see the private services of the component
        var /** @type {?} */ allowPrivateServices = true;
        // pipes are always eager and classes!
        return createClass(/** @type {?} */ ((compView.parent)), /** @type {?} */ ((viewParentEl(compView))), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);
    }
    /**
     * @param {?} view
     * @param {?} def
     * @return {?}
     */
    function createDirectiveInstance(view, def) {
        // components can see other private services, other directives can't.
        var /** @type {?} */ allowPrivateServices = (def.flags & 32768 /* Component */) > 0;
        // directives are always eager and classes!
        var /** @type {?} */ instance = createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);
        if (def.outputs.length) {
            for (var /** @type {?} */ i = 0; i < def.outputs.length; i++) {
                var /** @type {?} */ output = def.outputs[i];
                var /** @type {?} */ subscription = instance[((output.propName))].subscribe(eventHandlerClosure(view, /** @type {?} */ ((def.parent)).nodeIndex, output.eventName)); /** @type {?} */
                ((view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);
            }
        }
        return instance;
    }
    /**
     * @param {?} view
     * @param {?} index
     * @param {?} eventName
     * @return {?}
     */
    function eventHandlerClosure(view, index, eventName) {
        return function (event) {
            try {
                return dispatchEvent(view, index, eventName, event);
            }
            catch (e) {
                // Attention: Don't rethrow, as it would cancel Observable subscriptions!
                view.root.errorHandler.handleError(e);
            }
        };
    }
    /**
     * @param {?} view
     * @param {?} def
     * @param {?} v0
     * @param {?} v1
     * @param {?} v2
     * @param {?} v3
     * @param {?} v4
     * @param {?} v5
     * @param {?} v6
     * @param {?} v7
     * @param {?} v8
     * @param {?} v9
     * @return {?}
     */
    function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var /** @type {?} */ providerData = asProviderData(view, def.nodeIndex);
        var /** @type {?} */ directive = providerData.instance;
        var /** @type {?} */ changed = false;
        var /** @type {?} */ changes = ((undefined));
        var /** @type {?} */ bindLen = def.bindings.length;
        if (bindLen > 0 && checkBinding(view, def, 0, v0)) {
            changed = true;
            changes = updateProp(view, providerData, def, 0, v0, changes);
        }
        if (bindLen > 1 && checkBinding(view, def, 1, v1)) {
            changed = true;
            changes = updateProp(view, providerData, def, 1, v1, changes);
        }
        if (bindLen > 2 && checkBinding(view, def, 2, v2)) {
            changed = true;
            changes = updateProp(view, providerData, def, 2, v2, changes);
        }
        if (bindLen > 3 && checkBinding(view, def, 3, v3)) {
            changed = true;
            changes = updateProp(view, providerData, def, 3, v3, changes);
        }
        if (bindLen > 4 && checkBinding(view, def, 4, v4)) {
            changed = true;
            changes = updateProp(view, providerData, def, 4, v4, changes);
        }
        if (bindLen > 5 && checkBinding(view, def, 5, v5)) {
            changed = true;
            changes = updateProp(view, providerData, def, 5, v5, changes);
        }
        if (bindLen > 6 && checkBinding(view, def, 6, v6)) {
            changed = true;
            changes = updateProp(view, providerData, def, 6, v6, changes);
        }
        if (bindLen > 7 && checkBinding(view, def, 7, v7)) {
            changed = true;
            changes = updateProp(view, providerData, def, 7, v7, changes);
        }
        if (bindLen > 8 && checkBinding(view, def, 8, v8)) {
            changed = true;
            changes = updateProp(view, providerData, def, 8, v8, changes);
        }
        if (bindLen > 9 && checkBinding(view, def, 9, v9)) {
            changed = true;
            changes = updateProp(view, providerData, def, 9, v9, changes);
        }
        if (changes) {
            directive.ngOnChanges(changes);
        }
        if ((view.state & 2 /* FirstCheck */) && (def.flags & 65536 /* OnInit */)) {
            directive.ngOnInit();
        }
        if (def.flags & 262144 /* DoCheck */) {
            directive.ngDoCheck();
        }
        return changed;
    }
    /**
     * @param {?} view
     * @param {?} def
     * @param {?} values
     * @return {?}
     */
    function checkAndUpdateDirectiveDynamic(view, def, values) {
        var /** @type {?} */ providerData = asProviderData(view, def.nodeIndex);
        var /** @type {?} */ directive = providerData.instance;
        var /** @type {?} */ changed = false;
        var /** @type {?} */ changes = ((undefined));
        for (var /** @type {?} */ i = 0; i < values.length; i++) {
            if (checkBinding(view, def, i, values[i])) {
                changed = true;
                changes = updateProp(view, providerData, def, i, values[i], changes);
            }
        }
        if (changes) {
            directive.ngOnChanges(changes);
        }
        if ((view.state & 2 /* FirstCheck */) && (def.flags & 65536 /* OnInit */)) {
            directive.ngOnInit();
        }
        if (def.flags & 262144 /* DoCheck */) {
            directive.ngDoCheck();
        }
        return changed;
    }
    /**
     * @param {?} view
     * @param {?} def
     * @return {?}
     */
    function _createProviderInstance(view, def) {
        // private services can see other private services
        var /** @type {?} */ allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;
        var /** @type {?} */ providerDef = def.provider;
        switch (def.flags & 201347067 /* Types */) {
            case 512 /* TypeClassProvider */:
                return createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);
            case 1024 /* TypeFactoryProvider */:
                return callFactory(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);
            case 2048 /* TypeUseExistingProvider */:
                return resolveDep(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).deps[0]);
            case 256 /* TypeValueProvider */:
                return ((providerDef)).value;
        }
    }
    /**
     * @param {?} view
     * @param {?} elDef
     * @param {?} allowPrivateServices
     * @param {?} ctor
     * @param {?} deps
     * @return {?}
     */
    function createClass(view, elDef, allowPrivateServices, ctor, deps) {
        var /** @type {?} */ len = deps.length;
        switch (len) {
            case 0:
                return new ctor();
            case 1:
                return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));
            case 2:
                return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
            case 3:
                return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
            default:
                var /** @type {?} */ depValues = new Array(len);
                for (var /** @type {?} */ i = 0; i < len; i++) {
                    depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
                }
                return new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();
        }
    }
    /**
     * @param {?} view
     * @param {?} elDef
     * @param {?} allowPrivateServices
     * @param {?} factory
     * @param {?} deps
     * @return {?}
     */
    function callFactory(view, elDef, allowPrivateServices, factory, deps) {
        var /** @type {?} */ len = deps.length;
        switch (len) {
            case 0:
                return factory();
            case 1:
                return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));
            case 2:
                return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
            case 3:
                return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
            default:
                var /** @type {?} */ depValues = Array(len);
                for (var /** @type {?} */ i = 0; i < len; i++) {
                    depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
                }
                return factory.apply(void 0, depValues);
        }
    }
    // This default value is when checking the hierarchy for a token.
    //
    // It means both:
    // - the token is not provided by the current injector,
    // - only the element injectors should be checked (ie do not check module injectors
    //
    //          mod1
    //         /
    //       el1   mod2
    //         \  /
    //         el2
    //
    // When requesting el2.injector.get(token), we should check in the following order and return the
    // first found value:
    // - el2.injector.get(token, default)
    // - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module
    // - mod2.injector.get(token, default)
    var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};
    /**
     * @param {?} view
     * @param {?} elDef
     * @param {?} allowPrivateServices
     * @param {?} depDef
     * @param {?=} notFoundValue
     * @return {?}
     */
    function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {
        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
        if (depDef.flags & 8 /* Value */) {
            return depDef.token;
        }
        var /** @type {?} */ startView = view;
        if (depDef.flags & 2 /* Optional */) {
            notFoundValue = null;
        }
        var /** @type {?} */ tokenKey$$1 = depDef.tokenKey;
        if (tokenKey$$1 === ChangeDetectorRefTokenKey) {
            // directives on the same element as a component should be able to control the change detector
            // of that component as well.
            allowPrivateServices = !!(elDef && ((elDef.element)).componentView);
        }
        if (elDef && (depDef.flags & 1 /* SkipSelf */)) {
            allowPrivateServices = false;
            elDef = ((elDef.parent));
        }
        while (view) {
            if (elDef) {
                switch (tokenKey$$1) {
                    case RendererV1TokenKey: {
                        var /** @type {?} */ compView = findCompView(view, elDef, allowPrivateServices);
                        return createRendererV1(compView);
                    }
                    case Renderer2TokenKey: {
                        var /** @type {?} */ compView = findCompView(view, elDef, allowPrivateServices);
                        return compView.renderer;
                    }
                    case ElementRefTokenKey:
                        return new ElementRef(asElementData(view, elDef.nodeIndex).renderElement);
                    case ViewContainerRefTokenKey:
                        return asElementData(view, elDef.nodeIndex).viewContainer;
                    case TemplateRefTokenKey: {
                        if (((elDef.element)).template) {
                            return asElementData(view, elDef.nodeIndex).template;
                        }
                        break;
                    }
                    case ChangeDetectorRefTokenKey: {
                        var /** @type {?} */ cdView = findCompView(view, elDef, allowPrivateServices);
                        return createChangeDetectorRef(cdView);
                    }
                    case InjectorRefTokenKey:
                        return createInjector(view, elDef);
                    default:
                        var /** @type {?} */ providerDef_1 = (((allowPrivateServices ? ((elDef.element)).allProviders : ((elDef.element)).publicProviders)))[tokenKey$$1];
                        if (providerDef_1) {
                            var /** @type {?} */ providerData = asProviderData(view, providerDef_1.nodeIndex);
                            if (!providerData) {
                                providerData = { instance: _createProviderInstance(view, providerDef_1) };
                                view.nodes[providerDef_1.nodeIndex] = (providerData);
                            }
                            return providerData.instance;
                        }
                }
            }
            allowPrivateServices = isComponentView(view);
            elDef = ((viewParentEl(view)));
            view = ((view.parent));
        }
        var /** @type {?} */ value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);
        if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||
            notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
            // Return the value from the root element injector when
            // - it provides it
            //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
            // - the module injector should not be checked
            //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
            return value;
        }
        return startView.root.ngModule.injector.get(depDef.token, notFoundValue);
    }
    /**
     * @param {?} view
     * @param {?} elDef
     * @param {?} allowPrivateServices
     * @return {?}
     */
    function findCompView(view, elDef, allowPrivateServices) {
        var /** @type {?} */ compView;
        if (allowPrivateServices) {
            compView = asElementData(view, elDef.nodeIndex).componentView;
        }
        else {
            compView = view;
            while (compView.parent && !isComponentView(compView)) {
                compView = compView.parent;
            }
        }
        return compView;
    }
    /**
     * @param {?} view
     * @param {?} providerData
     * @param {?} def
     * @param {?} bindingIdx
     * @param {?} value
     * @param {?} changes
     * @return {?}
     */
    function updateProp(view, providerData, def, bindingIdx, value, changes) {
        if (def.flags & 32768 /* Component */) {
            var /** @type {?} */ compView = asElementData(view, /** @type {?} */ ((def.parent)).nodeIndex).componentView;
            if (compView.def.flags & 2 /* OnPush */) {
                compView.state |= 8 /* ChecksEnabled */;
            }
        }
        var /** @type {?} */ binding = def.bindings[bindingIdx];
        var /** @type {?} */ propName = ((binding.name));
        // Note: This is still safe with Closure Compiler as
        // the user passed in the property name as an object has to `providerDef`,
        // so Closure Compiler will have renamed the property correctly already.
        providerData.instance[propName] = value;
        if (def.flags & 524288 /* OnChanges */) {
            changes = changes || {};
            var /** @type {?} */ oldValue = view.oldValues[def.bindingIndex + bindingIdx];
            if (oldValue instanceof WrappedValue) {
                oldValue = oldValue.wrapped;
            }
            var /** @type {?} */ binding_1 = def.bindings[bindingIdx];
            changes[((binding_1.nonMinifiedName))] =
                new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);
        }
        view.oldValues[def.bindingIndex + bindingIdx] = value;
        return changes;
    }
    /**
     * @param {?} view
     * @param {?} lifecycles
     * @return {?}
     */
    function callLifecycleHooksChildrenFirst(view, lifecycles) {
        if (!(view.def.nodeFlags & lifecycles)) {
            return;
        }
        var /** @type {?} */ nodes = view.def.nodes;
        for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
            var /** @type {?} */ nodeDef = nodes[i];
            var /** @type {?} */ parent = nodeDef.parent;
            if (!parent && nodeDef.flags & lifecycles) {
                // matching root node (e.g. a pipe)
                callProviderLifecycles(view, i, nodeDef.flags & lifecycles);
            }
            if ((nodeDef.childFlags & lifecycles) === 0) {
                // no child matches one of the lifecycles
                i += nodeDef.childCount;
            }
            while (parent && (parent.flags & 1 /* TypeElement */) &&
                i === parent.nodeIndex + parent.childCount) {
                // last child of an element
                if (parent.directChildFlags & lifecycles) {
                    callElementProvidersLifecycles(view, parent, lifecycles);
                }
                parent = parent.parent;
            }
        }
    }
    /**
     * @param {?} view
     * @param {?} elDef
     * @param {?} lifecycles
     * @return {?}
     */
    function callElementProvidersLifecycles(view, elDef, lifecycles) {
        for (var /** @type {?} */ i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {
            var /** @type {?} */ nodeDef = view.def.nodes[i];
            if (nodeDef.flags & lifecycles) {
                callProviderLifecycles(view, i, nodeDef.flags & lifecycles);
            }
            // only visit direct children
            i += nodeDef.childCount;
        }
    }
    /**
     * @param {?} view
     * @param {?} index
     * @param {?} lifecycles
     * @return {?}
     */
    function callProviderLifecycles(view, index, lifecycles) {
        var /** @type {?} */ providerData = asProviderData(view, index);
        if (!providerData) {
            return;
        }
        var /** @type {?} */ provider = providerData.instance;
        if (!provider) {
            return;
        }
        Services.setCurrentNode(view, index);
        if (lifecycles & 1048576 /* AfterContentInit */) {
            provider.ngAfterContentInit();
        }
        if (lifecycles & 2097152 /* AfterContentChecked */) {
            provider.ngAfterContentChecked();
        }
        if (lifecycles & 4194304 /* AfterViewInit */) {
            provider.ngAfterViewInit();
        }
        if (lifecycles & 8388608 /* AfterViewChecked */) {
            provider.ngAfterViewChecked();
        }
        if (lifecycles & 131072 /* OnDestroy */) {
            provider.ngOnDestroy();
        }
    }
    /**
     * @return {?}
     */
    function createQuery() {
        return new QueryList();
    }
    /**
     * @param {?} view
     * @return {?}
     */
    function dirtyParentQueries(view) {
        var /** @type {?} */ queryIds = view.def.nodeMatchedQueries;
        while (view.parent && isEmbeddedView(view)) {
            var /** @type {?} */ tplDef = ((view.parentNodeDef));
            view = view.parent;
            // content queries
            var /** @type {?} */ end = tplDef.nodeIndex + tplDef.childCount;
            for (var /** @type {?} */ i = 0; i <= end; i++) {
                var /** @type {?} */ nodeDef = view.def.nodes[i];
                if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&
                    (nodeDef.flags & 536870912 /* DynamicQuery */) &&
                    (((nodeDef.query)).filterId & queryIds) === ((nodeDef.query)).filterId) {
                    asQueryList(view, i).setDirty();
                }
                if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||
                    !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||
                    !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {
                    // skip elements that don't contain the template element or no query.
                    i += nodeDef.childCount;
                }
            }
        }
        // view queries
        if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {
            for (var /** @type {?} */ i = 0; i < view.def.nodes.length; i++) {
                var /** @type {?} */ nodeDef = view.def.nodes[i];
                if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {
                    asQueryList(view, i).setDirty();
                }
                // only visit the root nodes
                i += nodeDef.childCount;
            }
        }
    }
    /**
     * @param {?} view
     * @param {?} nodeDef
     * @return {?}
     */
    function checkAndUpdateQuery(view, nodeDef) {
        var /** @type {?} */ queryList = asQueryList(view, nodeDef.nodeIndex);
        if (!queryList.dirty) {
            return;
        }
        var /** @type {?} */ directiveInstance;
        var /** @type {?} */ newValues = ((undefined));
        if (nodeDef.flags & 67108864 /* TypeContentQuery */) {
            var /** @type {?} */ elementDef_1 = ((((nodeDef.parent)).parent));
            newValues = calcQueryValues(view, elementDef_1.nodeIndex, elementDef_1.nodeIndex + elementDef_1.childCount, /** @type {?} */ ((nodeDef.query)), []);
            directiveInstance = asProviderData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).instance;
        }
        else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {
            newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, /** @type {?} */ ((nodeDef.query)), []);
            directiveInstance = view.component;
        }
        queryList.reset(newValues);
        var /** @type {?} */ bindings = ((nodeDef.query)).bindings;
        var /** @type {?} */ notify = false;
        for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
            var /** @type {?} */ binding = bindings[i];
            var /** @type {?} */ boundValue = void 0;
            switch (binding.bindingType) {
                case 0 /* First */:
                    boundValue = queryList.first;
                    break;
                case 1 /* All */:
                    boundValue = queryList;
                    notify = true;
                    break;
            }
            directiveInstance[binding.propName] = boundValue;
        }
        if (notify) {
            queryList.notifyOnChanges();
        }
    }
    /**
     * @param {?} view
     * @param {?} startIndex
     * @param {?} endIndex
     * @param {?} queryDef
     * @param {?} values
     * @return {?}
     */
    function calcQueryValues(view, startIndex, endIndex, queryDef, values) {
        for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {
            var /** @type {?} */ nodeDef = view.def.nodes[i];
            var /** @type {?} */ valueType = nodeDef.matchedQueries[queryDef.id];
            if (valueType != null) {
                values.push(getQueryValue(view, nodeDef, valueType));
            }
            if (nodeDef.flags & 1 /* TypeElement */ && ((nodeDef.element)).template &&
                (((((nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===
                    queryDef.filterId) {
                var /** @type {?} */ elementData = asElementData(view, i);
                // check embedded views that were attached at the place of their template,
                // but process child nodes first if some match the query (see issue #16568)
                if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {
                    calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);
                    i += nodeDef.childCount;
                }
                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
                    var /** @type {?} */ embeddedViews = ((elementData.viewContainer))._embeddedViews;
                    for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {
                        var /** @type {?} */ embeddedView = embeddedViews[k];
                        var /** @type {?} */ dvc = declaredViewContainer(embeddedView);
                        if (dvc && dvc === elementData) {
                            calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);
                        }
                    }
                }
                var /** @type {?} */ projectedViews = elementData.template._projectedViews;
                if (projectedViews) {
                    for (var /** @type {?} */ k = 0; k < projectedViews.length; k++) {
                        var /** @type {?} */ projectedView = projectedViews[k];
                        calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);
                    }
                }
            }
            if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {
                // if no child matches the query, skip the children.
                i += nodeDef.childCount;
            }
        }
        return values;
    }
    /**
     * @param {?} view
     * @param {?} nodeDef
     * @param {?} queryValueType
     * @return {?}
     */
    function getQueryValue(view, nodeDef, queryValueType) {
        if (queryValueType != null) {
            // a match
            switch (queryValueType) {
                case 1 /* RenderElement */:
                    return asElementData(view, nodeDef.nodeIndex).renderElement;
                case 0 /* ElementRef */:
                    return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);
                case 2 /* TemplateRef */:
                    return asElementData(view, nodeDef.nodeIndex).template;
                case 3 /* ViewContainerRef */:
                    return asElementData(view, nodeDef.nodeIndex).viewContainer;
                case 4 /* Provider */:
                    return asProviderData(view, nodeDef.nodeIndex).instance;
            }
        }
    }
    /**
     * @param {?} view
     * @param {?} renderHost
     * @param {?} def
     * @return {?}
     */
    function appendNgContent(view, renderHost, def) {
        var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);
        if (!parentEl) {
            // Nothing to do if there is no parent element.
            return;
        }
        var /** @type {?} */ ngContentIndex = ((def.ngContent)).index;
        visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} checkIndex
     * @param {?} argCount
     * @return {?}
     */
    function purePipeDef(checkIndex, argCount) {
        // argCount + 1 to include the pipe as first arg
        return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));
    }
    /**
     * @param {?} checkIndex
     * @param {?} argCount
     * @return {?}
     */
    function pureArrayDef(checkIndex, argCount) {
        return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));
    }
    /**
     * @param {?} flags
     * @param {?} checkIndex
     * @param {?} propertyNames
     * @return {?}
     */
    function _pureExpressionDef(flags, checkIndex, propertyNames) {
        var /** @type {?} */ bindings = new Array(propertyNames.length);
        for (var /** @type {?} */ i = 0; i < propertyNames.length; i++) {
            var /** @type {?} */ prop = propertyNames[i];
            bindings[i] = {
                flags: 8 /* TypeProperty */,
                name: prop,
                ns: null,
                nonMinifiedName: prop,
                securityContext: null,
                suffix: null
            };
        }
        return {
            // will bet set by the view definition
            nodeIndex: -1,
            parent: null,
            renderParent: null,
            bindingIndex: -1,
            outputIndex: -1,
            // regular values
            checkIndex: checkIndex,
            flags: flags,
            childFlags: 0,
            directChildFlags: 0,
            childMatchedQueries: 0,
            matchedQueries: {},
            matchedQueryIds: 0,
            references: {},
            ngContentIndex: -1,
            childCount: 0, bindings: bindings,
            bindingFlags: calcBindingFlags(bindings),
            outputs: [],
            element: null,
            provider: null,
            text: null,
            query: null,
            ngContent: null
        };
    }
    /**
     * @param {?} view
     * @param {?} def
     * @return {?}
     */
    function createPureExpression(view, def) {
        return { value: undefined };
    }
    /**
     * @param {?} view
     * @param {?} def
     * @param {?} v0
     * @param {?} v1
     * @param {?} v2
     * @param {?} v3
     * @param {?} v4
     * @param {?} v5
     * @param {?} v6
     * @param {?} v7
     * @param {?} v8
     * @param {?} v9
     * @return {?}
     */
    function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var /** @type {?} */ bindings = def.bindings;
        var /** @type {?} */ changed = false;
        var /** @type {?} */ bindLen = bindings.length;
        if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
            changed = true;
        if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
            changed = true;
        if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
            changed = true;
        if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
            changed = true;
        if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
            changed = true;
        if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
            changed = true;
        if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
            changed = true;
        if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
            changed = true;
        if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
            changed = true;
        if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
            changed = true;
        if (changed) {
            var /** @type {?} */ data = asPureExpressionData(view, def.nodeIndex);
            var /** @type {?} */ value = void 0;
            switch (def.flags & 201347067 /* Types */) {
                case 32 /* TypePureArray */:
                    value = new Array(bindings.length);
                    if (bindLen > 0)
                        value[0] = v0;
                    if (bindLen > 1)
                        value[1] = v1;
                    if (bindLen > 2)
                        value[2] = v2;
                    if (bindLen > 3)
                        value[3] = v3;
                    if (bindLen > 4)
                        value[4] = v4;
                    if (bindLen > 5)
                        value[5] = v5;
                    if (bindLen > 6)
                        value[6] = v6;
                    if (bindLen > 7)
                        value[7] = v7;
                    if (bindLen > 8)
                        value[8] = v8;
                    if (bindLen > 9)
                        value[9] = v9;
                    break;
                case 64 /* TypePureObject */:
                    value = {};
                    if (bindLen > 0)
                        value[((bindings[0].name))] = v0;
                    if (bindLen > 1)
                        value[((bindings[1].name))] = v1;
                    if (bindLen > 2)
                        value[((bindings[2].name))] = v2;
                    if (bindLen > 3)
                        value[((bindings[3].name))] = v3;
                    if (bindLen > 4)
                        value[((bindings[4].name))] = v4;
                    if (bindLen > 5)
                        value[((bindings[5].name))] = v5;
                    if (bindLen > 6)
                        value[((bindings[6].name))] = v6;
                    if (bindLen > 7)
                        value[((bindings[7].name))] = v7;
                    if (bindLen > 8)
                        value[((bindings[8].name))] = v8;
                    if (bindLen > 9)
                        value[((bindings[9].name))] = v9;
                    break;
                case 128 /* TypePurePipe */:
                    var /** @type {?} */ pipe = v0;
                    switch (bindLen) {
                        case 1:
                            value = pipe.transform(v0);
                            break;
                        case 2:
                            value = pipe.transform(v1);
                            break;
                        case 3:
                            value = pipe.transform(v1, v2);
                            break;
                        case 4:
                            value = pipe.transform(v1, v2, v3);
                            break;
                        case 5:
                            value = pipe.transform(v1, v2, v3, v4);
                            break;
                        case 6:
                            value = pipe.transform(v1, v2, v3, v4, v5);
                            break;
                        case 7:
                            value = pipe.transform(v1, v2, v3, v4, v5, v6);
                            break;
                        case 8:
                            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);
                            break;
                        case 9:
                            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);
                            break;
                        case 10:
                            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);
                            break;
                    }
                    break;
            }
            data.value = value;
        }
        return changed;
    }
    /**
     * @param {?} view
     * @param {?} def
     * @param {?} values
     * @return {?}
     */
    function checkAndUpdatePureExpressionDynamic(view, def, values) {
        var /** @type {?} */ bindings = def.bindings;
        var /** @type {?} */ changed = false;
        for (var /** @type {?} */ i = 0; i < values.length; i++) {
            // Note: We need to loop over all values, so that
            // the old values are updates as well!
            if (checkAndUpdateBinding(view, def, i, values[i])) {
                changed = true;
            }
        }
        if (changed) {
            var /** @type {?} */ data = asPureExpressionData(view, def.nodeIndex);
            var /** @type {?} */ value = void 0;
            switch (def.flags & 201347067 /* Types */) {
                case 32 /* TypePureArray */:
                    value = values;
                    break;
                case 64 /* TypePureObject */:
                    value = {};
                    for (var /** @type {?} */ i = 0; i < values.length; i++) {
                        value[((bindings[i].name))] = values[i];
                    }
                    break;
                case 128 /* TypePurePipe */:
                    var /** @type {?} */ pipe = values[0];
                    var /** @type {?} */ params = values.slice(1);
                    value = pipe.transform.apply(pipe, params);
                    break;
            }
            data.value = value;
        }
        return changed;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} checkIndex
     * @param {?} ngContentIndex
     * @param {?} staticText
     * @return {?}
     */
    function textDef(checkIndex, ngContentIndex, staticText) {
        var /** @type {?} */ bindings = new Array(staticText.length - 1);
        for (var /** @type {?} */ i = 1; i < staticText.length; i++) {
            bindings[i - 1] = {
                flags: 8 /* TypeProperty */,
                name: null,
                ns: null,
                nonMinifiedName: null,
                securityContext: null,
                suffix: staticText[i],
            };
        }
        return {
            // will bet set by the view definition
            nodeIndex: -1,
            parent: null,
            renderParent: null,
            bindingIndex: -1,
            outputIndex: -1,
            // regular values
            checkIndex: checkIndex,
            flags: 2 /* TypeText */,
            childFlags: 0,
            directChildFlags: 0,
            childMatchedQueries: 0,
            matchedQueries: {},
            matchedQueryIds: 0,
            references: {}, ngContentIndex: ngContentIndex,
            childCount: 0, bindings: bindings,
            bindingFlags: 8 /* TypeProperty */,
            outputs: [],
            element: null,
            provider: null,
            text: { prefix: staticText[0] },
            query: null,
            ngContent: null,
        };
    }
    /**
     * @param {?} view
     * @param {?} renderHost
     * @param {?} def
     * @return {?}
     */
    function createText(view, renderHost, def) {
        var /** @type {?} */ renderNode$$1;
        var /** @type {?} */ renderer = view.renderer;
        renderNode$$1 = renderer.createText(/** @type {?} */ ((def.text)).prefix);
        var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);
        if (parentEl) {
            renderer.appendChild(parentEl, renderNode$$1);
        }
        return { renderText: renderNode$$1 };
    }
    /**
     * @param {?} view
     * @param {?} def
     * @param {?} v0
     * @param {?} v1
     * @param {?} v2
     * @param {?} v3
     * @param {?} v4
     * @param {?} v5
     * @param {?} v6
     * @param {?} v7
     * @param {?} v8
     * @param {?} v9
     * @return {?}
     */
    function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var /** @type {?} */ changed = false;
        var /** @type {?} */ bindings = def.bindings;
        var /** @type {?} */ bindLen = bindings.length;
        if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
            changed = true;
        if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
            changed = true;
        if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
            changed = true;
        if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
            changed = true;
        if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
            changed = true;
        if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
            changed = true;
        if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
            changed = true;
        if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
            changed = true;
        if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
            changed = true;
        if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
            changed = true;
        if (changed) {
            var /** @type {?} */ value = ((def.text)).prefix;
            if (bindLen > 0)
                value += _addInterpolationPart(v0, bindings[0]);
            if (bindLen > 1)
                value += _addInterpolationPart(v1, bindings[1]);
            if (bindLen > 2)
                value += _addInterpolationPart(v2, bindings[2]);
            if (bindLen > 3)
                value += _addInterpolationPart(v3, bindings[3]);
            if (bindLen > 4)
                value += _addInterpolationPart(v4, bindings[4]);
            if (bindLen > 5)
                value += _addInterpolationPart(v5, bindings[5]);
            if (bindLen > 6)
                value += _addInterpolationPart(v6, bindings[6]);
            if (bindLen > 7)
                value += _addInterpolationPart(v7, bindings[7]);
            if (bindLen > 8)
                value += _addInterpolationPart(v8, bindings[8]);
            if (bindLen > 9)
                value += _addInterpolationPart(v9, bindings[9]);
            var /** @type {?} */ renderNode$$1 = asTextData(view, def.nodeIndex).renderText;
            view.renderer.setValue(renderNode$$1, value);
        }
        return changed;
    }
    /**
     * @param {?} view
     * @param {?} def
     * @param {?} values
     * @return {?}
     */
    function checkAndUpdateTextDynamic(view, def, values) {
        var /** @type {?} */ bindings = def.bindings;
        var /** @type {?} */ changed = false;
        for (var /** @type {?} */ i = 0; i < values.length; i++) {
            // Note: We need to loop over all values, so that
            // the old values are updates as well!
            if (checkAndUpdateBinding(view, def, i, values[i])) {
                changed = true;
            }
        }
        if (changed) {
            var /** @type {?} */ value = '';
            for (var /** @type {?} */ i = 0; i < values.length; i++) {
                value = value + _addInterpolationPart(values[i], bindings[i]);
            }
            value = ((def.text)).prefix + value;
            var /** @type {?} */ renderNode$$1 = asTextData(view, def.nodeIndex).renderText;
            view.renderer.setValue(renderNode$$1, value);
        }
        return changed;
    }
    /**
     * @param {?} value
     * @param {?} binding
     * @return {?}
     */
    function _addInterpolationPart(value, binding) {
        var /** @type {?} */ valueStr = value != null ? value.toString() : '';
        return valueStr + binding.suffix;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} flags
     * @param {?} nodes
     * @param {?=} updateDirectives
     * @param {?=} updateRenderer
     * @return {?}
     */
    function viewDef(flags, nodes, updateDirectives, updateRenderer) {
        // clone nodes and set auto calculated values
        var /** @type {?} */ viewBindingCount = 0;
        var /** @type {?} */ viewDisposableCount = 0;
        var /** @type {?} */ viewNodeFlags = 0;
        var /** @type {?} */ viewRootNodeFlags = 0;
        var /** @type {?} */ viewMatchedQueries = 0;
        var /** @type {?} */ currentParent = null;
        var /** @type {?} */ currentRenderParent = null;
        var /** @type {?} */ currentElementHasPublicProviders = false;
        var /** @type {?} */ currentElementHasPrivateProviders = false;
        var /** @type {?} */ lastRenderRootNode = null;
        for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
            var /** @type {?} */ node = nodes[i];
            node.nodeIndex = i;
            node.parent = currentParent;
            node.bindingIndex = viewBindingCount;
            node.outputIndex = viewDisposableCount;
            node.renderParent = currentRenderParent;
            viewNodeFlags |= node.flags;
            viewMatchedQueries |= node.matchedQueryIds;
            if (node.element) {
                var /** @type {?} */ elDef = node.element;
                elDef.publicProviders =
                    currentParent ? ((currentParent.element)).publicProviders : Object.create(null);
                elDef.allProviders = elDef.publicProviders;
                // Note: We assume that all providers of an element are before any child element!
                currentElementHasPublicProviders = false;
                currentElementHasPrivateProviders = false;
                if (node.element.template) {
                    viewMatchedQueries |= node.element.template.nodeMatchedQueries;
                }
            }
            validateNode(currentParent, node, nodes.length);
            viewBindingCount += node.bindings.length;
            viewDisposableCount += node.outputs.length;
            if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {
                lastRenderRootNode = node;
            }
            if (node.flags & 20224 /* CatProvider */) {
                if (!currentElementHasPublicProviders) {
                    currentElementHasPublicProviders = true; /** @type {?} */
                    ((((
                    // Use prototypical inheritance to not get O(n^2) complexity...
                    currentParent)).element)).publicProviders =
                        Object.create(/** @type {?} */ ((((currentParent)).element)).publicProviders); /** @type {?} */
                    ((((currentParent)).element)).allProviders = ((((currentParent)).element)).publicProviders;
                }
                var /** @type {?} */ isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;
                var /** @type {?} */ isComponent = (node.flags & 32768 /* Component */) !== 0;
                if (!isPrivateService || isComponent) {
                    ((((((currentParent)).element)).publicProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;
                }
                else {
                    if (!currentElementHasPrivateProviders) {
                        currentElementHasPrivateProviders = true; /** @type {?} */
                        ((((
                        // Use prototypical inheritance to not get O(n^2) complexity...
                        currentParent)).element)).allProviders =
                            Object.create(/** @type {?} */ ((((currentParent)).element)).publicProviders);
                    } /** @type {?} */
                    ((((((currentParent)).element)).allProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;
                }
                if (isComponent) {
                    ((((currentParent)).element)).componentProvider = node;
                }
            }
            if (currentParent) {
                currentParent.childFlags |= node.flags;
                currentParent.directChildFlags |= node.flags;
                currentParent.childMatchedQueries |= node.matchedQueryIds;
                if (node.element && node.element.template) {
                    currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;
                }
            }
            else {
                viewRootNodeFlags |= node.flags;
            }
            if (node.childCount > 0) {
                currentParent = node;
                if (!isNgContainer(node)) {
                    currentRenderParent = node;
                }
            }
            else {
                // When the current node has no children, check if it is the last children of its parent.
                // When it is, propagate the flags up.
                // The loop is required because an element could be the last transitive children of several
                // elements. We loop to either the root or the highest opened element (= with remaining
                // children)
                while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {
                    var /** @type {?} */ newParent = currentParent.parent;
                    if (newParent) {
                        newParent.childFlags |= currentParent.childFlags;
                        newParent.childMatchedQueries |= currentParent.childMatchedQueries;
                    }
                    currentParent = newParent;
                    // We also need to update the render parent & account for ng-container
                    if (currentParent && isNgContainer(currentParent)) {
                        currentRenderParent = currentParent.renderParent;
                    }
                    else {
                        currentRenderParent = currentParent;
                    }
                }
            }
        }
        var /** @type {?} */ handleEvent = function (view, nodeIndex, eventName, event) { return ((((nodes[nodeIndex].element)).handleEvent))(view, eventName, event); };
        return {
            // Will be filled later...
            factory: null,
            nodeFlags: viewNodeFlags,
            rootNodeFlags: viewRootNodeFlags,
            nodeMatchedQueries: viewMatchedQueries, flags: flags,
            nodes: nodes,
            updateDirectives: updateDirectives || NOOP,
            updateRenderer: updateRenderer || NOOP, handleEvent: handleEvent,
            bindingCount: viewBindingCount,
            outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode
        };
    }
    /**
     * @param {?} node
     * @return {?}
     */
    function isNgContainer(node) {
        return (node.flags & 1 /* TypeElement */) !== 0 && ((node.element)).name === null;
    }
    /**
     * @param {?} parent
     * @param {?} node
     * @param {?} nodeCount
     * @return {?}
     */
    function validateNode(parent, node, nodeCount) {
        var /** @type {?} */ template = node.element && node.element.template;
        if (template) {
            if (!template.lastRenderRootNode) {
                throw new Error("Illegal State: Embedded templates without nodes are not allowed!");
            }
            if (template.lastRenderRootNode &&
                template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {
                throw new Error("Illegal State: Last root node of a template can't have embedded views, at index " + node.nodeIndex + "!");
            }
        }
        if (node.flags & 20224 /* CatProvider */) {
            var /** @type {?} */ parentFlags = parent ? parent.flags : 0;
            if ((parentFlags & 1 /* TypeElement */) === 0) {
                throw new Error("Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index " + node.nodeIndex + "!");
            }
        }
        if (node.query) {
            if (node.flags & 67108864 /* TypeContentQuery */ &&
                (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {
                throw new Error("Illegal State: Content Query nodes need to be children of directives, at index " + node.nodeIndex + "!");
            }
            if (node.flags & 134217728 /* TypeViewQuery */ && parent) {
                throw new Error("Illegal State: View Query nodes have to be top level nodes, at index " + node.nodeIndex + "!");
            }
        }
        if (node.childCount) {
            var /** @type {?} */ parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;
            if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {
                throw new Error("Illegal State: childCount of node leads outside of parent, at index " + node.nodeIndex + "!");
            }
        }
    }
    /**
     * @param {?} parent
     * @param {?} anchorDef
     * @param {?} viewDef
     * @param {?=} context
     * @return {?}
     */
    function createEmbeddedView(parent, anchorDef$$1, viewDef, context) {
        // embedded views are seen as siblings to the anchor, so we need
        // to get the parent of the anchor and use it as parentIndex.
        var /** @type {?} */ view = createView(parent.root, parent.renderer, parent, anchorDef$$1, viewDef);
        initView(view, parent.component, context);
        createViewNodes(view);
        return view;
    }
    /**
     * @param {?} root
     * @param {?} def
     * @param {?=} context
     * @return {?}
     */
    function createRootView(root, def, context) {
        var /** @type {?} */ view = createView(root, root.renderer, null, null, def);
        initView(view, context, context);
        createViewNodes(view);
        return view;
    }
    /**
     * @param {?} parentView
     * @param {?} nodeDef
     * @param {?} viewDef
     * @param {?} hostElement
     * @return {?}
     */
    function createComponentView(parentView, nodeDef, viewDef, hostElement) {
        var /** @type {?} */ rendererType = ((nodeDef.element)).componentRendererType;
        var /** @type {?} */ compRenderer;
        if (!rendererType) {
            compRenderer = parentView.root.renderer;
        }
        else {
            compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);
        }
        return createView(parentView.root, compRenderer, parentView, /** @type {?} */ ((nodeDef.element)).componentProvider, viewDef);
    }
    /**
     * @param {?} root
     * @param {?} renderer
     * @param {?} parent
     * @param {?} parentNodeDef
     * @param {?} def
     * @return {?}
     */
    function createView(root, renderer, parent, parentNodeDef, def) {
        var /** @type {?} */ nodes = new Array(def.nodes.length);
        var /** @type {?} */ disposables = def.outputCount ? new Array(def.outputCount) : null;
        var /** @type {?} */ view = {
            def: def,
            parent: parent,
            viewContainerParent: null, parentNodeDef: parentNodeDef,
            context: null,
            component: null, nodes: nodes,
            state: 13 /* CatInit */, root: root, renderer: renderer,
            oldValues: new Array(def.bindingCount), disposables: disposables
        };
        return view;
    }
    /**
     * @param {?} view
     * @param {?} component
     * @param {?} context
     * @return {?}
     */
    function initView(view, component, context) {
        view.component = component;
        view.context = context;
    }
    /**
     * @param {?} view
     * @return {?}
     */
    function createViewNodes(view) {
        var /** @type {?} */ renderHost;
        if (isComponentView(view)) {
            var /** @type {?} */ hostDef = view.parentNodeDef;
            renderHost = asElementData(/** @type {?} */ ((view.parent)), /** @type {?} */ ((((hostDef)).parent)).nodeIndex).renderElement;
        }
        var /** @type {?} */ def = view.def;
        var /** @type {?} */ nodes = view.nodes;
        for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
            var /** @type {?} */ nodeDef = def.nodes[i];
            Services.setCurrentNode(view, i);
            var /** @type {?} */ nodeData = void 0;
            switch (nodeDef.flags & 201347067 /* Types */) {
                case 1 /* TypeElement */:
                    var /** @type {?} */ el = (createElement(view, renderHost, nodeDef));
                    var /** @type {?} */ componentView = ((undefined));
                    if (nodeDef.flags & 33554432 /* ComponentView */) {
                        var /** @type {?} */ compViewDef = resolveDefinition(/** @type {?} */ ((((nodeDef.element)).componentView)));
                        componentView = Services.createComponentView(view, nodeDef, compViewDef, el);
                    }
                    listenToElementOutputs(view, componentView, nodeDef, el);
                    nodeData = ({
                        renderElement: el,
                        componentView: componentView,
                        viewContainer: null,
                        template: /** @type {?} */ ((nodeDef.element)).template ? createTemplateData(view, nodeDef) : undefined
                    });
                    if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
                        nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);
                    }
                    break;
                case 2 /* TypeText */:
                    nodeData = (createText(view, renderHost, nodeDef));
                    break;
                case 512 /* TypeClassProvider */:
                case 1024 /* TypeFactoryProvider */:
                case 2048 /* TypeUseExistingProvider */:
                case 256 /* TypeValueProvider */: {
                    nodeData = nodes[i];
                    if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {
                        var /** @type {?} */ instance = createProviderInstance(view, nodeDef);
                        nodeData = ({ instance: instance });
                    }
                    break;
                }
                case 16 /* TypePipe */: {
                    var /** @type {?} */ instance = createPipeInstance(view, nodeDef);
                    nodeData = ({ instance: instance });
                    break;
                }
                case 16384 /* TypeDirective */: {
                    nodeData = nodes[i];
                    if (!nodeData) {
                        var /** @type {?} */ instance = createDirectiveInstance(view, nodeDef);
                        nodeData = ({ instance: instance });
                    }
                    if (nodeDef.flags & 32768 /* Component */) {
                        var /** @type {?} */ compView = asElementData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).componentView;
                        initView(compView, nodeData.instance, nodeData.instance);
                    }
                    break;
                }
                case 32 /* TypePureArray */:
                case 64 /* TypePureObject */:
                case 128 /* TypePurePipe */:
                    nodeData = (createPureExpression(view, nodeDef));
                    break;
                case 67108864 /* TypeContentQuery */:
                case 134217728 /* TypeViewQuery */:
                    nodeData = (createQuery());
                    break;
                case 8 /* TypeNgContent */:
                    appendNgContent(view, renderHost, nodeDef);
                    // no runtime data needed for NgContent...
                    nodeData = undefined;
                    break;
            }
            nodes[i] = nodeData;
        }
        // Create the ViewData.nodes of component views after we created everything else,
        // so that e.g. ng-content works
        execComponentViewsAction(view, ViewAction.CreateViewNodes);
        // fill static content and view queries
        execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);
    }
    /**
     * @param {?} view
     * @return {?}
     */
    function checkNoChangesView(view) {
        markProjectedViewsForCheck(view);
        Services.updateDirectives(view, 1 /* CheckNoChanges */);
        execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);
        Services.updateRenderer(view, 1 /* CheckNoChanges */);
        execComponentViewsAction(view, ViewAction.CheckNoChanges);
        // Note: We don't check queries for changes as we didn't do this in v2.x.
        // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.
        view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);
    }
    /**
     * @param {?} view
     * @return {?}
     */
    function checkAndUpdateView(view) {
        if (view.state & 1 /* BeforeFirstCheck */) {
            view.state &= ~1 /* BeforeFirstCheck */;
            view.state |= 2 /* FirstCheck */;
        }
        else {
            view.state &= ~2 /* FirstCheck */;
        }
        markProjectedViewsForCheck(view);
        Services.updateDirectives(view, 0 /* CheckAndUpdate */);
        execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);
        execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);
        callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ |
            (view.state & 2 /* FirstCheck */ ? 1048576 /* AfterContentInit */ : 0));
        Services.updateRenderer(view, 0 /* CheckAndUpdate */);
        execComponentViewsAction(view, ViewAction.CheckAndUpdate);
        execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);
        callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ |
            (view.state & 2 /* FirstCheck */ ? 4194304 /* AfterViewInit */ : 0));
        if (view.def.flags & 2 /* OnPush */) {
            view.state &= ~8 /* ChecksEnabled */;
        }
        view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);
    }
    /**
     * @param {?} view
     * @param {?} nodeDef
     * @param {?} argStyle
     * @param {?=} v0
     * @param {?=} v1
     * @param {?=} v2
     * @param {?=} v3
     * @param {?=} v4
     * @param {?=} v5
     * @param {?=} v6
     * @param {?=} v7
     * @param {?=} v8
     * @param {?=} v9
     * @return {?}
     */
    function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        if (argStyle === 0 /* Inline */) {
            return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        }
        else {
            return checkAndUpdateNodeDynamic(view, nodeDef, v0);
        }
    }
    /**
     * @param {?} view
     * @return {?}
     */
    function markProjectedViewsForCheck(view) {
        var /** @type {?} */ def = view.def;
        if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {
            return;
        }
        for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
            var /** @type {?} */ nodeDef = def.nodes[i];
            if (nodeDef.flags & 4 /* ProjectedTemplate */) {
                var /** @type {?} */ projectedViews = asElementData(view, i).template._projectedViews;
                if (projectedViews) {
                    for (var /** @type {?} */ i_1 = 0; i_1 < projectedViews.length; i_1++) {
                        var /** @type {?} */ projectedView = projectedViews[i_1];
                        projectedView.state |= 32 /* CheckProjectedView */;
                        markParentViewsForCheckProjectedViews(projectedView, view);
                    }
                }
            }
            else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {
                // a parent with leafs
                // no child is a component,
                // then skip the children
                i += nodeDef.childCount;
            }
        }
    }
    /**
     * @param {?} view
     * @param {?} nodeDef
     * @param {?=} v0
     * @param {?=} v1
     * @param {?=} v2
     * @param {?=} v3
     * @param {?=} v4
     * @param {?=} v5
     * @param {?=} v6
     * @param {?=} v7
     * @param {?=} v8
     * @param {?=} v9
     * @return {?}
     */
    function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        switch (nodeDef.flags & 201347067 /* Types */) {
            case 1 /* TypeElement */:
                return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
            case 2 /* TypeText */:
                return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
            case 16384 /* TypeDirective */:
                return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
            case 32 /* TypePureArray */:
            case 64 /* TypePureObject */:
            case 128 /* TypePurePipe */:
                return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
            default:
                throw 'unreachable';
        }
    }
    /**
     * @param {?} view
     * @param {?} nodeDef
     * @param {?} values
     * @return {?}
     */
    function checkAndUpdateNodeDynamic(view, nodeDef, values) {
        switch (nodeDef.flags & 201347067 /* Types */) {
            case 1 /* TypeElement */:
                return checkAndUpdateElementDynamic(view, nodeDef, values);
            case 2 /* TypeText */:
                return checkAndUpdateTextDynamic(view, nodeDef, values);
            case 16384 /* TypeDirective */:
                return checkAndUpdateDirectiveDynamic(view, nodeDef, values);
            case 32 /* TypePureArray */:
            case 64 /* TypePureObject */:
            case 128 /* TypePurePipe */:
                return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);
            default:
                throw 'unreachable';
        }
    }
    /**
     * @param {?} view
     * @param {?} nodeDef
     * @param {?} argStyle
     * @param {?=} v0
     * @param {?=} v1
     * @param {?=} v2
     * @param {?=} v3
     * @param {?=} v4
     * @param {?=} v5
     * @param {?=} v6
     * @param {?=} v7
     * @param {?=} v8
     * @param {?=} v9
     * @return {?}
     */
    function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        if (argStyle === 0 /* Inline */) {
            checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        }
        else {
            checkNoChangesNodeDynamic(view, nodeDef, v0);
        }
        // Returning false is ok here as we would have thrown in case of a change.
        return false;
    }
    /**
     * @param {?} view
     * @param {?} nodeDef
     * @param {?} v0
     * @param {?} v1
     * @param {?} v2
     * @param {?} v3
     * @param {?} v4
     * @param {?} v5
     * @param {?} v6
     * @param {?} v7
     * @param {?} v8
     * @param {?} v9
     * @return {?}
     */
    function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var /** @type {?} */ bindLen = nodeDef.bindings.length;
        if (bindLen > 0)
            checkBindingNoChanges(view, nodeDef, 0, v0);
        if (bindLen > 1)
            checkBindingNoChanges(view, nodeDef, 1, v1);
        if (bindLen > 2)
            checkBindingNoChanges(view, nodeDef, 2, v2);
        if (bindLen > 3)
            checkBindingNoChanges(view, nodeDef, 3, v3);
        if (bindLen > 4)
            checkBindingNoChanges(view, nodeDef, 4, v4);
        if (bindLen > 5)
            checkBindingNoChanges(view, nodeDef, 5, v5);
        if (bindLen > 6)
            checkBindingNoChanges(view, nodeDef, 6, v6);
        if (bindLen > 7)
            checkBindingNoChanges(view, nodeDef, 7, v7);
        if (bindLen > 8)
            checkBindingNoChanges(view, nodeDef, 8, v8);
        if (bindLen > 9)
            checkBindingNoChanges(view, nodeDef, 9, v9);
    }
    /**
     * @param {?} view
     * @param {?} nodeDef
     * @param {?} values
     * @return {?}
     */
    function checkNoChangesNodeDynamic(view, nodeDef, values) {
        for (var /** @type {?} */ i = 0; i < values.length; i++) {
            checkBindingNoChanges(view, nodeDef, i, values[i]);
        }
    }
    /**
     * Workaround https://github.com/angular/tsickle/issues/497
     * @suppress {misplacedTypeAnnotation}
     * @param {?} view
     * @param {?} nodeDef
     * @return {?}
     */
    function checkNoChangesQuery(view, nodeDef) {
        var /** @type {?} */ queryList = asQueryList(view, nodeDef.nodeIndex);
        if (queryList.dirty) {
            throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), "Query " + ((nodeDef.query)).id + " not dirty", "Query " + ((nodeDef.query)).id + " dirty", (view.state & 1 /* BeforeFirstCheck */) !== 0);
        }
    }
    /**
     * @param {?} view
     * @return {?}
     */
    function destroyView(view) {
        if (view.state & 128 /* Destroyed */) {
            return;
        }
        execEmbeddedViewsAction(view, ViewAction.Destroy);
        execComponentViewsAction(view, ViewAction.Destroy);
        callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);
        if (view.disposables) {
            for (var /** @type {?} */ i = 0; i < view.disposables.length; i++) {
                view.disposables[i]();
            }
        }
        detachProjectedView(view);
        if (view.renderer.destroyNode) {
            destroyViewNodes(view);
        }
        if (isComponentView(view)) {
            view.renderer.destroy();
        }
        view.state |= 128 /* Destroyed */;
    }
    /**
     * @param {?} view
     * @return {?}
     */
    function destroyViewNodes(view) {
        var /** @type {?} */ len = view.def.nodes.length;
        for (var /** @type {?} */ i = 0; i < len; i++) {
            var /** @type {?} */ def = view.def.nodes[i];
            if (def.flags & 1 /* TypeElement */) {
                ((view.renderer.destroyNode))(asElementData(view, i).renderElement);
            }
            else if (def.flags & 2 /* TypeText */) {
                ((view.renderer.destroyNode))(asTextData(view, i).renderText);
            }
            else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {
                asQueryList(view, i).destroy();
            }
        }
    }
    var ViewAction = {};
    ViewAction.CreateViewNodes = 0;
    ViewAction.CheckNoChanges = 1;
    ViewAction.CheckNoChangesProjectedViews = 2;
    ViewAction.CheckAndUpdate = 3;
    ViewAction.CheckAndUpdateProjectedViews = 4;
    ViewAction.Destroy = 5;
    ViewAction[ViewAction.CreateViewNodes] = "CreateViewNodes";
    ViewAction[ViewAction.CheckNoChanges] = "CheckNoChanges";
    ViewAction[ViewAction.CheckNoChangesProjectedViews] = "CheckNoChangesProjectedViews";
    ViewAction[ViewAction.CheckAndUpdate] = "CheckAndUpdate";
    ViewAction[ViewAction.CheckAndUpdateProjectedViews] = "CheckAndUpdateProjectedViews";
    ViewAction[ViewAction.Destroy] = "Destroy";
    /**
     * @param {?} view
     * @param {?} action
     * @return {?}
     */
    function execComponentViewsAction(view, action) {
        var /** @type {?} */ def = view.def;
        if (!(def.nodeFlags & 33554432 /* ComponentView */)) {
            return;
        }
        for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
            var /** @type {?} */ nodeDef = def.nodes[i];
            if (nodeDef.flags & 33554432 /* ComponentView */) {
                // a leaf
                callViewAction(asElementData(view, i).componentView, action);
            }
            else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {
                // a parent with leafs
                // no child is a component,
                // then skip the children
                i += nodeDef.childCount;
            }
        }
    }
    /**
     * @param {?} view
     * @param {?} action
     * @return {?}
     */
    function execEmbeddedViewsAction(view, action) {
        var /** @type {?} */ def = view.def;
        if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {
            return;
        }
        for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
            var /** @type {?} */ nodeDef = def.nodes[i];
            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
                // a leaf
                var /** @type {?} */ embeddedViews = ((asElementData(view, i).viewContainer))._embeddedViews;
                for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {
                    callViewAction(embeddedViews[k], action);
                }
            }
            else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {
                // a parent with leafs
                // no child is a component,
                // then skip the children
                i += nodeDef.childCount;
            }
        }
    }
    /**
     * @param {?} view
     * @param {?} action
     * @return {?}
     */
    function callViewAction(view, action) {
        var /** @type {?} */ viewState = view.state;
        switch (action) {
            case ViewAction.CheckNoChanges:
                if ((viewState & 128 /* Destroyed */) === 0) {
                    if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {
                        checkNoChangesView(view);
                    }
                    else if (viewState & 64 /* CheckProjectedViews */) {
                        execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);
                    }
                }
                break;
            case ViewAction.CheckNoChangesProjectedViews:
                if ((viewState & 128 /* Destroyed */) === 0) {
                    if (viewState & 32 /* CheckProjectedView */) {
                        checkNoChangesView(view);
                    }
                    else if (viewState & 64 /* CheckProjectedViews */) {
                        execProjectedViewsAction(view, action);
                    }
                }
                break;
            case ViewAction.CheckAndUpdate:
                if ((viewState & 128 /* Destroyed */) === 0) {
                    if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {
                        checkAndUpdateView(view);
                    }
                    else if (viewState & 64 /* CheckProjectedViews */) {
                        execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);
                    }
                }
                break;
            case ViewAction.CheckAndUpdateProjectedViews:
                if ((viewState & 128 /* Destroyed */) === 0) {
                    if (viewState & 32 /* CheckProjectedView */) {
                        checkAndUpdateView(view);
                    }
                    else if (viewState & 64 /* CheckProjectedViews */) {
                        execProjectedViewsAction(view, action);
                    }
                }
                break;
            case ViewAction.Destroy:
                // Note: destroyView recurses over all views,
                // so we don't need to special case projected views here.
                destroyView(view);
                break;
            case ViewAction.CreateViewNodes:
                createViewNodes(view);
                break;
        }
    }
    /**
     * @param {?} view
     * @param {?} action
     * @return {?}
     */
    function execProjectedViewsAction(view, action) {
        execEmbeddedViewsAction(view, action);
        execComponentViewsAction(view, action);
    }
    /**
     * @param {?} view
     * @param {?} queryFlags
     * @param {?} staticDynamicQueryFlag
     * @param {?} checkType
     * @return {?}
     */
    function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {
        if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {
            return;
        }
        var /** @type {?} */ nodeCount = view.def.nodes.length;
        for (var /** @type {?} */ i = 0; i < nodeCount; i++) {
            var /** @type {?} */ nodeDef = view.def.nodes[i];
            if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {
                Services.setCurrentNode(view, nodeDef.nodeIndex);
                switch (checkType) {
                    case 0 /* CheckAndUpdate */:
                        checkAndUpdateQuery(view, nodeDef);
                        break;
                    case 1 /* CheckNoChanges */:
                        checkNoChangesQuery(view, nodeDef);
                        break;
                }
            }
            if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {
                // no child has a matching query
                // then skip the children
                i += nodeDef.childCount;
            }
        }
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var initialized = false;
    /**
     * @return {?}
     */
    function initServicesIfNeeded() {
        if (initialized) {
            return;
        }
        initialized = true;
        var /** @type {?} */ services = isDevMode() ? createDebugServices() : createProdServices();
        Services.setCurrentNode = services.setCurrentNode;
        Services.createRootView = services.createRootView;
        Services.createEmbeddedView = services.createEmbeddedView;
        Services.createComponentView = services.createComponentView;
        Services.createNgModuleRef = services.createNgModuleRef;
        Services.overrideProvider = services.overrideProvider;
        Services.clearProviderOverrides = services.clearProviderOverrides;
        Services.checkAndUpdateView = services.checkAndUpdateView;
        Services.checkNoChangesView = services.checkNoChangesView;
        Services.destroyView = services.destroyView;
        Services.resolveDep = resolveDep;
        Services.createDebugContext = services.createDebugContext;
        Services.handleEvent = services.handleEvent;
        Services.updateDirectives = services.updateDirectives;
        Services.updateRenderer = services.updateRenderer;
        Services.dirtyParentQueries = dirtyParentQueries;
    }
    /**
     * @return {?}
     */
    function createProdServices() {
        return {
            setCurrentNode: function () { },
            createRootView: createProdRootView,
            createEmbeddedView: createEmbeddedView,
            createComponentView: createComponentView,
            createNgModuleRef: createNgModuleRef,
            overrideProvider: NOOP,
            clearProviderOverrides: NOOP,
            checkAndUpdateView: checkAndUpdateView,
            checkNoChangesView: checkNoChangesView,
            destroyView: destroyView,
            createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },
            handleEvent: function (view, nodeIndex, eventName, event) { return view.def.handleEvent(view, nodeIndex, eventName, event); },
            updateDirectives: function (view, checkType) { return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :
                prodCheckNoChangesNode, view); },
            updateRenderer: function (view, checkType) { return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :
                prodCheckNoChangesNode, view); },
        };
    }
    /**
     * @return {?}
     */
    function createDebugServices() {
        return {
            setCurrentNode: debugSetCurrentNode,
            createRootView: debugCreateRootView,
            createEmbeddedView: debugCreateEmbeddedView,
            createComponentView: debugCreateComponentView,
            createNgModuleRef: debugCreateNgModuleRef,
            overrideProvider: debugOverrideProvider,
            clearProviderOverrides: debugClearProviderOverrides,
            checkAndUpdateView: debugCheckAndUpdateView,
            checkNoChangesView: debugCheckNoChangesView,
            destroyView: debugDestroyView,
            createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },
            handleEvent: debugHandleEvent,
            updateDirectives: debugUpdateDirectives,
            updateRenderer: debugUpdateRenderer,
        };
    }
    /**
     * @param {?} elInjector
     * @param {?} projectableNodes
     * @param {?} rootSelectorOrNode
     * @param {?} def
     * @param {?} ngModule
     * @param {?=} context
     * @return {?}
     */
    function createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
        var /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);
        return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);
    }
    /**
     * @param {?} elInjector
     * @param {?} projectableNodes
     * @param {?} rootSelectorOrNode
     * @param {?} def
     * @param {?} ngModule
     * @param {?=} context
     * @return {?}
     */
    function debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
        var /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);
        var /** @type {?} */ root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);
        var /** @type {?} */ defWithOverride = applyProviderOverridesToView(def);
        return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);
    }
    /**
     * @param {?} elInjector
     * @param {?} ngModule
     * @param {?} rendererFactory
     * @param {?} projectableNodes
     * @param {?} rootSelectorOrNode
     * @return {?}
     */
    function createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {
        var /** @type {?} */ sanitizer = ngModule.injector.get(Sanitizer);
        var /** @type {?} */ errorHandler = ngModule.injector.get(ErrorHandler);
        var /** @type {?} */ renderer = rendererFactory.createRenderer(null, null);
        return {
            ngModule: ngModule,
            injector: elInjector, projectableNodes: projectableNodes,
            selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer, errorHandler: errorHandler
        };
    }
    /**
     * @param {?} parentView
     * @param {?} anchorDef
     * @param {?} viewDef
     * @param {?=} context
     * @return {?}
     */
    function debugCreateEmbeddedView(parentView, anchorDef, viewDef$$1, context) {
        var /** @type {?} */ defWithOverride = applyProviderOverridesToView(viewDef$$1);
        return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);
    }
    /**
     * @param {?} parentView
     * @param {?} nodeDef
     * @param {?} viewDef
     * @param {?} hostElement
     * @return {?}
     */
    function debugCreateComponentView(parentView, nodeDef, viewDef$$1, hostElement) {
        var /** @type {?} */ defWithOverride = applyProviderOverridesToView(viewDef$$1);
        return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, defWithOverride, hostElement]);
    }
    /**
     * @param {?} moduleType
     * @param {?} parentInjector
     * @param {?} bootstrapComponents
     * @param {?} def
     * @return {?}
     */
    function debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {
        var /** @type {?} */ defWithOverride = applyProviderOverridesToNgModule(def);
        return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);
    }
    var providerOverrides = new Map();
    /**
     * @param {?} override
     * @return {?}
     */
    function debugOverrideProvider(override) {
        providerOverrides.set(override.token, override);
    }
    /**
     * @return {?}
     */
    function debugClearProviderOverrides() {
        providerOverrides.clear();
    }
    /**
     * @param {?} def
     * @return {?}
     */
    function applyProviderOverridesToView(def) {
        if (providerOverrides.size === 0) {
            return def;
        }
        var /** @type {?} */ elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);
        if (elementIndicesWithOverwrittenProviders.length === 0) {
            return def;
        }
        // clone the whole view definition,
        // as it maintains references between the nodes that are hard to update.
        def = ((def.factory))(function () { return NOOP; });
        for (var /** @type {?} */ i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {
            applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);
        }
        return def;
        /**
         * @param {?} def
         * @return {?}
         */
        function findElementIndicesWithOverwrittenProviders(def) {
            var /** @type {?} */ elIndicesWithOverwrittenProviders = [];
            var /** @type {?} */ lastElementDef = null;
            for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
                var /** @type {?} */ nodeDef = def.nodes[i];
                if (nodeDef.flags & 1 /* TypeElement */) {
                    lastElementDef = nodeDef;
                }
                if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&
                    providerOverrides.has(/** @type {?} */ ((nodeDef.provider)).token)) {
                    elIndicesWithOverwrittenProviders.push(/** @type {?} */ ((lastElementDef)).nodeIndex);
                    lastElementDef = null;
                }
            }
            return elIndicesWithOverwrittenProviders;
        }
        /**
         * @param {?} viewDef
         * @param {?} elIndex
         * @return {?}
         */
        function applyProviderOverridesToElement(viewDef$$1, elIndex) {
            for (var /** @type {?} */ i = elIndex + 1; i < viewDef$$1.nodes.length; i++) {
                var /** @type {?} */ nodeDef = viewDef$$1.nodes[i];
                if (nodeDef.flags & 1 /* TypeElement */) {
                    // stop at the next element
                    return;
                }
                if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {
                    var /** @type {?} */ provider = ((nodeDef.provider));
                    var /** @type {?} */ override = providerOverrides.get(provider.token);
                    if (override) {
                        nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;
                        provider.deps = splitDepsDsl(override.deps);
                        provider.value = override.value;
                    }
                }
            }
        }
    }
    /**
     * @param {?} def
     * @return {?}
     */
    function applyProviderOverridesToNgModule(def) {
        var _a = calcHasOverrides(def), hasOverrides = _a.hasOverrides, hasDeprecatedOverrides = _a.hasDeprecatedOverrides;
        if (!hasOverrides) {
            return def;
        }
        // clone the whole view definition,
        // as it maintains references between the nodes that are hard to update.
        def = ((def.factory))(function () { return NOOP; });
        applyProviderOverrides(def);
        return def;
        /**
         * @param {?} def
         * @return {?}
         */
        function calcHasOverrides(def) {
            var /** @type {?} */ hasOverrides = false;
            var /** @type {?} */ hasDeprecatedOverrides = false;
            if (providerOverrides.size === 0) {
                return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };
            }
            def.providers.forEach(function (node) {
                var /** @type {?} */ override = providerOverrides.get(node.token);
                if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {
                    hasOverrides = true;
                    hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;
                }
            });
            return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };
        }
        /**
         * @param {?} def
         * @return {?}
         */
        function applyProviderOverrides(def) {
            for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {
                var /** @type {?} */ provider = def.providers[i];
                if (hasDeprecatedOverrides) {
                    // We had a bug where me made
                    // all providers lazy. Keep this logic behind a flag
                    // for migrating existing users.
                    provider.flags |= 4096 /* LazyProvider */;
                }
                var /** @type {?} */ override = providerOverrides.get(provider.token);
                if (override) {
                    provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;
                    provider.deps = splitDepsDsl(override.deps);
                    provider.value = override.value;
                }
            }
        }
    }
    /**
     * @param {?} view
     * @param {?} checkIndex
     * @param {?} argStyle
     * @param {?=} v0
     * @param {?=} v1
     * @param {?=} v2
     * @param {?=} v3
     * @param {?=} v4
     * @param {?=} v5
     * @param {?=} v6
     * @param {?=} v7
     * @param {?=} v8
     * @param {?=} v9
     * @return {?}
     */
    function prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var /** @type {?} */ nodeDef = view.def.nodes[checkIndex];
        checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        return (nodeDef.flags & 224 /* CatPureExpression */) ?
            asPureExpressionData(view, checkIndex).value :
            undefined;
    }
    /**
     * @param {?} view
     * @param {?} checkIndex
     * @param {?} argStyle
     * @param {?=} v0
     * @param {?=} v1
     * @param {?=} v2
     * @param {?=} v3
     * @param {?=} v4
     * @param {?=} v5
     * @param {?=} v6
     * @param {?=} v7
     * @param {?=} v8
     * @param {?=} v9
     * @return {?}
     */
    function prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var /** @type {?} */ nodeDef = view.def.nodes[checkIndex];
        checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        return (nodeDef.flags & 224 /* CatPureExpression */) ?
            asPureExpressionData(view, checkIndex).value :
            undefined;
    }
    /**
     * @param {?} view
     * @return {?}
     */
    function debugCheckAndUpdateView(view) {
        return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);
    }
    /**
     * @param {?} view
     * @return {?}
     */
    function debugCheckNoChangesView(view) {
        return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);
    }
    /**
     * @param {?} view
     * @return {?}
     */
    function debugDestroyView(view) {
        return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);
    }
    var DebugAction = {};
    DebugAction.create = 0;
    DebugAction.detectChanges = 1;
    DebugAction.checkNoChanges = 2;
    DebugAction.destroy = 3;
    DebugAction.handleEvent = 4;
    DebugAction[DebugAction.create] = "create";
    DebugAction[DebugAction.detectChanges] = "detectChanges";
    DebugAction[DebugAction.checkNoChanges] = "checkNoChanges";
    DebugAction[DebugAction.destroy] = "destroy";
    DebugAction[DebugAction.handleEvent] = "handleEvent";
    var _currentAction;
    var _currentView;
    var _currentNodeIndex;
    /**
     * @param {?} view
     * @param {?} nodeIndex
     * @return {?}
     */
    function debugSetCurrentNode(view, nodeIndex) {
        _currentView = view;
        _currentNodeIndex = nodeIndex;
    }
    /**
     * @param {?} view
     * @param {?} nodeIndex
     * @param {?} eventName
     * @param {?} event
     * @return {?}
     */
    function debugHandleEvent(view, nodeIndex, eventName, event) {
        debugSetCurrentNode(view, nodeIndex);
        return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);
    }
    /**
     * @param {?} view
     * @param {?} checkType
     * @return {?}
     */
    function debugUpdateDirectives(view, checkType) {
        if (view.state & 128 /* Destroyed */) {
            throw viewDestroyedError(DebugAction[_currentAction]);
        }
        debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));
        return view.def.updateDirectives(debugCheckDirectivesFn, view);
        /**
         * @param {?} view
         * @param {?} nodeIndex
         * @param {?} argStyle
         * @param {...?} values
         * @return {?}
         */
        function debugCheckDirectivesFn(view, nodeIndex, argStyle) {
            var values = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                values[_i - 3] = arguments[_i];
            }
            var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
            if (checkType === 0 /* CheckAndUpdate */) {
                debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
            }
            else {
                debugCheckNoChangesNode(view, nodeDef, argStyle, values);
            }
            if (nodeDef.flags & 16384 /* TypeDirective */) {
                debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));
            }
            return (nodeDef.flags & 224 /* CatPureExpression */) ?
                asPureExpressionData(view, nodeDef.nodeIndex).value :
                undefined;
        }
    }
    /**
     * @param {?} view
     * @param {?} checkType
     * @return {?}
     */
    function debugUpdateRenderer(view, checkType) {
        if (view.state & 128 /* Destroyed */) {
            throw viewDestroyedError(DebugAction[_currentAction]);
        }
        debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));
        return view.def.updateRenderer(debugCheckRenderNodeFn, view);
        /**
         * @param {?} view
         * @param {?} nodeIndex
         * @param {?} argStyle
         * @param {...?} values
         * @return {?}
         */
        function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {
            var values = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                values[_i - 3] = arguments[_i];
            }
            var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
            if (checkType === 0 /* CheckAndUpdate */) {
                debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
            }
            else {
                debugCheckNoChangesNode(view, nodeDef, argStyle, values);
            }
            if (nodeDef.flags & 3 /* CatRenderNode */) {
                debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));
            }
            return (nodeDef.flags & 224 /* CatPureExpression */) ?
                asPureExpressionData(view, nodeDef.nodeIndex).value :
                undefined;
        }
    }
    /**
     * @param {?} view
     * @param {?} nodeDef
     * @param {?} argStyle
     * @param {?} givenValues
     * @return {?}
     */
    function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {
        var /** @type {?} */ changed = ((checkAndUpdateNode)).apply(void 0, [view, nodeDef, argStyle].concat(givenValues));
        if (changed) {
            var /** @type {?} */ values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;
            if (nodeDef.flags & 16384 /* TypeDirective */) {
                var /** @type {?} */ bindingValues = {};
                for (var /** @type {?} */ i = 0; i < nodeDef.bindings.length; i++) {
                    var /** @type {?} */ binding = nodeDef.bindings[i];
                    var /** @type {?} */ value = values[i];
                    if (binding.flags & 8 /* TypeProperty */) {
                        bindingValues[normalizeDebugBindingName(/** @type {?} */ ((binding.nonMinifiedName)))] =
                            normalizeDebugBindingValue(value);
                    }
                }
                var /** @type {?} */ elDef = ((nodeDef.parent));
                var /** @type {?} */ el = asElementData(view, elDef.nodeIndex).renderElement;
                if (!((elDef.element)).name) {
                    // a comment.
                    view.renderer.setValue(el, "bindings=" + JSON.stringify(bindingValues, null, 2));
                }
                else {
                    // a regular element.
                    for (var /** @type {?} */ attr in bindingValues) {
                        var /** @type {?} */ value = bindingValues[attr];
                        if (value != null) {
                            view.renderer.setAttribute(el, attr, value);
                        }
                        else {
                            view.renderer.removeAttribute(el, attr);
                        }
                    }
                }
            }
        }
    }
    /**
     * @param {?} view
     * @param {?} nodeDef
     * @param {?} argStyle
     * @param {?} values
     * @return {?}
     */
    function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {
        ((checkNoChangesNode)).apply(void 0, [view, nodeDef, argStyle].concat(values));
    }
    /**
     * @param {?} name
     * @return {?}
     */
    function normalizeDebugBindingName(name) {
        // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers
        name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));
        return "ng-reflect-" + name;
    }
    var CAMEL_CASE_REGEXP = /([A-Z])/g;
    /**
     * @param {?} input
     * @return {?}
     */
    function camelCaseToDashCase(input) {
        return input.replace(CAMEL_CASE_REGEXP, function () {
            var m = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                m[_i] = arguments[_i];
            }
            return '-' + m[1].toLowerCase();
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function normalizeDebugBindingValue(value) {
        try {
            // Limit the size of the value as otherwise the DOM just gets polluted.
            return value != null ? value.toString().slice(0, 30) : value;
        }
        catch (e) {
            return '[ERROR] Exception while trying to serialize the value';
        }
    }
    /**
     * @param {?} view
     * @param {?} nodeIndex
     * @return {?}
     */
    function nextDirectiveWithBinding(view, nodeIndex) {
        for (var /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {
            var /** @type {?} */ nodeDef = view.def.nodes[i];
            if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {
                return i;
            }
        }
        return null;
    }
    /**
     * @param {?} view
     * @param {?} nodeIndex
     * @return {?}
     */
    function nextRenderNodeWithBinding(view, nodeIndex) {
        for (var /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {
            var /** @type {?} */ nodeDef = view.def.nodes[i];
            if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {
                return i;
            }
        }
        return null;
    }
    var DebugContext_ = (function () {
        /**
         * @param {?} view
         * @param {?} nodeIndex
         */
        function DebugContext_(view, nodeIndex) {
            this.view = view;
            this.nodeIndex = nodeIndex;
            if (nodeIndex == null) {
                this.nodeIndex = nodeIndex = 0;
            }
            this.nodeDef = view.def.nodes[nodeIndex];
            var elDef = this.nodeDef;
            var elView = view;
            while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {
                elDef = elDef.parent;
            }
            if (!elDef) {
                while (!elDef && elView) {
                    elDef = viewParentEl(elView);
                    elView = elView.parent;
                }
            }
            this.elDef = elDef;
            this.elView = elView;
        }
        Object.defineProperty(DebugContext_.prototype, "elOrCompView", {
            /**
             * @return {?}
             */
            get: function () {
                // Has to be done lazily as we use the DebugContext also during creation of elements...
                return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext_.prototype, "injector", {
            /**
             * @return {?}
             */
            get: function () { return createInjector(this.elView, this.elDef); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext_.prototype, "component", {
            /**
             * @return {?}
             */
            get: function () { return this.elOrCompView.component; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext_.prototype, "context", {
            /**
             * @return {?}
             */
            get: function () { return this.elOrCompView.context; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext_.prototype, "providerTokens", {
            /**
             * @return {?}
             */
            get: function () {
                var /** @type {?} */ tokens = [];
                if (this.elDef) {
                    for (var /** @type {?} */ i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {
                        var /** @type {?} */ childDef = this.elView.def.nodes[i];
                        if (childDef.flags & 20224 /* CatProvider */) {
                            tokens.push(/** @type {?} */ ((childDef.provider)).token);
                        }
                        i += childDef.childCount;
                    }
                }
                return tokens;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext_.prototype, "references", {
            /**
             * @return {?}
             */
            get: function () {
                var /** @type {?} */ references = {};
                if (this.elDef) {
                    collectReferences(this.elView, this.elDef, references);
                    for (var /** @type {?} */ i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {
                        var /** @type {?} */ childDef = this.elView.def.nodes[i];
                        if (childDef.flags & 20224 /* CatProvider */) {
                            collectReferences(this.elView, childDef, references);
                        }
                        i += childDef.childCount;
                    }
                }
                return references;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext_.prototype, "componentRenderElement", {
            /**
             * @return {?}
             */
            get: function () {
                var /** @type {?} */ elData = findHostElement(this.elOrCompView);
                return elData ? elData.renderElement : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext_.prototype, "renderNode", {
            /**
             * @return {?}
             */
            get: function () {
                return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :
                    renderNode(this.elView, this.elDef);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} console
         * @param {...?} values
         * @return {?}
         */
        DebugContext_.prototype.logError = function (console) {
            var values = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                values[_i - 1] = arguments[_i];
            }
            var /** @type {?} */ logViewDef;
            var /** @type {?} */ logNodeIndex;
            if (this.nodeDef.flags & 2 /* TypeText */) {
                logViewDef = this.view.def;
                logNodeIndex = this.nodeDef.nodeIndex;
            }
            else {
                logViewDef = this.elView.def;
                logNodeIndex = this.elDef.nodeIndex;
            }
            // Note: we only generate a log function for text and element nodes
            // to make the generated code as small as possible.
            var /** @type {?} */ renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);
            var /** @type {?} */ currRenderNodeIndex = -1;
            var /** @type {?} */ nodeLogger = function () {
                currRenderNodeIndex++;
                if (currRenderNodeIndex === renderNodeIndex) {
                    return (_a = console.error).bind.apply(_a, [console].concat(values));
                }
                else {
                    return NOOP;
                }
                var _a;
            }; /** @type {?} */
            ((logViewDef.factory))(nodeLogger);
            if (currRenderNodeIndex < renderNodeIndex) {
                console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');
                console.error.apply(console, values);
            }
        };
        return DebugContext_;
    }());
    /**
     * @param {?} viewDef
     * @param {?} nodeIndex
     * @return {?}
     */
    function getRenderNodeIndex(viewDef$$1, nodeIndex) {
        var /** @type {?} */ renderNodeIndex = -1;
        for (var /** @type {?} */ i = 0; i <= nodeIndex; i++) {
            var /** @type {?} */ nodeDef = viewDef$$1.nodes[i];
            if (nodeDef.flags & 3 /* CatRenderNode */) {
                renderNodeIndex++;
            }
        }
        return renderNodeIndex;
    }
    /**
     * @param {?} view
     * @return {?}
     */
    function findHostElement(view) {
        while (view && !isComponentView(view)) {
            view = ((view.parent));
        }
        if (view.parent) {
            return asElementData(view.parent, /** @type {?} */ ((viewParentEl(view))).nodeIndex);
        }
        return null;
    }
    /**
     * @param {?} view
     * @param {?} nodeDef
     * @param {?} references
     * @return {?}
     */
    function collectReferences(view, nodeDef, references) {
        for (var /** @type {?} */ refName in nodeDef.references) {
            references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);
        }
    }
    /**
     * @param {?} action
     * @param {?} fn
     * @param {?} self
     * @param {?} args
     * @return {?}
     */
    function callWithDebugContext(action, fn, self, args) {
        var /** @type {?} */ oldAction = _currentAction;
        var /** @type {?} */ oldView = _currentView;
        var /** @type {?} */ oldNodeIndex = _currentNodeIndex;
        try {
            _currentAction = action;
            var /** @type {?} */ result = fn.apply(self, args);
            _currentView = oldView;
            _currentNodeIndex = oldNodeIndex;
            _currentAction = oldAction;
            return result;
        }
        catch (e) {
            if (isViewDebugError(e) || !_currentView) {
                throw e;
            }
            throw viewWrappedDebugError(e, /** @type {?} */ ((getCurrentDebugContext())));
        }
    }
    /**
     * @return {?}
     */
    function getCurrentDebugContext() {
        return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;
    }
    var DebugRendererFactory2 = (function () {
        /**
         * @param {?} delegate
         */
        function DebugRendererFactory2(delegate) {
            this.delegate = delegate;
        }
        /**
         * @param {?} element
         * @param {?} renderData
         * @return {?}
         */
        DebugRendererFactory2.prototype.createRenderer = function (element, renderData) {
            return new DebugRenderer2(this.delegate.createRenderer(element, renderData));
        };
        /**
         * @return {?}
         */
        DebugRendererFactory2.prototype.begin = function () {
            if (this.delegate.begin) {
                this.delegate.begin();
            }
        };
        /**
         * @return {?}
         */
        DebugRendererFactory2.prototype.end = function () {
            if (this.delegate.end) {
                this.delegate.end();
            }
        };
        /**
         * @return {?}
         */
        DebugRendererFactory2.prototype.whenRenderingDone = function () {
            if (this.delegate.whenRenderingDone) {
                return this.delegate.whenRenderingDone();
            }
            return Promise.resolve(null);
        };
        return DebugRendererFactory2;
    }());
    var DebugRenderer2 = (function () {
        /**
         * @param {?} delegate
         */
        function DebugRenderer2(delegate) {
            this.delegate = delegate;
        }
        Object.defineProperty(DebugRenderer2.prototype, "data", {
            /**
             * @return {?}
             */
            get: function () { return this.delegate.data; },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} node
         * @return {?}
         */
        DebugRenderer2.prototype.destroyNode = function (node) {
            removeDebugNodeFromIndex(/** @type {?} */ ((getDebugNode(node))));
            if (this.delegate.destroyNode) {
                this.delegate.destroyNode(node);
            }
        };
        /**
         * @return {?}
         */
        DebugRenderer2.prototype.destroy = function () { this.delegate.destroy(); };
        /**
         * @param {?} name
         * @param {?=} namespace
         * @return {?}
         */
        DebugRenderer2.prototype.createElement = function (name, namespace) {
            var /** @type {?} */ el = this.delegate.createElement(name, namespace);
            var /** @type {?} */ debugCtx = getCurrentDebugContext();
            if (debugCtx) {
                var /** @type {?} */ debugEl = new DebugElement(el, null, debugCtx);
                debugEl.name = name;
                indexDebugNode(debugEl);
            }
            return el;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        DebugRenderer2.prototype.createComment = function (value) {
            var /** @type {?} */ comment = this.delegate.createComment(value);
            var /** @type {?} */ debugCtx = getCurrentDebugContext();
            if (debugCtx) {
                indexDebugNode(new DebugNode(comment, null, debugCtx));
            }
            return comment;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        DebugRenderer2.prototype.createText = function (value) {
            var /** @type {?} */ text = this.delegate.createText(value);
            var /** @type {?} */ debugCtx = getCurrentDebugContext();
            if (debugCtx) {
                indexDebugNode(new DebugNode(text, null, debugCtx));
            }
            return text;
        };
        /**
         * @param {?} parent
         * @param {?} newChild
         * @return {?}
         */
        DebugRenderer2.prototype.appendChild = function (parent, newChild) {
            var /** @type {?} */ debugEl = getDebugNode(parent);
            var /** @type {?} */ debugChildEl = getDebugNode(newChild);
            if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
                debugEl.addChild(debugChildEl);
            }
            this.delegate.appendChild(parent, newChild);
        };
        /**
         * @param {?} parent
         * @param {?} newChild
         * @param {?} refChild
         * @return {?}
         */
        DebugRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {
            var /** @type {?} */ debugEl = getDebugNode(parent);
            var /** @type {?} */ debugChildEl = getDebugNode(newChild);
            var /** @type {?} */ debugRefEl = ((getDebugNode(refChild)));
            if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
                debugEl.insertBefore(debugRefEl, debugChildEl);
            }
            this.delegate.insertBefore(parent, newChild, refChild);
        };
        /**
         * @param {?} parent
         * @param {?} oldChild
         * @return {?}
         */
        DebugRenderer2.prototype.removeChild = function (parent, oldChild) {
            var /** @type {?} */ debugEl = getDebugNode(parent);
            var /** @type {?} */ debugChildEl = getDebugNode(oldChild);
            if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
                debugEl.removeChild(debugChildEl);
            }
            this.delegate.removeChild(parent, oldChild);
        };
        /**
         * @param {?} selectorOrNode
         * @return {?}
         */
        DebugRenderer2.prototype.selectRootElement = function (selectorOrNode) {
            var /** @type {?} */ el = this.delegate.selectRootElement(selectorOrNode);
            var /** @type {?} */ debugCtx = getCurrentDebugContext();
            if (debugCtx) {
                indexDebugNode(new DebugElement(el, null, debugCtx));
            }
            return el;
        };
        /**
         * @param {?} el
         * @param {?} name
         * @param {?} value
         * @param {?=} namespace
         * @return {?}
         */
        DebugRenderer2.prototype.setAttribute = function (el, name, value, namespace) {
            var /** @type {?} */ debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                var /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;
                debugEl.attributes[fullName] = value;
            }
            this.delegate.setAttribute(el, name, value, namespace);
        };
        /**
         * @param {?} el
         * @param {?} name
         * @param {?=} namespace
         * @return {?}
         */
        DebugRenderer2.prototype.removeAttribute = function (el, name, namespace) {
            var /** @type {?} */ debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                var /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;
                debugEl.attributes[fullName] = null;
            }
            this.delegate.removeAttribute(el, name, namespace);
        };
        /**
         * @param {?} el
         * @param {?} name
         * @return {?}
         */
        DebugRenderer2.prototype.addClass = function (el, name) {
            var /** @type {?} */ debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                debugEl.classes[name] = true;
            }
            this.delegate.addClass(el, name);
        };
        /**
         * @param {?} el
         * @param {?} name
         * @return {?}
         */
        DebugRenderer2.prototype.removeClass = function (el, name) {
            var /** @type {?} */ debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                debugEl.classes[name] = false;
            }
            this.delegate.removeClass(el, name);
        };
        /**
         * @param {?} el
         * @param {?} style
         * @param {?} value
         * @param {?} flags
         * @return {?}
         */
        DebugRenderer2.prototype.setStyle = function (el, style, value, flags) {
            var /** @type {?} */ debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                debugEl.styles[style] = value;
            }
            this.delegate.setStyle(el, style, value, flags);
        };
        /**
         * @param {?} el
         * @param {?} style
         * @param {?} flags
         * @return {?}
         */
        DebugRenderer2.prototype.removeStyle = function (el, style, flags) {
            var /** @type {?} */ debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                debugEl.styles[style] = null;
            }
            this.delegate.removeStyle(el, style, flags);
        };
        /**
         * @param {?} el
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        DebugRenderer2.prototype.setProperty = function (el, name, value) {
            var /** @type {?} */ debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                debugEl.properties[name] = value;
            }
            this.delegate.setProperty(el, name, value);
        };
        /**
         * @param {?} target
         * @param {?} eventName
         * @param {?} callback
         * @return {?}
         */
        DebugRenderer2.prototype.listen = function (target, eventName, callback) {
            if (typeof target !== 'string') {
                var /** @type {?} */ debugEl = getDebugNode(target);
                if (debugEl) {
                    debugEl.listeners.push(new EventListener(eventName, callback));
                }
            }
            return this.delegate.listen(target, eventName, callback);
        };
        /**
         * @param {?} node
         * @return {?}
         */
        DebugRenderer2.prototype.parentNode = function (node) { return this.delegate.parentNode(node); };
        /**
         * @param {?} node
         * @return {?}
         */
        DebugRenderer2.prototype.nextSibling = function (node) { return this.delegate.nextSibling(node); };
        /**
         * @param {?} node
         * @param {?} value
         * @return {?}
         */
        DebugRenderer2.prototype.setValue = function (node, value) { return this.delegate.setValue(node, value); };
        return DebugRenderer2;
    }());
    /**
     * @param {?} ngModuleType
     * @param {?} bootstrapComponents
     * @param {?} defFactory
     * @return {?}
     */
    function createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {
        return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);
    }
    var NgModuleFactory_ = (function (_super) {
        __extends(NgModuleFactory_, _super);
        /**
         * @param {?} moduleType
         * @param {?} _bootstrapComponents
         * @param {?} _ngModuleDefFactory
         */
        function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {
            var _this = 
            // Attention: this ctor is called as top level function.
            // Putting any logic in here will destroy closure tree shaking!
            _super.call(this) || this;
            _this.moduleType = moduleType;
            _this._bootstrapComponents = _bootstrapComponents;
            _this._ngModuleDefFactory = _ngModuleDefFactory;
            return _this;
        }
        /**
         * @param {?} parentInjector
         * @return {?}
         */
        NgModuleFactory_.prototype.create = function (parentInjector) {
            initServicesIfNeeded();
            var /** @type {?} */ def = resolveDefinition(this._ngModuleDefFactory);
            return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);
        };
        return NgModuleFactory_;
    }(NgModuleFactory));

    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * This class should not be used directly by an application developer. Instead, use
     * {\@link Location}.
     *
     * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform
     * agnostic.
     * This means that we can have different implementation of `PlatformLocation` for the different
     * platforms that angular supports. For example, `\@angular/platform-browser` provides an
     * implementation specific to the browser environment, while `\@angular/platform-webworker` provides
     * one suitable for use with web workers.
     *
     * The `PlatformLocation` class is used directly by all implementations of {\@link LocationStrategy}
     * when they need to interact with the DOM apis like pushState, popState, etc...
     *
     * {\@link LocationStrategy} in turn is used by the {\@link Location} service which is used directly
     * by the {\@link Router} in order to navigate between routes. Since all interactions between {\@link
     * Router} /
     * {\@link Location} / {\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`
     * class they are all platform independent.
     *
     * \@stable
     * @abstract
     */
    var PlatformLocation = (function () {
        function PlatformLocation() {
        }
        /**
         * @abstract
         * @return {?}
         */
        PlatformLocation.prototype.getBaseHrefFromDOM = function () { };
        /**
         * @abstract
         * @param {?} fn
         * @return {?}
         */
        PlatformLocation.prototype.onPopState = function (fn) { };
        /**
         * @abstract
         * @param {?} fn
         * @return {?}
         */
        PlatformLocation.prototype.onHashChange = function (fn) { };
        /**
         * @abstract
         * @return {?}
         */
        PlatformLocation.prototype.pathname = function () { };
        /**
         * @abstract
         * @return {?}
         */
        PlatformLocation.prototype.search = function () { };
        /**
         * @abstract
         * @return {?}
         */
        PlatformLocation.prototype.hash = function () { };
        /**
         * @abstract
         * @param {?} state
         * @param {?} title
         * @param {?} url
         * @return {?}
         */
        PlatformLocation.prototype.replaceState = function (state, title, url) { };
        /**
         * @abstract
         * @param {?} state
         * @param {?} title
         * @param {?} url
         * @return {?}
         */
        PlatformLocation.prototype.pushState = function (state, title, url) { };
        /**
         * @abstract
         * @return {?}
         */
        PlatformLocation.prototype.forward = function () { };
        /**
         * @abstract
         * @return {?}
         */
        PlatformLocation.prototype.back = function () { };
        return PlatformLocation;
    }());
    /**
     * \@whatItDoes indicates when a location is initialized
     * \@experimental
     */
    var LOCATION_INITIALIZED = new InjectionToken('Location Initialized');
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * `LocationStrategy` is responsible for representing and reading route state
     * from the browser's URL. Angular provides two strategies:
     * {\@link HashLocationStrategy} and {\@link PathLocationStrategy}.
     *
     * This is used under the hood of the {\@link Location} service.
     *
     * Applications should use the {\@link Router} or {\@link Location} services to
     * interact with application route state.
     *
     * For instance, {\@link HashLocationStrategy} produces URLs like
     * `http://example.com#/foo`, and {\@link PathLocationStrategy} produces
     * `http://example.com/foo` as an equivalent URL.
     *
     * See these two classes for more.
     *
     * \@stable
     * @abstract
     */
    var LocationStrategy = (function () {
        function LocationStrategy() {
        }
        /**
         * @abstract
         * @param {?=} includeHash
         * @return {?}
         */
        LocationStrategy.prototype.path = function (includeHash) { };
        /**
         * @abstract
         * @param {?} internal
         * @return {?}
         */
        LocationStrategy.prototype.prepareExternalUrl = function (internal) { };
        /**
         * @abstract
         * @param {?} state
         * @param {?} title
         * @param {?} url
         * @param {?} queryParams
         * @return {?}
         */
        LocationStrategy.prototype.pushState = function (state, title, url, queryParams) { };
        /**
         * @abstract
         * @param {?} state
         * @param {?} title
         * @param {?} url
         * @param {?} queryParams
         * @return {?}
         */
        LocationStrategy.prototype.replaceState = function (state, title, url, queryParams) { };
        /**
         * @abstract
         * @return {?}
         */
        LocationStrategy.prototype.forward = function () { };
        /**
         * @abstract
         * @return {?}
         */
        LocationStrategy.prototype.back = function () { };
        /**
         * @abstract
         * @param {?} fn
         * @return {?}
         */
        LocationStrategy.prototype.onPopState = function (fn) { };
        /**
         * @abstract
         * @return {?}
         */
        LocationStrategy.prototype.getBaseHref = function () { };
        return LocationStrategy;
    }());
    /**
     * The `APP_BASE_HREF` token represents the base href to be used with the
     * {\@link PathLocationStrategy}.
     *
     * If you're using {\@link PathLocationStrategy}, you must provide a provider to a string
     * representing the URL prefix that should be preserved when generating and recognizing
     * URLs.
     *
     * ### Example
     *
     * ```typescript
     * import {Component, NgModule} from '\@angular/core';
     * import {APP_BASE_HREF} from '\@angular/common';
     *
     * \@NgModule({
     *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
     * })
     * class AppModule {}
     * ```
     *
     * \@stable
     */
    var APP_BASE_HREF = new InjectionToken('appBaseHref');
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@whatItDoes `Location` is a service that applications can use to interact with a browser's URL.
     * \@description
     * Depending on which {\@link LocationStrategy} is used, `Location` will either persist
     * to the URL's path or the URL's hash segment.
     *
     * Note: it's better to use {\@link Router#navigate} service to trigger route changes. Use
     * `Location` only if you need to interact with or create normalized URLs outside of
     * routing.
     *
     * `Location` is responsible for normalizing the URL against the application's base href.
     * A normalized URL is absolute from the URL host, includes the application's base href, and has no
     * trailing slash:
     * - `/my/app/user/123` is normalized
     * - `my/app/user/123` **is not** normalized
     * - `/my/app/user/123/` **is not** normalized
     *
     * ### Example
     * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
     * \@stable
     */
    var Location = (function () {
        /**
         * @param {?} platformStrategy
         */
        function Location(platformStrategy) {
            var _this = this;
            /**
             * \@internal
             */
            this._subject = new EventEmitter();
            this._platformStrategy = platformStrategy;
            var browserBaseHref = this._platformStrategy.getBaseHref();
            this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
            this._platformStrategy.onPopState(function (ev) {
                _this._subject.emit({
                    'url': _this.path(true),
                    'pop': true,
                    'type': ev.type,
                });
            });
        }
        /**
         * @param {?=} includeHash
         * @return {?}
         */
        Location.prototype.path = function (includeHash) {
            if (includeHash === void 0) { includeHash = false; }
            return this.normalize(this._platformStrategy.path(includeHash));
        };
        /**
         * Normalizes the given path and compares to the current normalized path.
         * @param {?} path
         * @param {?=} query
         * @return {?}
         */
        Location.prototype.isCurrentPathEqualTo = function (path, query) {
            if (query === void 0) { query = ''; }
            return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
        };
        /**
         * Given a string representing a URL, returns the normalized URL path without leading or
         * trailing slashes.
         * @param {?} url
         * @return {?}
         */
        Location.prototype.normalize = function (url) {
            return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
        };
        /**
         * Given a string representing a URL, returns the platform-specific external URL path.
         * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
         * before normalizing. This method will also add a hash if `HashLocationStrategy` is
         * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
         * @param {?} url
         * @return {?}
         */
        Location.prototype.prepareExternalUrl = function (url) {
            if (url && url[0] !== '/') {
                url = '/' + url;
            }
            return this._platformStrategy.prepareExternalUrl(url);
        };
        /**
         * Changes the browsers URL to the normalized version of the given URL, and pushes a
         * new item onto the platform's history.
         * @param {?} path
         * @param {?=} query
         * @return {?}
         */
        Location.prototype.go = function (path, query) {
            if (query === void 0) { query = ''; }
            this._platformStrategy.pushState(null, '', path, query);
        };
        /**
         * Changes the browsers URL to the normalized version of the given URL, and replaces
         * the top item on the platform's history stack.
         * @param {?} path
         * @param {?=} query
         * @return {?}
         */
        Location.prototype.replaceState = function (path, query) {
            if (query === void 0) { query = ''; }
            this._platformStrategy.replaceState(null, '', path, query);
        };
        /**
         * Navigates forward in the platform's history.
         * @return {?}
         */
        Location.prototype.forward = function () { this._platformStrategy.forward(); };
        /**
         * Navigates back in the platform's history.
         * @return {?}
         */
        Location.prototype.back = function () { this._platformStrategy.back(); };
        /**
         * Subscribe to the platform's `popState` events.
         * @param {?} onNext
         * @param {?=} onThrow
         * @param {?=} onReturn
         * @return {?}
         */
        Location.prototype.subscribe = function (onNext, onThrow, onReturn) {
            return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
        };
        /**
         * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as
         * is.
         * @param {?} params
         * @return {?}
         */
        Location.normalizeQueryParams = function (params) {
            return params && params[0] !== '?' ? '?' + params : params;
        };
        /**
         * Given 2 parts of a url, join them with a slash if needed.
         * @param {?} start
         * @param {?} end
         * @return {?}
         */
        Location.joinWithSlash = function (start, end) {
            if (start.length == 0) {
                return end;
            }
            if (end.length == 0) {
                return start;
            }
            var /** @type {?} */ slashes = 0;
            if (start.endsWith('/')) {
                slashes++;
            }
            if (end.startsWith('/')) {
                slashes++;
            }
            if (slashes == 2) {
                return start + end.substring(1);
            }
            if (slashes == 1) {
                return start + end;
            }
            return start + '/' + end;
        };
        /**
         * If url has a trailing slash, remove it, otherwise return url as is. This
         * method looks for the first occurence of either #, ?, or the end of the
         * line as `/` characters after any of these should not be replaced.
         * @param {?} url
         * @return {?}
         */
        Location.stripTrailingSlash = function (url) {
            var /** @type {?} */ match = url.match(/#|\?|$/);
            var /** @type {?} */ pathEndIdx = match && match.index || url.length;
            var /** @type {?} */ droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);
            return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);
        };
        return Location;
    }());
    Location.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    Location.ctorParameters = function () { return [
        { type: LocationStrategy, },
    ]; };
    /**
     * @param {?} baseHref
     * @param {?} url
     * @return {?}
     */
    function _stripBaseHref(baseHref, url) {
        return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    function _stripIndexHtml(url) {
        return url.replace(/\/index.html$/, '');
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@whatItDoes Use URL hash for storing application location data.
     * \@description
     * `HashLocationStrategy` is a {\@link LocationStrategy} used to configure the
     * {\@link Location} service to represent its state in the
     * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
     * of the browser's URL.
     *
     * For instance, if you call `location.go('/foo')`, the browser's URL will become
     * `example.com#/foo`.
     *
     * ### Example
     *
     * {\@example common/location/ts/hash_location_component.ts region='LocationComponent'}
     *
     * \@stable
     */
    var HashLocationStrategy = (function (_super) {
        __extends(HashLocationStrategy, _super);
        /**
         * @param {?} _platformLocation
         * @param {?=} _baseHref
         */
        function HashLocationStrategy(_platformLocation, _baseHref) {
            var _this = _super.call(this) || this;
            _this._platformLocation = _platformLocation;
            _this._baseHref = '';
            if (_baseHref != null) {
                _this._baseHref = _baseHref;
            }
            return _this;
        }
        /**
         * @param {?} fn
         * @return {?}
         */
        HashLocationStrategy.prototype.onPopState = function (fn) {
            this._platformLocation.onPopState(fn);
            this._platformLocation.onHashChange(fn);
        };
        /**
         * @return {?}
         */
        HashLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
        /**
         * @param {?=} includeHash
         * @return {?}
         */
        HashLocationStrategy.prototype.path = function (includeHash) {
            if (includeHash === void 0) { includeHash = false; }
            // the hash value is always prefixed with a `#`
            // and if it is empty then it will stay empty
            var /** @type {?} */ path = this._platformLocation.hash;
            if (path == null)
                path = '#';
            return path.length > 0 ? path.substring(1) : path;
        };
        /**
         * @param {?} internal
         * @return {?}
         */
        HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
            var /** @type {?} */ url = Location.joinWithSlash(this._baseHref, internal);
            return url.length > 0 ? ('#' + url) : url;
        };
        /**
         * @param {?} state
         * @param {?} title
         * @param {?} path
         * @param {?} queryParams
         * @return {?}
         */
        HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {
            var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
            if (url.length == 0) {
                url = this._platformLocation.pathname;
            }
            this._platformLocation.pushState(state, title, url);
        };
        /**
         * @param {?} state
         * @param {?} title
         * @param {?} path
         * @param {?} queryParams
         * @return {?}
         */
        HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) {
            var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
            if (url.length == 0) {
                url = this._platformLocation.pathname;
            }
            this._platformLocation.replaceState(state, title, url);
        };
        /**
         * @return {?}
         */
        HashLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
        /**
         * @return {?}
         */
        HashLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
        return HashLocationStrategy;
    }(LocationStrategy));
    HashLocationStrategy.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    HashLocationStrategy.ctorParameters = function () { return [
        { type: PlatformLocation, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF,] },] },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@whatItDoes Use URL for storing application location data.
     * \@description
     * `PathLocationStrategy` is a {\@link LocationStrategy} used to configure the
     * {\@link Location} service to represent its state in the
     * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
     * browser's URL.
     *
     * If you're using `PathLocationStrategy`, you must provide a {\@link APP_BASE_HREF}
     * or add a base element to the document. This URL prefix that will be preserved
     * when generating and recognizing URLs.
     *
     * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
     * `location.go('/foo')`, the browser's URL will become
     * `example.com/my/app/foo`.
     *
     * Similarly, if you add `<base href='/my/app'/>` to the document and call
     * `location.go('/foo')`, the browser's URL will become
     * `example.com/my/app/foo`.
     *
     * ### Example
     *
     * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
     *
     * \@stable
     */
    var PathLocationStrategy = (function (_super) {
        __extends(PathLocationStrategy, _super);
        /**
         * @param {?} _platformLocation
         * @param {?=} href
         */
        function PathLocationStrategy(_platformLocation, href) {
            var _this = _super.call(this) || this;
            _this._platformLocation = _platformLocation;
            if (href == null) {
                href = _this._platformLocation.getBaseHrefFromDOM();
            }
            if (href == null) {
                throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
            }
            _this._baseHref = href;
            return _this;
        }
        /**
         * @param {?} fn
         * @return {?}
         */
        PathLocationStrategy.prototype.onPopState = function (fn) {
            this._platformLocation.onPopState(fn);
            this._platformLocation.onHashChange(fn);
        };
        /**
         * @return {?}
         */
        PathLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
        /**
         * @param {?} internal
         * @return {?}
         */
        PathLocationStrategy.prototype.prepareExternalUrl = function (internal) {
            return Location.joinWithSlash(this._baseHref, internal);
        };
        /**
         * @param {?=} includeHash
         * @return {?}
         */
        PathLocationStrategy.prototype.path = function (includeHash) {
            if (includeHash === void 0) { includeHash = false; }
            var /** @type {?} */ pathname = this._platformLocation.pathname +
                Location.normalizeQueryParams(this._platformLocation.search);
            var /** @type {?} */ hash = this._platformLocation.hash;
            return hash && includeHash ? "" + pathname + hash : pathname;
        };
        /**
         * @param {?} state
         * @param {?} title
         * @param {?} url
         * @param {?} queryParams
         * @return {?}
         */
        PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {
            var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
            this._platformLocation.pushState(state, title, externalUrl);
        };
        /**
         * @param {?} state
         * @param {?} title
         * @param {?} url
         * @param {?} queryParams
         * @return {?}
         */
        PathLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {
            var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
            this._platformLocation.replaceState(state, title, externalUrl);
        };
        /**
         * @return {?}
         */
        PathLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
        /**
         * @return {?}
         */
        PathLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
        return PathLocationStrategy;
    }(LocationStrategy));
    PathLocationStrategy.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    PathLocationStrategy.ctorParameters = function () { return [
        { type: PlatformLocation, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF,] },] },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@experimental
     * @abstract
     */
    var NgLocalization = (function () {
        function NgLocalization() {
        }
        /**
         * @abstract
         * @param {?} value
         * @return {?}
         */
        NgLocalization.prototype.getPluralCategory = function (value) { };
        return NgLocalization;
    }());
    /**
     * Returns the plural category for a given value.
     * - "=value" when the case exists,
     * - the plural category otherwise
     *
     * \@internal
     * @param {?} value
     * @param {?} cases
     * @param {?} ngLocalization
     * @return {?}
     */
    function getPluralCategory(value, cases, ngLocalization) {
        var /** @type {?} */ key = "=" + value;
        if (cases.indexOf(key) > -1) {
            return key;
        }
        key = ngLocalization.getPluralCategory(value);
        if (cases.indexOf(key) > -1) {
            return key;
        }
        if (cases.indexOf('other') > -1) {
            return 'other';
        }
        throw new Error("No plural message found for value \"" + value + "\"");
    }
    /**
     * Returns the plural case based on the locale
     *
     * \@experimental
     */
    var NgLocaleLocalization = (function (_super) {
        __extends(NgLocaleLocalization, _super);
        /**
         * @param {?} locale
         */
        function NgLocaleLocalization(locale) {
            var _this = _super.call(this) || this;
            _this.locale = locale;
            return _this;
        }
        /**
         * @param {?} value
         * @return {?}
         */
        NgLocaleLocalization.prototype.getPluralCategory = function (value) {
            var /** @type {?} */ plural = getPluralCase(this.locale, value);
            switch (plural) {
                case Plural.Zero:
                    return 'zero';
                case Plural.One:
                    return 'one';
                case Plural.Two:
                    return 'two';
                case Plural.Few:
                    return 'few';
                case Plural.Many:
                    return 'many';
                default:
                    return 'other';
            }
        };
        return NgLocaleLocalization;
    }(NgLocalization));
    NgLocaleLocalization.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    NgLocaleLocalization.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
    ]; };
    var Plural = {};
    Plural.Zero = 0;
    Plural.One = 1;
    Plural.Two = 2;
    Plural.Few = 3;
    Plural.Many = 4;
    Plural.Other = 5;
    Plural[Plural.Zero] = "Zero";
    Plural[Plural.One] = "One";
    Plural[Plural.Two] = "Two";
    Plural[Plural.Few] = "Few";
    Plural[Plural.Many] = "Many";
    Plural[Plural.Other] = "Other";
    /**
     * Returns the plural case based on the locale
     *
     * \@experimental
     * @param {?} locale
     * @param {?} nLike
     * @return {?}
     */
    function getPluralCase(locale, nLike) {
        // TODO(vicb): lazy compute
        if (typeof nLike === 'string') {
            nLike = parseInt(/** @type {?} */ (nLike), 10);
        }
        var /** @type {?} */ n = (nLike);
        var /** @type {?} */ nDecimal = n.toString().replace(/^[^.]*\.?/, '');
        var /** @type {?} */ i = Math.floor(Math.abs(n));
        var /** @type {?} */ v = nDecimal.length;
        var /** @type {?} */ f = parseInt(nDecimal, 10);
        var /** @type {?} */ t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
        var /** @type {?} */ lang = locale.split('-')[0].toLowerCase();
        switch (lang) {
            case 'af':
            case 'asa':
            case 'az':
            case 'bem':
            case 'bez':
            case 'bg':
            case 'brx':
            case 'ce':
            case 'cgg':
            case 'chr':
            case 'ckb':
            case 'ee':
            case 'el':
            case 'eo':
            case 'es':
            case 'eu':
            case 'fo':
            case 'fur':
            case 'gsw':
            case 'ha':
            case 'haw':
            case 'hu':
            case 'jgo':
            case 'jmc':
            case 'ka':
            case 'kk':
            case 'kkj':
            case 'kl':
            case 'ks':
            case 'ksb':
            case 'ky':
            case 'lb':
            case 'lg':
            case 'mas':
            case 'mgo':
            case 'ml':
            case 'mn':
            case 'nb':
            case 'nd':
            case 'ne':
            case 'nn':
            case 'nnh':
            case 'nyn':
            case 'om':
            case 'or':
            case 'os':
            case 'ps':
            case 'rm':
            case 'rof':
            case 'rwk':
            case 'saq':
            case 'seh':
            case 'sn':
            case 'so':
            case 'sq':
            case 'ta':
            case 'te':
            case 'teo':
            case 'tk':
            case 'tr':
            case 'ug':
            case 'uz':
            case 'vo':
            case 'vun':
            case 'wae':
            case 'xog':
                if (n === 1)
                    return Plural.One;
                return Plural.Other;
            case 'ak':
            case 'ln':
            case 'mg':
            case 'pa':
            case 'ti':
                if (n === Math.floor(n) && n >= 0 && n <= 1)
                    return Plural.One;
                return Plural.Other;
            case 'am':
            case 'as':
            case 'bn':
            case 'fa':
            case 'gu':
            case 'hi':
            case 'kn':
            case 'mr':
            case 'zu':
                if (i === 0 || n === 1)
                    return Plural.One;
                return Plural.Other;
            case 'ar':
                if (n === 0)
                    return Plural.Zero;
                if (n === 1)
                    return Plural.One;
                if (n === 2)
                    return Plural.Two;
                if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)
                    return Plural.Few;
                if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)
                    return Plural.Many;
                return Plural.Other;
            case 'ast':
            case 'ca':
            case 'de':
            case 'en':
            case 'et':
            case 'fi':
            case 'fy':
            case 'gl':
            case 'it':
            case 'nl':
            case 'sv':
            case 'sw':
            case 'ur':
            case 'yi':
                if (i === 1 && v === 0)
                    return Plural.One;
                return Plural.Other;
            case 'be':
                if (n % 10 === 1 && !(n % 100 === 11))
                    return Plural.One;
                if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&
                    !(n % 100 >= 12 && n % 100 <= 14))
                    return Plural.Few;
                if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||
                    n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)
                    return Plural.Many;
                return Plural.Other;
            case 'br':
                if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))
                    return Plural.One;
                if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))
                    return Plural.Two;
                if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&
                    !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||
                        n % 100 >= 90 && n % 100 <= 99))
                    return Plural.Few;
                if (!(n === 0) && n % 1e6 === 0)
                    return Plural.Many;
                return Plural.Other;
            case 'bs':
            case 'hr':
            case 'sr':
                if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))
                    return Plural.One;
                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
                    !(i % 100 >= 12 && i % 100 <= 14) ||
                    f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&
                        !(f % 100 >= 12 && f % 100 <= 14))
                    return Plural.Few;
                return Plural.Other;
            case 'cs':
            case 'sk':
                if (i === 1 && v === 0)
                    return Plural.One;
                if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)
                    return Plural.Few;
                if (!(v === 0))
                    return Plural.Many;
                return Plural.Other;
            case 'cy':
                if (n === 0)
                    return Plural.Zero;
                if (n === 1)
                    return Plural.One;
                if (n === 2)
                    return Plural.Two;
                if (n === 3)
                    return Plural.Few;
                if (n === 6)
                    return Plural.Many;
                return Plural.Other;
            case 'da':
                if (n === 1 || !(t === 0) && (i === 0 || i === 1))
                    return Plural.One;
                return Plural.Other;
            case 'dsb':
            case 'hsb':
                if (v === 0 && i % 100 === 1 || f % 100 === 1)
                    return Plural.One;
                if (v === 0 && i % 100 === 2 || f % 100 === 2)
                    return Plural.Two;
                if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||
                    f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)
                    return Plural.Few;
                return Plural.Other;
            case 'ff':
            case 'fr':
            case 'hy':
            case 'kab':
                if (i === 0 || i === 1)
                    return Plural.One;
                return Plural.Other;
            case 'fil':
                if (v === 0 && (i === 1 || i === 2 || i === 3) ||
                    v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||
                    !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))
                    return Plural.One;
                return Plural.Other;
            case 'ga':
                if (n === 1)
                    return Plural.One;
                if (n === 2)
                    return Plural.Two;
                if (n === Math.floor(n) && n >= 3 && n <= 6)
                    return Plural.Few;
                if (n === Math.floor(n) && n >= 7 && n <= 10)
                    return Plural.Many;
                return Plural.Other;
            case 'gd':
                if (n === 1 || n === 11)
                    return Plural.One;
                if (n === 2 || n === 12)
                    return Plural.Two;
                if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))
                    return Plural.Few;
                return Plural.Other;
            case 'gv':
                if (v === 0 && i % 10 === 1)
                    return Plural.One;
                if (v === 0 && i % 10 === 2)
                    return Plural.Two;
                if (v === 0 &&
                    (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))
                    return Plural.Few;
                if (!(v === 0))
                    return Plural.Many;
                return Plural.Other;
            case 'he':
                if (i === 1 && v === 0)
                    return Plural.One;
                if (i === 2 && v === 0)
                    return Plural.Two;
                if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)
                    return Plural.Many;
                return Plural.Other;
            case 'is':
                if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))
                    return Plural.One;
                return Plural.Other;
            case 'ksh':
                if (n === 0)
                    return Plural.Zero;
                if (n === 1)
                    return Plural.One;
                return Plural.Other;
            case 'kw':
            case 'naq':
            case 'se':
            case 'smn':
                if (n === 1)
                    return Plural.One;
                if (n === 2)
                    return Plural.Two;
                return Plural.Other;
            case 'lag':
                if (n === 0)
                    return Plural.Zero;
                if ((i === 0 || i === 1) && !(n === 0))
                    return Plural.One;
                return Plural.Other;
            case 'lt':
                if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))
                    return Plural.One;
                if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&
                    !(n % 100 >= 11 && n % 100 <= 19))
                    return Plural.Few;
                if (!(f === 0))
                    return Plural.Many;
                return Plural.Other;
            case 'lv':
            case 'prg':
                if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||
                    v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)
                    return Plural.Zero;
                if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||
                    !(v === 2) && f % 10 === 1)
                    return Plural.One;
                return Plural.Other;
            case 'mk':
                if (v === 0 && i % 10 === 1 || f % 10 === 1)
                    return Plural.One;
                return Plural.Other;
            case 'mt':
                if (n === 1)
                    return Plural.One;
                if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)
                    return Plural.Few;
                if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)
                    return Plural.Many;
                return Plural.Other;
            case 'pl':
                if (i === 1 && v === 0)
                    return Plural.One;
                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
                    !(i % 100 >= 12 && i % 100 <= 14))
                    return Plural.Few;
                if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||
                    v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
                    v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)
                    return Plural.Many;
                return Plural.Other;
            case 'pt':
                if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))
                    return Plural.One;
                return Plural.Other;
            case 'ro':
                if (i === 1 && v === 0)
                    return Plural.One;
                if (!(v === 0) || n === 0 ||
                    !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)
                    return Plural.Few;
                return Plural.Other;
            case 'ru':
            case 'uk':
                if (v === 0 && i % 10 === 1 && !(i % 100 === 11))
                    return Plural.One;
                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
                    !(i % 100 >= 12 && i % 100 <= 14))
                    return Plural.Few;
                if (v === 0 && i % 10 === 0 ||
                    v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
                    v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)
                    return Plural.Many;
                return Plural.Other;
            case 'shi':
                if (i === 0 || n === 1)
                    return Plural.One;
                if (n === Math.floor(n) && n >= 2 && n <= 10)
                    return Plural.Few;
                return Plural.Other;
            case 'si':
                if (n === 0 || n === 1 || i === 0 && f === 1)
                    return Plural.One;
                return Plural.Other;
            case 'sl':
                if (v === 0 && i % 100 === 1)
                    return Plural.One;
                if (v === 0 && i % 100 === 2)
                    return Plural.Two;
                if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))
                    return Plural.Few;
                return Plural.Other;
            case 'tzm':
                if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)
                    return Plural.One;
                return Plural.Other;
            // When there is no specification, the default is always "other"
            // Spec: http://cldr.unicode.org/index/cldr-spec/plural-rules
            // > other (required—general plural form — also used if the language only has a single form)
            default:
                return Plural.Other;
        }
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     * @param {?} cookieStr
     * @param {?} name
     * @return {?}
     */
    function parseCookieValue(cookieStr, name) {
        name = encodeURIComponent(name);
        for (var _i = 0, _a = cookieStr.split(';'); _i < _a.length; _i++) {
            var cookie = _a[_i];
            var /** @type {?} */ eqIndex = cookie.indexOf('=');
            var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)], cookieName = _b[0], cookieValue = _b[1];
            if (cookieName.trim() === name) {
                return decodeURIComponent(cookieValue);
            }
        }
        return null;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@ngModule CommonModule
     *
     * \@whatItDoes Adds and removes CSS classes on an HTML element.
     *
     * \@howToUse
     * ```
     *     <some-element [ngClass]="'first second'">...</some-element>
     *
     *     <some-element [ngClass]="['first', 'second']">...</some-element>
     *
     *     <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
     *
     *     <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
     *
     *     <some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>
     * ```
     *
     * \@description
     *
     * The CSS classes are updated as follows, depending on the type of the expression evaluation:
     * - `string` - the CSS classes listed in the string (space delimited) are added,
     * - `Array` - the CSS classes declared as Array elements are added,
     * - `Object` - keys are CSS classes that get added when the expression given in the value
     *              evaluates to a truthy value, otherwise they are removed.
     *
     * \@stable
     */
    var NgClass = (function () {
        /**
         * @param {?} _iterableDiffers
         * @param {?} _keyValueDiffers
         * @param {?} _ngEl
         * @param {?} _renderer
         */
        function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
            this._iterableDiffers = _iterableDiffers;
            this._keyValueDiffers = _keyValueDiffers;
            this._ngEl = _ngEl;
            this._renderer = _renderer;
            this._initialClasses = [];
        }
        Object.defineProperty(NgClass.prototype, "klass", {
            /**
             * @param {?} v
             * @return {?}
             */
            set: function (v) {
                this._applyInitialClasses(true);
                this._initialClasses = typeof v === 'string' ? v.split(/\s+/) : [];
                this._applyInitialClasses(false);
                this._applyClasses(this._rawClass, false);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgClass.prototype, "ngClass", {
            /**
             * @param {?} v
             * @return {?}
             */
            set: function (v) {
                this._cleanupClasses(this._rawClass);
                this._iterableDiffer = null;
                this._keyValueDiffer = null;
                this._rawClass = typeof v === 'string' ? v.split(/\s+/) : v;
                if (this._rawClass) {
                    if (isListLikeIterable(this._rawClass)) {
                        this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();
                    }
                    else {
                        this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgClass.prototype.ngDoCheck = function () {
            if (this._iterableDiffer) {
                var /** @type {?} */ iterableChanges = this._iterableDiffer.diff(/** @type {?} */ (this._rawClass));
                if (iterableChanges) {
                    this._applyIterableChanges(iterableChanges);
                }
            }
            else if (this._keyValueDiffer) {
                var /** @type {?} */ keyValueChanges = this._keyValueDiffer.diff(/** @type {?} */ (this._rawClass));
                if (keyValueChanges) {
                    this._applyKeyValueChanges(keyValueChanges);
                }
            }
        };
        /**
         * @param {?} rawClassVal
         * @return {?}
         */
        NgClass.prototype._cleanupClasses = function (rawClassVal) {
            this._applyClasses(rawClassVal, true);
            this._applyInitialClasses(false);
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        NgClass.prototype._applyKeyValueChanges = function (changes) {
            var _this = this;
            changes.forEachAddedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
            changes.forEachChangedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
            changes.forEachRemovedItem(function (record) {
                if (record.previousValue) {
                    _this._toggleClass(record.key, false);
                }
            });
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        NgClass.prototype._applyIterableChanges = function (changes) {
            var _this = this;
            changes.forEachAddedItem(function (record) {
                if (typeof record.item === 'string') {
                    _this._toggleClass(record.item, true);
                }
                else {
                    throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + stringify(record.item));
                }
            });
            changes.forEachRemovedItem(function (record) { return _this._toggleClass(record.item, false); });
        };
        /**
         * @param {?} isCleanup
         * @return {?}
         */
        NgClass.prototype._applyInitialClasses = function (isCleanup) {
            var _this = this;
            this._initialClasses.forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
        };
        /**
         * @param {?} rawClassVal
         * @param {?} isCleanup
         * @return {?}
         */
        NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {
            var _this = this;
            if (rawClassVal) {
                if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
                    ((rawClassVal)).forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
                }
                else {
                    Object.keys(rawClassVal).forEach(function (klass) {
                        if (rawClassVal[klass] != null)
                            _this._toggleClass(klass, !isCleanup);
                    });
                }
            }
        };
        /**
         * @param {?} klass
         * @param {?} enabled
         * @return {?}
         */
        NgClass.prototype._toggleClass = function (klass, enabled) {
            var _this = this;
            klass = klass.trim();
            if (klass) {
                klass.split(/\s+/g).forEach(function (klass) { _this._renderer.setElementClass(_this._ngEl.nativeElement, klass, !!enabled); });
            }
        };
        return NgClass;
    }());
    NgClass.decorators = [
        { type: Directive, args: [{ selector: '[ngClass]' },] },
    ];
    /**
     * @nocollapse
     */
    NgClass.ctorParameters = function () { return [
        { type: IterableDiffers, },
        { type: KeyValueDiffers, },
        { type: ElementRef, },
        { type: Renderer, },
    ]; };
    NgClass.propDecorators = {
        'klass': [{ type: Input, args: ['class',] },],
        'ngClass': [{ type: Input },],
    };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Instantiates a single {\@link Component} type and inserts its Host View into current View.
     * `NgComponentOutlet` provides a declarative approach for dynamic component creation.
     *
     * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and
     * any existing component will get destroyed.
     *
     * ### Fine tune control
     *
     * You can control the component creation process by using the following optional attributes:
     *
     * * `ngComponentOutletInjector`: Optional custom {\@link Injector} that will be used as parent for
     * the Component. Defaults to the injector of the current view container.
     *
     * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content
     * section of the component, if exists.
     *
     * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other
     * module, then load a component from that module.
     *
     * ### Syntax
     *
     * Simple
     * ```
     * <ng-container *ngComponentOutlet="componentTypeExpression"></ng-container>
     * ```
     *
     * Customized injector/content
     * ```
     * <ng-container *ngComponentOutlet="componentTypeExpression;
     *                                   injector: injectorExpression;
     *                                   content: contentNodesExpression;">
     * </ng-container>
     * ```
     *
     * Customized ngModuleFactory
     * ```
     * <ng-container *ngComponentOutlet="componentTypeExpression;
     *                                   ngModuleFactory: moduleFactory;">
     * </ng-container>
     * ```
     * ## Example
     *
     * {\@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}
     *
     * A more complete example with additional options:
     *
     * {\@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}
     * A more complete example with ngModuleFactory:
     *
     * {\@example common/ngComponentOutlet/ts/module.ts region='NgModuleFactoryExample'}
     *
     * \@experimental
     */
    var NgComponentOutlet = (function () {
        /**
         * @param {?} _viewContainerRef
         */
        function NgComponentOutlet(_viewContainerRef) {
            this._viewContainerRef = _viewContainerRef;
            this._componentRef = null;
            this._moduleRef = null;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        NgComponentOutlet.prototype.ngOnChanges = function (changes) {
            this._viewContainerRef.clear();
            this._componentRef = null;
            if (this.ngComponentOutlet) {
                var /** @type {?} */ elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;
                if (changes['ngComponentOutletNgModuleFactory']) {
                    if (this._moduleRef)
                        this._moduleRef.destroy();
                    if (this.ngComponentOutletNgModuleFactory) {
                        var /** @type {?} */ parentModule = elInjector.get(NgModuleRef);
                        this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);
                    }
                    else {
                        this._moduleRef = null;
                    }
                }
                var /** @type {?} */ componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :
                    elInjector.get(ComponentFactoryResolver);
                var /** @type {?} */ componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);
                this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);
            }
        };
        /**
         * @return {?}
         */
        NgComponentOutlet.prototype.ngOnDestroy = function () {
            if (this._moduleRef)
                this._moduleRef.destroy();
        };
        return NgComponentOutlet;
    }());
    NgComponentOutlet.decorators = [
        { type: Directive, args: [{ selector: '[ngComponentOutlet]' },] },
    ];
    /**
     * @nocollapse
     */
    NgComponentOutlet.ctorParameters = function () { return [
        { type: ViewContainerRef, },
    ]; };
    NgComponentOutlet.propDecorators = {
        'ngComponentOutlet': [{ type: Input },],
        'ngComponentOutletInjector': [{ type: Input },],
        'ngComponentOutletContent': [{ type: Input },],
        'ngComponentOutletNgModuleFactory': [{ type: Input },],
    };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@stable
     */
    var NgForOfContext = (function () {
        /**
         * @param {?} $implicit
         * @param {?} ngForOf
         * @param {?} index
         * @param {?} count
         */
        function NgForOfContext($implicit, ngForOf, index, count) {
            this.$implicit = $implicit;
            this.ngForOf = ngForOf;
            this.index = index;
            this.count = count;
        }
        Object.defineProperty(NgForOfContext.prototype, "first", {
            /**
             * @return {?}
             */
            get: function () { return this.index === 0; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForOfContext.prototype, "last", {
            /**
             * @return {?}
             */
            get: function () { return this.index === this.count - 1; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForOfContext.prototype, "even", {
            /**
             * @return {?}
             */
            get: function () { return this.index % 2 === 0; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForOfContext.prototype, "odd", {
            /**
             * @return {?}
             */
            get: function () { return !this.even; },
            enumerable: true,
            configurable: true
        });
        return NgForOfContext;
    }());
    /**
     * The `NgForOf` directive instantiates a template once per item from an iterable. The context
     * for each instantiated template inherits from the outer context with the given loop variable
     * set to the current item from the iterable.
     *
     * ### Local Variables
     *
     * `NgForOf` provides several exported values that can be aliased to local variables:
     *
     * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).
     * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is
     * more complex then a property access, for example when using the async pipe (`userStreams |
     * async`).
     * - `index: number`: The index of the current item in the iterable.
     * - `first: boolean`: True when the item is the first item in the iterable.
     * - `last: boolean`: True when the item is the last item in the iterable.
     * - `even: boolean`: True when the item has an even index in the iterable.
     * - `odd: boolean`: True when the item has an odd index in the iterable.
     *
     * ```
     * <li *ngFor="let user of userObservable | async as users; index as i; first as isFirst">
     *    {{i}}/{{users.length}}. {{user}} <span *ngIf="isFirst">default</span>
     * </li>
     * ```
     *
     * ### Change Propagation
     *
     * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:
     *
     * * When an item is added, a new instance of the template is added to the DOM.
     * * When an item is removed, its template instance is removed from the DOM.
     * * When items are reordered, their respective templates are reordered in the DOM.
     * * Otherwise, the DOM element for that item will remain the same.
     *
     * Angular uses object identity to track insertions and deletions within the iterator and reproduce
     * those changes in the DOM. This has important implications for animations and any stateful
     * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can
     * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state
     * such as user input.
     *
     * It is possible for the identities of elements in the iterator to change while the data does not.
     * This can happen, for example, if the iterator produced from an RPC to the server, and that
     * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with
     * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old
     * elements were deleted and all new elements inserted). This is an expensive operation and should
     * be avoided if possible.
     *
     * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.
     * `trackBy` takes a function which has two arguments: `index` and `item`.
     * If `trackBy` is given, Angular tracks changes by the return value of the function.
     *
     * ### Syntax
     *
     * - `<li *ngFor="let item of items; index as i; trackBy: trackByFn">...</li>`
     * - `<li template="ngFor let item of items; index as i; trackBy: trackByFn">...</li>`
     *
     * With `<ng-template>` element:
     *
     * ```
     * <ng-template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
     *   <li>...</li>
     * </ng-template>
     * ```
     *
     * ### Example
     *
     * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed
     * example.
     *
     * \@stable
     */
    var NgForOf = (function () {
        /**
         * @param {?} _viewContainer
         * @param {?} _template
         * @param {?} _differs
         */
        function NgForOf(_viewContainer, _template, _differs) {
            this._viewContainer = _viewContainer;
            this._template = _template;
            this._differs = _differs;
            this._differ = null;
        }
        Object.defineProperty(NgForOf.prototype, "ngForTrackBy", {
            /**
             * @return {?}
             */
            get: function () { return this._trackByFn; },
            /**
             * @param {?} fn
             * @return {?}
             */
            set: function (fn) {
                if (isDevMode() && fn != null && typeof fn !== 'function') {
                    // TODO(vicb): use a log service once there is a public one available
                    if ((console) && (console.warn)) {
                        console.warn("trackBy must be a function, but received " + JSON.stringify(fn) + ". " +
                            "See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.");
                    }
                }
                this._trackByFn = fn;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForOf.prototype, "ngForTemplate", {
            /**
             * @param {?} value
             * @return {?}
             */
            set: function (value) {
                // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1
                // The current type is too restrictive; a template that just uses index, for example,
                // should be acceptable.
                if (value) {
                    this._template = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        NgForOf.prototype.ngOnChanges = function (changes) {
            if ('ngForOf' in changes) {
                // React on ngForOf changes only once all inputs have been initialized
                var /** @type {?} */ value = changes['ngForOf'].currentValue;
                if (!this._differ && value) {
                    try {
                        this._differ = this._differs.find(value).create(this.ngForTrackBy);
                    }
                    catch (e) {
                        throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging$1(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
                    }
                }
            }
        };
        /**
         * @return {?}
         */
        NgForOf.prototype.ngDoCheck = function () {
            if (this._differ) {
                var /** @type {?} */ changes = this._differ.diff(this.ngForOf);
                if (changes)
                    this._applyChanges(changes);
            }
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        NgForOf.prototype._applyChanges = function (changes) {
            var _this = this;
            var /** @type {?} */ insertTuples = [];
            changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
                if (item.previousIndex == null) {
                    var /** @type {?} */ view = _this._viewContainer.createEmbeddedView(_this._template, new NgForOfContext(/** @type {?} */ ((null)), _this.ngForOf, -1, -1), currentIndex);
                    var /** @type {?} */ tuple = new RecordViewTuple(item, view);
                    insertTuples.push(tuple);
                }
                else if (currentIndex == null) {
                    _this._viewContainer.remove(adjustedPreviousIndex);
                }
                else {
                    var /** @type {?} */ view = ((_this._viewContainer.get(adjustedPreviousIndex)));
                    _this._viewContainer.move(view, currentIndex);
                    var /** @type {?} */ tuple = new RecordViewTuple(item, /** @type {?} */ (view));
                    insertTuples.push(tuple);
                }
            });
            for (var /** @type {?} */ i = 0; i < insertTuples.length; i++) {
                this._perViewChange(insertTuples[i].view, insertTuples[i].record);
            }
            for (var /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {
                var /** @type {?} */ viewRef = (this._viewContainer.get(i));
                viewRef.context.index = i;
                viewRef.context.count = ilen;
            }
            changes.forEachIdentityChange(function (record) {
                var /** @type {?} */ viewRef = (_this._viewContainer.get(record.currentIndex));
                viewRef.context.$implicit = record.item;
            });
        };
        /**
         * @param {?} view
         * @param {?} record
         * @return {?}
         */
        NgForOf.prototype._perViewChange = function (view, record) {
            view.context.$implicit = record.item;
        };
        return NgForOf;
    }());
    NgForOf.decorators = [
        { type: Directive, args: [{ selector: '[ngFor][ngForOf]' },] },
    ];
    /**
     * @nocollapse
     */
    NgForOf.ctorParameters = function () { return [
        { type: ViewContainerRef, },
        { type: TemplateRef, },
        { type: IterableDiffers, },
    ]; };
    NgForOf.propDecorators = {
        'ngForOf': [{ type: Input },],
        'ngForTrackBy': [{ type: Input },],
        'ngForTemplate': [{ type: Input },],
    };
    var RecordViewTuple = (function () {
        /**
         * @param {?} record
         * @param {?} view
         */
        function RecordViewTuple(record, view) {
            this.record = record;
            this.view = view;
        }
        return RecordViewTuple;
    }());
    /**
     * @param {?} type
     * @return {?}
     */
    function getTypeNameForDebugging$1(type) {
        return type['name'] || typeof type;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Conditionally includes a template based on the value of an `expression`.
     *
     * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place
     * when expression is truthy or falsy respectively. Typically the:
     *  - `then` template is the inline template of `ngIf` unless bound to a different value.
     *  - `else` template is blank unless it is bound.
     *
     * ## Most common usage
     *
     * The most common usage of the `ngIf` directive is to conditionally show the inline template as
     * seen in this example:
     * {\@example common/ngIf/ts/module.ts region='NgIfSimple'}
     *
     * ## Showing an alternative template using `else`
     *
     * If it is necessary to display a template when the `expression` is falsy use the `else` template
     * binding as shown. Note that the `else` binding points to a `<ng-template>` labeled `#elseBlock`.
     * The template can be defined anywhere in the component view but is typically placed right after
     * `ngIf` for readability.
     *
     * {\@example common/ngIf/ts/module.ts region='NgIfElse'}
     *
     * ## Using non-inlined `then` template
     *
     * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using
     * a binding (just like `else`). Because `then` and `else` are bindings, the template references can
     * change at runtime as shown in this example.
     *
     * {\@example common/ngIf/ts/module.ts region='NgIfThenElse'}
     *
     * ## Storing conditional result in a variable
     *
     * A common pattern is that we need to show a set of properties from the same object. If the
     * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against
     * dereferencing a `null` value. This is especially the case when waiting on async data such as
     * when using the `async` pipe as shown in following example:
     *
     * ```
     * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!
     * ```
     *
     * There are several inefficiencies in the above example:
     *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the
     *    example above.
     *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.
     *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.
     *  - We have to place the `async` pipe in parenthesis.
     *
     * A better way to do this is to use `ngIf` and store the result of the condition in a local
     * variable as shown in the the example below:
     *
     * {\@example common/ngIf/ts/module.ts region='NgIfAs'}
     *
     * Notice that:
     *  - We use only one `async` pipe and hence only one subscription gets created.
     *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.
     *  - The local `user` can then be bound repeatedly in a more efficient way.
     *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only
     *    display the data if `userStream` returns a value.
     *  - We can display an alternative template while waiting for the data.
     *
     * ### Syntax
     *
     * Simple form:
     * - `<div *ngIf="condition">...</div>`
     * - `<div template="ngIf condition">...</div>`
     * - `<ng-template [ngIf]="condition"><div>...</div></ng-template>`
     *
     * Form with an else block:
     * ```
     * <div *ngIf="condition; else elseBlock">...</div>
     * <ng-template #elseBlock>...</ng-template>
     * ```
     *
     * Form with a `then` and `else` block:
     * ```
     * <div *ngIf="condition; then thenBlock else elseBlock"></div>
     * <ng-template #thenBlock>...</ng-template>
     * <ng-template #elseBlock>...</ng-template>
     * ```
     *
     * Form with storing the value locally:
     * ```
     * <div *ngIf="condition as value; else elseBlock">{{value}}</div>
     * <ng-template #elseBlock>...</ng-template>
     * ```
     *
     * \@stable
     */
    var NgIf = (function () {
        /**
         * @param {?} _viewContainer
         * @param {?} templateRef
         */
        function NgIf(_viewContainer, templateRef) {
            this._viewContainer = _viewContainer;
            this._context = new NgIfContext();
            this._thenTemplateRef = null;
            this._elseTemplateRef = null;
            this._thenViewRef = null;
            this._elseViewRef = null;
            this._thenTemplateRef = templateRef;
        }
        Object.defineProperty(NgIf.prototype, "ngIf", {
            /**
             * @param {?} condition
             * @return {?}
             */
            set: function (condition) {
                this._context.$implicit = this._context.ngIf = condition;
                this._updateView();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgIf.prototype, "ngIfThen", {
            /**
             * @param {?} templateRef
             * @return {?}
             */
            set: function (templateRef) {
                this._thenTemplateRef = templateRef;
                this._thenViewRef = null; // clear previous view if any.
                this._updateView();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgIf.prototype, "ngIfElse", {
            /**
             * @param {?} templateRef
             * @return {?}
             */
            set: function (templateRef) {
                this._elseTemplateRef = templateRef;
                this._elseViewRef = null; // clear previous view if any.
                this._updateView();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgIf.prototype._updateView = function () {
            if (this._context.$implicit) {
                if (!this._thenViewRef) {
                    this._viewContainer.clear();
                    this._elseViewRef = null;
                    if (this._thenTemplateRef) {
                        this._thenViewRef =
                            this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
                    }
                }
            }
            else {
                if (!this._elseViewRef) {
                    this._viewContainer.clear();
                    this._thenViewRef = null;
                    if (this._elseTemplateRef) {
                        this._elseViewRef =
                            this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
                    }
                }
            }
        };
        return NgIf;
    }());
    NgIf.decorators = [
        { type: Directive, args: [{ selector: '[ngIf]' },] },
    ];
    /**
     * @nocollapse
     */
    NgIf.ctorParameters = function () { return [
        { type: ViewContainerRef, },
        { type: TemplateRef, },
    ]; };
    NgIf.propDecorators = {
        'ngIf': [{ type: Input },],
        'ngIfThen': [{ type: Input },],
        'ngIfElse': [{ type: Input },],
    };
    /**
     * \@stable
     */
    var NgIfContext = (function () {
        function NgIfContext() {
            this.$implicit = null;
            this.ngIf = null;
        }
        return NgIfContext;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var SwitchView = (function () {
        /**
         * @param {?} _viewContainerRef
         * @param {?} _templateRef
         */
        function SwitchView(_viewContainerRef, _templateRef) {
            this._viewContainerRef = _viewContainerRef;
            this._templateRef = _templateRef;
            this._created = false;
        }
        /**
         * @return {?}
         */
        SwitchView.prototype.create = function () {
            this._created = true;
            this._viewContainerRef.createEmbeddedView(this._templateRef);
        };
        /**
         * @return {?}
         */
        SwitchView.prototype.destroy = function () {
            this._created = false;
            this._viewContainerRef.clear();
        };
        /**
         * @param {?} created
         * @return {?}
         */
        SwitchView.prototype.enforceState = function (created) {
            if (created && !this._created) {
                this.create();
            }
            else if (!created && this._created) {
                this.destroy();
            }
        };
        return SwitchView;
    }());
    /**
     * \@ngModule CommonModule
     *
     * \@whatItDoes Adds / removes DOM sub-trees when the nest match expressions matches the switch
     *             expression.
     *
     * \@howToUse
     * ```
     *     <container-element [ngSwitch]="switch_expression">
     *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
     *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
     *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
     *       <ng-container *ngSwitchCase="match_expression_3">
     *         <!-- use a ng-container to group multiple root nodes -->
     *         <inner-element></inner-element>
     *         <inner-other-element></inner-other-element>
     *       </ng-container>
     *       <some-element *ngSwitchDefault>...</some-element>
     *     </container-element>
     * ```
     * \@description
     *
     * `NgSwitch` stamps out nested views when their match expression value matches the value of the
     * switch expression.
     *
     * In other words:
     * - you define a container element (where you place the directive with a switch expression on the
     * `[ngSwitch]="..."` attribute)
     * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view
     * root elements.
     *
     * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will
     * be preserved at the location.
     *
     * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the
     * expression is evaluated.
     * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is
     * stamped out.
     *
     * \@stable
     */
    var NgSwitch = (function () {
        function NgSwitch() {
            this._defaultUsed = false;
            this._caseCount = 0;
            this._lastCaseCheckIndex = 0;
            this._lastCasesMatched = false;
        }
        Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
            /**
             * @param {?} newValue
             * @return {?}
             */
            set: function (newValue) {
                this._ngSwitch = newValue;
                if (this._caseCount === 0) {
                    this._updateDefaultCases(true);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * \@internal
         * @return {?}
         */
        NgSwitch.prototype._addCase = function () { return this._caseCount++; };
        /**
         * \@internal
         * @param {?} view
         * @return {?}
         */
        NgSwitch.prototype._addDefault = function (view) {
            if (!this._defaultViews) {
                this._defaultViews = [];
            }
            this._defaultViews.push(view);
        };
        /**
         * \@internal
         * @param {?} value
         * @return {?}
         */
        NgSwitch.prototype._matchCase = function (value) {
            var /** @type {?} */ matched = value == this._ngSwitch;
            this._lastCasesMatched = this._lastCasesMatched || matched;
            this._lastCaseCheckIndex++;
            if (this._lastCaseCheckIndex === this._caseCount) {
                this._updateDefaultCases(!this._lastCasesMatched);
                this._lastCaseCheckIndex = 0;
                this._lastCasesMatched = false;
            }
            return matched;
        };
        /**
         * @param {?} useDefault
         * @return {?}
         */
        NgSwitch.prototype._updateDefaultCases = function (useDefault) {
            if (this._defaultViews && useDefault !== this._defaultUsed) {
                this._defaultUsed = useDefault;
                for (var /** @type {?} */ i = 0; i < this._defaultViews.length; i++) {
                    var /** @type {?} */ defaultView = this._defaultViews[i];
                    defaultView.enforceState(useDefault);
                }
            }
        };
        return NgSwitch;
    }());
    NgSwitch.decorators = [
        { type: Directive, args: [{ selector: '[ngSwitch]' },] },
    ];
    /**
     * @nocollapse
     */
    NgSwitch.ctorParameters = function () { return []; };
    NgSwitch.propDecorators = {
        'ngSwitch': [{ type: Input },],
    };
    /**
     * \@ngModule CommonModule
     *
     * \@whatItDoes Creates a view that will be added/removed from the parent {\@link NgSwitch} when the
     *             given expression evaluate to respectively the same/different value as the switch
     *             expression.
     *
     * \@howToUse
     * ```
     * <container-element [ngSwitch]="switch_expression">
     *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
     * </container-element>
     * ```
     * \@description
     *
     * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch
     * expression.
     *
     * If multiple match expressions match the switch expression value, all of them are displayed.
     *
     * See {\@link NgSwitch} for more details and example.
     *
     * \@stable
     */
    var NgSwitchCase = (function () {
        /**
         * @param {?} viewContainer
         * @param {?} templateRef
         * @param {?} ngSwitch
         */
        function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
            this.ngSwitch = ngSwitch;
            ngSwitch._addCase();
            this._view = new SwitchView(viewContainer, templateRef);
        }
        /**
         * @return {?}
         */
        NgSwitchCase.prototype.ngDoCheck = function () { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); };
        return NgSwitchCase;
    }());
    NgSwitchCase.decorators = [
        { type: Directive, args: [{ selector: '[ngSwitchCase]' },] },
    ];
    /**
     * @nocollapse
     */
    NgSwitchCase.ctorParameters = function () { return [
        { type: ViewContainerRef, },
        { type: TemplateRef, },
        { type: NgSwitch, decorators: [{ type: Host },] },
    ]; };
    NgSwitchCase.propDecorators = {
        'ngSwitchCase': [{ type: Input },],
    };
    /**
     * \@ngModule CommonModule
     * \@whatItDoes Creates a view that is added to the parent {\@link NgSwitch} when no case expressions
     * match the
     *             switch expression.
     *
     * \@howToUse
     * ```
     * <container-element [ngSwitch]="switch_expression">
     *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
     *   <some-other-element *ngSwitchDefault>...</some-other-element>
     * </container-element>
     * ```
     *
     * \@description
     *
     * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch
     * expression.
     *
     * See {\@link NgSwitch} for more details and example.
     *
     * \@stable
     */
    var NgSwitchDefault = (function () {
        /**
         * @param {?} viewContainer
         * @param {?} templateRef
         * @param {?} ngSwitch
         */
        function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
            ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
        }
        return NgSwitchDefault;
    }());
    NgSwitchDefault.decorators = [
        { type: Directive, args: [{ selector: '[ngSwitchDefault]' },] },
    ];
    /**
     * @nocollapse
     */
    NgSwitchDefault.ctorParameters = function () { return [
        { type: ViewContainerRef, },
        { type: TemplateRef, },
        { type: NgSwitch, decorators: [{ type: Host },] },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@ngModule CommonModule
     *
     * \@whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.
     *
     * \@howToUse
     * ```
     * <some-element [ngPlural]="value">
     *   <ng-template ngPluralCase="=0">there is nothing</ng-template>
     *   <ng-template ngPluralCase="=1">there is one</ng-template>
     *   <ng-template ngPluralCase="few">there are a few</ng-template>
     * </some-element>
     * ```
     *
     * \@description
     *
     * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
     * that match the switch expression's pluralization category.
     *
     * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
     * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
     * expression:
     * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
     *   matches the switch expression exactly,
     * - otherwise, the view will be treated as a "category match", and will only display if exact
     *   value matches aren't found and the value maps to its category for the defined locale.
     *
     * See http://cldr.unicode.org/index/cldr-spec/plural-rules
     *
     * \@experimental
     */
    var NgPlural = (function () {
        /**
         * @param {?} _localization
         */
        function NgPlural(_localization) {
            this._localization = _localization;
            this._caseViews = {};
        }
        Object.defineProperty(NgPlural.prototype, "ngPlural", {
            /**
             * @param {?} value
             * @return {?}
             */
            set: function (value) {
                this._switchValue = value;
                this._updateView();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @param {?} switchView
         * @return {?}
         */
        NgPlural.prototype.addCase = function (value, switchView) { this._caseViews[value] = switchView; };
        /**
         * @return {?}
         */
        NgPlural.prototype._updateView = function () {
            this._clearViews();
            var /** @type {?} */ cases = Object.keys(this._caseViews);
            var /** @type {?} */ key = getPluralCategory(this._switchValue, cases, this._localization);
            this._activateView(this._caseViews[key]);
        };
        /**
         * @return {?}
         */
        NgPlural.prototype._clearViews = function () {
            if (this._activeView)
                this._activeView.destroy();
        };
        /**
         * @param {?} view
         * @return {?}
         */
        NgPlural.prototype._activateView = function (view) {
            if (view) {
                this._activeView = view;
                this._activeView.create();
            }
        };
        return NgPlural;
    }());
    NgPlural.decorators = [
        { type: Directive, args: [{ selector: '[ngPlural]' },] },
    ];
    /**
     * @nocollapse
     */
    NgPlural.ctorParameters = function () { return [
        { type: NgLocalization, },
    ]; };
    NgPlural.propDecorators = {
        'ngPlural': [{ type: Input },],
    };
    /**
     * \@ngModule CommonModule
     *
     * \@whatItDoes Creates a view that will be added/removed from the parent {\@link NgPlural} when the
     *             given expression matches the plural expression according to CLDR rules.
     *
     * \@howToUse
     * ```
     * <some-element [ngPlural]="value">
     *   <ng-template ngPluralCase="=0">...</ng-template>
     *   <ng-template ngPluralCase="other">...</ng-template>
     * </some-element>
     * ```
     *
     * See {\@link NgPlural} for more details and example.
     *
     * \@experimental
     */
    var NgPluralCase = (function () {
        /**
         * @param {?} value
         * @param {?} template
         * @param {?} viewContainer
         * @param {?} ngPlural
         */
        function NgPluralCase(value, template, viewContainer, ngPlural) {
            this.value = value;
            var isANumber = !isNaN(Number(value));
            ngPlural.addCase(isANumber ? "=" + value : value, new SwitchView(viewContainer, template));
        }
        return NgPluralCase;
    }());
    NgPluralCase.decorators = [
        { type: Directive, args: [{ selector: '[ngPluralCase]' },] },
    ];
    /**
     * @nocollapse
     */
    NgPluralCase.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Attribute, args: ['ngPluralCase',] },] },
        { type: TemplateRef, },
        { type: ViewContainerRef, },
        { type: NgPlural, decorators: [{ type: Host },] },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@ngModule CommonModule
     *
     * \@whatItDoes Update an HTML element styles.
     *
     * \@howToUse
     * ```
     * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
     *
     * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
     *
     * <some-element [ngStyle]="objExp">...</some-element>
     * ```
     *
     * \@description
     *
     * The styles are updated according to the value of the expression evaluation:
     * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),
     * - values are the values assigned to those properties (expressed in the given unit).
     *
     * \@stable
     */
    var NgStyle = (function () {
        /**
         * @param {?} _differs
         * @param {?} _ngEl
         * @param {?} _renderer
         */
        function NgStyle(_differs, _ngEl, _renderer) {
            this._differs = _differs;
            this._ngEl = _ngEl;
            this._renderer = _renderer;
        }
        Object.defineProperty(NgStyle.prototype, "ngStyle", {
            /**
             * @param {?} v
             * @return {?}
             */
            set: function (v) {
                this._ngStyle = v;
                if (!this._differ && v) {
                    this._differ = this._differs.find(v).create();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgStyle.prototype.ngDoCheck = function () {
            if (this._differ) {
                var /** @type {?} */ changes = this._differ.diff(this._ngStyle);
                if (changes) {
                    this._applyChanges(changes);
                }
            }
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        NgStyle.prototype._applyChanges = function (changes) {
            var _this = this;
            changes.forEachRemovedItem(function (record) { return _this._setStyle(record.key, null); });
            changes.forEachAddedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
            changes.forEachChangedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
        };
        /**
         * @param {?} nameAndUnit
         * @param {?} value
         * @return {?}
         */
        NgStyle.prototype._setStyle = function (nameAndUnit, value) {
            var _a = nameAndUnit.split('.'), name = _a[0], unit = _a[1];
            value = value != null && unit ? "" + value + unit : value;
            this._renderer.setElementStyle(this._ngEl.nativeElement, name, /** @type {?} */ (value));
        };
        return NgStyle;
    }());
    NgStyle.decorators = [
        { type: Directive, args: [{ selector: '[ngStyle]' },] },
    ];
    /**
     * @nocollapse
     */
    NgStyle.ctorParameters = function () { return [
        { type: KeyValueDiffers, },
        { type: ElementRef, },
        { type: Renderer, },
    ]; };
    NgStyle.propDecorators = {
        'ngStyle': [{ type: Input },],
    };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@ngModule CommonModule
     *
     * \@whatItDoes Inserts an embedded view from a prepared `TemplateRef`
     *
     * \@howToUse
     * ```
     * <ng-container *ngTemplateOutlet="templateRefExp; context: contextExp"></ng-container>
     * ```
     *
     * \@description
     *
     * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.
     * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding
     * by the local template `let` declarations.
     *
     * Note: using the key `$implicit` in the context object will set it's value as default.
     *
     * ## Example
     *
     * {\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}
     *
     * \@experimental
     */
    var NgTemplateOutlet = (function () {
        /**
         * @param {?} _viewContainerRef
         */
        function NgTemplateOutlet(_viewContainerRef) {
            this._viewContainerRef = _viewContainerRef;
        }
        Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
            /**
             * @deprecated v4.0.0 - Renamed to ngTemplateOutletContext.
             * @param {?} context
             * @return {?}
             */
            set: function (context) { this.ngTemplateOutletContext = context; },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        NgTemplateOutlet.prototype.ngOnChanges = function (changes) {
            if (this._viewRef) {
                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
            }
            if (this.ngTemplateOutlet) {
                this._viewRef = this._viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext);
            }
        };
        return NgTemplateOutlet;
    }());
    NgTemplateOutlet.decorators = [
        { type: Directive, args: [{ selector: '[ngTemplateOutlet]' },] },
    ];
    /**
     * @nocollapse
     */
    NgTemplateOutlet.ctorParameters = function () { return [
        { type: ViewContainerRef, },
    ]; };
    NgTemplateOutlet.propDecorators = {
        'ngTemplateOutletContext': [{ type: Input },],
        'ngTemplateOutlet': [{ type: Input },],
        'ngOutletContext': [{ type: Input },],
    };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * A collection of Angular directives that are likely to be used in each and every Angular
     * application.
     */
    var COMMON_DIRECTIVES = [
        NgClass,
        NgComponentOutlet,
        NgForOf,
        NgIf,
        NgTemplateOutlet,
        NgStyle,
        NgSwitch,
        NgSwitchCase,
        NgSwitchDefault,
        NgPlural,
        NgPluralCase,
    ];
    /**
     * A collection of deprecated directives that are no longer part of the core module.
     */
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} type
     * @param {?} value
     * @return {?}
     */
    function invalidPipeArgumentError(type, value) {
        return Error("InvalidPipeArgument: '" + value + "' for pipe '" + stringify(type) + "'");
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var ObservableStrategy = (function () {
        function ObservableStrategy() {
        }
        /**
         * @param {?} async
         * @param {?} updateLatestValue
         * @return {?}
         */
        ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
            return async.subscribe({ next: updateLatestValue, error: function (e) { throw e; } });
        };
        /**
         * @param {?} subscription
         * @return {?}
         */
        ObservableStrategy.prototype.dispose = function (subscription) { subscription.unsubscribe(); };
        /**
         * @param {?} subscription
         * @return {?}
         */
        ObservableStrategy.prototype.onDestroy = function (subscription) { subscription.unsubscribe(); };
        return ObservableStrategy;
    }());
    var PromiseStrategy = (function () {
        function PromiseStrategy() {
        }
        /**
         * @param {?} async
         * @param {?} updateLatestValue
         * @return {?}
         */
        PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
            return async.then(updateLatestValue, function (e) { throw e; });
        };
        /**
         * @param {?} subscription
         * @return {?}
         */
        PromiseStrategy.prototype.dispose = function (subscription) { };
        /**
         * @param {?} subscription
         * @return {?}
         */
        PromiseStrategy.prototype.onDestroy = function (subscription) { };
        return PromiseStrategy;
    }());
    var _promiseStrategy = new PromiseStrategy();
    var _observableStrategy = new ObservableStrategy();
    /**
     * \@ngModule CommonModule
     * \@whatItDoes Unwraps a value from an asynchronous primitive.
     * \@howToUse `observable_or_promise_expression | async`
     * \@description
     * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
     * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
     * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
     * potential memory leaks.
     *
     *
     * ## Examples
     *
     * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
     * promise.
     *
     * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
     *
     * It's also possible to use `async` with Observables. The example below binds the `time` Observable
     * to the view. The Observable continuously updates the view with the current time.
     *
     * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
     *
     * \@stable
     */
    var AsyncPipe = (function () {
        /**
         * @param {?} _ref
         */
        function AsyncPipe(_ref) {
            this._ref = _ref;
            this._latestValue = null;
            this._latestReturnedValue = null;
            this._subscription = null;
            this._obj = null;
            this._strategy = ((null));
        }
        /**
         * @return {?}
         */
        AsyncPipe.prototype.ngOnDestroy = function () {
            if (this._subscription) {
                this._dispose();
            }
        };
        /**
         * @param {?} obj
         * @return {?}
         */
        AsyncPipe.prototype.transform = function (obj) {
            if (!this._obj) {
                if (obj) {
                    this._subscribe(obj);
                }
                this._latestReturnedValue = this._latestValue;
                return this._latestValue;
            }
            if (obj !== this._obj) {
                this._dispose();
                return this.transform(/** @type {?} */ (obj));
            }
            if (this._latestValue === this._latestReturnedValue) {
                return this._latestReturnedValue;
            }
            this._latestReturnedValue = this._latestValue;
            return WrappedValue.wrap(this._latestValue);
        };
        /**
         * @param {?} obj
         * @return {?}
         */
        AsyncPipe.prototype._subscribe = function (obj) {
            var _this = this;
            this._obj = obj;
            this._strategy = this._selectStrategy(obj);
            this._subscription = this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });
        };
        /**
         * @param {?} obj
         * @return {?}
         */
        AsyncPipe.prototype._selectStrategy = function (obj) {
            if (isPromise$1(obj)) {
                return _promiseStrategy;
            }
            if (isObservable(obj)) {
                return _observableStrategy;
            }
            throw invalidPipeArgumentError(AsyncPipe, obj);
        };
        /**
         * @return {?}
         */
        AsyncPipe.prototype._dispose = function () {
            this._strategy.dispose(/** @type {?} */ ((this._subscription)));
            this._latestValue = null;
            this._latestReturnedValue = null;
            this._subscription = null;
            this._obj = null;
        };
        /**
         * @param {?} async
         * @param {?} value
         * @return {?}
         */
        AsyncPipe.prototype._updateLatestValue = function (async, value) {
            if (async === this._obj) {
                this._latestValue = value;
                this._ref.markForCheck();
            }
        };
        return AsyncPipe;
    }());
    AsyncPipe.decorators = [
        { type: Pipe, args: [{ name: 'async', pure: false },] },
    ];
    /**
     * @nocollapse
     */
    AsyncPipe.ctorParameters = function () { return [
        { type: ChangeDetectorRef, },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Transforms text to lowercase.
     *
     * {\@example  common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe' }
     *
     * \@stable
     */
    var LowerCasePipe = (function () {
        function LowerCasePipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        LowerCasePipe.prototype.transform = function (value) {
            if (!value)
                return value;
            if (typeof value !== 'string') {
                throw invalidPipeArgumentError(LowerCasePipe, value);
            }
            return value.toLowerCase();
        };
        return LowerCasePipe;
    }());
    LowerCasePipe.decorators = [
        { type: Pipe, args: [{ name: 'lowercase' },] },
    ];
    /**
     * @nocollapse
     */
    LowerCasePipe.ctorParameters = function () { return []; };
    /**
     * Helper method to transform a single word to titlecase.
     *
     * \@stable
     * @param {?} word
     * @return {?}
     */
    function titleCaseWord(word) {
        if (!word)
            return word;
        return word[0].toUpperCase() + word.substr(1).toLowerCase();
    }
    /**
     * Transforms text to titlecase.
     *
     * \@stable
     */
    var TitleCasePipe = (function () {
        function TitleCasePipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        TitleCasePipe.prototype.transform = function (value) {
            if (!value)
                return value;
            if (typeof value !== 'string') {
                throw invalidPipeArgumentError(TitleCasePipe, value);
            }
            return value.split(/\b/g).map(function (word) { return titleCaseWord(word); }).join('');
        };
        return TitleCasePipe;
    }());
    TitleCasePipe.decorators = [
        { type: Pipe, args: [{ name: 'titlecase' },] },
    ];
    /**
     * @nocollapse
     */
    TitleCasePipe.ctorParameters = function () { return []; };
    /**
     * Transforms text to uppercase.
     *
     * \@stable
     */
    var UpperCasePipe = (function () {
        function UpperCasePipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        UpperCasePipe.prototype.transform = function (value) {
            if (!value)
                return value;
            if (typeof value !== 'string') {
                throw invalidPipeArgumentError(UpperCasePipe, value);
            }
            return value.toUpperCase();
        };
        return UpperCasePipe;
    }());
    UpperCasePipe.decorators = [
        { type: Pipe, args: [{ name: 'uppercase' },] },
    ];
    /**
     * @nocollapse
     */
    UpperCasePipe.ctorParameters = function () { return []; };
    var NumberFormatStyle = {};
    NumberFormatStyle.Decimal = 0;
    NumberFormatStyle.Percent = 1;
    NumberFormatStyle.Currency = 2;
    NumberFormatStyle[NumberFormatStyle.Decimal] = "Decimal";
    NumberFormatStyle[NumberFormatStyle.Percent] = "Percent";
    NumberFormatStyle[NumberFormatStyle.Currency] = "Currency";
    var NumberFormatter = (function () {
        function NumberFormatter() {
        }
        /**
         * @param {?} num
         * @param {?} locale
         * @param {?} style
         * @param {?=} opts
         * @return {?}
         */
        NumberFormatter.format = function (num, locale, style, opts) {
            if (opts === void 0) { opts = {}; }
            var minimumIntegerDigits = opts.minimumIntegerDigits, minimumFractionDigits = opts.minimumFractionDigits, maximumFractionDigits = opts.maximumFractionDigits, currency = opts.currency, _a = opts.currencyAsSymbol, currencyAsSymbol = _a === void 0 ? false : _a;
            var /** @type {?} */ options = {
                minimumIntegerDigits: minimumIntegerDigits,
                minimumFractionDigits: minimumFractionDigits,
                maximumFractionDigits: maximumFractionDigits,
                style: NumberFormatStyle[style].toLowerCase()
            };
            if (style == NumberFormatStyle.Currency) {
                options.currency = typeof currency == 'string' ? currency : undefined;
                options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
            }
            return new Intl.NumberFormat(locale, options).format(num);
        };
        return NumberFormatter;
    }());
    var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
    var PATTERN_ALIASES = {
        // Keys are quoted so they do not get renamed during closure compilation.
        'yMMMdjms': datePartGetterFactory(combine([
            digitCondition('year', 1),
            nameCondition('month', 3),
            digitCondition('day', 1),
            digitCondition('hour', 1),
            digitCondition('minute', 1),
            digitCondition('second', 1),
        ])),
        'yMdjm': datePartGetterFactory(combine([
            digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),
            digitCondition('hour', 1), digitCondition('minute', 1)
        ])),
        'yMMMMEEEEd': datePartGetterFactory(combine([
            digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),
            digitCondition('day', 1)
        ])),
        'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
        'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
        'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
        'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
        'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
    };
    var DATE_FORMATS = {
        // Keys are quoted so they do not get renamed.
        'yyyy': datePartGetterFactory(digitCondition('year', 4)),
        'yy': datePartGetterFactory(digitCondition('year', 2)),
        'y': datePartGetterFactory(digitCondition('year', 1)),
        'MMMM': datePartGetterFactory(nameCondition('month', 4)),
        'MMM': datePartGetterFactory(nameCondition('month', 3)),
        'MM': datePartGetterFactory(digitCondition('month', 2)),
        'M': datePartGetterFactory(digitCondition('month', 1)),
        'LLLL': datePartGetterFactory(nameCondition('month', 4)),
        'L': datePartGetterFactory(nameCondition('month', 1)),
        'dd': datePartGetterFactory(digitCondition('day', 2)),
        'd': datePartGetterFactory(digitCondition('day', 1)),
        'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
        'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
        'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
        'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
        'jj': datePartGetterFactory(digitCondition('hour', 2)),
        'j': datePartGetterFactory(digitCondition('hour', 1)),
        'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
        'm': datePartGetterFactory(digitCondition('minute', 1)),
        'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),
        's': datePartGetterFactory(digitCondition('second', 1)),
        // while ISO 8601 requires fractions to be prefixed with `.` or `,`
        // we can be just safely rely on using `sss` since we currently don't support single or two digit
        // fractions
        'sss': datePartGetterFactory(digitCondition('second', 3)),
        'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),
        'EEE': datePartGetterFactory(nameCondition('weekday', 3)),
        'EE': datePartGetterFactory(nameCondition('weekday', 2)),
        'E': datePartGetterFactory(nameCondition('weekday', 1)),
        'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
        'Z': timeZoneGetter('short'),
        'z': timeZoneGetter('long'),
        'ww': datePartGetterFactory({}),
        // first Thursday of the year. not support ?
        'w': datePartGetterFactory({}),
        // of the year not support ?
        'G': datePartGetterFactory(nameCondition('era', 1)),
        'GG': datePartGetterFactory(nameCondition('era', 2)),
        'GGG': datePartGetterFactory(nameCondition('era', 3)),
        'GGGG': datePartGetterFactory(nameCondition('era', 4))
    };
    /**
     * @param {?} inner
     * @return {?}
     */
    function digitModifier(inner) {
        return function (date, locale) {
            var /** @type {?} */ result = inner(date, locale);
            return result.length == 1 ? '0' + result : result;
        };
    }
    /**
     * @param {?} inner
     * @return {?}
     */
    function hourClockExtractor(inner) {
        return function (date, locale) { return inner(date, locale).split(' ')[1]; };
    }
    /**
     * @param {?} inner
     * @return {?}
     */
    function hourExtractor(inner) {
        return function (date, locale) { return inner(date, locale).split(' ')[0]; };
    }
    /**
     * @param {?} date
     * @param {?} locale
     * @param {?} options
     * @return {?}
     */
    function intlDateFormat(date, locale, options) {
        return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, '');
    }
    /**
     * @param {?} timezone
     * @return {?}
     */
    function timeZoneGetter(timezone) {
        // To workaround `Intl` API restriction for single timezone let format with 24 hours
        var /** @type {?} */ options = { hour: '2-digit', hour12: false, timeZoneName: timezone };
        return function (date, locale) {
            var /** @type {?} */ result = intlDateFormat(date, locale, options);
            // Then extract first 3 letters that related to hours
            return result ? result.substring(3) : '';
        };
    }
    /**
     * @param {?} options
     * @param {?} value
     * @return {?}
     */
    function hour12Modify(options, value) {
        options.hour12 = value;
        return options;
    }
    /**
     * @param {?} prop
     * @param {?} len
     * @return {?}
     */
    function digitCondition(prop, len) {
        var /** @type {?} */ result = {};
        result[prop] = len === 2 ? '2-digit' : 'numeric';
        return result;
    }
    /**
     * @param {?} prop
     * @param {?} len
     * @return {?}
     */
    function nameCondition(prop, len) {
        var /** @type {?} */ result = {};
        if (len < 4) {
            result[prop] = len > 1 ? 'short' : 'narrow';
        }
        else {
            result[prop] = 'long';
        }
        return result;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    function combine(options) {
        return options.reduce(function (merged, opt) { return (Object.assign({}, merged, opt)); }, {});
    }
    /**
     * @param {?} ret
     * @return {?}
     */
    function datePartGetterFactory(ret) {
        return function (date, locale) { return intlDateFormat(date, locale, ret); };
    }
    var DATE_FORMATTER_CACHE = new Map();
    /**
     * @param {?} format
     * @param {?} date
     * @param {?} locale
     * @return {?}
     */
    function dateFormatter(format, date, locale) {
        var /** @type {?} */ fn = PATTERN_ALIASES[format];
        if (fn)
            return fn(date, locale);
        var /** @type {?} */ cacheKey = format;
        var /** @type {?} */ parts = DATE_FORMATTER_CACHE.get(cacheKey);
        if (!parts) {
            parts = [];
            var /** @type {?} */ match = void 0;
            DATE_FORMATS_SPLIT.exec(format);
            var /** @type {?} */ _format = format;
            while (_format) {
                match = DATE_FORMATS_SPLIT.exec(_format);
                if (match) {
                    parts = parts.concat(match.slice(1));
                    _format = ((parts.pop()));
                }
                else {
                    parts.push(_format);
                    _format = null;
                }
            }
            DATE_FORMATTER_CACHE.set(cacheKey, parts);
        }
        return parts.reduce(function (text, part) {
            var /** @type {?} */ fn = DATE_FORMATS[part];
            return text + (fn ? fn(date, locale) : partToTime(part));
        }, '');
    }
    /**
     * @param {?} part
     * @return {?}
     */
    function partToTime(part) {
        return part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
    }
    var DateFormatter = (function () {
        function DateFormatter() {
        }
        /**
         * @param {?} date
         * @param {?} locale
         * @param {?} pattern
         * @return {?}
         */
        DateFormatter.format = function (date, locale, pattern) {
            return dateFormatter(pattern, date, locale);
        };
        return DateFormatter;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
    /**
     * @param {?} pipe
     * @param {?} locale
     * @param {?} value
     * @param {?} style
     * @param {?=} digits
     * @param {?=} currency
     * @param {?=} currencyAsSymbol
     * @return {?}
     */
    function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
        if (currency === void 0) { currency = null; }
        if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
        if (value == null)
            return null;
        // Convert strings to numbers
        value = typeof value === 'string' && isNumeric(value) ? +value : value;
        if (typeof value !== 'number') {
            throw invalidPipeArgumentError(pipe, value);
        }
        var /** @type {?} */ minInt = undefined;
        var /** @type {?} */ minFraction = undefined;
        var /** @type {?} */ maxFraction = undefined;
        if (style !== NumberFormatStyle.Currency) {
            // rely on Intl default for currency
            minInt = 1;
            minFraction = 0;
            maxFraction = 3;
        }
        if (digits) {
            var /** @type {?} */ parts = digits.match(_NUMBER_FORMAT_REGEXP);
            if (parts === null) {
                throw new Error(digits + " is not a valid digit info for number pipes");
            }
            if (parts[1] != null) {
                minInt = parseIntAutoRadix(parts[1]);
            }
            if (parts[3] != null) {
                minFraction = parseIntAutoRadix(parts[3]);
            }
            if (parts[5] != null) {
                maxFraction = parseIntAutoRadix(parts[5]);
            }
        }
        return NumberFormatter.format(/** @type {?} */ (value), locale, style, {
            minimumIntegerDigits: minInt,
            minimumFractionDigits: minFraction,
            maximumFractionDigits: maxFraction,
            currency: currency,
            currencyAsSymbol: currencyAsSymbol,
        });
    }
    /**
     * \@ngModule CommonModule
     * \@whatItDoes Formats a number according to locale rules.
     * \@howToUse `number_expression | number[:digitInfo]`
     *
     * Formats a number as text. Group sizing and separator and other locale-specific
     * configurations are based on the active locale.
     *
     * where `expression` is a number:
     *  - `digitInfo` is a `string` which has a following format: <br>
     *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>
     *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.
     *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.
     *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.
     *
     * For more information on the acceptable range for each of these numbers and other
     * details see your native internationalization library.
     *
     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
     * and may require a polyfill. See [Browser Support](guide/browser-support) for details.
     *
     * ### Example
     *
     * {\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}
     *
     * \@stable
     */
    var DecimalPipe = (function () {
        /**
         * @param {?} _locale
         */
        function DecimalPipe(_locale) {
            this._locale = _locale;
        }
        /**
         * @param {?} value
         * @param {?=} digits
         * @return {?}
         */
        DecimalPipe.prototype.transform = function (value, digits) {
            return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
        };
        return DecimalPipe;
    }());
    DecimalPipe.decorators = [
        { type: Pipe, args: [{ name: 'number' },] },
    ];
    /**
     * @nocollapse
     */
    DecimalPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
    ]; };
    /**
     * \@ngModule CommonModule
     * \@whatItDoes Formats a number as a percentage according to locale rules.
     * \@howToUse `number_expression | percent[:digitInfo]`
     *
     * \@description
     *
     * Formats a number as percentage.
     *
     * - `digitInfo` See {\@link DecimalPipe} for detailed description.
     *
     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
     * and may require a polyfill. See [Browser Support](guide/browser-support) for details.
     *
     * ### Example
     *
     * {\@example common/pipes/ts/number_pipe.ts region='PercentPipe'}
     *
     * \@stable
     */
    var PercentPipe = (function () {
        /**
         * @param {?} _locale
         */
        function PercentPipe(_locale) {
            this._locale = _locale;
        }
        /**
         * @param {?} value
         * @param {?=} digits
         * @return {?}
         */
        PercentPipe.prototype.transform = function (value, digits) {
            return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
        };
        return PercentPipe;
    }());
    PercentPipe.decorators = [
        { type: Pipe, args: [{ name: 'percent' },] },
    ];
    /**
     * @nocollapse
     */
    PercentPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
    ]; };
    /**
     * \@ngModule CommonModule
     * \@whatItDoes Formats a number as currency using locale rules.
     * \@howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`
     * \@description
     *
     * Use `currency` to format a number as currency.
     *
     * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such
     *    as `USD` for the US dollar and `EUR` for the euro.
     * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.
     *   - `true`: use symbol (e.g. `$`).
     *   - `false`(default): use code (e.g. `USD`).
     * - `digitInfo` See {\@link DecimalPipe} for detailed description.
     *
     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
     * and may require a polyfill. See [Browser Support](guide/browser-support) for details.
     *
     * ### Example
     *
     * {\@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}
     *
     * \@stable
     */
    var CurrencyPipe = (function () {
        /**
         * @param {?} _locale
         */
        function CurrencyPipe(_locale) {
            this._locale = _locale;
        }
        /**
         * @param {?} value
         * @param {?=} currencyCode
         * @param {?=} symbolDisplay
         * @param {?=} digits
         * @return {?}
         */
        CurrencyPipe.prototype.transform = function (value, currencyCode, symbolDisplay, digits) {
            if (currencyCode === void 0) { currencyCode = 'USD'; }
            if (symbolDisplay === void 0) { symbolDisplay = false; }
            return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
        };
        return CurrencyPipe;
    }());
    CurrencyPipe.decorators = [
        { type: Pipe, args: [{ name: 'currency' },] },
    ];
    /**
     * @nocollapse
     */
    CurrencyPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
    ]; };
    /**
     * @param {?} text
     * @return {?}
     */
    function parseIntAutoRadix(text) {
        var /** @type {?} */ result = parseInt(text);
        if (isNaN(result)) {
            throw new Error('Invalid integer literal when parsing ' + text);
        }
        return result;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isNumeric(value) {
        return !isNaN(value - parseFloat(value));
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
    /**
     * \@ngModule CommonModule
     * \@whatItDoes Formats a date according to locale rules.
     * \@howToUse `date_expression | date[:format]`
     * \@description
     *
     * Where:
     * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string
     * (https://www.w3.org/TR/NOTE-datetime).
     * - `format` indicates which date/time components to include. The format can be predefined as
     *   shown below or custom as shown in the table.
     *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)
     *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)
     *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)
     *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)
     *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)
     *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)
     *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)
     *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)
     *
     *
     *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |
     *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|
     *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |
     *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |
     *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
     *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |
     *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
     *  | hour      |   j    | -      | -            | -                 | j (1 PM)  | jj (1 PM) |
     *  | hour12    |   h    | -      | -            | -                 | h (1)     | hh (01)   |
     *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |
     *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |
     *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |
     *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |
     *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |
     *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |
     *
     * In javascript, only the components specified will be respected (not the ordering,
     * punctuations, ...) and details of the formatting will be dependent on the locale.
     *
     * Timezone of the formatted text will be the local system timezone of the end-user's machine.
     *
     * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not
     * applied and the formatted text will have the same day, month and year of the expression.
     *
     * WARNINGS:
     * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.
     *   Instead users should treat the date as an immutable object and change the reference when the
     *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run
     *   which would be an expensive operation).
     * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera
     *   browsers.
     *
     * ### Examples
     *
     * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)
     * in the _local_ time and locale is 'en-US':
     *
     * ```
     *     {{ dateObj | date }}               // output is 'Jun 15, 2015'
     *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
     *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
     *     {{ dateObj | date:'mmss' }}        // output is '43:11'
     * ```
     *
     * {\@example common/pipes/ts/date_pipe.ts region='DatePipe'}
     *
     * \@stable
     */
    var DatePipe = (function () {
        /**
         * @param {?} _locale
         */
        function DatePipe(_locale) {
            this._locale = _locale;
        }
        /**
         * @param {?} value
         * @param {?=} pattern
         * @return {?}
         */
        DatePipe.prototype.transform = function (value, pattern) {
            if (pattern === void 0) { pattern = 'mediumDate'; }
            var /** @type {?} */ date;
            if (isBlank(value) || value !== value)
                return null;
            if (typeof value === 'string') {
                value = value.trim();
            }
            if (isDate(value)) {
                date = value;
            }
            else if (isNumeric(value)) {
                date = new Date(parseFloat(value));
            }
            else if (typeof value === 'string' && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
                /**
                 * For ISO Strings without time the day, month and year must be extracted from the ISO String
                 * before Date creation to avoid time offset and errors in the new Date.
                 * If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
                 * date, some browsers (e.g. IE 9) will throw an invalid Date error
                 * If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
                 * is applied
                 * Note: ISO months are 0 for January, 1 for February, ...
                 */
                var _a = value.split('-').map(function (val) { return parseInt(val, 10); }), y = _a[0], m = _a[1], d = _a[2];
                date = new Date(y, m - 1, d);
            }
            else {
                date = new Date(value);
            }
            if (!isDate(date)) {
                var /** @type {?} */ match = void 0;
                if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {
                    date = isoStringToDate(match);
                }
                else {
                    throw invalidPipeArgumentError(DatePipe, value);
                }
            }
            return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);
        };
        return DatePipe;
    }());
    /**
     * \@internal
     */
    DatePipe._ALIASES = {
        'medium': 'yMMMdjms',
        'short': 'yMdjm',
        'fullDate': 'yMMMMEEEEd',
        'longDate': 'yMMMMd',
        'mediumDate': 'yMMMd',
        'shortDate': 'yMd',
        'mediumTime': 'jms',
        'shortTime': 'jm'
    };
    DatePipe.decorators = [
        { type: Pipe, args: [{ name: 'date', pure: true },] },
    ];
    /**
     * @nocollapse
     */
    DatePipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
    ]; };
    /**
     * @param {?} obj
     * @return {?}
     */
    function isBlank(obj) {
        return obj == null || obj === '';
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    function isDate(obj) {
        return obj instanceof Date && !isNaN(obj.valueOf());
    }
    /**
     * @param {?} match
     * @return {?}
     */
    function isoStringToDate(match) {
        var /** @type {?} */ date = new Date(0);
        var /** @type {?} */ tzHour = 0;
        var /** @type {?} */ tzMin = 0;
        var /** @type {?} */ dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
        var /** @type {?} */ timeSetter = match[8] ? date.setUTCHours : date.setHours;
        if (match[9]) {
            tzHour = toInt(match[9] + match[10]);
            tzMin = toInt(match[9] + match[11]);
        }
        dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
        var /** @type {?} */ h = toInt(match[4] || '0') - tzHour;
        var /** @type {?} */ m = toInt(match[5] || '0') - tzMin;
        var /** @type {?} */ s = toInt(match[6] || '0');
        var /** @type {?} */ ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
        timeSetter.call(date, h, m, s, ms);
        return date;
    }
    /**
     * @param {?} str
     * @return {?}
     */
    function toInt(str) {
        return parseInt(str, 10);
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var _INTERPOLATION_REGEXP = /#/g;
    /**
     * \@ngModule CommonModule
     * \@whatItDoes Maps a value to a string that pluralizes the value according to locale rules.
     * \@howToUse `expression | i18nPlural:mapping`
     * \@description
     *
     *  Where:
     *  - `expression` is a number.
     *  - `mapping` is an object that mimics the ICU format, see
     *    http://userguide.icu-project.org/formatparse/messages
     *
     *  ## Example
     *
     * {\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
     *
     * \@experimental
     */
    var I18nPluralPipe = (function () {
        /**
         * @param {?} _localization
         */
        function I18nPluralPipe(_localization) {
            this._localization = _localization;
        }
        /**
         * @param {?} value
         * @param {?} pluralMap
         * @return {?}
         */
        I18nPluralPipe.prototype.transform = function (value, pluralMap) {
            if (value == null)
                return '';
            if (typeof pluralMap !== 'object' || pluralMap === null) {
                throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);
            }
            var /** @type {?} */ key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
            return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
        };
        return I18nPluralPipe;
    }());
    I18nPluralPipe.decorators = [
        { type: Pipe, args: [{ name: 'i18nPlural', pure: true },] },
    ];
    /**
     * @nocollapse
     */
    I18nPluralPipe.ctorParameters = function () { return [
        { type: NgLocalization, },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@ngModule CommonModule
     * \@whatItDoes Generic selector that displays the string that matches the current value.
     * \@howToUse `expression | i18nSelect:mapping`
     * \@description
     *
     *  Where `mapping` is an object that indicates the text that should be displayed
     *  for different values of the provided `expression`.
     *  If none of the keys of the mapping match the value of the `expression`, then the content
     *  of the `other` key is returned when present, otherwise an empty string is returned.
     *
     *  ## Example
     *
     * {\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
     *
     *  \@experimental
     */
    var I18nSelectPipe = (function () {
        function I18nSelectPipe() {
        }
        /**
         * @param {?} value
         * @param {?} mapping
         * @return {?}
         */
        I18nSelectPipe.prototype.transform = function (value, mapping) {
            if (value == null)
                return '';
            if (typeof mapping !== 'object' || typeof value !== 'string') {
                throw invalidPipeArgumentError(I18nSelectPipe, mapping);
            }
            if (mapping.hasOwnProperty(value)) {
                return mapping[value];
            }
            if (mapping.hasOwnProperty('other')) {
                return mapping['other'];
            }
            return '';
        };
        return I18nSelectPipe;
    }());
    I18nSelectPipe.decorators = [
        { type: Pipe, args: [{ name: 'i18nSelect', pure: true },] },
    ];
    /**
     * @nocollapse
     */
    I18nSelectPipe.ctorParameters = function () { return []; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@ngModule CommonModule
     * \@whatItDoes Converts value into JSON string.
     * \@howToUse `expression | json`
     * \@description
     *
     * Converts value into string using `JSON.stringify`. Useful for debugging.
     *
     * ### Example
     * {\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
     *
     * \@stable
     */
    var JsonPipe = (function () {
        function JsonPipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        JsonPipe.prototype.transform = function (value) { return JSON.stringify(value, null, 2); };
        return JsonPipe;
    }());
    JsonPipe.decorators = [
        { type: Pipe, args: [{ name: 'json', pure: false },] },
    ];
    /**
     * @nocollapse
     */
    JsonPipe.ctorParameters = function () { return []; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@ngModule CommonModule
     * \@whatItDoes Creates a new List or String containing a subset (slice) of the elements.
     * \@howToUse `array_or_string_expression | slice:start[:end]`
     * \@description
     *
     * Where the input expression is a `List` or `String`, and:
     * - `start`: The starting index of the subset to return.
     *   - **a positive integer**: return the item at `start` index and all items after
     *     in the list or string expression.
     *   - **a negative integer**: return the item at `start` index from the end and all items after
     *     in the list or string expression.
     *   - **if positive and greater than the size of the expression**: return an empty list or string.
     *   - **if negative and greater than the size of the expression**: return entire list or string.
     * - `end`: The ending index of the subset to return.
     *   - **omitted**: return all items until the end.
     *   - **if positive**: return all items before `end` index of the list or string.
     *   - **if negative**: return all items before `end` index from the end of the list or string.
     *
     * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
     * and `String.prototype.slice()`.
     *
     * When operating on a [List], the returned list is always a copy even when all
     * the elements are being returned.
     *
     * When operating on a blank value, the pipe returns the blank value.
     *
     * ## List Example
     *
     * This `ngFor` example:
     *
     * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
     *
     * produces the following:
     *
     *     <li>b</li>
     *     <li>c</li>
     *
     * ## String Examples
     *
     * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
     *
     * \@stable
     */
    var SlicePipe = (function () {
        function SlicePipe() {
        }
        /**
         * @param {?} value
         * @param {?} start
         * @param {?=} end
         * @return {?}
         */
        SlicePipe.prototype.transform = function (value, start, end) {
            if (value == null)
                return value;
            if (!this.supports(value)) {
                throw invalidPipeArgumentError(SlicePipe, value);
            }
            return value.slice(start, end);
        };
        /**
         * @param {?} obj
         * @return {?}
         */
        SlicePipe.prototype.supports = function (obj) { return typeof obj === 'string' || Array.isArray(obj); };
        return SlicePipe;
    }());
    SlicePipe.decorators = [
        { type: Pipe, args: [{ name: 'slice', pure: false },] },
    ];
    /**
     * @nocollapse
     */
    SlicePipe.ctorParameters = function () { return []; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @module
     * @description
     * This module provides a set of common Pipes.
     */
    /**
     * A collection of Angular pipes that are likely to be used in each and every application.
     */
    var COMMON_PIPES = [
        AsyncPipe,
        UpperCasePipe,
        LowerCasePipe,
        JsonPipe,
        SlicePipe,
        DecimalPipe,
        PercentPipe,
        TitleCasePipe,
        CurrencyPipe,
        DatePipe,
        I18nPluralPipe,
        I18nSelectPipe,
    ];
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * The module that includes all the basic Angular directives like {\@link NgIf}, {\@link NgForOf}, ...
     *
     * \@stable
     */
    var CommonModule = (function () {
        function CommonModule() {
        }
        return CommonModule;
    }());
    CommonModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
                    exports: [COMMON_DIRECTIVES, COMMON_PIPES],
                    providers: [
                        { provide: NgLocalization, useClass: NgLocaleLocalization },
                    ],
                },] },
    ];
    /**
     * @nocollapse
     */
    CommonModule.ctorParameters = function () { return []; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * A DI Token representing the main rendering context. In a browser this is the DOM Document.
     *
     * Note: Document might not be available in the Application Context when Application and Rendering
     * Contexts are not the same (e.g. when running the application into a Web Worker).
     *
     * \@stable
     */
    var DOCUMENT = new InjectionToken('DocumentToken');
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var PLATFORM_BROWSER_ID = 'browser';
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @module
     * @description
     * Entry point for all public APIs of the common package.
     */
    /**
     * \@stable
     */
    var VERSION$1 = new Version('4.4.7');

    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var _DOM = ((null));
    /**
     * @return {?}
     */
    function getDOM() {
        return _DOM;
    }
    /**
     * @param {?} adapter
     * @return {?}
     */
    /**
     * @param {?} adapter
     * @return {?}
     */
    function setRootDomAdapter(adapter) {
        if (!_DOM) {
            _DOM = adapter;
        }
    }
    /**
     * Provides DOM operations in an environment-agnostic way.
     *
     * \@security Tread carefully! Interacting with the DOM directly is dangerous and
     * can introduce XSS risks.
     * @abstract
     */
    var DomAdapter = (function () {
        function DomAdapter() {
            this.resourceLoaderType = ((null));
        }
        /**
         * @abstract
         * @param {?} element
         * @param {?} name
         * @return {?}
         */
        DomAdapter.prototype.hasProperty = function (element, name) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        DomAdapter.prototype.setProperty = function (el, name, value) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} name
         * @return {?}
         */
        DomAdapter.prototype.getProperty = function (el, name) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} methodName
         * @param {?} args
         * @return {?}
         */
        DomAdapter.prototype.invoke = function (el, methodName, args) { };
        /**
         * @abstract
         * @param {?} error
         * @return {?}
         */
        DomAdapter.prototype.logError = function (error) { };
        /**
         * @abstract
         * @param {?} error
         * @return {?}
         */
        DomAdapter.prototype.log = function (error) { };
        /**
         * @abstract
         * @param {?} error
         * @return {?}
         */
        DomAdapter.prototype.logGroup = function (error) { };
        /**
         * @abstract
         * @return {?}
         */
        DomAdapter.prototype.logGroupEnd = function () { };
        Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
            /**
             * Maps attribute names to their corresponding property names for cases
             * where attribute name doesn't match property name.
             * @return {?}
             */
            get: function () { return this._attrToPropMap; },
            /**
             * @param {?} value
             * @return {?}
             */
            set: function (value) { this._attrToPropMap = value; },
            enumerable: true,
            configurable: true
        });
        /**
         * @abstract
         * @param {?} nodeA
         * @param {?} nodeB
         * @return {?}
         */
        DomAdapter.prototype.contains = function (nodeA, nodeB) { };
        /**
         * @abstract
         * @param {?} templateHtml
         * @return {?}
         */
        DomAdapter.prototype.parse = function (templateHtml) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} selector
         * @return {?}
         */
        DomAdapter.prototype.querySelector = function (el, selector) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} selector
         * @return {?}
         */
        DomAdapter.prototype.querySelectorAll = function (el, selector) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} evt
         * @param {?} listener
         * @return {?}
         */
        DomAdapter.prototype.on = function (el, evt, listener) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} evt
         * @param {?} listener
         * @return {?}
         */
        DomAdapter.prototype.onAndCancel = function (el, evt, listener) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} evt
         * @return {?}
         */
        DomAdapter.prototype.dispatchEvent = function (el, evt) { };
        /**
         * @abstract
         * @param {?} eventType
         * @return {?}
         */
        DomAdapter.prototype.createMouseEvent = function (eventType) { };
        /**
         * @abstract
         * @param {?} eventType
         * @return {?}
         */
        DomAdapter.prototype.createEvent = function (eventType) { };
        /**
         * @abstract
         * @param {?} evt
         * @return {?}
         */
        DomAdapter.prototype.preventDefault = function (evt) { };
        /**
         * @abstract
         * @param {?} evt
         * @return {?}
         */
        DomAdapter.prototype.isPrevented = function (evt) { };
        /**
         * @abstract
         * @param {?} el
         * @return {?}
         */
        DomAdapter.prototype.getInnerHTML = function (el) { };
        /**
         * Returns content if el is a <template> element, null otherwise.
         * @abstract
         * @param {?} el
         * @return {?}
         */
        DomAdapter.prototype.getTemplateContent = function (el) { };
        /**
         * @abstract
         * @param {?} el
         * @return {?}
         */
        DomAdapter.prototype.getOuterHTML = function (el) { };
        /**
         * @abstract
         * @param {?} node
         * @return {?}
         */
        DomAdapter.prototype.nodeName = function (node) { };
        /**
         * @abstract
         * @param {?} node
         * @return {?}
         */
        DomAdapter.prototype.nodeValue = function (node) { };
        /**
         * @abstract
         * @param {?} node
         * @return {?}
         */
        DomAdapter.prototype.type = function (node) { };
        /**
         * @abstract
         * @param {?} node
         * @return {?}
         */
        DomAdapter.prototype.content = function (node) { };
        /**
         * @abstract
         * @param {?} el
         * @return {?}
         */
        DomAdapter.prototype.firstChild = function (el) { };
        /**
         * @abstract
         * @param {?} el
         * @return {?}
         */
        DomAdapter.prototype.nextSibling = function (el) { };
        /**
         * @abstract
         * @param {?} el
         * @return {?}
         */
        DomAdapter.prototype.parentElement = function (el) { };
        /**
         * @abstract
         * @param {?} el
         * @return {?}
         */
        DomAdapter.prototype.childNodes = function (el) { };
        /**
         * @abstract
         * @param {?} el
         * @return {?}
         */
        DomAdapter.prototype.childNodesAsList = function (el) { };
        /**
         * @abstract
         * @param {?} el
         * @return {?}
         */
        DomAdapter.prototype.clearNodes = function (el) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} node
         * @return {?}
         */
        DomAdapter.prototype.appendChild = function (el, node) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} node
         * @return {?}
         */
        DomAdapter.prototype.removeChild = function (el, node) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} newNode
         * @param {?} oldNode
         * @return {?}
         */
        DomAdapter.prototype.replaceChild = function (el, newNode, oldNode) { };
        /**
         * @abstract
         * @param {?} el
         * @return {?}
         */
        DomAdapter.prototype.remove = function (el) { };
        /**
         * @abstract
         * @param {?} parent
         * @param {?} ref
         * @param {?} node
         * @return {?}
         */
        DomAdapter.prototype.insertBefore = function (parent, ref, node) { };
        /**
         * @abstract
         * @param {?} parent
         * @param {?} ref
         * @param {?} nodes
         * @return {?}
         */
        DomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) { };
        /**
         * @abstract
         * @param {?} parent
         * @param {?} el
         * @param {?} node
         * @return {?}
         */
        DomAdapter.prototype.insertAfter = function (parent, el, node) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} value
         * @return {?}
         */
        DomAdapter.prototype.setInnerHTML = function (el, value) { };
        /**
         * @abstract
         * @param {?} el
         * @return {?}
         */
        DomAdapter.prototype.getText = function (el) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} value
         * @return {?}
         */
        DomAdapter.prototype.setText = function (el, value) { };
        /**
         * @abstract
         * @param {?} el
         * @return {?}
         */
        DomAdapter.prototype.getValue = function (el) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} value
         * @return {?}
         */
        DomAdapter.prototype.setValue = function (el, value) { };
        /**
         * @abstract
         * @param {?} el
         * @return {?}
         */
        DomAdapter.prototype.getChecked = function (el) { };
        /**
         * @abstract
         * @param {?} el
         * @param {?} value
         * @return {?}
         */
        DomAdapter.prototype.setChecked = function (el, value) { };
        /**
         * @abstract
         * @param {?} text
         * @return {?}
         */
        DomAdapter.prototype.createComment = function (text) { };
        /**
         * @abstract
         * @param {?} html
         * @return {?}
         */
        DomAdapter.prototype.createTemplate = function (html) { };
        /**
         * @abstract
         * @param {?} tagName
         * @param {?=} doc
         * @return {?}
         */
        DomAdapter.prototype.createElement = function (tagName, doc) { };
        /**
         * @abstract
         * @param {?} ns
         * @param {?} tagName
         * @param {?=} doc
         * @return {?}
         */
        DomAdapter.prototype.createElementNS = function (ns, tagName, doc) { };
        /**
         * @abstract
         * @param {?} text
         * @param {?=} doc
         * @return {?}
         */
        DomAdapter.prototype.createTextNode = function (text, doc) { };
        /**
         * @abstract
         * @param {?} attrName
         * @param {?} attrValue
         * @param {?=} doc
         * @return {?}
         */
        DomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) { };
        /**
         * @abstract
         * @param {?} css
         * @param {?=} doc
         * @return {?}
         */
        DomAdapter.prototype.createStyleElement = function (css, doc) { };
        /**
         * @abstract
         * @param {?} el
         * @return {?}
         */
        DomAdapter.prototype.createShadowRoot = function (el) { };
        /**
         * @abstract
         * @param {?} el
         * @return {?}
         */
        DomAdapter.prototype.getShadowRoot = function (el) { };
        /**
         * @abstract
         * @param {?} el
         * @return {?}
         */
        DomAdapter.prototype.getHost = function (el) { };
        /**
         * @abstract
         * @param {?} el
         * @return {?}
         */
        DomAdapter.prototype.getDistributedNodes = function (el) { };
        /**
         * @abstract
         * @param {?} node
         * @return {?}
         */
        DomAdapter.prototype.clone /*<T extends Node>*/ = function (node) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} name
         * @return {?}
         */
        DomAdapter.prototype.getElementsByClassName = function (element, name) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} name
         * @return {?}
         */
        DomAdapter.prototype.getElementsByTagName = function (element, name) { };
        /**
         * @abstract
         * @param {?} element
         * @return {?}
         */
        DomAdapter.prototype.classList = function (element) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} className
         * @return {?}
         */
        DomAdapter.prototype.addClass = function (element, className) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} className
         * @return {?}
         */
        DomAdapter.prototype.removeClass = function (element, className) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} className
         * @return {?}
         */
        DomAdapter.prototype.hasClass = function (element, className) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} styleName
         * @param {?} styleValue
         * @return {?}
         */
        DomAdapter.prototype.setStyle = function (element, styleName, styleValue) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} styleName
         * @return {?}
         */
        DomAdapter.prototype.removeStyle = function (element, styleName) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} styleName
         * @return {?}
         */
        DomAdapter.prototype.getStyle = function (element, styleName) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} styleName
         * @param {?=} styleValue
         * @return {?}
         */
        DomAdapter.prototype.hasStyle = function (element, styleName, styleValue) { };
        /**
         * @abstract
         * @param {?} element
         * @return {?}
         */
        DomAdapter.prototype.tagName = function (element) { };
        /**
         * @abstract
         * @param {?} element
         * @return {?}
         */
        DomAdapter.prototype.attributeMap = function (element) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} attribute
         * @return {?}
         */
        DomAdapter.prototype.hasAttribute = function (element, attribute) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} ns
         * @param {?} attribute
         * @return {?}
         */
        DomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} attribute
         * @return {?}
         */
        DomAdapter.prototype.getAttribute = function (element, attribute) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} ns
         * @param {?} attribute
         * @return {?}
         */
        DomAdapter.prototype.getAttributeNS = function (element, ns, attribute) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        DomAdapter.prototype.setAttribute = function (element, name, value) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} ns
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        DomAdapter.prototype.setAttributeNS = function (element, ns, name, value) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} attribute
         * @return {?}
         */
        DomAdapter.prototype.removeAttribute = function (element, attribute) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} ns
         * @param {?} attribute
         * @return {?}
         */
        DomAdapter.prototype.removeAttributeNS = function (element, ns, attribute) { };
        /**
         * @abstract
         * @param {?} el
         * @return {?}
         */
        DomAdapter.prototype.templateAwareRoot = function (el) { };
        /**
         * @abstract
         * @return {?}
         */
        DomAdapter.prototype.createHtmlDocument = function () { };
        /**
         * @abstract
         * @param {?} el
         * @return {?}
         */
        DomAdapter.prototype.getBoundingClientRect = function (el) { };
        /**
         * @abstract
         * @param {?} doc
         * @return {?}
         */
        DomAdapter.prototype.getTitle = function (doc) { };
        /**
         * @abstract
         * @param {?} doc
         * @param {?} newTitle
         * @return {?}
         */
        DomAdapter.prototype.setTitle = function (doc, newTitle) { };
        /**
         * @abstract
         * @param {?} n
         * @param {?} selector
         * @return {?}
         */
        DomAdapter.prototype.elementMatches = function (n, selector) { };
        /**
         * @abstract
         * @param {?} el
         * @return {?}
         */
        DomAdapter.prototype.isTemplateElement = function (el) { };
        /**
         * @abstract
         * @param {?} node
         * @return {?}
         */
        DomAdapter.prototype.isTextNode = function (node) { };
        /**
         * @abstract
         * @param {?} node
         * @return {?}
         */
        DomAdapter.prototype.isCommentNode = function (node) { };
        /**
         * @abstract
         * @param {?} node
         * @return {?}
         */
        DomAdapter.prototype.isElementNode = function (node) { };
        /**
         * @abstract
         * @param {?} node
         * @return {?}
         */
        DomAdapter.prototype.hasShadowRoot = function (node) { };
        /**
         * @abstract
         * @param {?} node
         * @return {?}
         */
        DomAdapter.prototype.isShadowRoot = function (node) { };
        /**
         * @abstract
         * @param {?} node
         * @return {?}
         */
        DomAdapter.prototype.importIntoDoc /*<T extends Node>*/ = function (node) { };
        /**
         * @abstract
         * @param {?} node
         * @return {?}
         */
        DomAdapter.prototype.adoptNode /*<T extends Node>*/ = function (node) { };
        /**
         * @abstract
         * @param {?} element
         * @return {?}
         */
        DomAdapter.prototype.getHref = function (element) { };
        /**
         * @abstract
         * @param {?} event
         * @return {?}
         */
        DomAdapter.prototype.getEventKey = function (event) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} baseUrl
         * @param {?} href
         * @return {?}
         */
        DomAdapter.prototype.resolveAndSetHref = function (element, baseUrl, href) { };
        /**
         * @abstract
         * @return {?}
         */
        DomAdapter.prototype.supportsDOMEvents = function () { };
        /**
         * @abstract
         * @return {?}
         */
        DomAdapter.prototype.supportsNativeShadowDOM = function () { };
        /**
         * @abstract
         * @param {?} doc
         * @param {?} target
         * @return {?}
         */
        DomAdapter.prototype.getGlobalEventTarget = function (doc, target) { };
        /**
         * @abstract
         * @return {?}
         */
        DomAdapter.prototype.getHistory = function () { };
        /**
         * @abstract
         * @return {?}
         */
        DomAdapter.prototype.getLocation = function () { };
        /**
         * @abstract
         * @param {?} doc
         * @return {?}
         */
        DomAdapter.prototype.getBaseHref = function (doc) { };
        /**
         * @abstract
         * @return {?}
         */
        DomAdapter.prototype.resetBaseElement = function () { };
        /**
         * @abstract
         * @return {?}
         */
        DomAdapter.prototype.getUserAgent = function () { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        DomAdapter.prototype.setData = function (element, name, value) { };
        /**
         * @abstract
         * @param {?} element
         * @return {?}
         */
        DomAdapter.prototype.getComputedStyle = function (element) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} name
         * @return {?}
         */
        DomAdapter.prototype.getData = function (element, name) { };
        /**
         * @abstract
         * @return {?}
         */
        DomAdapter.prototype.supportsWebAnimation = function () { };
        /**
         * @abstract
         * @return {?}
         */
        DomAdapter.prototype.performanceNow = function () { };
        /**
         * @abstract
         * @return {?}
         */
        DomAdapter.prototype.getAnimationPrefix = function () { };
        /**
         * @abstract
         * @return {?}
         */
        DomAdapter.prototype.getTransitionEnd = function () { };
        /**
         * @abstract
         * @return {?}
         */
        DomAdapter.prototype.supportsAnimation = function () { };
        /**
         * @abstract
         * @return {?}
         */
        DomAdapter.prototype.supportsCookies = function () { };
        /**
         * @abstract
         * @param {?} name
         * @return {?}
         */
        DomAdapter.prototype.getCookie = function (name) { };
        /**
         * @abstract
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        DomAdapter.prototype.setCookie = function (name, value) { };
        return DomAdapter;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Provides DOM operations in any browser environment.
     *
     * \@security Tread carefully! Interacting with the DOM directly is dangerous and
     * can introduce XSS risks.
     * @abstract
     */
    var GenericBrowserDomAdapter = (function (_super) {
        __extends(GenericBrowserDomAdapter, _super);
        function GenericBrowserDomAdapter() {
            var _this = _super.call(this) || this;
            _this._animationPrefix = null;
            _this._transitionEnd = null;
            try {
                var element_1 = _this.createElement('div', document);
                if (_this.getStyle(element_1, 'animationName') != null) {
                    _this._animationPrefix = '';
                }
                else {
                    var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
                    for (var i = 0; i < domPrefixes.length; i++) {
                        if (_this.getStyle(element_1, domPrefixes[i] + 'AnimationName') != null) {
                            _this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
                            break;
                        }
                    }
                }
                var transEndEventNames_1 = {
                    WebkitTransition: 'webkitTransitionEnd',
                    MozTransition: 'transitionend',
                    OTransition: 'oTransitionEnd otransitionend',
                    transition: 'transitionend'
                };
                Object.keys(transEndEventNames_1).forEach(function (key) {
                    if (_this.getStyle(element_1, key) != null) {
                        _this._transitionEnd = transEndEventNames_1[key];
                    }
                });
            }
            catch (e) {
                _this._animationPrefix = null;
                _this._transitionEnd = null;
            }
            return _this;
        }
        /**
         * @param {?} el
         * @return {?}
         */
        GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return ((el)).getDistributedNodes(); };
        /**
         * @param {?} el
         * @param {?} baseUrl
         * @param {?} href
         * @return {?}
         */
        GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
            el.href = href == null ? baseUrl : baseUrl + '/../' + href;
        };
        /**
         * @return {?}
         */
        GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };
        /**
         * @return {?}
         */
        GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
            return typeof ((document.body)).createShadowRoot === 'function';
        };
        /**
         * @return {?}
         */
        GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () { return this._animationPrefix ? this._animationPrefix : ''; };
        /**
         * @return {?}
         */
        GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return this._transitionEnd ? this._transitionEnd : ''; };
        /**
         * @return {?}
         */
        GenericBrowserDomAdapter.prototype.supportsAnimation = function () {
            return this._animationPrefix != null && this._transitionEnd != null;
        };
        return GenericBrowserDomAdapter;
    }(DomAdapter));
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var _attrToPropMap = {
        'class': 'className',
        'innerHtml': 'innerHTML',
        'readonly': 'readOnly',
        'tabindex': 'tabIndex',
    };
    var DOM_KEY_LOCATION_NUMPAD = 3;
    // Map to convert some key or keyIdentifier values to what will be returned by getEventKey
    var _keyMap = {
        // The following values are here for cross-browser compatibility and to match the W3C standard
        // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
        '\b': 'Backspace',
        '\t': 'Tab',
        '\x7F': 'Delete',
        '\x1B': 'Escape',
        'Del': 'Delete',
        'Esc': 'Escape',
        'Left': 'ArrowLeft',
        'Right': 'ArrowRight',
        'Up': 'ArrowUp',
        'Down': 'ArrowDown',
        'Menu': 'ContextMenu',
        'Scroll': 'ScrollLock',
        'Win': 'OS'
    };
    // There is a bug in Chrome for numeric keypad keys:
    // https://code.google.com/p/chromium/issues/detail?id=155654
    // 1, 2, 3 ... are reported as A, B, C ...
    var _chromeNumKeyPadMap = {
        'A': '1',
        'B': '2',
        'C': '3',
        'D': '4',
        'E': '5',
        'F': '6',
        'G': '7',
        'H': '8',
        'I': '9',
        'J': '*',
        'K': '+',
        'M': '-',
        'N': '.',
        'O': '/',
        '\x60': '0',
        '\x90': 'NumLock'
    };
    var nodeContains;
    if (_global['Node']) {
        nodeContains = _global['Node'].prototype.contains || function (node) {
            return !!(this.compareDocumentPosition(node) & 16);
        };
    }
    var BrowserDomAdapter = (function (_super) {
        __extends(BrowserDomAdapter, _super);
        function BrowserDomAdapter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} templateHtml
         * @return {?}
         */
        BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error('parse not implemented'); };
        /**
         * @return {?}
         */
        BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter()); };
        /**
         * @param {?} element
         * @param {?} name
         * @return {?}
         */
        BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };
        /**
         * @param {?} el
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        BrowserDomAdapter.prototype.setProperty = function (el, name, value) { ((el))[name] = value; };
        /**
         * @param {?} el
         * @param {?} name
         * @return {?}
         */
        BrowserDomAdapter.prototype.getProperty = function (el, name) { return ((el))[name]; };
        /**
         * @param {?} el
         * @param {?} methodName
         * @param {?} args
         * @return {?}
         */
        BrowserDomAdapter.prototype.invoke = function (el, methodName, args) { ((el))[methodName].apply(((el)), args); };
        /**
         * @param {?} error
         * @return {?}
         */
        BrowserDomAdapter.prototype.logError = function (error) {
            if (window.console) {
                if (console.error) {
                    console.error(error);
                }
                else {
                    console.log(error);
                }
            }
        };
        /**
         * @param {?} error
         * @return {?}
         */
        BrowserDomAdapter.prototype.log = function (error) {
            if (window.console) {
                window.console.log && window.console.log(error);
            }
        };
        /**
         * @param {?} error
         * @return {?}
         */
        BrowserDomAdapter.prototype.logGroup = function (error) {
            if (window.console) {
                window.console.group && window.console.group(error);
            }
        };
        /**
         * @return {?}
         */
        BrowserDomAdapter.prototype.logGroupEnd = function () {
            if (window.console) {
                window.console.groupEnd && window.console.groupEnd();
            }
        };
        Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
            /**
             * @return {?}
             */
            get: function () { return _attrToPropMap; },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} nodeA
         * @param {?} nodeB
         * @return {?}
         */
        BrowserDomAdapter.prototype.contains = function (nodeA, nodeB) { return nodeContains.call(nodeA, nodeB); };
        /**
         * @param {?} el
         * @param {?} selector
         * @return {?}
         */
        BrowserDomAdapter.prototype.querySelector = function (el, selector) { return el.querySelector(selector); };
        /**
         * @param {?} el
         * @param {?} selector
         * @return {?}
         */
        BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };
        /**
         * @param {?} el
         * @param {?} evt
         * @param {?} listener
         * @return {?}
         */
        BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };
        /**
         * @param {?} el
         * @param {?} evt
         * @param {?} listener
         * @return {?}
         */
        BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
            el.addEventListener(evt, listener, false);
            // Needed to follow Dart's subscription semantic, until fix of
            // https://code.google.com/p/dart/issues/detail?id=17406
            return function () { el.removeEventListener(evt, listener, false); };
        };
        /**
         * @param {?} el
         * @param {?} evt
         * @return {?}
         */
        BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };
        /**
         * @param {?} eventType
         * @return {?}
         */
        BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
            var /** @type {?} */ evt = document.createEvent('MouseEvent');
            evt.initEvent(eventType, true, true);
            return evt;
        };
        /**
         * @param {?} eventType
         * @return {?}
         */
        BrowserDomAdapter.prototype.createEvent = function (eventType) {
            var /** @type {?} */ evt = document.createEvent('Event');
            evt.initEvent(eventType, true, true);
            return evt;
        };
        /**
         * @param {?} evt
         * @return {?}
         */
        BrowserDomAdapter.prototype.preventDefault = function (evt) {
            evt.preventDefault();
            evt.returnValue = false;
        };
        /**
         * @param {?} evt
         * @return {?}
         */
        BrowserDomAdapter.prototype.isPrevented = function (evt) {
            return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;
        };
        /**
         * @param {?} el
         * @return {?}
         */
        BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };
        /**
         * @param {?} el
         * @return {?}
         */
        BrowserDomAdapter.prototype.getTemplateContent = function (el) {
            return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;
        };
        /**
         * @param {?} el
         * @return {?}
         */
        BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };
        /**
         * @param {?} node
         * @return {?}
         */
        BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };
        /**
         * @param {?} node
         * @return {?}
         */
        BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };
        /**
         * @param {?} node
         * @return {?}
         */
        BrowserDomAdapter.prototype.type = function (node) { return node.type; };
        /**
         * @param {?} node
         * @return {?}
         */
        BrowserDomAdapter.prototype.content = function (node) {
            if (this.hasProperty(node, 'content')) {
                return ((node)).content;
            }
            else {
                return node;
            }
        };
        /**
         * @param {?} el
         * @return {?}
         */
        BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };
        /**
         * @param {?} el
         * @return {?}
         */
        BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };
        /**
         * @param {?} el
         * @return {?}
         */
        BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };
        /**
         * @param {?} el
         * @return {?}
         */
        BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };
        /**
         * @param {?} el
         * @return {?}
         */
        BrowserDomAdapter.prototype.childNodesAsList = function (el) {
            var /** @type {?} */ childNodes = el.childNodes;
            var /** @type {?} */ res = new Array(childNodes.length);
            for (var /** @type {?} */ i = 0; i < childNodes.length; i++) {
                res[i] = childNodes[i];
            }
            return res;
        };
        /**
         * @param {?} el
         * @return {?}
         */
        BrowserDomAdapter.prototype.clearNodes = function (el) {
            while (el.firstChild) {
                el.removeChild(el.firstChild);
            }
        };
        /**
         * @param {?} el
         * @param {?} node
         * @return {?}
         */
        BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };
        /**
         * @param {?} el
         * @param {?} node
         * @return {?}
         */
        BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };
        /**
         * @param {?} el
         * @param {?} newChild
         * @param {?} oldChild
         * @return {?}
         */
        BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };
        /**
         * @param {?} node
         * @return {?}
         */
        BrowserDomAdapter.prototype.remove = function (node) {
            if (node.parentNode) {
                node.parentNode.removeChild(node);
            }
            return node;
        };
        /**
         * @param {?} parent
         * @param {?} ref
         * @param {?} node
         * @return {?}
         */
        BrowserDomAdapter.prototype.insertBefore = function (parent, ref, node) { parent.insertBefore(node, ref); };
        /**
         * @param {?} parent
         * @param {?} ref
         * @param {?} nodes
         * @return {?}
         */
        BrowserDomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) {
            nodes.forEach(function (n) { return parent.insertBefore(n, ref); });
        };
        /**
         * @param {?} parent
         * @param {?} ref
         * @param {?} node
         * @return {?}
         */
        BrowserDomAdapter.prototype.insertAfter = function (parent, ref, node) { parent.insertBefore(node, ref.nextSibling); };
        /**
         * @param {?} el
         * @param {?} value
         * @return {?}
         */
        BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };
        /**
         * @param {?} el
         * @return {?}
         */
        BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };
        /**
         * @param {?} el
         * @param {?} value
         * @return {?}
         */
        BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };
        /**
         * @param {?} el
         * @return {?}
         */
        BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };
        /**
         * @param {?} el
         * @param {?} value
         * @return {?}
         */
        BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };
        /**
         * @param {?} el
         * @return {?}
         */
        BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };
        /**
         * @param {?} el
         * @param {?} value
         * @return {?}
         */
        BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };
        /**
         * @param {?} text
         * @return {?}
         */
        BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text); };
        /**
         * @param {?} html
         * @return {?}
         */
        BrowserDomAdapter.prototype.createTemplate = function (html) {
            var /** @type {?} */ t = document.createElement('template');
            t.innerHTML = html;
            return t;
        };
        /**
         * @param {?} tagName
         * @param {?=} doc
         * @return {?}
         */
        BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
            if (doc === void 0) { doc = document; }
            return doc.createElement(tagName);
        };
        /**
         * @param {?} ns
         * @param {?} tagName
         * @param {?=} doc
         * @return {?}
         */
        BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {
            if (doc === void 0) { doc = document; }
            return doc.createElementNS(ns, tagName);
        };
        /**
         * @param {?} text
         * @param {?=} doc
         * @return {?}
         */
        BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
            if (doc === void 0) { doc = document; }
            return doc.createTextNode(text);
        };
        /**
         * @param {?} attrName
         * @param {?} attrValue
         * @param {?=} doc
         * @return {?}
         */
        BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
            if (doc === void 0) { doc = document; }
            var /** @type {?} */ el = (doc.createElement('SCRIPT'));
            el.setAttribute(attrName, attrValue);
            return el;
        };
        /**
         * @param {?} css
         * @param {?=} doc
         * @return {?}
         */
        BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
            if (doc === void 0) { doc = document; }
            var /** @type {?} */ style = (doc.createElement('style'));
            this.appendChild(style, this.createTextNode(css));
            return style;
        };
        /**
         * @param {?} el
         * @return {?}
         */
        BrowserDomAdapter.prototype.createShadowRoot = function (el) { return ((el)).createShadowRoot(); };
        /**
         * @param {?} el
         * @return {?}
         */
        BrowserDomAdapter.prototype.getShadowRoot = function (el) { return ((el)).shadowRoot; };
        /**
         * @param {?} el
         * @return {?}
         */
        BrowserDomAdapter.prototype.getHost = function (el) { return ((el)).host; };
        /**
         * @param {?} node
         * @return {?}
         */
        BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };
        /**
         * @param {?} element
         * @param {?} name
         * @return {?}
         */
        BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
            return element.getElementsByClassName(name);
        };
        /**
         * @param {?} element
         * @param {?} name
         * @return {?}
         */
        BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
            return element.getElementsByTagName(name);
        };
        /**
         * @param {?} element
         * @return {?}
         */
        BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };
        /**
         * @param {?} element
         * @param {?} className
         * @return {?}
         */
        BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className); };
        /**
         * @param {?} element
         * @param {?} className
         * @return {?}
         */
        BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className); };
        /**
         * @param {?} element
         * @param {?} className
         * @return {?}
         */
        BrowserDomAdapter.prototype.hasClass = function (element, className) {
            return element.classList.contains(className);
        };
        /**
         * @param {?} element
         * @param {?} styleName
         * @param {?} styleValue
         * @return {?}
         */
        BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {
            element.style[styleName] = styleValue;
        };
        /**
         * @param {?} element
         * @param {?} stylename
         * @return {?}
         */
        BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {
            // IE requires '' instead of null
            // see https://github.com/angular/angular/issues/7916
            element.style[stylename] = '';
        };
        /**
         * @param {?} element
         * @param {?} stylename
         * @return {?}
         */
        BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };
        /**
         * @param {?} element
         * @param {?} styleName
         * @param {?=} styleValue
         * @return {?}
         */
        BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {
            var /** @type {?} */ value = this.getStyle(element, styleName) || '';
            return styleValue ? value == styleValue : value.length > 0;
        };
        /**
         * @param {?} element
         * @return {?}
         */
        BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };
        /**
         * @param {?} element
         * @return {?}
         */
        BrowserDomAdapter.prototype.attributeMap = function (element) {
            var /** @type {?} */ res = new Map();
            var /** @type {?} */ elAttrs = element.attributes;
            for (var /** @type {?} */ i = 0; i < elAttrs.length; i++) {
                var /** @type {?} */ attrib = elAttrs[i];
                res.set(attrib.name, attrib.value);
            }
            return res;
        };
        /**
         * @param {?} element
         * @param {?} attribute
         * @return {?}
         */
        BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {
            return element.hasAttribute(attribute);
        };
        /**
         * @param {?} element
         * @param {?} ns
         * @param {?} attribute
         * @return {?}
         */
        BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {
            return element.hasAttributeNS(ns, attribute);
        };
        /**
         * @param {?} element
         * @param {?} attribute
         * @return {?}
         */
        BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {
            return element.getAttribute(attribute);
        };
        /**
         * @param {?} element
         * @param {?} ns
         * @param {?} name
         * @return {?}
         */
        BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {
            return element.getAttributeNS(ns, name);
        };
        /**
         * @param {?} element
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };
        /**
         * @param {?} element
         * @param {?} ns
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {
            element.setAttributeNS(ns, name, value);
        };
        /**
         * @param {?} element
         * @param {?} attribute
         * @return {?}
         */
        BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };
        /**
         * @param {?} element
         * @param {?} ns
         * @param {?} name
         * @return {?}
         */
        BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) {
            element.removeAttributeNS(ns, name);
        };
        /**
         * @param {?} el
         * @return {?}
         */
        BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };
        /**
         * @return {?}
         */
        BrowserDomAdapter.prototype.createHtmlDocument = function () {
            return document.implementation.createHTMLDocument('fakeTitle');
        };
        /**
         * @param {?} el
         * @return {?}
         */
        BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
            try {
                return el.getBoundingClientRect();
            }
            catch (e) {
                return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
            }
        };
        /**
         * @param {?} doc
         * @return {?}
         */
        BrowserDomAdapter.prototype.getTitle = function (doc) { return document.title; };
        /**
         * @param {?} doc
         * @param {?} newTitle
         * @return {?}
         */
        BrowserDomAdapter.prototype.setTitle = function (doc, newTitle) { document.title = newTitle || ''; };
        /**
         * @param {?} n
         * @param {?} selector
         * @return {?}
         */
        BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
            if (n instanceof HTMLElement) {
                return n.matches && n.matches(selector) ||
                    n.msMatchesSelector && n.msMatchesSelector(selector) ||
                    n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
            }
            return false;
        };
        /**
         * @param {?} el
         * @return {?}
         */
        BrowserDomAdapter.prototype.isTemplateElement = function (el) {
            return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
        };
        /**
         * @param {?} node
         * @return {?}
         */
        BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };
        /**
         * @param {?} node
         * @return {?}
         */
        BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };
        /**
         * @param {?} node
         * @return {?}
         */
        BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };
        /**
         * @param {?} node
         * @return {?}
         */
        BrowserDomAdapter.prototype.hasShadowRoot = function (node) {
            return node.shadowRoot != null && node instanceof HTMLElement;
        };
        /**
         * @param {?} node
         * @return {?}
         */
        BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };
        /**
         * @param {?} node
         * @return {?}
         */
        BrowserDomAdapter.prototype.importIntoDoc = function (node) { return document.importNode(this.templateAwareRoot(node), true); };
        /**
         * @param {?} node
         * @return {?}
         */
        BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };
        /**
         * @param {?} el
         * @return {?}
         */
        BrowserDomAdapter.prototype.getHref = function (el) { return ((el)).href; };
        /**
         * @param {?} event
         * @return {?}
         */
        BrowserDomAdapter.prototype.getEventKey = function (event) {
            var /** @type {?} */ key = event.key;
            if (key == null) {
                key = event.keyIdentifier;
                // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
                // Safari cf
                // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
                if (key == null) {
                    return 'Unidentified';
                }
                if (key.startsWith('U+')) {
                    key = String.fromCharCode(parseInt(key.substring(2), 16));
                    if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
                        // There is a bug in Chrome for numeric keypad keys:
                        // https://code.google.com/p/chromium/issues/detail?id=155654
                        // 1, 2, 3 ... are reported as A, B, C ...
                        key = ((_chromeNumKeyPadMap))[key];
                    }
                }
            }
            return _keyMap[key] || key;
        };
        /**
         * @param {?} doc
         * @param {?} target
         * @return {?}
         */
        BrowserDomAdapter.prototype.getGlobalEventTarget = function (doc, target) {
            if (target === 'window') {
                return window;
            }
            if (target === 'document') {
                return document;
            }
            if (target === 'body') {
                return document.body;
            }
            return null;
        };
        /**
         * @return {?}
         */
        BrowserDomAdapter.prototype.getHistory = function () { return window.history; };
        /**
         * @return {?}
         */
        BrowserDomAdapter.prototype.getLocation = function () { return window.location; };
        /**
         * @param {?} doc
         * @return {?}
         */
        BrowserDomAdapter.prototype.getBaseHref = function (doc) {
            var /** @type {?} */ href = getBaseElementHref();
            return href == null ? null : relativePath(href);
        };
        /**
         * @return {?}
         */
        BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };
        /**
         * @return {?}
         */
        BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };
        /**
         * @param {?} element
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        BrowserDomAdapter.prototype.setData = function (element, name, value) {
            this.setAttribute(element, 'data-' + name, value);
        };
        /**
         * @param {?} element
         * @param {?} name
         * @return {?}
         */
        BrowserDomAdapter.prototype.getData = function (element, name) {
            return this.getAttribute(element, 'data-' + name);
        };
        /**
         * @param {?} element
         * @return {?}
         */
        BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };
        /**
         * @return {?}
         */
        BrowserDomAdapter.prototype.supportsWebAnimation = function () {
            return typeof ((Element)).prototype['animate'] === 'function';
        };
        /**
         * @return {?}
         */
        BrowserDomAdapter.prototype.performanceNow = function () {
            // performance.now() is not available in all browsers, see
            // http://caniuse.com/#search=performance.now
            return window.performance && window.performance.now ? window.performance.now() :
                new Date().getTime();
        };
        /**
         * @return {?}
         */
        BrowserDomAdapter.prototype.supportsCookies = function () { return true; };
        /**
         * @param {?} name
         * @return {?}
         */
        BrowserDomAdapter.prototype.getCookie = function (name) { return parseCookieValue(document.cookie, name); };
        /**
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        BrowserDomAdapter.prototype.setCookie = function (name, value) {
            // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does
            // not clear other cookies.
            document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
        };
        return BrowserDomAdapter;
    }(GenericBrowserDomAdapter));
    var baseElement = null;
    /**
     * @return {?}
     */
    function getBaseElementHref() {
        if (!baseElement) {
            baseElement = ((document.querySelector('base')));
            if (!baseElement) {
                return null;
            }
        }
        return baseElement.getAttribute('href');
    }
    // based on urlUtils.js in AngularJS 1
    var urlParsingNode;
    /**
     * @param {?} url
     * @return {?}
     */
    function relativePath(url) {
        if (!urlParsingNode) {
            urlParsingNode = document.createElement('a');
        }
        urlParsingNode.setAttribute('href', url);
        return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
            '/' + urlParsingNode.pathname;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * A DI Token representing the main rendering context. In a browser this is the DOM Document.
     *
     * Note: Document might not be available in the Application Context when Application and Rendering
     * Contexts are not the same (e.g. when running the application into a Web Worker).
     *
     * @deprecated import from `\@angular/common` instead.
     */
    var DOCUMENT$1 = DOCUMENT;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     * @return {?}
     */
    function supportsState() {
        return !!window.history.pushState;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
     * This class should not be used directly by an application developer. Instead, use
     * {\@link Location}.
     */
    var BrowserPlatformLocation = (function (_super) {
        __extends(BrowserPlatformLocation, _super);
        /**
         * @param {?} _doc
         */
        function BrowserPlatformLocation(_doc) {
            var _this = _super.call(this) || this;
            _this._doc = _doc;
            _this._init();
            return _this;
        }
        /**
         * \@internal
         * @return {?}
         */
        BrowserPlatformLocation.prototype._init = function () {
            this._location = getDOM().getLocation();
            this._history = getDOM().getHistory();
        };
        Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
            /**
             * @return {?}
             */
            get: function () { return this._location; },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return ((getDOM().getBaseHref(this._doc))); };
        /**
         * @param {?} fn
         * @return {?}
         */
        BrowserPlatformLocation.prototype.onPopState = function (fn) {
            getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        BrowserPlatformLocation.prototype.onHashChange = function (fn) {
            getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);
        };
        Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
            /**
             * @return {?}
             */
            get: function () { return this._location.pathname; },
            /**
             * @param {?} newPath
             * @return {?}
             */
            set: function (newPath) { this._location.pathname = newPath; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
            /**
             * @return {?}
             */
            get: function () { return this._location.search; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
            /**
             * @return {?}
             */
            get: function () { return this._location.hash; },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} state
         * @param {?} title
         * @param {?} url
         * @return {?}
         */
        BrowserPlatformLocation.prototype.pushState = function (state, title, url) {
            if (supportsState()) {
                this._history.pushState(state, title, url);
            }
            else {
                this._location.hash = url;
            }
        };
        /**
         * @param {?} state
         * @param {?} title
         * @param {?} url
         * @return {?}
         */
        BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {
            if (supportsState()) {
                this._history.replaceState(state, title, url);
            }
            else {
                this._location.hash = url;
            }
        };
        /**
         * @return {?}
         */
        BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };
        /**
         * @return {?}
         */
        BrowserPlatformLocation.prototype.back = function () { this._history.back(); };
        return BrowserPlatformLocation;
    }(PlatformLocation));
    BrowserPlatformLocation.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    BrowserPlatformLocation.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * A service that can be used to get and add meta tags.
     *
     * \@experimental
     */
    var Meta = (function () {
        /**
         * @param {?} _doc
         */
        function Meta(_doc) {
            this._doc = _doc;
            this._dom = getDOM();
        }
        /**
         * @param {?} tag
         * @param {?=} forceCreation
         * @return {?}
         */
        Meta.prototype.addTag = function (tag, forceCreation) {
            if (forceCreation === void 0) { forceCreation = false; }
            if (!tag)
                return null;
            return this._getOrCreateElement(tag, forceCreation);
        };
        /**
         * @param {?} tags
         * @param {?=} forceCreation
         * @return {?}
         */
        Meta.prototype.addTags = function (tags, forceCreation) {
            var _this = this;
            if (forceCreation === void 0) { forceCreation = false; }
            if (!tags)
                return [];
            return tags.reduce(function (result, tag) {
                if (tag) {
                    result.push(_this._getOrCreateElement(tag, forceCreation));
                }
                return result;
            }, []);
        };
        /**
         * @param {?} attrSelector
         * @return {?}
         */
        Meta.prototype.getTag = function (attrSelector) {
            if (!attrSelector)
                return null;
            return this._dom.querySelector(this._doc, "meta[" + attrSelector + "]");
        };
        /**
         * @param {?} attrSelector
         * @return {?}
         */
        Meta.prototype.getTags = function (attrSelector) {
            if (!attrSelector)
                return [];
            var /** @type {?} */ list /*NodeList*/ = this._dom.querySelectorAll(this._doc, "meta[" + attrSelector + "]");
            return list ? [].slice.call(list) : [];
        };
        /**
         * @param {?} tag
         * @param {?=} selector
         * @return {?}
         */
        Meta.prototype.updateTag = function (tag, selector) {
            if (!tag)
                return null;
            selector = selector || this._parseSelector(tag);
            var /** @type {?} */ meta = ((this.getTag(selector)));
            if (meta) {
                return this._setMetaElementAttributes(tag, meta);
            }
            return this._getOrCreateElement(tag, true);
        };
        /**
         * @param {?} attrSelector
         * @return {?}
         */
        Meta.prototype.removeTag = function (attrSelector) { this.removeTagElement(/** @type {?} */ ((this.getTag(attrSelector)))); };
        /**
         * @param {?} meta
         * @return {?}
         */
        Meta.prototype.removeTagElement = function (meta) {
            if (meta) {
                this._dom.remove(meta);
            }
        };
        /**
         * @param {?} meta
         * @param {?=} forceCreation
         * @return {?}
         */
        Meta.prototype._getOrCreateElement = function (meta, forceCreation) {
            if (forceCreation === void 0) { forceCreation = false; }
            if (!forceCreation) {
                var /** @type {?} */ selector = this._parseSelector(meta);
                var /** @type {?} */ elem = ((this.getTag(selector)));
                // It's allowed to have multiple elements with the same name so it's not enough to
                // just check that element with the same name already present on the page. We also need to
                // check if element has tag attributes
                if (elem && this._containsAttributes(meta, elem))
                    return elem;
            }
            var /** @type {?} */ element = (this._dom.createElement('meta'));
            this._setMetaElementAttributes(meta, element);
            var /** @type {?} */ head = this._dom.getElementsByTagName(this._doc, 'head')[0];
            this._dom.appendChild(head, element);
            return element;
        };
        /**
         * @param {?} tag
         * @param {?} el
         * @return {?}
         */
        Meta.prototype._setMetaElementAttributes = function (tag, el) {
            var _this = this;
            Object.keys(tag).forEach(function (prop) { return _this._dom.setAttribute(el, prop, tag[prop]); });
            return el;
        };
        /**
         * @param {?} tag
         * @return {?}
         */
        Meta.prototype._parseSelector = function (tag) {
            var /** @type {?} */ attr = tag.name ? 'name' : 'property';
            return attr + "=\"" + tag[attr] + "\"";
        };
        /**
         * @param {?} tag
         * @param {?} elem
         * @return {?}
         */
        Meta.prototype._containsAttributes = function (tag, elem) {
            var _this = this;
            return Object.keys(tag).every(function (key) { return _this._dom.getAttribute(elem, key) === tag[key]; });
        };
        return Meta;
    }());
    Meta.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    Meta.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * An id that identifies a particular application being bootstrapped, that should
     * match across the client/server boundary.
     */
    var TRANSITION_ID = new InjectionToken('TRANSITION_ID');
    /**
     * @param {?} transitionId
     * @param {?} document
     * @param {?} injector
     * @return {?}
     */
    function appInitializerFactory(transitionId, document, injector) {
        return function () {
            // Wait for all application initializers to be completed before removing the styles set by
            // the server.
            injector.get(ApplicationInitStatus).donePromise.then(function () {
                var /** @type {?} */ dom = getDOM();
                var /** @type {?} */ styles = Array.prototype.slice.apply(dom.querySelectorAll(document, "style[ng-transition]"));
                styles.filter(function (el) { return dom.getAttribute(el, 'ng-transition') === transitionId; })
                    .forEach(function (el) { return dom.remove(el); });
            });
        };
    }
    var SERVER_TRANSITION_PROVIDERS = [
        {
            provide: APP_INITIALIZER,
            useFactory: appInitializerFactory,
            deps: [TRANSITION_ID, DOCUMENT$1, Injector],
            multi: true
        },
    ];
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var BrowserGetTestability = (function () {
        function BrowserGetTestability() {
        }
        /**
         * @return {?}
         */
        BrowserGetTestability.init = function () { setTestabilityGetter(new BrowserGetTestability()); };
        /**
         * @param {?} registry
         * @return {?}
         */
        BrowserGetTestability.prototype.addToWindow = function (registry) {
            _global['getAngularTestability'] = function (elem, findInAncestors) {
                if (findInAncestors === void 0) { findInAncestors = true; }
                var /** @type {?} */ testability = registry.findTestabilityInTree(elem, findInAncestors);
                if (testability == null) {
                    throw new Error('Could not find testability for element.');
                }
                return testability;
            };
            _global['getAllAngularTestabilities'] = function () { return registry.getAllTestabilities(); };
            _global['getAllAngularRootElements'] = function () { return registry.getAllRootElements(); };
            var /** @type {?} */ whenAllStable = function (callback /** TODO #9100 */) {
                var /** @type {?} */ testabilities = _global['getAllAngularTestabilities']();
                var /** @type {?} */ count = testabilities.length;
                var /** @type {?} */ didWork = false;
                var /** @type {?} */ decrement = function (didWork_ /** TODO #9100 */) {
                    didWork = didWork || didWork_;
                    count--;
                    if (count == 0) {
                        callback(didWork);
                    }
                };
                testabilities.forEach(function (testability /** TODO #9100 */) {
                    testability.whenStable(decrement);
                });
            };
            if (!_global['frameworkStabilizers']) {
                _global['frameworkStabilizers'] = [];
            }
            _global['frameworkStabilizers'].push(whenAllStable);
        };
        /**
         * @param {?} registry
         * @param {?} elem
         * @param {?} findInAncestors
         * @return {?}
         */
        BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
            if (elem == null) {
                return null;
            }
            var /** @type {?} */ t = registry.getTestability(elem);
            if (t != null) {
                return t;
            }
            else if (!findInAncestors) {
                return null;
            }
            if (getDOM().isShadowRoot(elem)) {
                return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
            }
            return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
        };
        return BrowserGetTestability;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * A service that can be used to get and set the title of a current HTML document.
     *
     * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)
     * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
     * (representing the `<title>` tag). Instead, this service can be used to set and get the current
     * title value.
     *
     * \@experimental
     */
    var Title = (function () {
        /**
         * @param {?} _doc
         */
        function Title(_doc) {
            this._doc = _doc;
        }
        /**
         * Get the title of the current HTML document.
         * @return {?}
         */
        Title.prototype.getTitle = function () { return getDOM().getTitle(this._doc); };
        /**
         * Set the title of the current HTML document.
         * @param {?} newTitle
         * @return {?}
         */
        Title.prototype.setTitle = function (newTitle) { getDOM().setTitle(this._doc, newTitle); };
        return Title;
    }());
    Title.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    Title.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} input
     * @return {?}
     */
    /**
     * @param {?} input
     * @return {?}
     */
    /**
     * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if
     * `name` is `'probe'`.
     * @param {?} name Name under which it will be exported. Keep in mind this will be a property of the
     * global `ng` object.
     * @param {?} value The value to export.
     * @return {?}
     */
    function exportNgVar(name, value) {
        if (!ng) {
            _global['ng'] = ng = ((_global['ng'])) || {};
        }
        ng[name] = value;
    }
    var ng;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var CORE_TOKENS = {
        'ApplicationRef': ApplicationRef,
        'NgZone': NgZone,
    };
    var INSPECT_GLOBAL_NAME = 'probe';
    var CORE_TOKENS_GLOBAL_NAME = 'coreTokens';
    /**
     * Returns a {\@link DebugElement} for the given native DOM element, or
     * null if the given native element does not have an Angular view associated
     * with it.
     * @param {?} element
     * @return {?}
     */
    function inspectNativeElement(element) {
        return getDebugNode(element);
    }
    /**
     * Deprecated. Use the one from '\@angular/core'.
     * @deprecated
     */
    var NgProbeToken$1 = (function () {
        /**
         * @param {?} name
         * @param {?} token
         */
        function NgProbeToken$1(name, token) {
            this.name = name;
            this.token = token;
        }
        return NgProbeToken$1;
    }());
    /**
     * @param {?} extraTokens
     * @param {?} coreTokens
     * @return {?}
     */
    function _createNgProbe(extraTokens, coreTokens) {
        var /** @type {?} */ tokens = (extraTokens || []).concat(coreTokens || []);
        exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
        exportNgVar(CORE_TOKENS_GLOBAL_NAME, Object.assign({}, CORE_TOKENS, _ngProbeTokensToMap(tokens || [])));
        return function () { return inspectNativeElement; };
    }
    /**
     * @param {?} tokens
     * @return {?}
     */
    function _ngProbeTokensToMap(tokens) {
        return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});
    }
    /**
     * Providers which support debugging Angular applications (e.g. via `ng.probe`).
     */
    var ELEMENT_PROBE_PROVIDERS = [
        {
            provide: APP_INITIALIZER,
            useFactory: _createNgProbe,
            deps: [
                [NgProbeToken$1, new Optional()],
                [NgProbeToken, new Optional()],
            ],
            multi: true,
        },
    ];
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@stable
     */
    var EVENT_MANAGER_PLUGINS = new InjectionToken('EventManagerPlugins');
    /**
     * \@stable
     */
    var EventManager = (function () {
        /**
         * @param {?} plugins
         * @param {?} _zone
         */
        function EventManager(plugins, _zone) {
            var _this = this;
            this._zone = _zone;
            this._eventNameToPlugin = new Map();
            plugins.forEach(function (p) { return p.manager = _this; });
            this._plugins = plugins.slice().reverse();
        }
        /**
         * @param {?} element
         * @param {?} eventName
         * @param {?} handler
         * @return {?}
         */
        EventManager.prototype.addEventListener = function (element, eventName, handler) {
            var /** @type {?} */ plugin = this._findPluginFor(eventName);
            return plugin.addEventListener(element, eventName, handler);
        };
        /**
         * @param {?} target
         * @param {?} eventName
         * @param {?} handler
         * @return {?}
         */
        EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
            var /** @type {?} */ plugin = this._findPluginFor(eventName);
            return plugin.addGlobalEventListener(target, eventName, handler);
        };
        /**
         * @return {?}
         */
        EventManager.prototype.getZone = function () { return this._zone; };
        /**
         * \@internal
         * @param {?} eventName
         * @return {?}
         */
        EventManager.prototype._findPluginFor = function (eventName) {
            var /** @type {?} */ plugin = this._eventNameToPlugin.get(eventName);
            if (plugin) {
                return plugin;
            }
            var /** @type {?} */ plugins = this._plugins;
            for (var /** @type {?} */ i = 0; i < plugins.length; i++) {
                var /** @type {?} */ plugin_1 = plugins[i];
                if (plugin_1.supports(eventName)) {
                    this._eventNameToPlugin.set(eventName, plugin_1);
                    return plugin_1;
                }
            }
            throw new Error("No event manager plugin found for event " + eventName);
        };
        return EventManager;
    }());
    EventManager.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    EventManager.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Inject, args: [EVENT_MANAGER_PLUGINS,] },] },
        { type: NgZone, },
    ]; };
    /**
     * @abstract
     */
    var EventManagerPlugin = (function () {
        /**
         * @param {?} _doc
         */
        function EventManagerPlugin(_doc) {
            this._doc = _doc;
        }
        /**
         * @abstract
         * @param {?} eventName
         * @return {?}
         */
        EventManagerPlugin.prototype.supports = function (eventName) { };
        /**
         * @abstract
         * @param {?} element
         * @param {?} eventName
         * @param {?} handler
         * @return {?}
         */
        EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) { };
        /**
         * @param {?} element
         * @param {?} eventName
         * @param {?} handler
         * @return {?}
         */
        EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
            var /** @type {?} */ target = getDOM().getGlobalEventTarget(this._doc, element);
            if (!target) {
                throw new Error("Unsupported event target " + target + " for event " + eventName);
            }
            return this.addEventListener(target, eventName, handler);
        };
        return EventManagerPlugin;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var SharedStylesHost = (function () {
        function SharedStylesHost() {
            /**
             * \@internal
             */
            this._stylesSet = new Set();
        }
        /**
         * @param {?} styles
         * @return {?}
         */
        SharedStylesHost.prototype.addStyles = function (styles) {
            var _this = this;
            var /** @type {?} */ additions = new Set();
            styles.forEach(function (style) {
                if (!_this._stylesSet.has(style)) {
                    _this._stylesSet.add(style);
                    additions.add(style);
                }
            });
            this.onStylesAdded(additions);
        };
        /**
         * @param {?} additions
         * @return {?}
         */
        SharedStylesHost.prototype.onStylesAdded = function (additions) { };
        /**
         * @return {?}
         */
        SharedStylesHost.prototype.getAllStyles = function () { return Array.from(this._stylesSet); };
        return SharedStylesHost;
    }());
    SharedStylesHost.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    SharedStylesHost.ctorParameters = function () { return []; };
    var DomSharedStylesHost = (function (_super) {
        __extends(DomSharedStylesHost, _super);
        /**
         * @param {?} _doc
         */
        function DomSharedStylesHost(_doc) {
            var _this = _super.call(this) || this;
            _this._doc = _doc;
            _this._hostNodes = new Set();
            _this._styleNodes = new Set();
            _this._hostNodes.add(_doc.head);
            return _this;
        }
        /**
         * @param {?} styles
         * @param {?} host
         * @return {?}
         */
        DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
            var _this = this;
            styles.forEach(function (style) {
                var /** @type {?} */ styleEl = _this._doc.createElement('style');
                styleEl.textContent = style;
                _this._styleNodes.add(host.appendChild(styleEl));
            });
        };
        /**
         * @param {?} hostNode
         * @return {?}
         */
        DomSharedStylesHost.prototype.addHost = function (hostNode) {
            this._addStylesToHost(this._stylesSet, hostNode);
            this._hostNodes.add(hostNode);
        };
        /**
         * @param {?} hostNode
         * @return {?}
         */
        DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };
        /**
         * @param {?} additions
         * @return {?}
         */
        DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
            var _this = this;
            this._hostNodes.forEach(function (hostNode) { return _this._addStylesToHost(additions, hostNode); });
        };
        /**
         * @return {?}
         */
        DomSharedStylesHost.prototype.ngOnDestroy = function () { this._styleNodes.forEach(function (styleNode) { return getDOM().remove(styleNode); }); };
        return DomSharedStylesHost;
    }(SharedStylesHost));
    DomSharedStylesHost.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    DomSharedStylesHost.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var NAMESPACE_URIS = {
        'svg': 'http://www.w3.org/2000/svg',
        'xhtml': 'http://www.w3.org/1999/xhtml',
        'xlink': 'http://www.w3.org/1999/xlink',
        'xml': 'http://www.w3.org/XML/1998/namespace',
        'xmlns': 'http://www.w3.org/2000/xmlns/',
    };
    var COMPONENT_REGEX = /%COMP%/g;
    var COMPONENT_VARIABLE = '%COMP%';
    var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
    var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
    /**
     * @param {?} componentShortId
     * @return {?}
     */
    function shimContentAttribute(componentShortId) {
        return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
    }
    /**
     * @param {?} componentShortId
     * @return {?}
     */
    function shimHostAttribute(componentShortId) {
        return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
    }
    /**
     * @param {?} compId
     * @param {?} styles
     * @param {?} target
     * @return {?}
     */
    function flattenStyles(compId, styles, target) {
        for (var /** @type {?} */ i = 0; i < styles.length; i++) {
            var /** @type {?} */ style = styles[i];
            if (Array.isArray(style)) {
                flattenStyles(compId, style, target);
            }
            else {
                style = style.replace(COMPONENT_REGEX, compId);
                target.push(style);
            }
        }
        return target;
    }
    /**
     * @param {?} eventHandler
     * @return {?}
     */
    function decoratePreventDefault(eventHandler) {
        return function (event) {
            var /** @type {?} */ allowDefaultBehavior = eventHandler(event);
            if (allowDefaultBehavior === false) {
                // TODO(tbosch): move preventDefault into event plugins...
                event.preventDefault();
                event.returnValue = false;
            }
        };
    }
    var DomRendererFactory2 = (function () {
        /**
         * @param {?} eventManager
         * @param {?} sharedStylesHost
         */
        function DomRendererFactory2(eventManager, sharedStylesHost) {
            this.eventManager = eventManager;
            this.sharedStylesHost = sharedStylesHost;
            this.rendererByCompId = new Map();
            this.defaultRenderer = new DefaultDomRenderer2(eventManager);
        }
        /**
         * @param {?} element
         * @param {?} type
         * @return {?}
         */
        DomRendererFactory2.prototype.createRenderer = function (element, type) {
            if (!element || !type) {
                return this.defaultRenderer;
            }
            switch (type.encapsulation) {
                case ViewEncapsulation.Emulated: {
                    var /** @type {?} */ renderer = this.rendererByCompId.get(type.id);
                    if (!renderer) {
                        renderer =
                            new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);
                        this.rendererByCompId.set(type.id, renderer);
                    }
                    ((renderer)).applyToHost(element);
                    return renderer;
                }
                case ViewEncapsulation.Native:
                    return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);
                default: {
                    if (!this.rendererByCompId.has(type.id)) {
                        var /** @type {?} */ styles = flattenStyles(type.id, type.styles, []);
                        this.sharedStylesHost.addStyles(styles);
                        this.rendererByCompId.set(type.id, this.defaultRenderer);
                    }
                    return this.defaultRenderer;
                }
            }
        };
        /**
         * @return {?}
         */
        DomRendererFactory2.prototype.begin = function () { };
        /**
         * @return {?}
         */
        DomRendererFactory2.prototype.end = function () { };
        return DomRendererFactory2;
    }());
    DomRendererFactory2.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    DomRendererFactory2.ctorParameters = function () { return [
        { type: EventManager, },
        { type: DomSharedStylesHost, },
    ]; };
    var DefaultDomRenderer2 = (function () {
        /**
         * @param {?} eventManager
         */
        function DefaultDomRenderer2(eventManager) {
            this.eventManager = eventManager;
            this.data = Object.create(null);
        }
        /**
         * @return {?}
         */
        DefaultDomRenderer2.prototype.destroy = function () { };
        /**
         * @param {?} name
         * @param {?=} namespace
         * @return {?}
         */
        DefaultDomRenderer2.prototype.createElement = function (name, namespace) {
            if (namespace) {
                return document.createElementNS(NAMESPACE_URIS[namespace], name);
            }
            return document.createElement(name);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        DefaultDomRenderer2.prototype.createComment = function (value) { return document.createComment(value); };
        /**
         * @param {?} value
         * @return {?}
         */
        DefaultDomRenderer2.prototype.createText = function (value) { return document.createTextNode(value); };
        /**
         * @param {?} parent
         * @param {?} newChild
         * @return {?}
         */
        DefaultDomRenderer2.prototype.appendChild = function (parent, newChild) { parent.appendChild(newChild); };
        /**
         * @param {?} parent
         * @param {?} newChild
         * @param {?} refChild
         * @return {?}
         */
        DefaultDomRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {
            if (parent) {
                parent.insertBefore(newChild, refChild);
            }
        };
        /**
         * @param {?} parent
         * @param {?} oldChild
         * @return {?}
         */
        DefaultDomRenderer2.prototype.removeChild = function (parent, oldChild) {
            if (parent) {
                parent.removeChild(oldChild);
            }
        };
        /**
         * @param {?} selectorOrNode
         * @return {?}
         */
        DefaultDomRenderer2.prototype.selectRootElement = function (selectorOrNode) {
            var /** @type {?} */ el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :
                selectorOrNode;
            if (!el) {
                throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
            }
            el.textContent = '';
            return el;
        };
        /**
         * @param {?} node
         * @return {?}
         */
        DefaultDomRenderer2.prototype.parentNode = function (node) { return node.parentNode; };
        /**
         * @param {?} node
         * @return {?}
         */
        DefaultDomRenderer2.prototype.nextSibling = function (node) { return node.nextSibling; };
        /**
         * @param {?} el
         * @param {?} name
         * @param {?} value
         * @param {?=} namespace
         * @return {?}
         */
        DefaultDomRenderer2.prototype.setAttribute = function (el, name, value, namespace) {
            if (namespace) {
                name = namespace + ":" + name;
                var /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];
                if (namespaceUri) {
                    el.setAttributeNS(namespaceUri, name, value);
                }
                else {
                    el.setAttribute(name, value);
                }
            }
            else {
                el.setAttribute(name, value);
            }
        };
        /**
         * @param {?} el
         * @param {?} name
         * @param {?=} namespace
         * @return {?}
         */
        DefaultDomRenderer2.prototype.removeAttribute = function (el, name, namespace) {
            if (namespace) {
                var /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];
                if (namespaceUri) {
                    el.removeAttributeNS(namespaceUri, name);
                }
                else {
                    el.removeAttribute(namespace + ":" + name);
                }
            }
            else {
                el.removeAttribute(name);
            }
        };
        /**
         * @param {?} el
         * @param {?} name
         * @return {?}
         */
        DefaultDomRenderer2.prototype.addClass = function (el, name) { el.classList.add(name); };
        /**
         * @param {?} el
         * @param {?} name
         * @return {?}
         */
        DefaultDomRenderer2.prototype.removeClass = function (el, name) { el.classList.remove(name); };
        /**
         * @param {?} el
         * @param {?} style
         * @param {?} value
         * @param {?} flags
         * @return {?}
         */
        DefaultDomRenderer2.prototype.setStyle = function (el, style, value, flags) {
            if (flags & RendererStyleFlags2.DashCase) {
                el.style.setProperty(style, value, !!(flags & RendererStyleFlags2.Important) ? 'important' : '');
            }
            else {
                el.style[style] = value;
            }
        };
        /**
         * @param {?} el
         * @param {?} style
         * @param {?} flags
         * @return {?}
         */
        DefaultDomRenderer2.prototype.removeStyle = function (el, style, flags) {
            if (flags & RendererStyleFlags2.DashCase) {
                el.style.removeProperty(style);
            }
            else {
                // IE requires '' instead of null
                // see https://github.com/angular/angular/issues/7916
                el.style[style] = '';
            }
        };
        /**
         * @param {?} el
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        DefaultDomRenderer2.prototype.setProperty = function (el, name, value) {
            checkNoSyntheticProp(name, 'property');
            el[name] = value;
        };
        /**
         * @param {?} node
         * @param {?} value
         * @return {?}
         */
        DefaultDomRenderer2.prototype.setValue = function (node, value) { node.nodeValue = value; };
        /**
         * @param {?} target
         * @param {?} event
         * @param {?} callback
         * @return {?}
         */
        DefaultDomRenderer2.prototype.listen = function (target, event, callback) {
            checkNoSyntheticProp(event, 'listener');
            if (typeof target === 'string') {
                return (this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback)));
            }
            return ((this.eventManager.addEventListener(target, event, decoratePreventDefault(callback))));
        };
        return DefaultDomRenderer2;
    }());
    var AT_CHARCODE = '@'.charCodeAt(0);
    /**
     * @param {?} name
     * @param {?} nameKind
     * @return {?}
     */
    function checkNoSyntheticProp(name, nameKind) {
        if (name.charCodeAt(0) === AT_CHARCODE) {
            throw new Error("Found the synthetic " + nameKind + " " + name + ". Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.");
        }
    }
    var EmulatedEncapsulationDomRenderer2 = (function (_super) {
        __extends(EmulatedEncapsulationDomRenderer2, _super);
        /**
         * @param {?} eventManager
         * @param {?} sharedStylesHost
         * @param {?} component
         */
        function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component) {
            var _this = _super.call(this, eventManager) || this;
            _this.component = component;
            var styles = flattenStyles(component.id, component.styles, []);
            sharedStylesHost.addStyles(styles);
            _this.contentAttr = shimContentAttribute(component.id);
            _this.hostAttr = shimHostAttribute(component.id);
            return _this;
        }
        /**
         * @param {?} element
         * @return {?}
         */
        EmulatedEncapsulationDomRenderer2.prototype.applyToHost = function (element) { _super.prototype.setAttribute.call(this, element, this.hostAttr, ''); };
        /**
         * @param {?} parent
         * @param {?} name
         * @return {?}
         */
        EmulatedEncapsulationDomRenderer2.prototype.createElement = function (parent, name) {
            var /** @type {?} */ el = _super.prototype.createElement.call(this, parent, name);
            _super.prototype.setAttribute.call(this, el, this.contentAttr, '');
            return el;
        };
        return EmulatedEncapsulationDomRenderer2;
    }(DefaultDomRenderer2));
    var ShadowDomRenderer = (function (_super) {
        __extends(ShadowDomRenderer, _super);
        /**
         * @param {?} eventManager
         * @param {?} sharedStylesHost
         * @param {?} hostEl
         * @param {?} component
         */
        function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {
            var _this = _super.call(this, eventManager) || this;
            _this.sharedStylesHost = sharedStylesHost;
            _this.hostEl = hostEl;
            _this.component = component;
            _this.shadowRoot = hostEl.createShadowRoot();
            _this.sharedStylesHost.addHost(_this.shadowRoot);
            var styles = flattenStyles(component.id, component.styles, []);
            for (var i = 0; i < styles.length; i++) {
                var styleEl = document.createElement('style');
                styleEl.textContent = styles[i];
                _this.shadowRoot.appendChild(styleEl);
            }
            return _this;
        }
        /**
         * @param {?} node
         * @return {?}
         */
        ShadowDomRenderer.prototype.nodeOrShadowRoot = function (node) { return node === this.hostEl ? this.shadowRoot : node; };
        /**
         * @return {?}
         */
        ShadowDomRenderer.prototype.destroy = function () { this.sharedStylesHost.removeHost(this.shadowRoot); };
        /**
         * @param {?} parent
         * @param {?} newChild
         * @return {?}
         */
        ShadowDomRenderer.prototype.appendChild = function (parent, newChild) {
            return _super.prototype.appendChild.call(this, this.nodeOrShadowRoot(parent), newChild);
        };
        /**
         * @param {?} parent
         * @param {?} newChild
         * @param {?} refChild
         * @return {?}
         */
        ShadowDomRenderer.prototype.insertBefore = function (parent, newChild, refChild) {
            return _super.prototype.insertBefore.call(this, this.nodeOrShadowRoot(parent), newChild, refChild);
        };
        /**
         * @param {?} parent
         * @param {?} oldChild
         * @return {?}
         */
        ShadowDomRenderer.prototype.removeChild = function (parent, oldChild) {
            return _super.prototype.removeChild.call(this, this.nodeOrShadowRoot(parent), oldChild);
        };
        /**
         * @param {?} node
         * @return {?}
         */
        ShadowDomRenderer.prototype.parentNode = function (node) {
            return this.nodeOrShadowRoot(_super.prototype.parentNode.call(this, this.nodeOrShadowRoot(node)));
        };
        return ShadowDomRenderer;
    }(DefaultDomRenderer2));
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var DomEventsPlugin = (function (_super) {
        __extends(DomEventsPlugin, _super);
        /**
         * @param {?} doc
         */
        function DomEventsPlugin(doc) {
            return _super.call(this, doc) || this;
        }
        /**
         * @param {?} eventName
         * @return {?}
         */
        DomEventsPlugin.prototype.supports = function (eventName) { return true; };
        /**
         * @param {?} element
         * @param {?} eventName
         * @param {?} handler
         * @return {?}
         */
        DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
            element.addEventListener(eventName, /** @type {?} */ (handler), false);
            return function () { return element.removeEventListener(eventName, /** @type {?} */ (handler), false); };
        };
        return DomEventsPlugin;
    }(EventManagerPlugin));
    DomEventsPlugin.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    DomEventsPlugin.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var EVENT_NAMES = {
        // pan
        'pan': true,
        'panstart': true,
        'panmove': true,
        'panend': true,
        'pancancel': true,
        'panleft': true,
        'panright': true,
        'panup': true,
        'pandown': true,
        // pinch
        'pinch': true,
        'pinchstart': true,
        'pinchmove': true,
        'pinchend': true,
        'pinchcancel': true,
        'pinchin': true,
        'pinchout': true,
        // press
        'press': true,
        'pressup': true,
        // rotate
        'rotate': true,
        'rotatestart': true,
        'rotatemove': true,
        'rotateend': true,
        'rotatecancel': true,
        // swipe
        'swipe': true,
        'swipeleft': true,
        'swiperight': true,
        'swipeup': true,
        'swipedown': true,
        // tap
        'tap': true,
    };
    /**
     * A DI token that you can use to provide{\@link HammerGestureConfig} to Angular. Use it to configure
     * Hammer gestures.
     *
     * \@experimental
     */
    var HAMMER_GESTURE_CONFIG = new InjectionToken('HammerGestureConfig');
    /**
     * \@experimental
     */
    var HammerGestureConfig = (function () {
        function HammerGestureConfig() {
            this.events = [];
            this.overrides = {};
        }
        /**
         * @param {?} element
         * @return {?}
         */
        HammerGestureConfig.prototype.buildHammer = function (element) {
            var /** @type {?} */ mc = new Hammer(element);
            mc.get('pinch').set({ enable: true });
            mc.get('rotate').set({ enable: true });
            for (var /** @type {?} */ eventName in this.overrides) {
                mc.get(eventName).set(this.overrides[eventName]);
            }
            return mc;
        };
        return HammerGestureConfig;
    }());
    HammerGestureConfig.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    HammerGestureConfig.ctorParameters = function () { return []; };
    var HammerGesturesPlugin = (function (_super) {
        __extends(HammerGesturesPlugin, _super);
        /**
         * @param {?} doc
         * @param {?} _config
         */
        function HammerGesturesPlugin(doc, _config) {
            var _this = _super.call(this, doc) || this;
            _this._config = _config;
            return _this;
        }
        /**
         * @param {?} eventName
         * @return {?}
         */
        HammerGesturesPlugin.prototype.supports = function (eventName) {
            if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
                return false;
            }
            if (!((window)).Hammer) {
                throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
            }
            return true;
        };
        /**
         * @param {?} element
         * @param {?} eventName
         * @param {?} handler
         * @return {?}
         */
        HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
            var _this = this;
            var /** @type {?} */ zone = this.manager.getZone();
            eventName = eventName.toLowerCase();
            return zone.runOutsideAngular(function () {
                // Creating the manager bind events, must be done outside of angular
                var /** @type {?} */ mc = _this._config.buildHammer(element);
                var /** @type {?} */ callback = function (eventObj) {
                    zone.runGuarded(function () { handler(eventObj); });
                };
                mc.on(eventName, callback);
                return function () { return mc.off(eventName, callback); };
            });
        };
        /**
         * @param {?} eventName
         * @return {?}
         */
        HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };
        return HammerGesturesPlugin;
    }(EventManagerPlugin));
    HammerGesturesPlugin.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    HammerGesturesPlugin.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
        { type: HammerGestureConfig, decorators: [{ type: Inject, args: [HAMMER_GESTURE_CONFIG,] },] },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
    var MODIFIER_KEY_GETTERS = {
        'alt': function (event) { return event.altKey; },
        'control': function (event) { return event.ctrlKey; },
        'meta': function (event) { return event.metaKey; },
        'shift': function (event) { return event.shiftKey; }
    };
    /**
     * \@experimental
     */
    var KeyEventsPlugin = (function (_super) {
        __extends(KeyEventsPlugin, _super);
        /**
         * @param {?} doc
         */
        function KeyEventsPlugin(doc) {
            return _super.call(this, doc) || this;
        }
        /**
         * @param {?} eventName
         * @return {?}
         */
        KeyEventsPlugin.prototype.supports = function (eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; };
        /**
         * @param {?} element
         * @param {?} eventName
         * @param {?} handler
         * @return {?}
         */
        KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
            var /** @type {?} */ parsedEvent = ((KeyEventsPlugin.parseEventName(eventName)));
            var /** @type {?} */ outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
            return this.manager.getZone().runOutsideAngular(function () {
                return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
            });
        };
        /**
         * @param {?} eventName
         * @return {?}
         */
        KeyEventsPlugin.parseEventName = function (eventName) {
            var /** @type {?} */ parts = eventName.toLowerCase().split('.');
            var /** @type {?} */ domEventName = parts.shift();
            if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {
                return null;
            }
            var /** @type {?} */ key = KeyEventsPlugin._normalizeKey(/** @type {?} */ ((parts.pop())));
            var /** @type {?} */ fullKey = '';
            MODIFIER_KEYS.forEach(function (modifierName) {
                var /** @type {?} */ index = parts.indexOf(modifierName);
                if (index > -1) {
                    parts.splice(index, 1);
                    fullKey += modifierName + '.';
                }
            });
            fullKey += key;
            if (parts.length != 0 || key.length === 0) {
                // returning null instead of throwing to let another plugin process the event
                return null;
            }
            var /** @type {?} */ result = {};
            result['domEventName'] = domEventName;
            result['fullKey'] = fullKey;
            return result;
        };
        /**
         * @param {?} event
         * @return {?}
         */
        KeyEventsPlugin.getEventFullKey = function (event) {
            var /** @type {?} */ fullKey = '';
            var /** @type {?} */ key = getDOM().getEventKey(event);
            key = key.toLowerCase();
            if (key === ' ') {
                key = 'space'; // for readability
            }
            else if (key === '.') {
                key = 'dot'; // because '.' is used as a separator in event names
            }
            MODIFIER_KEYS.forEach(function (modifierName) {
                if (modifierName != key) {
                    var /** @type {?} */ modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
                    if (modifierGetter(event)) {
                        fullKey += modifierName + '.';
                    }
                }
            });
            fullKey += key;
            return fullKey;
        };
        /**
         * @param {?} fullKey
         * @param {?} handler
         * @param {?} zone
         * @return {?}
         */
        KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {
            return function (event /** TODO #9100 */) {
                if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
                    zone.runGuarded(function () { return handler(event); });
                }
            };
        };
        /**
         * \@internal
         * @param {?} keyName
         * @return {?}
         */
        KeyEventsPlugin._normalizeKey = function (keyName) {
            // TODO: switch to a Map if the mapping grows too much
            switch (keyName) {
                case 'esc':
                    return 'escape';
                default:
                    return keyName;
            }
        };
        return KeyEventsPlugin;
    }(EventManagerPlugin));
    KeyEventsPlugin.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    KeyEventsPlugin.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML
     * that needs sanitizing.
     * Depending upon browser support we must use one of three strategies for doing this.
     * Support: Safari 10.x -> XHR strategy
     * Support: Firefox -> DomParser strategy
     * Default: InertDocument strategy
     */
    var InertBodyHelper = (function () {
        /**
         * @param {?} defaultDoc
         * @param {?} DOM
         */
        function InertBodyHelper(defaultDoc, DOM) {
            this.defaultDoc = defaultDoc;
            this.DOM = DOM;
            var inertDocument = this.DOM.createHtmlDocument();
            this.inertBodyElement = inertDocument.body;
            if (this.inertBodyElement == null) {
                // usually there should be only one body element in the document, but IE doesn't have any, so
                // we need to create one.
                var inertHtml = this.DOM.createElement('html', inertDocument);
                this.inertBodyElement = this.DOM.createElement('body', inertDocument);
                this.DOM.appendChild(inertHtml, this.inertBodyElement);
                this.DOM.appendChild(inertDocument, inertHtml);
            }
            this.DOM.setInnerHTML(this.inertBodyElement, '<svg><g onload="this.parentNode.remove()"></g></svg>');
            if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {
                // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element
                // so use the XHR strategy.
                this.getInertBodyElement = this.getInertBodyElement_XHR;
                return;
            }
            this.DOM.setInnerHTML(this.inertBodyElement, '<svg><p><style><img src="</style><img src=x onerror=alert(1)//">');
            if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {
                // We just hit the Firefox bug - which prevents the inner img JS from being sanitized
                // so use the DOMParser strategy, if it is available.
                // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we
                // fall through to the default strategy below.
                if (isDOMParserAvailable()) {
                    this.getInertBodyElement = this.getInertBodyElement_DOMParser;
                    return;
                }
            }
            // None of the bugs were hit so it is safe for us to use the default InertDocument strategy
            this.getInertBodyElement = this.getInertBodyElement_InertDocument;
        }
        /**
         * Use XHR to create and fill an inert body element (on Safari 10.1)
         * See
         * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449
         * @param {?} html
         * @return {?}
         */
        InertBodyHelper.prototype.getInertBodyElement_XHR = function (html) {
            // We add these extra elements to ensure that the rest of the content is parsed as expected
            // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the
            // `<head>` tag.
            html = '<body><remove></remove>' + html + '</body>';
            try {
                html = encodeURI(html);
            }
            catch (e) {
                return null;
            }
            var /** @type {?} */ xhr = new XMLHttpRequest();
            xhr.responseType = 'document';
            xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);
            xhr.send(null);
            var /** @type {?} */ body = xhr.response.body;
            body.removeChild(/** @type {?} */ ((body.firstChild)));
            return body;
        };
        /**
         * Use DOMParser to create and fill an inert body element (on Firefox)
         * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7
         *
         * @param {?} html
         * @return {?}
         */
        InertBodyHelper.prototype.getInertBodyElement_DOMParser = function (html) {
            // We add these extra elements to ensure that the rest of the content is parsed as expected
            // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the
            // `<head>` tag.
            html = '<body><remove></remove>' + html + '</body>';
            try {
                var /** @type {?} */ body = (new ((window))
                    .DOMParser()
                    .parseFromString(html, 'text/html')
                    .body);
                body.removeChild(/** @type {?} */ ((body.firstChild)));
                return body;
            }
            catch (e) {
                return null;
            }
        };
        /**
         * Use an HTML5 `template` element, if supported, or an inert body element created via
         * `createHtmlDocument` to create and fill an inert DOM element.
         * This is the default sane strategy to use if the browser does not require one of the specialised
         * strategies above.
         * @param {?} html
         * @return {?}
         */
        InertBodyHelper.prototype.getInertBodyElement_InertDocument = function (html) {
            // Prefer using <template> element if supported.
            var /** @type {?} */ templateEl = this.DOM.createElement('template');
            if ('content' in templateEl) {
                this.DOM.setInnerHTML(templateEl, html);
                return templateEl;
            }
            this.DOM.setInnerHTML(this.inertBodyElement, html);
            // Support: IE 9-11 only
            // strip custom-namespaced attributes on IE<=11
            if (this.defaultDoc.documentMode) {
                this.stripCustomNsAttrs(this.inertBodyElement);
            }
            return this.inertBodyElement;
        };
        /**
         * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
         * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.
         * 'ns1:xlink:foo').
         *
         * This is undesirable since we don't want to allow any of these custom attributes. This method
         * strips them all.
         * @param {?} el
         * @return {?}
         */
        InertBodyHelper.prototype.stripCustomNsAttrs = function (el) {
            var _this = this;
            this.DOM.attributeMap(el).forEach(function (_, attrName) {
                if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
                    _this.DOM.removeAttribute(el, attrName);
                }
            });
            for (var _i = 0, _a = this.DOM.childNodesAsList(el); _i < _a.length; _i++) {
                var n = _a[_i];
                if (this.DOM.isElementNode(n))
                    this.stripCustomNsAttrs(/** @type {?} */ (n));
            }
        };
        return InertBodyHelper;
    }());
    /**
     * We need to determine whether the DOMParser exists in the global context.
     * The try-catch is because, on some browsers, trying to access this property
     * on window can actually throw an error.
     *
     * @suppress {uselessCode}
     * @return {?}
     */
    function isDOMParserAvailable() {
        try {
            return !!((window)).DOMParser;
        }
        catch (e) {
            return false;
        }
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * A pattern that recognizes a commonly useful subset of URLs that are safe.
     *
     * This regular expression matches a subset of URLs that will not cause script
     * execution if used in URL context within a HTML document. Specifically, this
     * regular expression matches if (comment from here on and regex copied from
     * Soy's EscapingConventions):
     * (1) Either a protocol in a whitelist (http, https, mailto or ftp).
     * (2) or no protocol.  A protocol must be followed by a colon. The below
     *     allows that by allowing colons only after one of the characters [/?#].
     *     A colon after a hash (#) must be in the fragment.
     *     Otherwise, a colon after a (?) must be in a query.
     *     Otherwise, a colon after a single solidus (/) must be in a path.
     *     Otherwise, a colon after a double solidus (//) must be in the authority
     *     (before port).
     *
     * The pattern disallows &, used in HTML entity declarations before
     * one of the characters in [/?#]. This disallows HTML entities used in the
     * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
     * It also disallows HTML entities in the first path part of a relative path,
     * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
     * that. More importantly, it disallows masking of a colon,
     * e.g. "javascript&#58;...".
     *
     * This regular expression was taken from the Closure sanitization library.
     */
    var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
    /**
     * A pattern that matches safe data URLs. Only matches image, video and audio types.
     */
    var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
    /**
     * @param {?} url
     * @return {?}
     */
    function sanitizeUrl(url) {
        url = String(url);
        if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
            return url;
        if (isDevMode()) {
            getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
        }
        return 'unsafe:' + url;
    }
    /**
     * @param {?} srcset
     * @return {?}
     */
    function sanitizeSrcset(srcset) {
        srcset = String(srcset);
        return srcset.split(',').map(function (srcset) { return sanitizeUrl(srcset.trim()); }).join(', ');
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} tags
     * @return {?}
     */
    function tagSet(tags) {
        var /** @type {?} */ res = {};
        for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {
            var t = _a[_i];
            res[t] = true;
        }
        return res;
    }
    /**
     * @param {...?} sets
     * @return {?}
     */
    function merge$1() {
        var sets = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sets[_i] = arguments[_i];
        }
        var /** @type {?} */ res = {};
        for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {
            var s = sets_1[_a];
            for (var /** @type {?} */ v in s) {
                if (s.hasOwnProperty(v))
                    res[v] = true;
            }
        }
        return res;
    }
    // Good source of info about elements and attributes
    // http://dev.w3.org/html5/spec/Overview.html#semantics
    // http://simon.html5.org/html-elements
    // Safe Void Elements - HTML5
    // http://dev.w3.org/html5/spec/Overview.html#void-elements
    var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
    // Elements that you can, intentionally, leave open (and which close themselves)
    // http://dev.w3.org/html5/spec/Overview.html#optional-tags
    var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
    var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
    var OPTIONAL_END_TAG_ELEMENTS = merge$1(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
    // Safe Block Elements - HTML5
    var BLOCK_ELEMENTS = merge$1(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +
        'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
        'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
    // Inline Elements - HTML5
    var INLINE_ELEMENTS = merge$1(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +
        'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +
        'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
    var VALID_ELEMENTS = merge$1(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
    // Attributes that have href and hence need to be sanitized
    var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
    // Attributes that have special href set hence need to be sanitized
    var SRCSET_ATTRS = tagSet('srcset');
    var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +
        'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +
        'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +
        'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +
        'valign,value,vspace,width');
    // NB: This currently consciously doesn't support SVG. SVG sanitization has had several security
    // issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
    // innerHTML is required, SVG attributes should be added here.
    // NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
    // can be sanitized, but they increase security surface area without a legitimate use case, so they
    // are left out here.
    var VALID_ATTRS = merge$1(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
    /**
     * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
     * attributes.
     */
    var SanitizingHtmlSerializer = (function () {
        function SanitizingHtmlSerializer() {
            this.sanitizedSomething = false;
            this.buf = [];
            this.DOM = getDOM();
        }
        /**
         * @param {?} el
         * @return {?}
         */
        SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {
            // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
            // However this code never accesses properties off of `document` before deleting its contents
            // again, so it shouldn't be vulnerable to DOM clobbering.
            var /** @type {?} */ current = ((this.DOM.firstChild(el)));
            while (current) {
                if (this.DOM.isElementNode(current)) {
                    this.startElement(/** @type {?} */ (current));
                }
                else if (this.DOM.isTextNode(current)) {
                    this.chars(/** @type {?} */ ((this.DOM.nodeValue(current))));
                }
                else {
                    // Strip non-element, non-text nodes.
                    this.sanitizedSomething = true;
                }
                if (this.DOM.firstChild(current)) {
                    current = ((this.DOM.firstChild(current)));
                    continue;
                }
                while (current) {
                    // Leaving the element. Walk up and to the right, closing tags as we go.
                    if (this.DOM.isElementNode(current)) {
                        this.endElement(/** @type {?} */ (current));
                    }
                    var /** @type {?} */ next = this.checkClobberedElement(current, /** @type {?} */ ((this.DOM.nextSibling(current))));
                    if (next) {
                        current = next;
                        break;
                    }
                    current = this.checkClobberedElement(current, /** @type {?} */ ((this.DOM.parentElement(current))));
                }
            }
            return this.buf.join('');
        };
        /**
         * @param {?} element
         * @return {?}
         */
        SanitizingHtmlSerializer.prototype.startElement = function (element) {
            var _this = this;
            var /** @type {?} */ tagName = this.DOM.nodeName(element).toLowerCase();
            if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
                this.sanitizedSomething = true;
                return;
            }
            this.buf.push('<');
            this.buf.push(tagName);
            this.DOM.attributeMap(element).forEach(function (value, attrName) {
                var /** @type {?} */ lower = attrName.toLowerCase();
                if (!VALID_ATTRS.hasOwnProperty(lower)) {
                    _this.sanitizedSomething = true;
                    return;
                }
                // TODO(martinprobst): Special case image URIs for data:image/...
                if (URI_ATTRS[lower])
                    value = sanitizeUrl(value);
                if (SRCSET_ATTRS[lower])
                    value = sanitizeSrcset(value);
                _this.buf.push(' ');
                _this.buf.push(attrName);
                _this.buf.push('="');
                _this.buf.push(encodeEntities(value));
                _this.buf.push('"');
            });
            this.buf.push('>');
        };
        /**
         * @param {?} current
         * @return {?}
         */
        SanitizingHtmlSerializer.prototype.endElement = function (current) {
            var /** @type {?} */ tagName = this.DOM.nodeName(current).toLowerCase();
            if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
                this.buf.push('</');
                this.buf.push(tagName);
                this.buf.push('>');
            }
        };
        /**
         * @param {?} chars
         * @return {?}
         */
        SanitizingHtmlSerializer.prototype.chars = function (chars) { this.buf.push(encodeEntities(chars)); };
        /**
         * @param {?} node
         * @param {?} nextNode
         * @return {?}
         */
        SanitizingHtmlSerializer.prototype.checkClobberedElement = function (node, nextNode) {
            if (nextNode && this.DOM.contains(node, nextNode)) {
                throw new Error("Failed to sanitize html because the element is clobbered: " + this.DOM.getOuterHTML(node));
            }
            return nextNode;
        };
        return SanitizingHtmlSerializer;
    }());
    // Regular Expressions for parsing tags and attributes
    var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    // ! to ~ is the ASCII range.
    var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
    /**
     * Escapes all potentially dangerous characters, so that the
     * resulting string can be safely inserted into attribute or
     * element text.
     * @param {?} value
     * @return {?}
     */
    function encodeEntities(value) {
        return value.replace(/&/g, '&amp;')
            .replace(SURROGATE_PAIR_REGEXP, function (match) {
            var /** @type {?} */ hi = match.charCodeAt(0);
            var /** @type {?} */ low = match.charCodeAt(1);
            return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
        })
            .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
    }
    var inertBodyHelper;
    /**
     * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
     * the DOM in a browser environment.
     * @param {?} defaultDoc
     * @param {?} unsafeHtmlInput
     * @return {?}
     */
    function sanitizeHtml(defaultDoc, unsafeHtmlInput) {
        var /** @type {?} */ DOM = getDOM();
        var /** @type {?} */ inertBodyElement = null;
        try {
            inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc, DOM);
            // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).
            var /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
            // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
            // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.
            var /** @type {?} */ mXSSAttempts = 5;
            var /** @type {?} */ parsedHtml = unsafeHtml;
            do {
                if (mXSSAttempts === 0) {
                    throw new Error('Failed to sanitize html because the input is unstable');
                }
                mXSSAttempts--;
                unsafeHtml = parsedHtml;
                parsedHtml = DOM.getInnerHTML(inertBodyElement);
                inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
            } while (unsafeHtml !== parsedHtml);
            var /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();
            var /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(inertBodyElement) || inertBodyElement);
            if (isDevMode() && sanitizer.sanitizedSomething) {
                DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
            }
            return safeHtml;
        }
        finally {
            // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
            if (inertBodyElement) {
                var /** @type {?} */ parent = DOM.getTemplateContent(inertBodyElement) || inertBodyElement;
                for (var _i = 0, _a = DOM.childNodesAsList(parent); _i < _a.length; _i++) {
                    var child = _a[_i];
                    DOM.removeChild(parent, child);
                }
            }
        }
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Regular expression for safe style values.
     *
     * Quotes (" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.
     *
     * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or
     * font-family) and hence could allow multiple values to get injected, but that should pose no risk
     * of XSS.
     *
     * The function expression checks only for XSS safety, not for CSS validity.
     *
     * This regular expression was taken from the Closure sanitization library, and augmented for
     * transformation values.
     */
    var VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
    var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
    var COLOR_FNS = '(?:rgb|hsl)a?';
    var GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';
    var CSS3_FNS = '(?:calc|attr)';
    var FN_ARGS = '\\([-0-9.%, #a-zA-Z]+\\)';
    var SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|" +
        ("(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + "|" + GRADIENTS + "|" + CSS3_FNS + ")") +
        (FN_ARGS + ")$"), 'g');
    /**
     * Matches a `url(...)` value with an arbitrary argument as long as it does
     * not contain parentheses.
     *
     * The URL value still needs to be sanitized separately.
     *
     * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted
     * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.
     * by observing whether scroll bars are displayed, or character ranges used by a font face
     * definition.
     *
     * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that
     * binding a URL value without further cooperation from the page will cause an information leak, and
     * if so, it is just a leak, not a full blown XSS vulnerability.
     *
     * Given the common use case, low likelihood of attack vector, and low impact of an attack, this
     * code is permissive and allows URLs that sanitize otherwise.
     */
    var URL_RE = /^url\(([^)]+)\)$/;
    /**
     * Checks that quotes (" and ') are properly balanced inside a string. Assumes
     * that neither escape (\) nor any other character that could result in
     * breaking out of a string parsing context are allowed;
     * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.
     *
     * This code was taken from the Closure sanitization library.
     * @param {?} value
     * @return {?}
     */
    function hasBalancedQuotes(value) {
        var /** @type {?} */ outsideSingle = true;
        var /** @type {?} */ outsideDouble = true;
        for (var /** @type {?} */ i = 0; i < value.length; i++) {
            var /** @type {?} */ c = value.charAt(i);
            if (c === '\'' && outsideDouble) {
                outsideSingle = !outsideSingle;
            }
            else if (c === '"' && outsideSingle) {
                outsideDouble = !outsideDouble;
            }
        }
        return outsideSingle && outsideDouble;
    }
    /**
     * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single
     * value) and returns a value that is safe to use in a browser environment.
     * @param {?} value
     * @return {?}
     */
    function sanitizeStyle(value) {
        value = String(value).trim(); // Make sure it's actually a string.
        if (!value)
            return '';
        // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for
        // reasoning behind this.
        var /** @type {?} */ urlMatch = value.match(URL_RE);
        if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||
            value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
            return value; // Safe style values.
        }
        if (isDevMode()) {
            getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
        }
        return 'unsafe';
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
     * values to be safe to use in the different DOM contexts.
     *
     * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
     * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
     * the website.
     *
     * In specific situations, it might be necessary to disable sanitization, for example if the
     * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
     * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
     * methods, and then binding to that value from the template.
     *
     * These situations should be very rare, and extraordinary care must be taken to avoid creating a
     * Cross Site Scripting (XSS) security bug!
     *
     * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
     * close as possible to the source of the value, to make it easy to verify no security bug is
     * created by its use.
     *
     * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
     * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
     * code. The sanitizer leaves safe values intact.
     *
     * \@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
     * sanitization for the value passed in. Carefully check and audit all values and code paths going
     * into this call. Make sure any user data is appropriately escaped for this security context.
     * For more detail, see the [Security Guide](http://g.co/ng/security).
     *
     * \@stable
     * @abstract
     */
    var DomSanitizer = (function () {
        function DomSanitizer() {
        }
        /**
         * Sanitizes a value for use in the given SecurityContext.
         *
         * If value is trusted for the context, this method will unwrap the contained safe value and use
         * it directly. Otherwise, value will be sanitized to be safe in the given context, for example
         * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation
         * is responsible to make sure that the value can definitely be safely used in the given context.
         * @abstract
         * @param {?} context
         * @param {?} value
         * @return {?}
         */
        DomSanitizer.prototype.sanitize = function (context, value) { };
        /**
         * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML
         * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will
         * leave safe HTML intact, so in most situations this method should not be used.
         *
         * **WARNING:** calling this method with untrusted user data exposes your application to XSS
         * security risks!
         * @abstract
         * @param {?} value
         * @return {?}
         */
        DomSanitizer.prototype.bypassSecurityTrustHtml = function (value) { };
        /**
         * Bypass security and trust the given value to be safe style value (CSS).
         *
         * **WARNING:** calling this method with untrusted user data exposes your application to XSS
         * security risks!
         * @abstract
         * @param {?} value
         * @return {?}
         */
        DomSanitizer.prototype.bypassSecurityTrustStyle = function (value) { };
        /**
         * Bypass security and trust the given value to be safe JavaScript.
         *
         * **WARNING:** calling this method with untrusted user data exposes your application to XSS
         * security risks!
         * @abstract
         * @param {?} value
         * @return {?}
         */
        DomSanitizer.prototype.bypassSecurityTrustScript = function (value) { };
        /**
         * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used
         * in hyperlinks or `<img src>`.
         *
         * **WARNING:** calling this method with untrusted user data exposes your application to XSS
         * security risks!
         * @abstract
         * @param {?} value
         * @return {?}
         */
        DomSanitizer.prototype.bypassSecurityTrustUrl = function (value) { };
        /**
         * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may
         * be used to load executable code from, like `<script src>`, or `<iframe src>`.
         *
         * **WARNING:** calling this method with untrusted user data exposes your application to XSS
         * security risks!
         * @abstract
         * @param {?} value
         * @return {?}
         */
        DomSanitizer.prototype.bypassSecurityTrustResourceUrl = function (value) { };
        return DomSanitizer;
    }());
    var DomSanitizerImpl = (function (_super) {
        __extends(DomSanitizerImpl, _super);
        /**
         * @param {?} _doc
         */
        function DomSanitizerImpl(_doc) {
            var _this = _super.call(this) || this;
            _this._doc = _doc;
            return _this;
        }
        /**
         * @param {?} ctx
         * @param {?} value
         * @return {?}
         */
        DomSanitizerImpl.prototype.sanitize = function (ctx, value) {
            if (value == null)
                return null;
            switch (ctx) {
                case SecurityContext.NONE:
                    return (value);
                case SecurityContext.HTML:
                    if (value instanceof SafeHtmlImpl)
                        return value.changingThisBreaksApplicationSecurity;
                    this.checkNotSafeValue(value, 'HTML');
                    return sanitizeHtml(this._doc, String(value));
                case SecurityContext.STYLE:
                    if (value instanceof SafeStyleImpl)
                        return value.changingThisBreaksApplicationSecurity;
                    this.checkNotSafeValue(value, 'Style');
                    return sanitizeStyle(/** @type {?} */ (value));
                case SecurityContext.SCRIPT:
                    if (value instanceof SafeScriptImpl)
                        return value.changingThisBreaksApplicationSecurity;
                    this.checkNotSafeValue(value, 'Script');
                    throw new Error('unsafe value used in a script context');
                case SecurityContext.URL:
                    if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
                        // Allow resource URLs in URL contexts, they are strictly more trusted.
                        return value.changingThisBreaksApplicationSecurity;
                    }
                    this.checkNotSafeValue(value, 'URL');
                    return sanitizeUrl(String(value));
                case SecurityContext.RESOURCE_URL:
                    if (value instanceof SafeResourceUrlImpl) {
                        return value.changingThisBreaksApplicationSecurity;
                    }
                    this.checkNotSafeValue(value, 'ResourceURL');
                    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
                default:
                    throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
            }
        };
        /**
         * @param {?} value
         * @param {?} expectedType
         * @return {?}
         */
        DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {
            if (value instanceof SafeValueImpl) {
                throw new Error("Required a safe " + expectedType + ", got a " + value.getTypeName() + " " +
                    "(see http://g.co/ng/security#xss)");
            }
        };
        /**
         * @param {?} value
         * @return {?}
         */
        DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };
        /**
         * @param {?} value
         * @return {?}
         */
        DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };
        /**
         * @param {?} value
         * @return {?}
         */
        DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };
        /**
         * @param {?} value
         * @return {?}
         */
        DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };
        /**
         * @param {?} value
         * @return {?}
         */
        DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {
            return new SafeResourceUrlImpl(value);
        };
        return DomSanitizerImpl;
    }(DomSanitizer));
    DomSanitizerImpl.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    DomSanitizerImpl.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
    ]; };
    /**
     * @abstract
     */
    var SafeValueImpl = (function () {
        /**
         * @param {?} changingThisBreaksApplicationSecurity
         */
        function SafeValueImpl(changingThisBreaksApplicationSecurity) {
            this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
            // empty
        }
        /**
         * @abstract
         * @return {?}
         */
        SafeValueImpl.prototype.getTypeName = function () { };
        /**
         * @return {?}
         */
        SafeValueImpl.prototype.toString = function () {
            return "SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity +
                " (see http://g.co/ng/security#xss)";
        };
        return SafeValueImpl;
    }());
    var SafeHtmlImpl = (function (_super) {
        __extends(SafeHtmlImpl, _super);
        function SafeHtmlImpl() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };
        return SafeHtmlImpl;
    }(SafeValueImpl));
    var SafeStyleImpl = (function (_super) {
        __extends(SafeStyleImpl, _super);
        function SafeStyleImpl() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };
        return SafeStyleImpl;
    }(SafeValueImpl));
    var SafeScriptImpl = (function (_super) {
        __extends(SafeScriptImpl, _super);
        function SafeScriptImpl() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };
        return SafeScriptImpl;
    }(SafeValueImpl));
    var SafeUrlImpl = (function (_super) {
        __extends(SafeUrlImpl, _super);
        function SafeUrlImpl() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };
        return SafeUrlImpl;
    }(SafeValueImpl));
    var SafeResourceUrlImpl = (function (_super) {
        __extends(SafeResourceUrlImpl, _super);
        function SafeResourceUrlImpl() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };
        return SafeResourceUrlImpl;
    }(SafeValueImpl));
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [
        { provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID },
        { provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },
        { provide: PlatformLocation, useClass: BrowserPlatformLocation },
        { provide: DOCUMENT$1, useFactory: _document, deps: [] },
    ];
    /**
     * \@security Replacing built-in sanitization providers exposes the application to XSS risks.
     * Attacker-controlled data introduced by an unsanitized provider could expose your
     * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
     * \@experimental
     */
    var BROWSER_SANITIZATION_PROVIDERS = [
        { provide: Sanitizer, useExisting: DomSanitizer },
        { provide: DomSanitizer, useClass: DomSanitizerImpl },
    ];
    /**
     * \@stable
     */
    var platformBrowser = createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
    /**
     * @return {?}
     */
    function initDomAdapter() {
        BrowserDomAdapter.makeCurrent();
        BrowserGetTestability.init();
    }
    /**
     * @return {?}
     */
    function errorHandler() {
        return new ErrorHandler();
    }
    /**
     * @return {?}
     */
    function _document() {
        return document;
    }
    /**
     * The ng module for the browser.
     *
     * \@stable
     */
    var BrowserModule = (function () {
        /**
         * @param {?} parentModule
         */
        function BrowserModule(parentModule) {
            if (parentModule) {
                throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
            }
        }
        /**
         * Configures a browser-based application to transition from a server-rendered app, if
         * one is present on the page. The specified parameters must include an application id,
         * which must match between the client and server applications.
         *
         * \@experimental
         * @param {?} params
         * @return {?}
         */
        BrowserModule.withServerTransition = function (params) {
            return {
                ngModule: BrowserModule,
                providers: [
                    { provide: APP_ID, useValue: params.appId },
                    { provide: TRANSITION_ID, useExisting: APP_ID },
                    SERVER_TRANSITION_PROVIDERS,
                ],
            };
        };
        return BrowserModule;
    }());
    BrowserModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        BROWSER_SANITIZATION_PROVIDERS,
                        { provide: ErrorHandler, useFactory: errorHandler, deps: [] },
                        { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true },
                        { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true },
                        { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true },
                        { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig },
                        DomRendererFactory2,
                        { provide: RendererFactory2, useExisting: DomRendererFactory2 },
                        { provide: SharedStylesHost, useExisting: DomSharedStylesHost },
                        DomSharedStylesHost,
                        Testability,
                        EventManager,
                        ELEMENT_PROBE_PROVIDERS,
                        Meta,
                        Title,
                    ],
                    exports: [CommonModule, ApplicationModule]
                },] },
    ];
    /**
     * @nocollapse
     */
    BrowserModule.ctorParameters = function () { return [
        { type: BrowserModule, decorators: [{ type: Optional }, { type: SkipSelf },] },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @module
     * @description
     * Entry point for all public APIs of the common package.
     */
    /**
     * \@stable
     */
    var VERSION$2 = new Version('4.4.7');

    var appVersion = "0.0.0";

    var Config = /** @class */ (function () {
        function Config() {
        }
        /* tslint:disable: max-line-length */
        Config.get = function (value, env) {
            var val;
            var data = {
                enableProdMode: true,
                version: appVersion,
            };
            if (undefined === env || null == env) {
                env = ("undefined" !== typeof window) ? window.location.hostname : "production";
            }
            switch (env) {
                case "preprod.users.marcovasco.fr":
                    data.enableProdMode = false;
                    break;
                case "testing.users.marcovasco.fr":
                    data.enableProdMode = false;
                    break;
                case "users.local":
                    data.enableProdMode = false;
                    break;
                default:
            }
            switch (value) {
                default:
                    val = data[value];
            }
            return val;
        };
        Config.getEnv = function () {
            var env = ("undefined" !== typeof window) ? window.location.hostname : "Production";
            switch (env) {
                case "users.marcovasco.fr":
                    env = "Production";
                    break;
                case "preprod.users.marcovasco.fr":
                    env = "Preprod";
                    break;
                case "testing.users.marcovasco.fr":
                case "testing.prestige-voyages.com":
                    env = "Testing";
                    break;
                case "users.local":
                    env = "Dev";
                default:
            }
            return env;
        };
        return Config;
    }());

    var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$1 = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var AppComponent = /** @class */ (function () {
        function AppComponent() {
            // constructor
        }
        AppComponent = __decorate$1([
            Component({
                selector: "mv-users",
                template: "\n    <div id=\"mv-users\" class=\"content\">\n      <router-outlet></router-outlet>\n    </div>\n  ",
            }),
            __metadata$1("design:paramtypes", [])
        ], AppComponent);
        return AppComponent;
    }());

    var __extends$e = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };


    /**
     * @class BehaviorSubject<T>
     */
    var BehaviorSubject = (function (_super) {
        __extends$e(BehaviorSubject, _super);
        function BehaviorSubject(_value) {
            _super.call(this);
            this._value = _value;
        }
        Object.defineProperty(BehaviorSubject.prototype, "value", {
            get: function () {
                return this.getValue();
            },
            enumerable: true,
            configurable: true
        });
        /** @deprecated internal use only */ BehaviorSubject.prototype._subscribe = function (subscriber) {
            var subscription = _super.prototype._subscribe.call(this, subscriber);
            if (subscription && !subscription.closed) {
                subscriber.next(this._value);
            }
            return subscription;
        };
        BehaviorSubject.prototype.getValue = function () {
            if (this.hasError) {
                throw this.thrownError;
            }
            else if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            else {
                return this._value;
            }
        };
        BehaviorSubject.prototype.next = function (value) {
            _super.prototype.next.call(this, this._value = value);
        };
        return BehaviorSubject;
    }(Subject_1.Subject));
    var BehaviorSubject_2 = BehaviorSubject;

    var __extends$f = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };


    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var PromiseObservable = (function (_super) {
        __extends$f(PromiseObservable, _super);
        function PromiseObservable(promise, scheduler) {
            _super.call(this);
            this.promise = promise;
            this.scheduler = scheduler;
        }
        /**
         * Converts a Promise to an Observable.
         *
         * <span class="informal">Returns an Observable that just emits the Promise's
         * resolved value, then completes.</span>
         *
         * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an
         * Observable. If the Promise resolves with a value, the output Observable
         * emits that resolved value as a `next`, and then completes. If the Promise
         * is rejected, then the output Observable emits the corresponding Error.
         *
         * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>
         * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));
         * result.subscribe(x => console.log(x), e => console.error(e));
         *
         * @see {@link bindCallback}
         * @see {@link from}
         *
         * @param {PromiseLike<T>} promise The promise to be converted.
         * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling
         * the delivery of the resolved value (or the rejection).
         * @return {Observable<T>} An Observable which wraps the Promise.
         * @static true
         * @name fromPromise
         * @owner Observable
         */
        PromiseObservable.create = function (promise, scheduler) {
            return new PromiseObservable(promise, scheduler);
        };
        /** @deprecated internal use only */ PromiseObservable.prototype._subscribe = function (subscriber) {
            var _this = this;
            var promise = this.promise;
            var scheduler = this.scheduler;
            if (scheduler == null) {
                if (this._isScalar) {
                    if (!subscriber.closed) {
                        subscriber.next(this.value);
                        subscriber.complete();
                    }
                }
                else {
                    promise.then(function (value) {
                        _this.value = value;
                        _this._isScalar = true;
                        if (!subscriber.closed) {
                            subscriber.next(value);
                            subscriber.complete();
                        }
                    }, function (err) {
                        if (!subscriber.closed) {
                            subscriber.error(err);
                        }
                    })
                        .then(null, function (err) {
                        // escape the promise trap, throw unhandled errors
                        root.root.setTimeout(function () { throw err; });
                    });
                }
            }
            else {
                if (this._isScalar) {
                    if (!subscriber.closed) {
                        return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });
                    }
                }
                else {
                    promise.then(function (value) {
                        _this.value = value;
                        _this._isScalar = true;
                        if (!subscriber.closed) {
                            subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
                        }
                    }, function (err) {
                        if (!subscriber.closed) {
                            subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));
                        }
                    })
                        .then(null, function (err) {
                        // escape the promise trap, throw unhandled errors
                        root.root.setTimeout(function () { throw err; });
                    });
                }
            }
        };
        return PromiseObservable;
    }(Observable_1.Observable));
    var PromiseObservable_2 = PromiseObservable;
    function dispatchNext(arg) {
        var value = arg.value, subscriber = arg.subscriber;
        if (!subscriber.closed) {
            subscriber.next(value);
            subscriber.complete();
        }
    }
    function dispatchError(arg) {
        var err = arg.err, subscriber = arg.subscriber;
        if (!subscriber.closed) {
            subscriber.error(err);
        }
    }


    var PromiseObservable_1 = {
    	PromiseObservable: PromiseObservable_2
    };

    var __extends$g = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };



    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var IteratorObservable = (function (_super) {
        __extends$g(IteratorObservable, _super);
        function IteratorObservable(iterator$$1, scheduler) {
            _super.call(this);
            this.scheduler = scheduler;
            if (iterator$$1 == null) {
                throw new Error('iterator cannot be null.');
            }
            this.iterator = getIterator(iterator$$1);
        }
        IteratorObservable.create = function (iterator$$1, scheduler) {
            return new IteratorObservable(iterator$$1, scheduler);
        };
        IteratorObservable.dispatch = function (state) {
            var index = state.index, hasError = state.hasError, iterator$$1 = state.iterator, subscriber = state.subscriber;
            if (hasError) {
                subscriber.error(state.error);
                return;
            }
            var result = iterator$$1.next();
            if (result.done) {
                subscriber.complete();
                return;
            }
            subscriber.next(result.value);
            state.index = index + 1;
            if (subscriber.closed) {
                if (typeof iterator$$1.return === 'function') {
                    iterator$$1.return();
                }
                return;
            }
            this.schedule(state);
        };
        /** @deprecated internal use only */ IteratorObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var _a = this, iterator$$1 = _a.iterator, scheduler = _a.scheduler;
            if (scheduler) {
                return scheduler.schedule(IteratorObservable.dispatch, 0, {
                    index: index, iterator: iterator$$1, subscriber: subscriber
                });
            }
            else {
                do {
                    var result = iterator$$1.next();
                    if (result.done) {
                        subscriber.complete();
                        break;
                    }
                    else {
                        subscriber.next(result.value);
                    }
                    if (subscriber.closed) {
                        if (typeof iterator$$1.return === 'function') {
                            iterator$$1.return();
                        }
                        break;
                    }
                } while (true);
            }
        };
        return IteratorObservable;
    }(Observable_1.Observable));
    var IteratorObservable_2 = IteratorObservable;
    var StringIterator = (function () {
        function StringIterator(str, idx, len) {
            if (idx === void 0) { idx = 0; }
            if (len === void 0) { len = str.length; }
            this.str = str;
            this.idx = idx;
            this.len = len;
        }
        StringIterator.prototype[iterator.iterator] = function () { return (this); };
        StringIterator.prototype.next = function () {
            return this.idx < this.len ? {
                done: false,
                value: this.str.charAt(this.idx++)
            } : {
                done: true,
                value: undefined
            };
        };
        return StringIterator;
    }());
    var ArrayIterator = (function () {
        function ArrayIterator(arr, idx, len) {
            if (idx === void 0) { idx = 0; }
            if (len === void 0) { len = toLength(arr); }
            this.arr = arr;
            this.idx = idx;
            this.len = len;
        }
        ArrayIterator.prototype[iterator.iterator] = function () { return this; };
        ArrayIterator.prototype.next = function () {
            return this.idx < this.len ? {
                done: false,
                value: this.arr[this.idx++]
            } : {
                done: true,
                value: undefined
            };
        };
        return ArrayIterator;
    }());
    function getIterator(obj) {
        var i = obj[iterator.iterator];
        if (!i && typeof obj === 'string') {
            return new StringIterator(obj);
        }
        if (!i && obj.length !== undefined) {
            return new ArrayIterator(obj);
        }
        if (!i) {
            throw new TypeError('object is not iterable');
        }
        return obj[iterator.iterator]();
    }
    var maxSafeInteger = Math.pow(2, 53) - 1;
    function toLength(o) {
        var len = +o.length;
        if (isNaN(len)) {
            return 0;
        }
        if (len === 0 || !numberIsFinite(len)) {
            return len;
        }
        len = sign(len) * Math.floor(Math.abs(len));
        if (len <= 0) {
            return 0;
        }
        if (len > maxSafeInteger) {
            return maxSafeInteger;
        }
        return len;
    }
    function numberIsFinite(value) {
        return typeof value === 'number' && root.root.isFinite(value);
    }
    function sign(value) {
        var valueAsNumber = +value;
        if (valueAsNumber === 0) {
            return valueAsNumber;
        }
        if (isNaN(valueAsNumber)) {
            return valueAsNumber;
        }
        return valueAsNumber < 0 ? -1 : 1;
    }


    var IteratorObservable_1 = {
    	IteratorObservable: IteratorObservable_2
    };

    var __extends$h = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };



    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ArrayLikeObservable = (function (_super) {
        __extends$h(ArrayLikeObservable, _super);
        function ArrayLikeObservable(arrayLike, scheduler) {
            _super.call(this);
            this.arrayLike = arrayLike;
            this.scheduler = scheduler;
            if (!scheduler && arrayLike.length === 1) {
                this._isScalar = true;
                this.value = arrayLike[0];
            }
        }
        ArrayLikeObservable.create = function (arrayLike, scheduler) {
            var length = arrayLike.length;
            if (length === 0) {
                return new EmptyObservable_1.EmptyObservable();
            }
            else if (length === 1) {
                return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
            }
            else {
                return new ArrayLikeObservable(arrayLike, scheduler);
            }
        };
        ArrayLikeObservable.dispatch = function (state) {
            var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;
            if (subscriber.closed) {
                return;
            }
            if (index >= length) {
                subscriber.complete();
                return;
            }
            subscriber.next(arrayLike[index]);
            state.index = index + 1;
            this.schedule(state);
        };
        /** @deprecated internal use only */ ArrayLikeObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;
            var length = arrayLike.length;
            if (scheduler) {
                return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
                    arrayLike: arrayLike, index: index, length: length, subscriber: subscriber
                });
            }
            else {
                for (var i = 0; i < length && !subscriber.closed; i++) {
                    subscriber.next(arrayLike[i]);
                }
                subscriber.complete();
            }
        };
        return ArrayLikeObservable;
    }(Observable_1.Observable));
    var ArrayLikeObservable_2 = ArrayLikeObservable;


    var ArrayLikeObservable_1 = {
    	ArrayLikeObservable: ArrayLikeObservable_2
    };

    /**
     * Represents a push-based event or value that an {@link Observable} can emit.
     * This class is particularly useful for operators that manage notifications,
     * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
     * others. Besides wrapping the actual delivered value, it also annotates it
     * with metadata of, for instance, what type of push message it is (`next`,
     * `error`, or `complete`).
     *
     * @see {@link materialize}
     * @see {@link dematerialize}
     * @see {@link observeOn}
     *
     * @class Notification<T>
     */
    var Notification = (function () {
        function Notification(kind, value, error) {
            this.kind = kind;
            this.value = value;
            this.error = error;
            this.hasValue = kind === 'N';
        }
        /**
         * Delivers to the given `observer` the value wrapped by this Notification.
         * @param {Observer} observer
         * @return
         */
        Notification.prototype.observe = function (observer) {
            switch (this.kind) {
                case 'N':
                    return observer.next && observer.next(this.value);
                case 'E':
                    return observer.error && observer.error(this.error);
                case 'C':
                    return observer.complete && observer.complete();
            }
        };
        /**
         * Given some {@link Observer} callbacks, deliver the value represented by the
         * current Notification to the correctly corresponding callback.
         * @param {function(value: T): void} next An Observer `next` callback.
         * @param {function(err: any): void} [error] An Observer `error` callback.
         * @param {function(): void} [complete] An Observer `complete` callback.
         * @return {any}
         */
        Notification.prototype.do = function (next, error, complete) {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return next && next(this.value);
                case 'E':
                    return error && error(this.error);
                case 'C':
                    return complete && complete();
            }
        };
        /**
         * Takes an Observer or its individual callback functions, and calls `observe`
         * or `do` methods accordingly.
         * @param {Observer|function(value: T): void} nextOrObserver An Observer or
         * the `next` callback.
         * @param {function(err: any): void} [error] An Observer `error` callback.
         * @param {function(): void} [complete] An Observer `complete` callback.
         * @return {any}
         */
        Notification.prototype.accept = function (nextOrObserver, error, complete) {
            if (nextOrObserver && typeof nextOrObserver.next === 'function') {
                return this.observe(nextOrObserver);
            }
            else {
                return this.do(nextOrObserver, error, complete);
            }
        };
        /**
         * Returns a simple Observable that just delivers the notification represented
         * by this Notification instance.
         * @return {any}
         */
        Notification.prototype.toObservable = function () {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return Observable_1.Observable.of(this.value);
                case 'E':
                    return Observable_1.Observable.throw(this.error);
                case 'C':
                    return Observable_1.Observable.empty();
            }
            throw new Error('unexpected notification kind value');
        };
        /**
         * A shortcut to create a Notification instance of the type `next` from a
         * given value.
         * @param {T} value The `next` value.
         * @return {Notification<T>} The "next" Notification representing the
         * argument.
         */
        Notification.createNext = function (value) {
            if (typeof value !== 'undefined') {
                return new Notification('N', value);
            }
            return Notification.undefinedValueNotification;
        };
        /**
         * A shortcut to create a Notification instance of the type `error` from a
         * given error.
         * @param {any} [err] The `error` error.
         * @return {Notification<T>} The "error" Notification representing the
         * argument.
         */
        Notification.createError = function (err) {
            return new Notification('E', undefined, err);
        };
        /**
         * A shortcut to create a Notification instance of the type `complete`.
         * @return {Notification<any>} The valueless "complete" Notification.
         */
        Notification.createComplete = function () {
            return Notification.completeNotification;
        };
        Notification.completeNotification = new Notification('C');
        Notification.undefinedValueNotification = new Notification('N', undefined);
        return Notification;
    }());
    var Notification_2 = Notification;


    var Notification_1 = {
    	Notification: Notification_2
    };

    var __extends$i = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };


    /**
     *
     * Re-emits all notifications from source Observable with specified scheduler.
     *
     * <span class="informal">Ensure a specific scheduler is used, from outside of an Observable.</span>
     *
     * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule
     * notifications emitted by the source Observable. It might be useful, if you do not have control over
     * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.
     *
     * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,
     * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal
     * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits
     * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.
     * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split
     * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source
     * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a
     * little bit more, to ensure that they are emitted at expected moments.
     *
     * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications
     * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`
     * will delay all notifications - including error notifications - while `delay` will pass through error
     * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator
     * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used
     * for notification emissions in general.
     *
     * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>
     * const intervals = Rx.Observable.interval(10); // Intervals are scheduled
     *                                               // with async scheduler by default...
     *
     * intervals
     * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame
     * .subscribe(val => {                           // scheduler to ensure smooth animation.
     *   someDiv.style.height = val + 'px';
     * });
     *
     * @see {@link delay}
     *
     * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.
     * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.
     * @return {Observable<T>} Observable that emits the same notifications as the source Observable,
     * but with provided scheduler.
     *
     * @method observeOn
     * @owner Observable
     */
    function observeOn(scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        return function observeOnOperatorFunction(source) {
            return source.lift(new ObserveOnOperator(scheduler, delay));
        };
    }
    var observeOn_2 = observeOn;
    var ObserveOnOperator = (function () {
        function ObserveOnOperator(scheduler, delay) {
            if (delay === void 0) { delay = 0; }
            this.scheduler = scheduler;
            this.delay = delay;
        }
        ObserveOnOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
        };
        return ObserveOnOperator;
    }());
    var ObserveOnOperator_1 = ObserveOnOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ObserveOnSubscriber = (function (_super) {
        __extends$i(ObserveOnSubscriber, _super);
        function ObserveOnSubscriber(destination, scheduler, delay) {
            if (delay === void 0) { delay = 0; }
            _super.call(this, destination);
            this.scheduler = scheduler;
            this.delay = delay;
        }
        ObserveOnSubscriber.dispatch = function (arg) {
            var notification = arg.notification, destination = arg.destination;
            notification.observe(destination);
            this.unsubscribe();
        };
        ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
            this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
        };
        ObserveOnSubscriber.prototype._next = function (value) {
            this.scheduleMessage(Notification_1.Notification.createNext(value));
        };
        ObserveOnSubscriber.prototype._error = function (err) {
            this.scheduleMessage(Notification_1.Notification.createError(err));
        };
        ObserveOnSubscriber.prototype._complete = function () {
            this.scheduleMessage(Notification_1.Notification.createComplete());
        };
        return ObserveOnSubscriber;
    }(Subscriber_1.Subscriber));
    var ObserveOnSubscriber_1 = ObserveOnSubscriber;
    var ObserveOnMessage = (function () {
        function ObserveOnMessage(notification, destination) {
            this.notification = notification;
            this.destination = destination;
        }
        return ObserveOnMessage;
    }());
    var ObserveOnMessage_1 = ObserveOnMessage;


    var observeOn_1 = {
    	observeOn: observeOn_2,
    	ObserveOnOperator: ObserveOnOperator_1,
    	ObserveOnSubscriber: ObserveOnSubscriber_1,
    	ObserveOnMessage: ObserveOnMessage_1
    };

    var __extends$j = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };











    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var FromObservable = (function (_super) {
        __extends$j(FromObservable, _super);
        function FromObservable(ish, scheduler) {
            _super.call(this, null);
            this.ish = ish;
            this.scheduler = scheduler;
        }
        /**
         * Creates an Observable from an Array, an array-like object, a Promise, an
         * iterable object, or an Observable-like object.
         *
         * <span class="informal">Converts almost anything to an Observable.</span>
         *
         * <img src="./img/from.png" width="100%">
         *
         * Convert various other objects and data types into Observables. `from`
         * converts a Promise or an array-like or an
         * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)
         * object into an Observable that emits the items in that promise or array or
         * iterable. A String, in this context, is treated as an array of characters.
         * Observable-like objects (contains a function named with the ES2015 Symbol
         * for Observable) can also be converted through this operator.
         *
         * @example <caption>Converts an array to an Observable</caption>
         * var array = [10, 20, 30];
         * var result = Rx.Observable.from(array);
         * result.subscribe(x => console.log(x));
         *
         * // Results in the following:
         * // 10 20 30
         *
         * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>
         * function* generateDoubles(seed) {
         *   var i = seed;
         *   while (true) {
         *     yield i;
         *     i = 2 * i; // double it
         *   }
         * }
         *
         * var iterator = generateDoubles(3);
         * var result = Rx.Observable.from(iterator).take(10);
         * result.subscribe(x => console.log(x));
         *
         * // Results in the following:
         * // 3 6 12 24 48 96 192 384 768 1536
         *
         * @see {@link create}
         * @see {@link fromEvent}
         * @see {@link fromEventPattern}
         * @see {@link fromPromise}
         *
         * @param {ObservableInput<T>} ish A subscribable object, a Promise, an
         * Observable-like, an Array, an iterable or an array-like object to be
         * converted.
         * @param {Scheduler} [scheduler] The scheduler on which to schedule the
         * emissions of values.
         * @return {Observable<T>} The Observable whose values are originally from the
         * input object that was converted.
         * @static true
         * @name from
         * @owner Observable
         */
        FromObservable.create = function (ish, scheduler) {
            if (ish != null) {
                if (typeof ish[observable.observable] === 'function') {
                    if (ish instanceof Observable_1.Observable && !scheduler) {
                        return ish;
                    }
                    return new FromObservable(ish, scheduler);
                }
                else if (isArray.isArray(ish)) {
                    return new ArrayObservable_1.ArrayObservable(ish, scheduler);
                }
                else if (isPromise_1.isPromise(ish)) {
                    return new PromiseObservable_1.PromiseObservable(ish, scheduler);
                }
                else if (typeof ish[iterator.iterator] === 'function' || typeof ish === 'string') {
                    return new IteratorObservable_1.IteratorObservable(ish, scheduler);
                }
                else if (isArrayLike.isArrayLike(ish)) {
                    return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);
                }
            }
            throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
        };
        /** @deprecated internal use only */ FromObservable.prototype._subscribe = function (subscriber) {
            var ish = this.ish;
            var scheduler = this.scheduler;
            if (scheduler == null) {
                return ish[observable.observable]().subscribe(subscriber);
            }
            else {
                return ish[observable.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
            }
        };
        return FromObservable;
    }(Observable_1.Observable));
    var FromObservable_2 = FromObservable;


    var FromObservable_1 = {
    	FromObservable: FromObservable_2
    };

    var from_2 = FromObservable_1.FromObservable.create;

    var of_1 = ArrayObservable_1.ArrayObservable.of;

    /* tslint:enable:max-line-length */
    /**
     * Projects each source value to an Observable which is merged in the output
     * Observable, in a serialized fashion waiting for each one to complete before
     * merging the next.
     *
     * <span class="informal">Maps each value to an Observable, then flattens all of
     * these inner Observables using {@link concatAll}.</span>
     *
     * <img src="./img/concatMap.png" width="100%">
     *
     * Returns an Observable that emits items based on applying a function that you
     * supply to each item emitted by the source Observable, where that function
     * returns an (so-called "inner") Observable. Each new inner Observable is
     * concatenated with the previous inner Observable.
     *
     * __Warning:__ if source values arrive endlessly and faster than their
     * corresponding inner Observables can complete, it will result in memory issues
     * as inner Observables amass in an unbounded buffer waiting for their turn to
     * be subscribed to.
     *
     * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set
     * to `1`.
     *
     * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // (results are not concurrent)
     * // For every click on the "document" it will emit values 0 to 3 spaced
     * // on a 1000ms interval
     * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
     *
     * @see {@link concat}
     * @see {@link concatAll}
     * @see {@link concatMapTo}
     * @see {@link exhaustMap}
     * @see {@link mergeMap}
     * @see {@link switchMap}
     *
     * @param {function(value: T, ?index: number): ObservableInput} project A function
     * that, when applied to an item emitted by the source Observable, returns an
     * Observable.
     * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
     * A function to produce the value on the output Observable based on the values
     * and the indices of the source (outer) emission and the inner Observable
     * emission. The arguments passed to this function are:
     * - `outerValue`: the value that came from the source
     * - `innerValue`: the value that came from the projected Observable
     * - `outerIndex`: the "index" of the value that came from the source
     * - `innerIndex`: the "index" of the value from the projected Observable
     * @return {Observable} An Observable that emits the result of applying the
     * projection function (and the optional `resultSelector`) to each item emitted
     * by the source Observable and taking values from each projected inner
     * Observable sequentially.
     * @method concatMap
     * @owner Observable
     */
    function concatMap(project, resultSelector) {
        return mergeMap_1.mergeMap(project, resultSelector, 1);
    }
    var concatMap_2 = concatMap;


    var concatMap_1 = {
    	concatMap: concatMap_2
    };

    /* tslint:enable:max-line-length */
    /**
     * Projects each source value to an Observable which is merged in the output
     * Observable, in a serialized fashion waiting for each one to complete before
     * merging the next.
     *
     * <span class="informal">Maps each value to an Observable, then flattens all of
     * these inner Observables using {@link concatAll}.</span>
     *
     * <img src="./img/concatMap.png" width="100%">
     *
     * Returns an Observable that emits items based on applying a function that you
     * supply to each item emitted by the source Observable, where that function
     * returns an (so-called "inner") Observable. Each new inner Observable is
     * concatenated with the previous inner Observable.
     *
     * __Warning:__ if source values arrive endlessly and faster than their
     * corresponding inner Observables can complete, it will result in memory issues
     * as inner Observables amass in an unbounded buffer waiting for their turn to
     * be subscribed to.
     *
     * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set
     * to `1`.
     *
     * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // (results are not concurrent)
     * // For every click on the "document" it will emit values 0 to 3 spaced
     * // on a 1000ms interval
     * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
     *
     * @see {@link concat}
     * @see {@link concatAll}
     * @see {@link concatMapTo}
     * @see {@link exhaustMap}
     * @see {@link mergeMap}
     * @see {@link switchMap}
     *
     * @param {function(value: T, ?index: number): ObservableInput} project A function
     * that, when applied to an item emitted by the source Observable, returns an
     * Observable.
     * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
     * A function to produce the value on the output Observable based on the values
     * and the indices of the source (outer) emission and the inner Observable
     * emission. The arguments passed to this function are:
     * - `outerValue`: the value that came from the source
     * - `innerValue`: the value that came from the projected Observable
     * - `outerIndex`: the "index" of the value that came from the source
     * - `innerIndex`: the "index" of the value from the projected Observable
     * @return {Observable} An Observable that emits the result of applying the
     * projection function (and the optional `resultSelector`) to each item emitted
     * by the source Observable and taking values from each projected inner
     * Observable sequentially.
     * @method concatMap
     * @owner Observable
     */
    function concatMap$1(project, resultSelector) {
        return concatMap_1.concatMap(project, resultSelector)(this);
    }
    var concatMap_3 = concatMap$1;

    var __extends$k = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    /**
     * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
     *
     * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>
     *  Observable.of(1, 2, 3, 4, 5, 6)
     *     .every(x => x < 5)
     *     .subscribe(x => console.log(x)); // -> false
     *
     * @param {function} predicate A function for determining if an item meets a specified condition.
     * @param {any} [thisArg] Optional object to use for `this` in the callback.
     * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.
     * @method every
     * @owner Observable
     */
    function every(predicate, thisArg) {
        return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };
    }
    var every_2 = every;
    var EveryOperator = (function () {
        function EveryOperator(predicate, thisArg, source) {
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.source = source;
        }
        EveryOperator.prototype.call = function (observer, source) {
            return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
        };
        return EveryOperator;
    }());
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var EverySubscriber = (function (_super) {
        __extends$k(EverySubscriber, _super);
        function EverySubscriber(destination, predicate, thisArg, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.source = source;
            this.index = 0;
            this.thisArg = thisArg || this;
        }
        EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
            this.destination.next(everyValueMatch);
            this.destination.complete();
        };
        EverySubscriber.prototype._next = function (value) {
            var result = false;
            try {
                result = this.predicate.call(this.thisArg, value, this.index++, this.source);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            if (!result) {
                this.notifyComplete(false);
            }
        };
        EverySubscriber.prototype._complete = function () {
            this.notifyComplete(true);
        };
        return EverySubscriber;
    }(Subscriber_1.Subscriber));


    var every_1 = {
    	every: every_2
    };

    /**
     * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
     *
     * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>
     *  Observable.of(1, 2, 3, 4, 5, 6)
     *     .every(x => x < 5)
     *     .subscribe(x => console.log(x)); // -> false
     *
     * @param {function} predicate A function for determining if an item meets a specified condition.
     * @param {any} [thisArg] Optional object to use for `this` in the callback.
     * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.
     * @method every
     * @owner Observable
     */
    function every$1(predicate, thisArg) {
        return every_1.every(predicate, thisArg)(this);
    }
    var every_3 = every$1;

    var __extends$l = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when an Observable or a sequence was queried but has no
     * elements.
     *
     * @see {@link first}
     * @see {@link last}
     * @see {@link single}
     *
     * @class EmptyError
     */
    var EmptyError = (function (_super) {
        __extends$l(EmptyError, _super);
        function EmptyError() {
            var err = _super.call(this, 'no elements in sequence');
            this.name = err.name = 'EmptyError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return EmptyError;
    }(Error));
    var EmptyError_2 = EmptyError;


    var EmptyError_1 = {
    	EmptyError: EmptyError_2
    };

    var __extends$m = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };


    /**
     * Emits only the first value (or the first value that meets some condition)
     * emitted by the source Observable.
     *
     * <span class="informal">Emits only the first value. Or emits only the first
     * value that passes some test.</span>
     *
     * <img src="./img/first.png" width="100%">
     *
     * If called with no arguments, `first` emits the first value of the source
     * Observable, then completes. If called with a `predicate` function, `first`
     * emits the first value of the source that matches the specified condition. It
     * may also take a `resultSelector` function to produce the output value from
     * the input value, and a `defaultValue` to emit in case the source completes
     * before it is able to emit a valid value. Throws an error if `defaultValue`
     * was not provided and a matching element is not found.
     *
     * @example <caption>Emit only the first click that happens on the DOM</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.first();
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Emits the first click that happens on a DIV</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.first(ev => ev.target.tagName === 'DIV');
     * result.subscribe(x => console.log(x));
     *
     * @see {@link filter}
     * @see {@link find}
     * @see {@link take}
     *
     * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
     * callback if the Observable completes before any `next` notification was sent.
     *
     * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
     * An optional function called with each item to test for condition matching.
     * @param {function(value: T, index: number): R} [resultSelector] A function to
     * produce the value on the output Observable based on the values
     * and the indices of the source Observable. The arguments passed to this
     * function are:
     * - `value`: the value that was emitted on the source.
     * - `index`: the "index" of the value from the source.
     * @param {R} [defaultValue] The default value emitted in case no valid value
     * was found on the source.
     * @return {Observable<T|R>} An Observable of the first item that matches the
     * condition.
     * @method first
     * @owner Observable
     */
    function first(predicate, resultSelector, defaultValue) {
        return function (source) { return source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source)); };
    }
    var first_2 = first;
    var FirstOperator = (function () {
        function FirstOperator(predicate, resultSelector, defaultValue, source) {
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
        }
        FirstOperator.prototype.call = function (observer, source) {
            return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
        };
        return FirstOperator;
    }());
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var FirstSubscriber = (function (_super) {
        __extends$m(FirstSubscriber, _super);
        function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
            this.index = 0;
            this.hasCompleted = false;
            this._emitted = false;
        }
        FirstSubscriber.prototype._next = function (value) {
            var index = this.index++;
            if (this.predicate) {
                this._tryPredicate(value, index);
            }
            else {
                this._emit(value, index);
            }
        };
        FirstSubscriber.prototype._tryPredicate = function (value, index) {
            var result;
            try {
                result = this.predicate(value, index, this.source);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this._emit(value, index);
            }
        };
        FirstSubscriber.prototype._emit = function (value, index) {
            if (this.resultSelector) {
                this._tryResultSelector(value, index);
                return;
            }
            this._emitFinal(value);
        };
        FirstSubscriber.prototype._tryResultSelector = function (value, index) {
            var result;
            try {
                result = this.resultSelector(value, index);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this._emitFinal(result);
        };
        FirstSubscriber.prototype._emitFinal = function (value) {
            var destination = this.destination;
            if (!this._emitted) {
                this._emitted = true;
                destination.next(value);
                destination.complete();
                this.hasCompleted = true;
            }
        };
        FirstSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
                destination.next(this.defaultValue);
                destination.complete();
            }
            else if (!this.hasCompleted) {
                destination.error(new EmptyError_1.EmptyError);
            }
        };
        return FirstSubscriber;
    }(Subscriber_1.Subscriber));


    var first_1 = {
    	first: first_2
    };

    /**
     * Emits only the first value (or the first value that meets some condition)
     * emitted by the source Observable.
     *
     * <span class="informal">Emits only the first value. Or emits only the first
     * value that passes some test.</span>
     *
     * <img src="./img/first.png" width="100%">
     *
     * If called with no arguments, `first` emits the first value of the source
     * Observable, then completes. If called with a `predicate` function, `first`
     * emits the first value of the source that matches the specified condition. It
     * may also take a `resultSelector` function to produce the output value from
     * the input value, and a `defaultValue` to emit in case the source completes
     * before it is able to emit a valid value. Throws an error if `defaultValue`
     * was not provided and a matching element is not found.
     *
     * @example <caption>Emit only the first click that happens on the DOM</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.first();
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Emits the first click that happens on a DIV</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.first(ev => ev.target.tagName === 'DIV');
     * result.subscribe(x => console.log(x));
     *
     * @see {@link filter}
     * @see {@link find}
     * @see {@link take}
     *
     * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
     * callback if the Observable completes before any `next` notification was sent.
     *
     * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
     * An optional function called with each item to test for condition matching.
     * @param {function(value: T, index: number): R} [resultSelector] A function to
     * produce the value on the output Observable based on the values
     * and the indices of the source Observable. The arguments passed to this
     * function are:
     * - `value`: the value that was emitted on the source.
     * - `index`: the "index" of the value from the source.
     * @param {R} [defaultValue] The default value emitted in case no valid value
     * was found on the source.
     * @return {Observable<T|R>} An Observable of the first item that matches the
     * condition.
     * @method first
     * @owner Observable
     */
    function first$1(predicate, resultSelector, defaultValue) {
        return first_1.first(predicate, resultSelector, defaultValue)(this);
    }
    var first_3 = first$1;

    var __extends$n = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };


    /* tslint:enable:max-line-length */
    /**
     * Returns an Observable that emits only the last item emitted by the source Observable.
     * It optionally takes a predicate function as a parameter, in which case, rather than emitting
     * the last item from the source Observable, the resulting Observable will emit the last item
     * from the source Observable that satisfies the predicate.
     *
     * <img src="./img/last.png" width="100%">
     *
     * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
     * callback if the Observable completes before any `next` notification was sent.
     * @param {function} predicate - The condition any source emitted item has to satisfy.
     * @return {Observable} An Observable that emits only the last item satisfying the given condition
     * from the source, or an NoSuchElementException if no such items are emitted.
     * @throws - Throws if no items that match the predicate are emitted by the source Observable.
     * @method last
     * @owner Observable
     */
    function last(predicate, resultSelector, defaultValue) {
        return function (source) { return source.lift(new LastOperator(predicate, resultSelector, defaultValue, source)); };
    }
    var last_2 = last;
    var LastOperator = (function () {
        function LastOperator(predicate, resultSelector, defaultValue, source) {
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
        }
        LastOperator.prototype.call = function (observer, source) {
            return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
        };
        return LastOperator;
    }());
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var LastSubscriber = (function (_super) {
        __extends$n(LastSubscriber, _super);
        function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
            this.hasValue = false;
            this.index = 0;
            if (typeof defaultValue !== 'undefined') {
                this.lastValue = defaultValue;
                this.hasValue = true;
            }
        }
        LastSubscriber.prototype._next = function (value) {
            var index = this.index++;
            if (this.predicate) {
                this._tryPredicate(value, index);
            }
            else {
                if (this.resultSelector) {
                    this._tryResultSelector(value, index);
                    return;
                }
                this.lastValue = value;
                this.hasValue = true;
            }
        };
        LastSubscriber.prototype._tryPredicate = function (value, index) {
            var result;
            try {
                result = this.predicate(value, index, this.source);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                if (this.resultSelector) {
                    this._tryResultSelector(value, index);
                    return;
                }
                this.lastValue = value;
                this.hasValue = true;
            }
        };
        LastSubscriber.prototype._tryResultSelector = function (value, index) {
            var result;
            try {
                result = this.resultSelector(value, index);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.lastValue = result;
            this.hasValue = true;
        };
        LastSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (this.hasValue) {
                destination.next(this.lastValue);
                destination.complete();
            }
            else {
                destination.error(new EmptyError_1.EmptyError);
            }
        };
        return LastSubscriber;
    }(Subscriber_1.Subscriber));


    var last_1 = {
    	last: last_2
    };

    /* tslint:enable:max-line-length */
    /**
     * Returns an Observable that emits only the last item emitted by the source Observable.
     * It optionally takes a predicate function as a parameter, in which case, rather than emitting
     * the last item from the source Observable, the resulting Observable will emit the last item
     * from the source Observable that satisfies the predicate.
     *
     * <img src="./img/last.png" width="100%">
     *
     * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
     * callback if the Observable completes before any `next` notification was sent.
     * @param {function} predicate - The condition any source emitted item has to satisfy.
     * @return {Observable} An Observable that emits only the last item satisfying the given condition
     * from the source, or an NoSuchElementException if no such items are emitted.
     * @throws - Throws if no items that match the predicate are emitted by the source Observable.
     * @method last
     * @owner Observable
     */
    function last$1(predicate, resultSelector, defaultValue) {
        return last_1.last(predicate, resultSelector, defaultValue)(this);
    }
    var last_3 = last$1;

    var __extends$o = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    /**
     * Applies a given `project` function to each value emitted by the source
     * Observable, and emits the resulting values as an Observable.
     *
     * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
     * it passes each source value through a transformation function to get
     * corresponding output values.</span>
     *
     * <img src="./img/map.png" width="100%">
     *
     * Similar to the well known `Array.prototype.map` function, this operator
     * applies a projection to each value and emits that projection in the output
     * Observable.
     *
     * @example <caption>Map every click to the clientX position of that click</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var positions = clicks.map(ev => ev.clientX);
     * positions.subscribe(x => console.log(x));
     *
     * @see {@link mapTo}
     * @see {@link pluck}
     *
     * @param {function(value: T, index: number): R} project The function to apply
     * to each `value` emitted by the source Observable. The `index` parameter is
     * the number `i` for the i-th emission that has happened since the
     * subscription, starting from the number `0`.
     * @param {any} [thisArg] An optional argument to define what `this` is in the
     * `project` function.
     * @return {Observable<R>} An Observable that emits the values from the source
     * Observable transformed by the given `project` function.
     * @method map
     * @owner Observable
     */
    function map(project, thisArg) {
        return function mapOperation(source) {
            if (typeof project !== 'function') {
                throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
            }
            return source.lift(new MapOperator(project, thisArg));
        };
    }
    var map_2 = map;
    var MapOperator = (function () {
        function MapOperator(project, thisArg) {
            this.project = project;
            this.thisArg = thisArg;
        }
        MapOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
        };
        return MapOperator;
    }());
    var MapOperator_1 = MapOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MapSubscriber = (function (_super) {
        __extends$o(MapSubscriber, _super);
        function MapSubscriber(destination, project, thisArg) {
            _super.call(this, destination);
            this.project = project;
            this.count = 0;
            this.thisArg = thisArg || this;
        }
        // NOTE: This looks unoptimized, but it's actually purposefully NOT
        // using try/catch optimizations.
        MapSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.project.call(this.thisArg, value, this.count++);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return MapSubscriber;
    }(Subscriber_1.Subscriber));


    var map_1 = {
    	map: map_2,
    	MapOperator: MapOperator_1
    };

    /**
     * Applies a given `project` function to each value emitted by the source
     * Observable, and emits the resulting values as an Observable.
     *
     * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
     * it passes each source value through a transformation function to get
     * corresponding output values.</span>
     *
     * <img src="./img/map.png" width="100%">
     *
     * Similar to the well known `Array.prototype.map` function, this operator
     * applies a projection to each value and emits that projection in the output
     * Observable.
     *
     * @example <caption>Map every click to the clientX position of that click</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var positions = clicks.map(ev => ev.clientX);
     * positions.subscribe(x => console.log(x));
     *
     * @see {@link mapTo}
     * @see {@link pluck}
     *
     * @param {function(value: T, index: number): R} project The function to apply
     * to each `value` emitted by the source Observable. The `index` parameter is
     * the number `i` for the i-th emission that has happened since the
     * subscription, starting from the number `0`.
     * @param {any} [thisArg] An optional argument to define what `this` is in the
     * `project` function.
     * @return {Observable<R>} An Observable that emits the values from the source
     * Observable transformed by the given `project` function.
     * @method map
     * @owner Observable
     */
    function map$1(project, thisArg) {
        return map_1.map(project, thisArg)(this);
    }
    var map_3 = map$1;


    var map_2$1 = {
    	map: map_3
    };

    /* tslint:enable:max-line-length */
    /**
     * Projects each source value to an Observable which is merged in the output
     * Observable.
     *
     * <span class="informal">Maps each value to an Observable, then flattens all of
     * these inner Observables using {@link mergeAll}.</span>
     *
     * <img src="./img/mergeMap.png" width="100%">
     *
     * Returns an Observable that emits items based on applying a function that you
     * supply to each item emitted by the source Observable, where that function
     * returns an Observable, and then merging those resulting Observables and
     * emitting the results of this merger.
     *
     * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
     * var letters = Rx.Observable.of('a', 'b', 'c');
     * var result = letters.mergeMap(x =>
     *   Rx.Observable.interval(1000).map(i => x+i)
     * );
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // a0
     * // b0
     * // c0
     * // a1
     * // b1
     * // c1
     * // continues to list a,b,c with respective ascending integers
     *
     * @see {@link concatMap}
     * @see {@link exhaustMap}
     * @see {@link merge}
     * @see {@link mergeAll}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     * @see {@link switchMap}
     *
     * @param {function(value: T, ?index: number): ObservableInput} project A function
     * that, when applied to an item emitted by the source Observable, returns an
     * Observable.
     * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
     * A function to produce the value on the output Observable based on the values
     * and the indices of the source (outer) emission and the inner Observable
     * emission. The arguments passed to this function are:
     * - `outerValue`: the value that came from the source
     * - `innerValue`: the value that came from the projected Observable
     * - `outerIndex`: the "index" of the value that came from the source
     * - `innerIndex`: the "index" of the value from the projected Observable
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
     * Observables being subscribed to concurrently.
     * @return {Observable} An Observable that emits the result of applying the
     * projection function (and the optional `resultSelector`) to each item emitted
     * by the source Observable and merging the results of the Observables obtained
     * from this transformation.
     * @method mergeMap
     * @owner Observable
     */
    function mergeMap$1(project, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        return mergeMap_1.mergeMap(project, resultSelector, concurrent)(this);
    }
    var mergeMap_3 = mergeMap$1;


    var mergeMap_2$1 = {
    	mergeMap: mergeMap_3
    };

    var __extends$p = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    /* tslint:enable:max-line-length */
    /**
     * Applies an accumulator function over the source Observable, and returns each
     * intermediate result, with an optional seed value.
     *
     * <span class="informal">It's like {@link reduce}, but emits the current
     * accumulation whenever the source emits a value.</span>
     *
     * <img src="./img/scan.png" width="100%">
     *
     * Combines together all values emitted on the source, using an accumulator
     * function that knows how to join a new source value into the accumulation from
     * the past. Is similar to {@link reduce}, but emits the intermediate
     * accumulations.
     *
     * Returns an Observable that applies a specified `accumulator` function to each
     * item emitted by the source Observable. If a `seed` value is specified, then
     * that value will be used as the initial value for the accumulator. If no seed
     * value is specified, the first item of the source is used as the seed.
     *
     * @example <caption>Count the number of click events</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var ones = clicks.mapTo(1);
     * var seed = 0;
     * var count = ones.scan((acc, one) => acc + one, seed);
     * count.subscribe(x => console.log(x));
     *
     * @see {@link expand}
     * @see {@link mergeScan}
     * @see {@link reduce}
     *
     * @param {function(acc: R, value: T, index: number): R} accumulator
     * The accumulator function called on each source value.
     * @param {T|R} [seed] The initial accumulation value.
     * @return {Observable<R>} An observable of the accumulated values.
     * @method scan
     * @owner Observable
     */
    function scan(accumulator, seed) {
        var hasSeed = false;
        // providing a seed of `undefined` *should* be valid and trigger
        // hasSeed! so don't use `seed !== undefined` checks!
        // For this reason, we have to check it here at the original call site
        // otherwise inside Operator/Subscriber we won't know if `undefined`
        // means they didn't provide anything or if they literally provided `undefined`
        if (arguments.length >= 2) {
            hasSeed = true;
        }
        return function scanOperatorFunction(source) {
            return source.lift(new ScanOperator(accumulator, seed, hasSeed));
        };
    }
    var scan_2 = scan;
    var ScanOperator = (function () {
        function ScanOperator(accumulator, seed, hasSeed) {
            if (hasSeed === void 0) { hasSeed = false; }
            this.accumulator = accumulator;
            this.seed = seed;
            this.hasSeed = hasSeed;
        }
        ScanOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
        };
        return ScanOperator;
    }());
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ScanSubscriber = (function (_super) {
        __extends$p(ScanSubscriber, _super);
        function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
            _super.call(this, destination);
            this.accumulator = accumulator;
            this._seed = _seed;
            this.hasSeed = hasSeed;
            this.index = 0;
        }
        Object.defineProperty(ScanSubscriber.prototype, "seed", {
            get: function () {
                return this._seed;
            },
            set: function (value) {
                this.hasSeed = true;
                this._seed = value;
            },
            enumerable: true,
            configurable: true
        });
        ScanSubscriber.prototype._next = function (value) {
            if (!this.hasSeed) {
                this.seed = value;
                this.destination.next(value);
            }
            else {
                return this._tryNext(value);
            }
        };
        ScanSubscriber.prototype._tryNext = function (value) {
            var index = this.index++;
            var result;
            try {
                result = this.accumulator(this.seed, value, index);
            }
            catch (err) {
                this.destination.error(err);
            }
            this.seed = result;
            this.destination.next(result);
        };
        return ScanSubscriber;
    }(Subscriber_1.Subscriber));


    var scan_1 = {
    	scan: scan_2
    };

    var __extends$q = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when an element was queried at a certain index of an
     * Observable, but no such index or position exists in that sequence.
     *
     * @see {@link elementAt}
     * @see {@link take}
     * @see {@link takeLast}
     *
     * @class ArgumentOutOfRangeError
     */
    var ArgumentOutOfRangeError = (function (_super) {
        __extends$q(ArgumentOutOfRangeError, _super);
        function ArgumentOutOfRangeError() {
            var err = _super.call(this, 'argument out of range');
            this.name = err.name = 'ArgumentOutOfRangeError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return ArgumentOutOfRangeError;
    }(Error));
    var ArgumentOutOfRangeError_2 = ArgumentOutOfRangeError;


    var ArgumentOutOfRangeError_1 = {
    	ArgumentOutOfRangeError: ArgumentOutOfRangeError_2
    };

    var __extends$r = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };



    /**
     * Emits only the last `count` values emitted by the source Observable.
     *
     * <span class="informal">Remembers the latest `count` values, then emits those
     * only when the source completes.</span>
     *
     * <img src="./img/takeLast.png" width="100%">
     *
     * `takeLast` returns an Observable that emits at most the last `count` values
     * emitted by the source Observable. If the source emits fewer than `count`
     * values then all of its values are emitted. This operator must wait until the
     * `complete` notification emission from the source in order to emit the `next`
     * values on the output Observable, because otherwise it is impossible to know
     * whether or not more values will be emitted on the source. For this reason,
     * all values are emitted synchronously, followed by the complete notification.
     *
     * @example <caption>Take the last 3 values of an Observable with many values</caption>
     * var many = Rx.Observable.range(1, 100);
     * var lastThree = many.takeLast(3);
     * lastThree.subscribe(x => console.log(x));
     *
     * @see {@link take}
     * @see {@link takeUntil}
     * @see {@link takeWhile}
     * @see {@link skip}
     *
     * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an
     * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
     *
     * @param {number} count The maximum number of values to emit from the end of
     * the sequence of values emitted by the source Observable.
     * @return {Observable<T>} An Observable that emits at most the last count
     * values emitted by the source Observable.
     * @method takeLast
     * @owner Observable
     */
    function takeLast(count) {
        return function takeLastOperatorFunction(source) {
            if (count === 0) {
                return new EmptyObservable_1.EmptyObservable();
            }
            else {
                return source.lift(new TakeLastOperator(count));
            }
        };
    }
    var takeLast_2 = takeLast;
    var TakeLastOperator = (function () {
        function TakeLastOperator(total) {
            this.total = total;
            if (this.total < 0) {
                throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
            }
        }
        TakeLastOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
        };
        return TakeLastOperator;
    }());
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var TakeLastSubscriber = (function (_super) {
        __extends$r(TakeLastSubscriber, _super);
        function TakeLastSubscriber(destination, total) {
            _super.call(this, destination);
            this.total = total;
            this.ring = new Array();
            this.count = 0;
        }
        TakeLastSubscriber.prototype._next = function (value) {
            var ring = this.ring;
            var total = this.total;
            var count = this.count++;
            if (ring.length < total) {
                ring.push(value);
            }
            else {
                var index = count % total;
                ring[index] = value;
            }
        };
        TakeLastSubscriber.prototype._complete = function () {
            var destination = this.destination;
            var count = this.count;
            if (count > 0) {
                var total = this.count >= this.total ? this.total : this.count;
                var ring = this.ring;
                for (var i = 0; i < total; i++) {
                    var idx = (count++) % total;
                    destination.next(ring[idx]);
                }
            }
            destination.complete();
        };
        return TakeLastSubscriber;
    }(Subscriber_1.Subscriber));


    var takeLast_1 = {
    	takeLast: takeLast_2
    };

    var __extends$s = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    /* tslint:enable:max-line-length */
    /**
     * Emits a given value if the source Observable completes without emitting any
     * `next` value, otherwise mirrors the source Observable.
     *
     * <span class="informal">If the source Observable turns out to be empty, then
     * this operator will emit a default value.</span>
     *
     * <img src="./img/defaultIfEmpty.png" width="100%">
     *
     * `defaultIfEmpty` emits the values emitted by the source Observable or a
     * specified default value if the source Observable is empty (completes without
     * having emitted any `next` value).
     *
     * @example <caption>If no clicks happen in 5 seconds, then emit "no clicks"</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));
     * var result = clicksBeforeFive.defaultIfEmpty('no clicks');
     * result.subscribe(x => console.log(x));
     *
     * @see {@link empty}
     * @see {@link last}
     *
     * @param {any} [defaultValue=null] The default value used if the source
     * Observable is empty.
     * @return {Observable} An Observable that emits either the specified
     * `defaultValue` if the source Observable emits no items, or the values emitted
     * by the source Observable.
     * @method defaultIfEmpty
     * @owner Observable
     */
    function defaultIfEmpty(defaultValue) {
        if (defaultValue === void 0) { defaultValue = null; }
        return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };
    }
    var defaultIfEmpty_2 = defaultIfEmpty;
    var DefaultIfEmptyOperator = (function () {
        function DefaultIfEmptyOperator(defaultValue) {
            this.defaultValue = defaultValue;
        }
        DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
        };
        return DefaultIfEmptyOperator;
    }());
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DefaultIfEmptySubscriber = (function (_super) {
        __extends$s(DefaultIfEmptySubscriber, _super);
        function DefaultIfEmptySubscriber(destination, defaultValue) {
            _super.call(this, destination);
            this.defaultValue = defaultValue;
            this.isEmpty = true;
        }
        DefaultIfEmptySubscriber.prototype._next = function (value) {
            this.isEmpty = false;
            this.destination.next(value);
        };
        DefaultIfEmptySubscriber.prototype._complete = function () {
            if (this.isEmpty) {
                this.destination.next(this.defaultValue);
            }
            this.destination.complete();
        };
        return DefaultIfEmptySubscriber;
    }(Subscriber_1.Subscriber));


    var defaultIfEmpty_1 = {
    	defaultIfEmpty: defaultIfEmpty_2
    };

    /* tslint:enable:max-line-length */
    /**
     * Applies an accumulator function over the source Observable, and returns the
     * accumulated result when the source completes, given an optional seed value.
     *
     * <span class="informal">Combines together all values emitted on the source,
     * using an accumulator function that knows how to join a new source value into
     * the accumulation from the past.</span>
     *
     * <img src="./img/reduce.png" width="100%">
     *
     * Like
     * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),
     * `reduce` applies an `accumulator` function against an accumulation and each
     * value of the source Observable (from the past) to reduce it to a single
     * value, emitted on the output Observable. Note that `reduce` will only emit
     * one value, only when the source Observable completes. It is equivalent to
     * applying operator {@link scan} followed by operator {@link last}.
     *
     * Returns an Observable that applies a specified `accumulator` function to each
     * item emitted by the source Observable. If a `seed` value is specified, then
     * that value will be used as the initial value for the accumulator. If no seed
     * value is specified, the first item of the source is used as the seed.
     *
     * @example <caption>Count the number of click events that happened in 5 seconds</caption>
     * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')
     *   .takeUntil(Rx.Observable.interval(5000));
     * var ones = clicksInFiveSeconds.mapTo(1);
     * var seed = 0;
     * var count = ones.reduce((acc, one) => acc + one, seed);
     * count.subscribe(x => console.log(x));
     *
     * @see {@link count}
     * @see {@link expand}
     * @see {@link mergeScan}
     * @see {@link scan}
     *
     * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function
     * called on each source value.
     * @param {R} [seed] The initial accumulation value.
     * @return {Observable<R>} An Observable that emits a single value that is the
     * result of accumulating the values emitted by the source Observable.
     * @method reduce
     * @owner Observable
     */
    function reduce(accumulator, seed) {
        // providing a seed of `undefined` *should* be valid and trigger
        // hasSeed! so don't use `seed !== undefined` checks!
        // For this reason, we have to check it here at the original call site
        // otherwise inside Operator/Subscriber we won't know if `undefined`
        // means they didn't provide anything or if they literally provided `undefined`
        if (arguments.length >= 2) {
            return function reduceOperatorFunctionWithSeed(source) {
                return pipe_1.pipe(scan_1.scan(accumulator, seed), takeLast_1.takeLast(1), defaultIfEmpty_1.defaultIfEmpty(seed))(source);
            };
        }
        return function reduceOperatorFunction(source) {
            return pipe_1.pipe(scan_1.scan(function (acc, value, index) {
                return accumulator(acc, value, index + 1);
            }), takeLast_1.takeLast(1))(source);
        };
    }
    var reduce_2 = reduce;


    var reduce_1 = {
    	reduce: reduce_2
    };

    /* tslint:enable:max-line-length */
    /**
     * Applies an accumulator function over the source Observable, and returns the
     * accumulated result when the source completes, given an optional seed value.
     *
     * <span class="informal">Combines together all values emitted on the source,
     * using an accumulator function that knows how to join a new source value into
     * the accumulation from the past.</span>
     *
     * <img src="./img/reduce.png" width="100%">
     *
     * Like
     * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),
     * `reduce` applies an `accumulator` function against an accumulation and each
     * value of the source Observable (from the past) to reduce it to a single
     * value, emitted on the output Observable. Note that `reduce` will only emit
     * one value, only when the source Observable completes. It is equivalent to
     * applying operator {@link scan} followed by operator {@link last}.
     *
     * Returns an Observable that applies a specified `accumulator` function to each
     * item emitted by the source Observable. If a `seed` value is specified, then
     * that value will be used as the initial value for the accumulator. If no seed
     * value is specified, the first item of the source is used as the seed.
     *
     * @example <caption>Count the number of click events that happened in 5 seconds</caption>
     * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')
     *   .takeUntil(Rx.Observable.interval(5000));
     * var ones = clicksInFiveSeconds.mapTo(1);
     * var seed = 0;
     * var count = ones.reduce((acc, one) => acc + one, seed);
     * count.subscribe(x => console.log(x));
     *
     * @see {@link count}
     * @see {@link expand}
     * @see {@link mergeScan}
     * @see {@link scan}
     *
     * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function
     * called on each source value.
     * @param {R} [seed] The initial accumulation value.
     * @return {Observable<R>} An Observable that emits a single value that is the
     * result of accumulating the values emitted by the source Observable.
     * @method reduce
     * @owner Observable
     */
    function reduce$1(accumulator, seed) {
        // providing a seed of `undefined` *should* be valid and trigger
        // hasSeed! so don't use `seed !== undefined` checks!
        // For this reason, we have to check it here at the original call site
        // otherwise inside Operator/Subscriber we won't know if `undefined`
        // means they didn't provide anything or if they literally provided `undefined`
        if (arguments.length >= 2) {
            return reduce_1.reduce(accumulator, seed)(this);
        }
        return reduce_1.reduce(accumulator)(this);
    }
    var reduce_3 = reduce$1;

    var __extends$t = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };


    /**
     * Catches errors on the observable to be handled by returning a new observable or throwing an error.
     *
     * <img src="./img/catch.png" width="100%">
     *
     * @example <caption>Continues with a different Observable when there's an error</caption>
     *
     * Observable.of(1, 2, 3, 4, 5)
     *   .map(n => {
     * 	   if (n == 4) {
     * 	     throw 'four!';
     *     }
     *	   return n;
     *   })
     *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))
     *   .subscribe(x => console.log(x));
     *   // 1, 2, 3, I, II, III, IV, V
     *
     * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>
     *
     * Observable.of(1, 2, 3, 4, 5)
     *   .map(n => {
     * 	   if (n === 4) {
     * 	     throw 'four!';
     *     }
     * 	   return n;
     *   })
     *   .catch((err, caught) => caught)
     *   .take(30)
     *   .subscribe(x => console.log(x));
     *   // 1, 2, 3, 1, 2, 3, ...
     *
     * @example <caption>Throws a new error when the source Observable throws an error</caption>
     *
     * Observable.of(1, 2, 3, 4, 5)
     *   .map(n => {
     *     if (n == 4) {
     *       throw 'four!';
     *     }
     *     return n;
     *   })
     *   .catch(err => {
     *     throw 'error in source. Details: ' + err;
     *   })
     *   .subscribe(
     *     x => console.log(x),
     *     err => console.log(err)
     *   );
     *   // 1, 2, 3, error in source. Details: four!
     *
     * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
     *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
     *  is returned by the `selector` will be used to continue the observable chain.
     * @return {Observable} An observable that originates from either the source or the observable returned by the
     *  catch `selector` function.
     * @name catchError
     */
    function catchError(selector) {
        return function catchErrorOperatorFunction(source) {
            var operator = new CatchOperator(selector);
            var caught = source.lift(operator);
            return (operator.caught = caught);
        };
    }
    var catchError_2 = catchError;
    var CatchOperator = (function () {
        function CatchOperator(selector) {
            this.selector = selector;
        }
        CatchOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
        };
        return CatchOperator;
    }());
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var CatchSubscriber = (function (_super) {
        __extends$t(CatchSubscriber, _super);
        function CatchSubscriber(destination, selector, caught) {
            _super.call(this, destination);
            this.selector = selector;
            this.caught = caught;
        }
        // NOTE: overriding `error` instead of `_error` because we don't want
        // to have this flag this subscriber as `isStopped`. We can mimic the
        // behavior of the RetrySubscriber (from the `retry` operator), where
        // we unsubscribe from our source chain, reset our Subscriber flags,
        // then subscribe to the selector result.
        CatchSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var result = void 0;
                try {
                    result = this.selector(err, this.caught);
                }
                catch (err2) {
                    _super.prototype.error.call(this, err2);
                    return;
                }
                this._unsubscribeAndRecycle();
                this.add(subscribeToResult_1.subscribeToResult(this, result));
            }
        };
        return CatchSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));


    var catchError_1 = {
    	catchError: catchError_2
    };

    /**
     * Catches errors on the observable to be handled by returning a new observable or throwing an error.
     *
     * <img src="./img/catch.png" width="100%">
     *
     * @example <caption>Continues with a different Observable when there's an error</caption>
     *
     * Observable.of(1, 2, 3, 4, 5)
     *   .map(n => {
     * 	   if (n == 4) {
     * 	     throw 'four!';
     *     }
     *	   return n;
     *   })
     *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))
     *   .subscribe(x => console.log(x));
     *   // 1, 2, 3, I, II, III, IV, V
     *
     * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>
     *
     * Observable.of(1, 2, 3, 4, 5)
     *   .map(n => {
     * 	   if (n === 4) {
     * 	     throw 'four!';
     *     }
     * 	   return n;
     *   })
     *   .catch((err, caught) => caught)
     *   .take(30)
     *   .subscribe(x => console.log(x));
     *   // 1, 2, 3, 1, 2, 3, ...
     *
     * @example <caption>Throws a new error when the source Observable throws an error</caption>
     *
     * Observable.of(1, 2, 3, 4, 5)
     *   .map(n => {
     *     if (n == 4) {
     *       throw 'four!';
     *     }
     *     return n;
     *   })
     *   .catch(err => {
     *     throw 'error in source. Details: ' + err;
     *   })
     *   .subscribe(
     *     x => console.log(x),
     *     err => console.log(err)
     *   );
     *   // 1, 2, 3, error in source. Details: four!
     *
     * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
     *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
     *  is returned by the `selector` will be used to continue the observable chain.
     * @return {Observable} An observable that originates from either the source or the observable returned by the
     *  catch `selector` function.
     * @method catch
     * @name catch
     * @owner Observable
     */
    function _catch(selector) {
        return catchError_1.catchError(selector)(this);
    }
    var _catch_2 = _catch;

    /**
     * Converts a higher-order Observable into a first-order Observable by
     * concatenating the inner Observables in order.
     *
     * <span class="informal">Flattens an Observable-of-Observables by putting one
     * inner Observable after the other.</span>
     *
     * <img src="./img/concatAll.png" width="100%">
     *
     * Joins every Observable emitted by the source (a higher-order Observable), in
     * a serial fashion. It subscribes to each inner Observable only after the
     * previous inner Observable has completed, and merges all of their values into
     * the returned observable.
     *
     * __Warning:__ If the source Observable emits Observables quickly and
     * endlessly, and the inner Observables it emits generally complete slower than
     * the source emits, you can run into memory issues as the incoming Observables
     * collect in an unbounded buffer.
     *
     * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
     * to `1`.
     *
     * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
     * var firstOrder = higherOrder.concatAll();
     * firstOrder.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // (results are not concurrent)
     * // For every click on the "document" it will emit values 0 to 3 spaced
     * // on a 1000ms interval
     * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
     *
     * @see {@link combineAll}
     * @see {@link concat}
     * @see {@link concatMap}
     * @see {@link concatMapTo}
     * @see {@link exhaust}
     * @see {@link mergeAll}
     * @see {@link switch}
     * @see {@link zipAll}
     *
     * @return {Observable} An Observable emitting values from all the inner
     * Observables concatenated.
     * @method concatAll
     * @owner Observable
     */
    function concatAll() {
        return mergeAll_1.mergeAll(1);
    }
    var concatAll_2 = concatAll;


    var concatAll_1 = {
    	concatAll: concatAll_2
    };

    /* tslint:enable:max-line-length */
    /**
     * Converts a higher-order Observable into a first-order Observable by
     * concatenating the inner Observables in order.
     *
     * <span class="informal">Flattens an Observable-of-Observables by putting one
     * inner Observable after the other.</span>
     *
     * <img src="./img/concatAll.png" width="100%">
     *
     * Joins every Observable emitted by the source (a higher-order Observable), in
     * a serial fashion. It subscribes to each inner Observable only after the
     * previous inner Observable has completed, and merges all of their values into
     * the returned observable.
     *
     * __Warning:__ If the source Observable emits Observables quickly and
     * endlessly, and the inner Observables it emits generally complete slower than
     * the source emits, you can run into memory issues as the incoming Observables
     * collect in an unbounded buffer.
     *
     * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
     * to `1`.
     *
     * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
     * var firstOrder = higherOrder.concatAll();
     * firstOrder.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // (results are not concurrent)
     * // For every click on the "document" it will emit values 0 to 3 spaced
     * // on a 1000ms interval
     * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
     *
     * @see {@link combineAll}
     * @see {@link concat}
     * @see {@link concatMap}
     * @see {@link concatMapTo}
     * @see {@link exhaust}
     * @see {@link mergeAll}
     * @see {@link switch}
     * @see {@link zipAll}
     *
     * @return {Observable} An Observable emitting values from all the inner
     * Observables concatenated.
     * @method concatAll
     * @owner Observable
     */
    function concatAll$1() {
        return concatAll_1.concatAll()(this);
    }
    var concatAll_3 = concatAll$1;

    var fromPromise_1 = PromiseObservable_1.PromiseObservable.create;

    /**
     * Converts a higher-order Observable into a first-order Observable which
     * concurrently delivers all values that are emitted on the inner Observables.
     *
     * <span class="informal">Flattens an Observable-of-Observables.</span>
     *
     * <img src="./img/mergeAll.png" width="100%">
     *
     * `mergeAll` subscribes to an Observable that emits Observables, also known as
     * a higher-order Observable. Each time it observes one of these emitted inner
     * Observables, it subscribes to that and delivers all the values from the
     * inner Observable on the output Observable. The output Observable only
     * completes once all inner Observables have completed. Any error delivered by
     * a inner Observable will be immediately emitted on the output Observable.
     *
     * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
     * var firstOrder = higherOrder.mergeAll();
     * firstOrder.subscribe(x => console.log(x));
     *
     * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
     * var firstOrder = higherOrder.mergeAll(2);
     * firstOrder.subscribe(x => console.log(x));
     *
     * @see {@link combineAll}
     * @see {@link concatAll}
     * @see {@link exhaust}
     * @see {@link merge}
     * @see {@link mergeMap}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     * @see {@link switch}
     * @see {@link zipAll}
     *
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
     * Observables being subscribed to concurrently.
     * @return {Observable} An Observable that emits values coming from all the
     * inner Observables emitted by the source Observable.
     * @method mergeAll
     * @owner Observable
     */
    function mergeAll$1(concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        return mergeAll_1.mergeAll(concurrent)(this);
    }
    var mergeAll_3 = mergeAll$1;

    var __extends$u = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    /* tslint:enable:max-line-length */
    /**
     * Filter items emitted by the source Observable by only emitting those that
     * satisfy a specified predicate.
     *
     * <span class="informal">Like
     * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
     * it only emits a value from the source if it passes a criterion function.</span>
     *
     * <img src="./img/filter.png" width="100%">
     *
     * Similar to the well-known `Array.prototype.filter` method, this operator
     * takes values from the source Observable, passes them through a `predicate`
     * function and only emits those values that yielded `true`.
     *
     * @example <caption>Emit only click events whose target was a DIV element</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
     * clicksOnDivs.subscribe(x => console.log(x));
     *
     * @see {@link distinct}
     * @see {@link distinctUntilChanged}
     * @see {@link distinctUntilKeyChanged}
     * @see {@link ignoreElements}
     * @see {@link partition}
     * @see {@link skip}
     *
     * @param {function(value: T, index: number): boolean} predicate A function that
     * evaluates each value emitted by the source Observable. If it returns `true`,
     * the value is emitted, if `false` the value is not passed to the output
     * Observable. The `index` parameter is the number `i` for the i-th source
     * emission that has happened since the subscription, starting from the number
     * `0`.
     * @param {any} [thisArg] An optional argument to determine the value of `this`
     * in the `predicate` function.
     * @return {Observable} An Observable of values from the source that were
     * allowed by the `predicate` function.
     * @method filter
     * @owner Observable
     */
    function filter(predicate, thisArg) {
        return function filterOperatorFunction(source) {
            return source.lift(new FilterOperator(predicate, thisArg));
        };
    }
    var filter_2 = filter;
    var FilterOperator = (function () {
        function FilterOperator(predicate, thisArg) {
            this.predicate = predicate;
            this.thisArg = thisArg;
        }
        FilterOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
        };
        return FilterOperator;
    }());
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var FilterSubscriber = (function (_super) {
        __extends$u(FilterSubscriber, _super);
        function FilterSubscriber(destination, predicate, thisArg) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.count = 0;
        }
        // the try catch block below is left specifically for
        // optimization and perf reasons. a tryCatcher is not necessary here.
        FilterSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.predicate.call(this.thisArg, value, this.count++);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this.destination.next(value);
            }
        };
        return FilterSubscriber;
    }(Subscriber_1.Subscriber));


    var filter_1 = {
    	filter: filter_2
    };

    /* tslint:enable:max-line-length */
    /**
     * Filter items emitted by the source Observable by only emitting those that
     * satisfy a specified predicate.
     *
     * <span class="informal">Like
     * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
     * it only emits a value from the source if it passes a criterion function.</span>
     *
     * <img src="./img/filter.png" width="100%">
     *
     * Similar to the well-known `Array.prototype.filter` method, this operator
     * takes values from the source Observable, passes them through a `predicate`
     * function and only emits those values that yielded `true`.
     *
     * @example <caption>Emit only click events whose target was a DIV element</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
     * clicksOnDivs.subscribe(x => console.log(x));
     *
     * @see {@link distinct}
     * @see {@link distinctUntilChanged}
     * @see {@link distinctUntilKeyChanged}
     * @see {@link ignoreElements}
     * @see {@link partition}
     * @see {@link skip}
     *
     * @param {function(value: T, index: number): boolean} predicate A function that
     * evaluates each value emitted by the source Observable. If it returns `true`,
     * the value is emitted, if `false` the value is not passed to the output
     * Observable. The `index` parameter is the number `i` for the i-th source
     * emission that has happened since the subscription, starting from the number
     * `0`.
     * @param {any} [thisArg] An optional argument to determine the value of `this`
     * in the `predicate` function.
     * @return {Observable} An Observable of values from the source that were
     * allowed by the `predicate` function.
     * @method filter
     * @owner Observable
     */
    function filter$1(predicate, thisArg) {
        return filter_1.filter(predicate, thisArg)(this);
    }
    var filter_3 = filter$1;

    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@whatItDoes Represents an event triggered when a navigation starts.
     *
     * \@stable
     */
    var NavigationStart = (function () {
        /**
         * @param {?} id
         * @param {?} url
         */
        function NavigationStart(id, url) {
            this.id = id;
            this.url = url;
        }
        /**
         * \@docsNotRequired
         * @return {?}
         */
        NavigationStart.prototype.toString = function () { return "NavigationStart(id: " + this.id + ", url: '" + this.url + "')"; };
        return NavigationStart;
    }());
    /**
     * \@whatItDoes Represents an event triggered when a navigation ends successfully.
     *
     * \@stable
     */
    var NavigationEnd = (function () {
        /**
         * @param {?} id
         * @param {?} url
         * @param {?} urlAfterRedirects
         */
        function NavigationEnd(id, url, urlAfterRedirects) {
            this.id = id;
            this.url = url;
            this.urlAfterRedirects = urlAfterRedirects;
        }
        /**
         * \@docsNotRequired
         * @return {?}
         */
        NavigationEnd.prototype.toString = function () {
            return "NavigationEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "')";
        };
        return NavigationEnd;
    }());
    /**
     * \@whatItDoes Represents an event triggered when a navigation is canceled.
     *
     * \@stable
     */
    var NavigationCancel = (function () {
        /**
         * @param {?} id
         * @param {?} url
         * @param {?} reason
         */
        function NavigationCancel(id, url, reason) {
            this.id = id;
            this.url = url;
            this.reason = reason;
        }
        /**
         * \@docsNotRequired
         * @return {?}
         */
        NavigationCancel.prototype.toString = function () { return "NavigationCancel(id: " + this.id + ", url: '" + this.url + "')"; };
        return NavigationCancel;
    }());
    /**
     * \@whatItDoes Represents an event triggered when a navigation fails due to an unexpected error.
     *
     * \@stable
     */
    var NavigationError = (function () {
        /**
         * @param {?} id
         * @param {?} url
         * @param {?} error
         */
        function NavigationError(id, url, error) {
            this.id = id;
            this.url = url;
            this.error = error;
        }
        /**
         * \@docsNotRequired
         * @return {?}
         */
        NavigationError.prototype.toString = function () {
            return "NavigationError(id: " + this.id + ", url: '" + this.url + "', error: " + this.error + ")";
        };
        return NavigationError;
    }());
    /**
     * \@whatItDoes Represents an event triggered when routes are recognized.
     *
     * \@stable
     */
    var RoutesRecognized = (function () {
        /**
         * @param {?} id
         * @param {?} url
         * @param {?} urlAfterRedirects
         * @param {?} state
         */
        function RoutesRecognized(id, url, urlAfterRedirects, state) {
            this.id = id;
            this.url = url;
            this.urlAfterRedirects = urlAfterRedirects;
            this.state = state;
        }
        /**
         * \@docsNotRequired
         * @return {?}
         */
        RoutesRecognized.prototype.toString = function () {
            return "RoutesRecognized(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
        };
        return RoutesRecognized;
    }());
    /**
     * \@whatItDoes Represents an event triggered before lazy loading a route config.
     *
     * \@experimental
     */
    var RouteConfigLoadStart = (function () {
        /**
         * @param {?} route
         */
        function RouteConfigLoadStart(route) {
            this.route = route;
        }
        /**
         * @return {?}
         */
        RouteConfigLoadStart.prototype.toString = function () { return "RouteConfigLoadStart(path: " + this.route.path + ")"; };
        return RouteConfigLoadStart;
    }());
    /**
     * \@whatItDoes Represents an event triggered when a route has been lazy loaded.
     *
     * \@experimental
     */
    var RouteConfigLoadEnd = (function () {
        /**
         * @param {?} route
         */
        function RouteConfigLoadEnd(route) {
            this.route = route;
        }
        /**
         * @return {?}
         */
        RouteConfigLoadEnd.prototype.toString = function () { return "RouteConfigLoadEnd(path: " + this.route.path + ")"; };
        return RouteConfigLoadEnd;
    }());
    /**
     * \@whatItDoes Represents the start of the Guard phase of routing.
     *
     * \@experimental
     */
    var GuardsCheckStart = (function () {
        /**
         * @param {?} id
         * @param {?} url
         * @param {?} urlAfterRedirects
         * @param {?} state
         */
        function GuardsCheckStart(id, url, urlAfterRedirects, state) {
            this.id = id;
            this.url = url;
            this.urlAfterRedirects = urlAfterRedirects;
            this.state = state;
        }
        /**
         * @return {?}
         */
        GuardsCheckStart.prototype.toString = function () {
            return "GuardsCheckStart(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
        };
        return GuardsCheckStart;
    }());
    /**
     * \@whatItDoes Represents the end of the Guard phase of routing.
     *
     * \@experimental
     */
    var GuardsCheckEnd = (function () {
        /**
         * @param {?} id
         * @param {?} url
         * @param {?} urlAfterRedirects
         * @param {?} state
         * @param {?} shouldActivate
         */
        function GuardsCheckEnd(id, url, urlAfterRedirects, state, shouldActivate) {
            this.id = id;
            this.url = url;
            this.urlAfterRedirects = urlAfterRedirects;
            this.state = state;
            this.shouldActivate = shouldActivate;
        }
        /**
         * @return {?}
         */
        GuardsCheckEnd.prototype.toString = function () {
            return "GuardsCheckEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ", shouldActivate: " + this.shouldActivate + ")";
        };
        return GuardsCheckEnd;
    }());
    /**
     * \@whatItDoes Represents the start of the Resolve phase of routing. The timing of this
     * event may change, thus it's experimental. In the current iteration it will run
     * in the "resolve" phase whether there's things to resolve or not. In the future this
     * behavior may change to only run when there are things to be resolved.
     *
     * \@experimental
     */
    var ResolveStart = (function () {
        /**
         * @param {?} id
         * @param {?} url
         * @param {?} urlAfterRedirects
         * @param {?} state
         */
        function ResolveStart(id, url, urlAfterRedirects, state) {
            this.id = id;
            this.url = url;
            this.urlAfterRedirects = urlAfterRedirects;
            this.state = state;
        }
        /**
         * @return {?}
         */
        ResolveStart.prototype.toString = function () {
            return "ResolveStart(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
        };
        return ResolveStart;
    }());
    /**
     * \@whatItDoes Represents the end of the Resolve phase of routing. See note on
     * {\@link ResolveStart} for use of this experimental API.
     *
     * \@experimental
     */
    var ResolveEnd = (function () {
        /**
         * @param {?} id
         * @param {?} url
         * @param {?} urlAfterRedirects
         * @param {?} state
         */
        function ResolveEnd(id, url, urlAfterRedirects, state) {
            this.id = id;
            this.url = url;
            this.urlAfterRedirects = urlAfterRedirects;
            this.state = state;
        }
        /**
         * @return {?}
         */
        ResolveEnd.prototype.toString = function () {
            return "ResolveEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
        };
        return ResolveEnd;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@whatItDoes Name of the primary outlet.
     *
     * \@stable
     */
    var PRIMARY_OUTLET = 'primary';
    var ParamsAsMap = (function () {
        /**
         * @param {?} params
         */
        function ParamsAsMap(params) {
            this.params = params || {};
        }
        /**
         * @param {?} name
         * @return {?}
         */
        ParamsAsMap.prototype.has = function (name) { return this.params.hasOwnProperty(name); };
        /**
         * @param {?} name
         * @return {?}
         */
        ParamsAsMap.prototype.get = function (name) {
            if (this.has(name)) {
                var /** @type {?} */ v = this.params[name];
                return Array.isArray(v) ? v[0] : v;
            }
            return null;
        };
        /**
         * @param {?} name
         * @return {?}
         */
        ParamsAsMap.prototype.getAll = function (name) {
            if (this.has(name)) {
                var /** @type {?} */ v = this.params[name];
                return Array.isArray(v) ? v : [v];
            }
            return [];
        };
        Object.defineProperty(ParamsAsMap.prototype, "keys", {
            /**
             * @return {?}
             */
            get: function () { return Object.keys(this.params); },
            enumerable: true,
            configurable: true
        });
        return ParamsAsMap;
    }());
    /**
     * Convert a {\@link Params} instance to a {\@link ParamMap}.
     *
     * \@stable
     * @param {?} params
     * @return {?}
     */
    function convertToParamMap(params) {
        return new ParamsAsMap(params);
    }
    var NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';
    /**
     * @param {?} message
     * @return {?}
     */
    function navigationCancelingError(message) {
        var /** @type {?} */ error = Error('NavigationCancelingError: ' + message);
        ((error))[NAVIGATION_CANCELING_ERROR] = true;
        return error;
    }
    /**
     * @param {?} error
     * @return {?}
     */
    function isNavigationCancelingError(error) {
        return ((error))[NAVIGATION_CANCELING_ERROR];
    }
    /**
     * @param {?} segments
     * @param {?} segmentGroup
     * @param {?} route
     * @return {?}
     */
    function defaultUrlMatcher(segments, segmentGroup, route) {
        var /** @type {?} */ parts = ((route.path)).split('/');
        if (parts.length > segments.length) {
            // The actual URL is shorter than the config, no match
            return null;
        }
        if (route.pathMatch === 'full' &&
            (segmentGroup.hasChildren() || parts.length < segments.length)) {
            // The config is longer than the actual URL but we are looking for a full match, return null
            return null;
        }
        var /** @type {?} */ posParams = {};
        // Check each config part against the actual URL
        for (var /** @type {?} */ index = 0; index < parts.length; index++) {
            var /** @type {?} */ part = parts[index];
            var /** @type {?} */ segment = segments[index];
            var /** @type {?} */ isParameter = part.startsWith(':');
            if (isParameter) {
                posParams[part.substring(1)] = segment;
            }
            else if (part !== segment.path) {
                // The actual URL part does not match the config, no match
                return null;
            }
        }
        return { consumed: segments.slice(0, parts.length), posParams: posParams };
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var LoadedRouterConfig = (function () {
        /**
         * @param {?} routes
         * @param {?} module
         */
        function LoadedRouterConfig(routes, module) {
            this.routes = routes;
            this.module = module;
        }
        return LoadedRouterConfig;
    }());
    /**
     * @param {?} config
     * @param {?=} parentPath
     * @return {?}
     */
    function validateConfig(config, parentPath) {
        if (parentPath === void 0) { parentPath = ''; }
        // forEach doesn't iterate undefined values
        for (var /** @type {?} */ i = 0; i < config.length; i++) {
            var /** @type {?} */ route = config[i];
            var /** @type {?} */ fullPath = getFullPath(parentPath, route);
            validateNode$1(route, fullPath);
        }
    }
    /**
     * @param {?} route
     * @param {?} fullPath
     * @return {?}
     */
    function validateNode$1(route, fullPath) {
        if (!route) {
            throw new Error("\n      Invalid configuration of route '" + fullPath + "': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    ");
        }
        if (Array.isArray(route)) {
            throw new Error("Invalid configuration of route '" + fullPath + "': Array cannot be specified");
        }
        if (!route.component && (route.outlet && route.outlet !== PRIMARY_OUTLET)) {
            throw new Error("Invalid configuration of route '" + fullPath + "': a componentless route cannot have a named outlet set");
        }
        if (route.redirectTo && route.children) {
            throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and children cannot be used together");
        }
        if (route.redirectTo && route.loadChildren) {
            throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and loadChildren cannot be used together");
        }
        if (route.children && route.loadChildren) {
            throw new Error("Invalid configuration of route '" + fullPath + "': children and loadChildren cannot be used together");
        }
        if (route.redirectTo && route.component) {
            throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and component cannot be used together");
        }
        if (route.path && route.matcher) {
            throw new Error("Invalid configuration of route '" + fullPath + "': path and matcher cannot be used together");
        }
        if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {
            throw new Error("Invalid configuration of route '" + fullPath + "'. One of the following must be provided: component, redirectTo, children or loadChildren");
        }
        if (route.path === void 0 && route.matcher === void 0) {
            throw new Error("Invalid configuration of route '" + fullPath + "': routes must have either a path or a matcher specified");
        }
        if (typeof route.path === 'string' && route.path.charAt(0) === '/') {
            throw new Error("Invalid configuration of route '" + fullPath + "': path cannot start with a slash");
        }
        if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {
            var /** @type {?} */ exp = "The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.";
            throw new Error("Invalid configuration of route '{path: \"" + fullPath + "\", redirectTo: \"" + route.redirectTo + "\"}': please provide 'pathMatch'. " + exp);
        }
        if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {
            throw new Error("Invalid configuration of route '" + fullPath + "': pathMatch can only be set to 'prefix' or 'full'");
        }
        if (route.children) {
            validateConfig(route.children, fullPath);
        }
    }
    /**
     * @param {?} parentPath
     * @param {?} currentRoute
     * @return {?}
     */
    function getFullPath(parentPath, currentRoute) {
        if (!currentRoute) {
            return parentPath;
        }
        if (!parentPath && !currentRoute.path) {
            return '';
        }
        else if (parentPath && !currentRoute.path) {
            return parentPath + "/";
        }
        else if (!parentPath && currentRoute.path) {
            return currentRoute.path;
        }
        else {
            return parentPath + "/" + currentRoute.path;
        }
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function shallowEqualArrays(a, b) {
        if (a.length !== b.length)
            return false;
        for (var /** @type {?} */ i = 0; i < a.length; ++i) {
            if (!shallowEqual(a[i], b[i]))
                return false;
        }
        return true;
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function shallowEqual(a, b) {
        var /** @type {?} */ k1 = Object.keys(a);
        var /** @type {?} */ k2 = Object.keys(b);
        if (k1.length != k2.length) {
            return false;
        }
        var /** @type {?} */ key;
        for (var /** @type {?} */ i = 0; i < k1.length; i++) {
            key = k1[i];
            if (a[key] !== b[key]) {
                return false;
            }
        }
        return true;
    }
    /**
     * @template T
     * @param {?} arr
     * @return {?}
     */
    function flatten$1(arr) {
        return Array.prototype.concat.apply([], arr);
    }
    /**
     * @template T
     * @param {?} a
     * @return {?}
     */
    function last$1$1(a) {
        return a.length > 0 ? a[a.length - 1] : null;
    }
    /**
     * @param {?} bools
     * @return {?}
     */
    /**
     * @template K, V
     * @param {?} map
     * @param {?} callback
     * @return {?}
     */
    function forEach(map$$1, callback) {
        for (var /** @type {?} */ prop in map$$1) {
            if (map$$1.hasOwnProperty(prop)) {
                callback(map$$1[prop], prop);
            }
        }
    }
    /**
     * @template A, B
     * @param {?} obj
     * @param {?} fn
     * @return {?}
     */
    function waitForMap(obj, fn) {
        if (Object.keys(obj).length === 0) {
            return of_1({});
        }
        var /** @type {?} */ waitHead = [];
        var /** @type {?} */ waitTail = [];
        var /** @type {?} */ res = {};
        forEach(obj, function (a, k) {
            var /** @type {?} */ mapped = map_3.call(fn(k, a), function (r) { return res[k] = r; });
            if (k === PRIMARY_OUTLET) {
                waitHead.push(mapped);
            }
            else {
                waitTail.push(mapped);
            }
        });
        var /** @type {?} */ concat$ = concatAll_3.call(of_1.apply(void 0, waitHead.concat(waitTail)));
        var /** @type {?} */ last$ = last_3.call(concat$);
        return map_3.call(last$, function () { return res; });
    }
    /**
     * @param {?} observables
     * @return {?}
     */
    function andObservables(observables) {
        var /** @type {?} */ merged$ = mergeAll_3.call(observables);
        return every_3.call(merged$, function (result) { return result === true; });
    }
    /**
     * @template T
     * @param {?} value
     * @return {?}
     */
    function wrapIntoObservable(value) {
        if (isObservable(value)) {
            return value;
        }
        if (isPromise$1(value)) {
            // Use `Promise.resolve()` to wrap promise-like instances.
            // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the
            // change detection.
            return fromPromise_1(Promise.resolve(value));
        }
        return of_1(/** @type {?} */ (value));
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @return {?}
     */
    function createEmptyUrlTree() {
        return new UrlTree(new UrlSegmentGroup([], {}), {}, null);
    }
    /**
     * @param {?} container
     * @param {?} containee
     * @param {?} exact
     * @return {?}
     */
    function containsTree(container, containee, exact) {
        if (exact) {
            return equalQueryParams(container.queryParams, containee.queryParams) &&
                equalSegmentGroups(container.root, containee.root);
        }
        return containsQueryParams(container.queryParams, containee.queryParams) &&
            containsSegmentGroup(container.root, containee.root);
    }
    /**
     * @param {?} container
     * @param {?} containee
     * @return {?}
     */
    function equalQueryParams(container, containee) {
        return shallowEqual(container, containee);
    }
    /**
     * @param {?} container
     * @param {?} containee
     * @return {?}
     */
    function equalSegmentGroups(container, containee) {
        if (!equalPath(container.segments, containee.segments))
            return false;
        if (container.numberOfChildren !== containee.numberOfChildren)
            return false;
        for (var /** @type {?} */ c in containee.children) {
            if (!container.children[c])
                return false;
            if (!equalSegmentGroups(container.children[c], containee.children[c]))
                return false;
        }
        return true;
    }
    /**
     * @param {?} container
     * @param {?} containee
     * @return {?}
     */
    function containsQueryParams(container, containee) {
        return Object.keys(containee).length <= Object.keys(container).length &&
            Object.keys(containee).every(function (key) { return containee[key] === container[key]; });
    }
    /**
     * @param {?} container
     * @param {?} containee
     * @return {?}
     */
    function containsSegmentGroup(container, containee) {
        return containsSegmentGroupHelper(container, containee, containee.segments);
    }
    /**
     * @param {?} container
     * @param {?} containee
     * @param {?} containeePaths
     * @return {?}
     */
    function containsSegmentGroupHelper(container, containee, containeePaths) {
        if (container.segments.length > containeePaths.length) {
            var /** @type {?} */ current = container.segments.slice(0, containeePaths.length);
            if (!equalPath(current, containeePaths))
                return false;
            if (containee.hasChildren())
                return false;
            return true;
        }
        else if (container.segments.length === containeePaths.length) {
            if (!equalPath(container.segments, containeePaths))
                return false;
            for (var /** @type {?} */ c in containee.children) {
                if (!container.children[c])
                    return false;
                if (!containsSegmentGroup(container.children[c], containee.children[c]))
                    return false;
            }
            return true;
        }
        else {
            var /** @type {?} */ current = containeePaths.slice(0, container.segments.length);
            var /** @type {?} */ next = containeePaths.slice(container.segments.length);
            if (!equalPath(container.segments, current))
                return false;
            if (!container.children[PRIMARY_OUTLET])
                return false;
            return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);
        }
    }
    /**
     * \@whatItDoes Represents the parsed URL.
     *
     * \@howToUse
     *
     * ```
     * \@Component({templateUrl:'template.html'})
     * class MyComponent {
     *   constructor(router: Router) {
     *     const tree: UrlTree =
     *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');
     *     const f = tree.fragment; // return 'fragment'
     *     const q = tree.queryParams; // returns {debug: 'true'}
     *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];
     *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'
     *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'
     *     g.children['support'].segments; // return 1 segment 'help'
     *   }
     * }
     * ```
     *
     * \@description
     *
     * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a
     * serialized tree.
     * UrlTree is a data structure that provides a lot of affordances in dealing with URLs
     *
     * \@stable
     */
    var UrlTree = (function () {
        /**
         * \@internal
         * @param {?} root
         * @param {?} queryParams
         * @param {?} fragment
         */
        function UrlTree(root, queryParams, fragment) {
            this.root = root;
            this.queryParams = queryParams;
            this.fragment = fragment;
        }
        Object.defineProperty(UrlTree.prototype, "queryParamMap", {
            /**
             * @return {?}
             */
            get: function () {
                if (!this._queryParamMap) {
                    this._queryParamMap = convertToParamMap(this.queryParams);
                }
                return this._queryParamMap;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * \@docsNotRequired
         * @return {?}
         */
        UrlTree.prototype.toString = function () { return DEFAULT_SERIALIZER.serialize(this); };
        return UrlTree;
    }());
    /**
     * \@whatItDoes Represents the parsed URL segment group.
     *
     * See {\@link UrlTree} for more information.
     *
     * \@stable
     */
    var UrlSegmentGroup = (function () {
        /**
         * @param {?} segments
         * @param {?} children
         */
        function UrlSegmentGroup(segments, children) {
            var _this = this;
            this.segments = segments;
            this.children = children;
            /**
             * The parent node in the url tree
             */
            this.parent = null;
            forEach(children, function (v, k) { return v.parent = _this; });
        }
        /**
         * Whether the segment has child segments
         * @return {?}
         */
        UrlSegmentGroup.prototype.hasChildren = function () { return this.numberOfChildren > 0; };
        Object.defineProperty(UrlSegmentGroup.prototype, "numberOfChildren", {
            /**
             * Number of child segments
             * @return {?}
             */
            get: function () { return Object.keys(this.children).length; },
            enumerable: true,
            configurable: true
        });
        /**
         * \@docsNotRequired
         * @return {?}
         */
        UrlSegmentGroup.prototype.toString = function () { return serializePaths(this); };
        return UrlSegmentGroup;
    }());
    /**
     * \@whatItDoes Represents a single URL segment.
     *
     * \@howToUse
     *
     * ```
     * \@Component({templateUrl:'template.html'})
     * class MyComponent {
     *   constructor(router: Router) {
     *     const tree: UrlTree = router.parseUrl('/team;id=33');
     *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];
     *     const s: UrlSegment[] = g.segments;
     *     s[0].path; // returns 'team'
     *     s[0].parameters; // returns {id: 33}
     *   }
     * }
     * ```
     *
     * \@description
     *
     * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix
     * parameters associated with the segment.
     *
     * \@stable
     */
    var UrlSegment = (function () {
        /**
         * @param {?} path
         * @param {?} parameters
         */
        function UrlSegment(path, parameters) {
            this.path = path;
            this.parameters = parameters;
        }
        Object.defineProperty(UrlSegment.prototype, "parameterMap", {
            /**
             * @return {?}
             */
            get: function () {
                if (!this._parameterMap) {
                    this._parameterMap = convertToParamMap(this.parameters);
                }
                return this._parameterMap;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * \@docsNotRequired
         * @return {?}
         */
        UrlSegment.prototype.toString = function () { return serializePath(this); };
        return UrlSegment;
    }());
    /**
     * @param {?} as
     * @param {?} bs
     * @return {?}
     */
    function equalSegments(as, bs) {
        return equalPath(as, bs) && as.every(function (a, i) { return shallowEqual(a.parameters, bs[i].parameters); });
    }
    /**
     * @param {?} as
     * @param {?} bs
     * @return {?}
     */
    function equalPath(as, bs) {
        if (as.length !== bs.length)
            return false;
        return as.every(function (a, i) { return a.path === bs[i].path; });
    }
    /**
     * @template T
     * @param {?} segment
     * @param {?} fn
     * @return {?}
     */
    function mapChildrenIntoArray(segment, fn) {
        var /** @type {?} */ res = [];
        forEach(segment.children, function (child, childOutlet) {
            if (childOutlet === PRIMARY_OUTLET) {
                res = res.concat(fn(child, childOutlet));
            }
        });
        forEach(segment.children, function (child, childOutlet) {
            if (childOutlet !== PRIMARY_OUTLET) {
                res = res.concat(fn(child, childOutlet));
            }
        });
        return res;
    }
    /**
     * \@whatItDoes Serializes and deserializes a URL string into a URL tree.
     *
     * \@description The url serialization strategy is customizable. You can
     * make all URLs case insensitive by providing a custom UrlSerializer.
     *
     * See {\@link DefaultUrlSerializer} for an example of a URL serializer.
     *
     * \@stable
     * @abstract
     */
    var UrlSerializer = (function () {
        function UrlSerializer() {
        }
        /**
         * Parse a url into a {\@link UrlTree}
         * @abstract
         * @param {?} url
         * @return {?}
         */
        UrlSerializer.prototype.parse = function (url) { };
        /**
         * Converts a {\@link UrlTree} into a url
         * @abstract
         * @param {?} tree
         * @return {?}
         */
        UrlSerializer.prototype.serialize = function (tree) { };
        return UrlSerializer;
    }());
    /**
     * \@whatItDoes A default implementation of the {\@link UrlSerializer}.
     *
     * \@description
     *
     * Example URLs:
     *
     * ```
     * /inbox/33(popup:compose)
     * /inbox/33;open=true/messages/44
     * ```
     *
     * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the
     * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to
     * specify route specific parameters.
     *
     * \@stable
     */
    var DefaultUrlSerializer = (function () {
        function DefaultUrlSerializer() {
        }
        /**
         * Parses a url into a {\@link UrlTree}
         * @param {?} url
         * @return {?}
         */
        DefaultUrlSerializer.prototype.parse = function (url) {
            var /** @type {?} */ p = new UrlParser(url);
            return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
        };
        /**
         * Converts a {\@link UrlTree} into a url
         * @param {?} tree
         * @return {?}
         */
        DefaultUrlSerializer.prototype.serialize = function (tree) {
            var /** @type {?} */ segment = "/" + serializeSegment(tree.root, true);
            var /** @type {?} */ query = serializeQueryParams(tree.queryParams);
            var /** @type {?} */ fragment = typeof tree.fragment === "string" ? "#" + encodeURI(/** @type {?} */ ((tree.fragment))) : '';
            return "" + segment + query + fragment;
        };
        return DefaultUrlSerializer;
    }());
    var DEFAULT_SERIALIZER = new DefaultUrlSerializer();
    /**
     * @param {?} segment
     * @return {?}
     */
    function serializePaths(segment) {
        return segment.segments.map(function (p) { return serializePath(p); }).join('/');
    }
    /**
     * @param {?} segment
     * @param {?} root
     * @return {?}
     */
    function serializeSegment(segment, root) {
        if (!segment.hasChildren()) {
            return serializePaths(segment);
        }
        if (root) {
            var /** @type {?} */ primary = segment.children[PRIMARY_OUTLET] ?
                serializeSegment(segment.children[PRIMARY_OUTLET], false) :
                '';
            var /** @type {?} */ children_1 = [];
            forEach(segment.children, function (v, k) {
                if (k !== PRIMARY_OUTLET) {
                    children_1.push(k + ":" + serializeSegment(v, false));
                }
            });
            return children_1.length > 0 ? primary + "(" + children_1.join('//') + ")" : primary;
        }
        else {
            var /** @type {?} */ children = mapChildrenIntoArray(segment, function (v, k) {
                if (k === PRIMARY_OUTLET) {
                    return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];
                }
                return [k + ":" + serializeSegment(v, false)];
            });
            return serializePaths(segment) + "/(" + children.join('//') + ")";
        }
    }
    /**
     * This method is intended for encoding *key* or *value* parts of query component. We need a custom
     * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
     * encoded per http://tools.ietf.org/html/rfc3986:
     *    query         = *( pchar / "/" / "?" )
     *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "\@"
     *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
     *    pct-encoded   = "%" HEXDIG HEXDIG
     *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
     *                     / "*" / "+" / "," / ";" / "="
     * @param {?} s
     * @return {?}
     */
    function encode(s) {
        return encodeURIComponent(s)
            .replace(/%40/g, '@')
            .replace(/%3A/gi, ':')
            .replace(/%24/g, '$')
            .replace(/%2C/gi, ',')
            .replace(/%3B/gi, ';');
    }
    /**
     * @param {?} s
     * @return {?}
     */
    function decode(s) {
        return decodeURIComponent(s);
    }
    /**
     * @param {?} path
     * @return {?}
     */
    function serializePath(path) {
        return "" + encode(path.path) + serializeParams(path.parameters);
    }
    /**
     * @param {?} params
     * @return {?}
     */
    function serializeParams(params) {
        return Object.keys(params).map(function (key) { return ";" + encode(key) + "=" + encode(params[key]); }).join('');
    }
    /**
     * @param {?} params
     * @return {?}
     */
    function serializeQueryParams(params) {
        var /** @type {?} */ strParams = Object.keys(params).map(function (name) {
            var /** @type {?} */ value = params[name];
            return Array.isArray(value) ? value.map(function (v) { return encode(name) + "=" + encode(v); }).join('&') :
                encode(name) + "=" + encode(value);
        });
        return strParams.length ? "?" + strParams.join("&") : '';
    }
    var SEGMENT_RE = /^[^\/()?;=&#]+/;
    /**
     * @param {?} str
     * @return {?}
     */
    function matchSegments(str) {
        var /** @type {?} */ match = str.match(SEGMENT_RE);
        return match ? match[0] : '';
    }
    var QUERY_PARAM_RE = /^[^=?&#]+/;
    /**
     * @param {?} str
     * @return {?}
     */
    function matchQueryParams(str) {
        var /** @type {?} */ match = str.match(QUERY_PARAM_RE);
        return match ? match[0] : '';
    }
    var QUERY_PARAM_VALUE_RE = /^[^?&#]+/;
    /**
     * @param {?} str
     * @return {?}
     */
    function matchUrlQueryParamValue(str) {
        var /** @type {?} */ match = str.match(QUERY_PARAM_VALUE_RE);
        return match ? match[0] : '';
    }
    var UrlParser = (function () {
        /**
         * @param {?} url
         */
        function UrlParser(url) {
            this.url = url;
            this.remaining = url;
        }
        /**
         * @return {?}
         */
        UrlParser.prototype.parseRootSegment = function () {
            this.consumeOptional('/');
            if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {
                return new UrlSegmentGroup([], {});
            }
            // The root segment group never has segments
            return new UrlSegmentGroup([], this.parseChildren());
        };
        /**
         * @return {?}
         */
        UrlParser.prototype.parseQueryParams = function () {
            var /** @type {?} */ params = {};
            if (this.consumeOptional('?')) {
                do {
                    this.parseQueryParam(params);
                } while (this.consumeOptional('&'));
            }
            return params;
        };
        /**
         * @return {?}
         */
        UrlParser.prototype.parseFragment = function () {
            return this.consumeOptional('#') ? decodeURI(this.remaining) : null;
        };
        /**
         * @return {?}
         */
        UrlParser.prototype.parseChildren = function () {
            if (this.remaining === '') {
                return {};
            }
            this.consumeOptional('/');
            var /** @type {?} */ segments = [];
            if (!this.peekStartsWith('(')) {
                segments.push(this.parseSegment());
            }
            while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {
                this.capture('/');
                segments.push(this.parseSegment());
            }
            var /** @type {?} */ children = {};
            if (this.peekStartsWith('/(')) {
                this.capture('/');
                children = this.parseParens(true);
            }
            var /** @type {?} */ res = {};
            if (this.peekStartsWith('(')) {
                res = this.parseParens(false);
            }
            if (segments.length > 0 || Object.keys(children).length > 0) {
                res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);
            }
            return res;
        };
        /**
         * @return {?}
         */
        UrlParser.prototype.parseSegment = function () {
            var /** @type {?} */ path = matchSegments(this.remaining);
            if (path === '' && this.peekStartsWith(';')) {
                throw new Error("Empty path url segment cannot have parameters: '" + this.remaining + "'.");
            }
            this.capture(path);
            return new UrlSegment(decode(path), this.parseMatrixParams());
        };
        /**
         * @return {?}
         */
        UrlParser.prototype.parseMatrixParams = function () {
            var /** @type {?} */ params = {};
            while (this.consumeOptional(';')) {
                this.parseParam(params);
            }
            return params;
        };
        /**
         * @param {?} params
         * @return {?}
         */
        UrlParser.prototype.parseParam = function (params) {
            var /** @type {?} */ key = matchSegments(this.remaining);
            if (!key) {
                return;
            }
            this.capture(key);
            var /** @type {?} */ value = '';
            if (this.consumeOptional('=')) {
                var /** @type {?} */ valueMatch = matchSegments(this.remaining);
                if (valueMatch) {
                    value = valueMatch;
                    this.capture(value);
                }
            }
            params[decode(key)] = decode(value);
        };
        /**
         * @param {?} params
         * @return {?}
         */
        UrlParser.prototype.parseQueryParam = function (params) {
            var /** @type {?} */ key = matchQueryParams(this.remaining);
            if (!key) {
                return;
            }
            this.capture(key);
            var /** @type {?} */ value = '';
            if (this.consumeOptional('=')) {
                var /** @type {?} */ valueMatch = matchUrlQueryParamValue(this.remaining);
                if (valueMatch) {
                    value = valueMatch;
                    this.capture(value);
                }
            }
            var /** @type {?} */ decodedKey = decode(key);
            var /** @type {?} */ decodedVal = decode(value);
            if (params.hasOwnProperty(decodedKey)) {
                // Append to existing values
                var /** @type {?} */ currentVal = params[decodedKey];
                if (!Array.isArray(currentVal)) {
                    currentVal = [currentVal];
                    params[decodedKey] = currentVal;
                }
                currentVal.push(decodedVal);
            }
            else {
                // Create a new value
                params[decodedKey] = decodedVal;
            }
        };
        /**
         * @param {?} allowPrimary
         * @return {?}
         */
        UrlParser.prototype.parseParens = function (allowPrimary) {
            var /** @type {?} */ segments = {};
            this.capture('(');
            while (!this.consumeOptional(')') && this.remaining.length > 0) {
                var /** @type {?} */ path = matchSegments(this.remaining);
                var /** @type {?} */ next = this.remaining[path.length];
                // if is is not one of these characters, then the segment was unescaped
                // or the group was not closed
                if (next !== '/' && next !== ')' && next !== ';') {
                    throw new Error("Cannot parse url '" + this.url + "'");
                }
                var /** @type {?} */ outletName = ((undefined));
                if (path.indexOf(':') > -1) {
                    outletName = path.substr(0, path.indexOf(':'));
                    this.capture(outletName);
                    this.capture(':');
                }
                else if (allowPrimary) {
                    outletName = PRIMARY_OUTLET;
                }
                var /** @type {?} */ children = this.parseChildren();
                segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :
                    new UrlSegmentGroup([], children);
                this.consumeOptional('//');
            }
            return segments;
        };
        /**
         * @param {?} str
         * @return {?}
         */
        UrlParser.prototype.peekStartsWith = function (str) { return this.remaining.startsWith(str); };
        /**
         * @param {?} str
         * @return {?}
         */
        UrlParser.prototype.consumeOptional = function (str) {
            if (this.peekStartsWith(str)) {
                this.remaining = this.remaining.substring(str.length);
                return true;
            }
            return false;
        };
        /**
         * @param {?} str
         * @return {?}
         */
        UrlParser.prototype.capture = function (str) {
            if (!this.consumeOptional(str)) {
                throw new Error("Expected \"" + str + "\".");
            }
        };
        return UrlParser;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var NoMatch = (function () {
        /**
         * @param {?=} segmentGroup
         */
        function NoMatch(segmentGroup) {
            this.segmentGroup = segmentGroup || null;
        }
        return NoMatch;
    }());
    var AbsoluteRedirect = (function () {
        /**
         * @param {?} urlTree
         */
        function AbsoluteRedirect(urlTree) {
            this.urlTree = urlTree;
        }
        return AbsoluteRedirect;
    }());
    /**
     * @param {?} segmentGroup
     * @return {?}
     */
    function noMatch(segmentGroup) {
        return new Observable_2(function (obs) { return obs.error(new NoMatch(segmentGroup)); });
    }
    /**
     * @param {?} newTree
     * @return {?}
     */
    function absoluteRedirect(newTree) {
        return new Observable_2(function (obs) { return obs.error(new AbsoluteRedirect(newTree)); });
    }
    /**
     * @param {?} redirectTo
     * @return {?}
     */
    function namedOutletsRedirect(redirectTo) {
        return new Observable_2(function (obs) { return obs.error(new Error("Only absolute redirects can have named outlets. redirectTo: '" + redirectTo + "'")); });
    }
    /**
     * @param {?} route
     * @return {?}
     */
    function canLoadFails(route) {
        return new Observable_2(function (obs) { return obs.error(navigationCancelingError("Cannot load children because the guard of the route \"path: '" + route.path + "'\" returned false")); });
    }
    /**
     * Returns the `UrlTree` with the redirection applied.
     *
     * Lazy modules are loaded along the way.
     * @param {?} moduleInjector
     * @param {?} configLoader
     * @param {?} urlSerializer
     * @param {?} urlTree
     * @param {?} config
     * @return {?}
     */
    function applyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {
        return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();
    }
    var ApplyRedirects = (function () {
        /**
         * @param {?} moduleInjector
         * @param {?} configLoader
         * @param {?} urlSerializer
         * @param {?} urlTree
         * @param {?} config
         */
        function ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {
            this.configLoader = configLoader;
            this.urlSerializer = urlSerializer;
            this.urlTree = urlTree;
            this.config = config;
            this.allowRedirects = true;
            this.ngModule = moduleInjector.get(NgModuleRef);
        }
        /**
         * @return {?}
         */
        ApplyRedirects.prototype.apply = function () {
            var _this = this;
            var /** @type {?} */ expanded$ = this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);
            var /** @type {?} */ urlTrees$ = map_3.call(expanded$, function (rootSegmentGroup) { return _this.createUrlTree(rootSegmentGroup, _this.urlTree.queryParams, /** @type {?} */ ((_this.urlTree.fragment))); });
            return _catch_2.call(urlTrees$, function (e) {
                if (e instanceof AbsoluteRedirect) {
                    // after an absolute redirect we do not apply any more redirects!
                    _this.allowRedirects = false;
                    // we need to run matching, so we can fetch all lazy-loaded modules
                    return _this.match(e.urlTree);
                }
                if (e instanceof NoMatch) {
                    throw _this.noMatchError(e);
                }
                throw e;
            });
        };
        /**
         * @param {?} tree
         * @return {?}
         */
        ApplyRedirects.prototype.match = function (tree) {
            var _this = this;
            var /** @type {?} */ expanded$ = this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);
            var /** @type {?} */ mapped$ = map_3.call(expanded$, function (rootSegmentGroup) { return _this.createUrlTree(rootSegmentGroup, tree.queryParams, /** @type {?} */ ((tree.fragment))); });
            return _catch_2.call(mapped$, function (e) {
                if (e instanceof NoMatch) {
                    throw _this.noMatchError(e);
                }
                throw e;
            });
        };
        /**
         * @param {?} e
         * @return {?}
         */
        ApplyRedirects.prototype.noMatchError = function (e) {
            return new Error("Cannot match any routes. URL Segment: '" + e.segmentGroup + "'");
        };
        /**
         * @param {?} rootCandidate
         * @param {?} queryParams
         * @param {?} fragment
         * @return {?}
         */
        ApplyRedirects.prototype.createUrlTree = function (rootCandidate, queryParams, fragment) {
            var /** @type {?} */ root = rootCandidate.segments.length > 0 ?
                new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = rootCandidate, _a)) :
                rootCandidate;
            return new UrlTree(root, queryParams, fragment);
            var _a;
        };
        /**
         * @param {?} ngModule
         * @param {?} routes
         * @param {?} segmentGroup
         * @param {?} outlet
         * @return {?}
         */
        ApplyRedirects.prototype.expandSegmentGroup = function (ngModule, routes, segmentGroup, outlet) {
            if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
                return map_3.call(this.expandChildren(ngModule, routes, segmentGroup), function (children) { return new UrlSegmentGroup([], children); });
            }
            return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);
        };
        /**
         * @param {?} ngModule
         * @param {?} routes
         * @param {?} segmentGroup
         * @return {?}
         */
        ApplyRedirects.prototype.expandChildren = function (ngModule, routes, segmentGroup) {
            var _this = this;
            return waitForMap(segmentGroup.children, function (childOutlet, child) { return _this.expandSegmentGroup(ngModule, routes, child, childOutlet); });
        };
        /**
         * @param {?} ngModule
         * @param {?} segmentGroup
         * @param {?} routes
         * @param {?} segments
         * @param {?} outlet
         * @param {?} allowRedirects
         * @return {?}
         */
        ApplyRedirects.prototype.expandSegment = function (ngModule, segmentGroup, routes, segments, outlet, allowRedirects) {
            var _this = this;
            var /** @type {?} */ routes$ = of_1.apply(void 0, routes);
            var /** @type {?} */ processedRoutes$ = map_3.call(routes$, function (r) {
                var /** @type {?} */ expanded$ = _this.expandSegmentAgainstRoute(ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);
                return _catch_2.call(expanded$, function (e) {
                    if (e instanceof NoMatch) {
                        return of_1(null);
                    }
                    throw e;
                });
            });
            var /** @type {?} */ concattedProcessedRoutes$ = concatAll_3.call(processedRoutes$);
            var /** @type {?} */ first$ = first_3.call(concattedProcessedRoutes$, function (s) { return !!s; });
            return _catch_2.call(first$, function (e, _) {
                if (e instanceof EmptyError_2) {
                    if (_this.noLeftoversInUrl(segmentGroup, segments, outlet)) {
                        return of_1(new UrlSegmentGroup([], {}));
                    }
                    throw new NoMatch(segmentGroup);
                }
                throw e;
            });
        };
        /**
         * @param {?} segmentGroup
         * @param {?} segments
         * @param {?} outlet
         * @return {?}
         */
        ApplyRedirects.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {
            return segments.length === 0 && !segmentGroup.children[outlet];
        };
        /**
         * @param {?} ngModule
         * @param {?} segmentGroup
         * @param {?} routes
         * @param {?} route
         * @param {?} paths
         * @param {?} outlet
         * @param {?} allowRedirects
         * @return {?}
         */
        ApplyRedirects.prototype.expandSegmentAgainstRoute = function (ngModule, segmentGroup, routes, route, paths, outlet, allowRedirects) {
            if (getOutlet(route) !== outlet) {
                return noMatch(segmentGroup);
            }
            if (route.redirectTo === undefined) {
                return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);
            }
            if (allowRedirects && this.allowRedirects) {
                return this.expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, paths, outlet);
            }
            return noMatch(segmentGroup);
        };
        /**
         * @param {?} ngModule
         * @param {?} segmentGroup
         * @param {?} routes
         * @param {?} route
         * @param {?} segments
         * @param {?} outlet
         * @return {?}
         */
        ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = function (ngModule, segmentGroup, routes, route, segments, outlet) {
            if (route.path === '**') {
                return this.expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet);
            }
            return this.expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet);
        };
        /**
         * @param {?} ngModule
         * @param {?} routes
         * @param {?} route
         * @param {?} outlet
         * @return {?}
         */
        ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = function (ngModule, routes, route, outlet) {
            var _this = this;
            var /** @type {?} */ newTree = this.applyRedirectCommands([], /** @type {?} */ ((route.redirectTo)), {});
            if (((route.redirectTo)).startsWith('/')) {
                return absoluteRedirect(newTree);
            }
            return mergeMap_3.call(this.lineralizeSegments(route, newTree), function (newSegments) {
                var /** @type {?} */ group = new UrlSegmentGroup(newSegments, {});
                return _this.expandSegment(ngModule, group, routes, newSegments, outlet, false);
            });
        };
        /**
         * @param {?} ngModule
         * @param {?} segmentGroup
         * @param {?} routes
         * @param {?} route
         * @param {?} segments
         * @param {?} outlet
         * @return {?}
         */
        ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = function (ngModule, segmentGroup, routes, route, segments, outlet) {
            var _this = this;
            var _a = match(segmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild, positionalParamSegments = _a.positionalParamSegments;
            if (!matched)
                return noMatch(segmentGroup);
            var /** @type {?} */ newTree = this.applyRedirectCommands(consumedSegments, /** @type {?} */ ((route.redirectTo)), /** @type {?} */ (positionalParamSegments));
            if (((route.redirectTo)).startsWith('/')) {
                return absoluteRedirect(newTree);
            }
            return mergeMap_3.call(this.lineralizeSegments(route, newTree), function (newSegments) {
                return _this.expandSegment(ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);
            });
        };
        /**
         * @param {?} ngModule
         * @param {?} rawSegmentGroup
         * @param {?} route
         * @param {?} segments
         * @return {?}
         */
        ApplyRedirects.prototype.matchSegmentAgainstRoute = function (ngModule, rawSegmentGroup, route, segments) {
            var _this = this;
            if (route.path === '**') {
                if (route.loadChildren) {
                    return map_3.call(this.configLoader.load(ngModule.injector, route), function (cfg) {
                        route._loadedConfig = cfg;
                        return new UrlSegmentGroup(segments, {});
                    });
                }
                return of_1(new UrlSegmentGroup(segments, {}));
            }
            var _a = match(rawSegmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild;
            if (!matched)
                return noMatch(rawSegmentGroup);
            var /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);
            var /** @type {?} */ childConfig$ = this.getChildConfig(ngModule, route);
            return mergeMap_3.call(childConfig$, function (routerConfig) {
                var /** @type {?} */ childModule = routerConfig.module;
                var /** @type {?} */ childConfig = routerConfig.routes;
                var _a = split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _a.segmentGroup, slicedSegments = _a.slicedSegments;
                if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
                    var /** @type {?} */ expanded$_1 = _this.expandChildren(childModule, childConfig, segmentGroup);
                    return map_3.call(expanded$_1, function (children) { return new UrlSegmentGroup(consumedSegments, children); });
                }
                if (childConfig.length === 0 && slicedSegments.length === 0) {
                    return of_1(new UrlSegmentGroup(consumedSegments, {}));
                }
                var /** @type {?} */ expanded$ = _this.expandSegment(childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);
                return map_3.call(expanded$, function (cs) { return new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children); });
            });
        };
        /**
         * @param {?} ngModule
         * @param {?} route
         * @return {?}
         */
        ApplyRedirects.prototype.getChildConfig = function (ngModule, route) {
            var _this = this;
            if (route.children) {
                // The children belong to the same module
                return of_1(new LoadedRouterConfig(route.children, ngModule));
            }
            if (route.loadChildren) {
                // lazy children belong to the loaded module
                if (route._loadedConfig !== undefined) {
                    return of_1(route._loadedConfig);
                }
                return mergeMap_3.call(runCanLoadGuard(ngModule.injector, route), function (shouldLoad) {
                    if (shouldLoad) {
                        return map_3.call(_this.configLoader.load(ngModule.injector, route), function (cfg) {
                            route._loadedConfig = cfg;
                            return cfg;
                        });
                    }
                    return canLoadFails(route);
                });
            }
            return of_1(new LoadedRouterConfig([], ngModule));
        };
        /**
         * @param {?} route
         * @param {?} urlTree
         * @return {?}
         */
        ApplyRedirects.prototype.lineralizeSegments = function (route, urlTree) {
            var /** @type {?} */ res = [];
            var /** @type {?} */ c = urlTree.root;
            while (true) {
                res = res.concat(c.segments);
                if (c.numberOfChildren === 0) {
                    return of_1(res);
                }
                if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {
                    return namedOutletsRedirect(/** @type {?} */ ((route.redirectTo)));
                }
                c = c.children[PRIMARY_OUTLET];
            }
        };
        /**
         * @param {?} segments
         * @param {?} redirectTo
         * @param {?} posParams
         * @return {?}
         */
        ApplyRedirects.prototype.applyRedirectCommands = function (segments, redirectTo, posParams) {
            return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);
        };
        /**
         * @param {?} redirectTo
         * @param {?} urlTree
         * @param {?} segments
         * @param {?} posParams
         * @return {?}
         */
        ApplyRedirects.prototype.applyRedirectCreatreUrlTree = function (redirectTo, urlTree, segments, posParams) {
            var /** @type {?} */ newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);
            return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);
        };
        /**
         * @param {?} redirectToParams
         * @param {?} actualParams
         * @return {?}
         */
        ApplyRedirects.prototype.createQueryParams = function (redirectToParams, actualParams) {
            var /** @type {?} */ res = {};
            forEach(redirectToParams, function (v, k) {
                var /** @type {?} */ copySourceValue = typeof v === 'string' && v.startsWith(':');
                if (copySourceValue) {
                    var /** @type {?} */ sourceName = v.substring(1);
                    res[k] = actualParams[sourceName];
                }
                else {
                    res[k] = v;
                }
            });
            return res;
        };
        /**
         * @param {?} redirectTo
         * @param {?} group
         * @param {?} segments
         * @param {?} posParams
         * @return {?}
         */
        ApplyRedirects.prototype.createSegmentGroup = function (redirectTo, group, segments, posParams) {
            var _this = this;
            var /** @type {?} */ updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);
            var /** @type {?} */ children = {};
            forEach(group.children, function (child, name) {
                children[name] = _this.createSegmentGroup(redirectTo, child, segments, posParams);
            });
            return new UrlSegmentGroup(updatedSegments, children);
        };
        /**
         * @param {?} redirectTo
         * @param {?} redirectToSegments
         * @param {?} actualSegments
         * @param {?} posParams
         * @return {?}
         */
        ApplyRedirects.prototype.createSegments = function (redirectTo, redirectToSegments, actualSegments, posParams) {
            var _this = this;
            return redirectToSegments.map(function (s) { return s.path.startsWith(':') ? _this.findPosParam(redirectTo, s, posParams) :
                _this.findOrReturn(s, actualSegments); });
        };
        /**
         * @param {?} redirectTo
         * @param {?} redirectToUrlSegment
         * @param {?} posParams
         * @return {?}
         */
        ApplyRedirects.prototype.findPosParam = function (redirectTo, redirectToUrlSegment, posParams) {
            var /** @type {?} */ pos = posParams[redirectToUrlSegment.path.substring(1)];
            if (!pos)
                throw new Error("Cannot redirect to '" + redirectTo + "'. Cannot find '" + redirectToUrlSegment.path + "'.");
            return pos;
        };
        /**
         * @param {?} redirectToUrlSegment
         * @param {?} actualSegments
         * @return {?}
         */
        ApplyRedirects.prototype.findOrReturn = function (redirectToUrlSegment, actualSegments) {
            var /** @type {?} */ idx = 0;
            for (var _i = 0, actualSegments_1 = actualSegments; _i < actualSegments_1.length; _i++) {
                var s = actualSegments_1[_i];
                if (s.path === redirectToUrlSegment.path) {
                    actualSegments.splice(idx);
                    return s;
                }
                idx++;
            }
            return redirectToUrlSegment;
        };
        return ApplyRedirects;
    }());
    /**
     * @param {?} moduleInjector
     * @param {?} route
     * @return {?}
     */
    function runCanLoadGuard(moduleInjector, route) {
        var /** @type {?} */ canLoad = route.canLoad;
        if (!canLoad || canLoad.length === 0)
            return of_1(true);
        var /** @type {?} */ obs = map_3.call(from_2(canLoad), function (injectionToken) {
            var /** @type {?} */ guard = moduleInjector.get(injectionToken);
            return wrapIntoObservable(guard.canLoad ? guard.canLoad(route) : guard(route));
        });
        return andObservables(obs);
    }
    /**
     * @param {?} segmentGroup
     * @param {?} route
     * @param {?} segments
     * @return {?}
     */
    function match(segmentGroup, route, segments) {
        if (route.path === '') {
            if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {
                return { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };
            }
            return { matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };
        }
        var /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;
        var /** @type {?} */ res = matcher(segments, segmentGroup, route);
        if (!res) {
            return {
                matched: false,
                consumedSegments: /** @type {?} */ ([]),
                lastChild: 0,
                positionalParamSegments: {},
            };
        }
        return {
            matched: true,
            consumedSegments: /** @type {?} */ ((res.consumed)),
            lastChild: /** @type {?} */ ((res.consumed.length)),
            positionalParamSegments: /** @type {?} */ ((res.posParams)),
        };
    }
    /**
     * @param {?} segmentGroup
     * @param {?} consumedSegments
     * @param {?} slicedSegments
     * @param {?} config
     * @return {?}
     */
    function split(segmentGroup, consumedSegments, slicedSegments, config) {
        if (slicedSegments.length > 0 &&
            containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {
            var /** @type {?} */ s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
            return { segmentGroup: mergeTrivialChildren(s), slicedSegments: [] };
        }
        if (slicedSegments.length === 0 &&
            containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {
            var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
            return { segmentGroup: mergeTrivialChildren(s), slicedSegments: slicedSegments };
        }
        return { segmentGroup: segmentGroup, slicedSegments: slicedSegments };
    }
    /**
     * @param {?} s
     * @return {?}
     */
    function mergeTrivialChildren(s) {
        if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {
            var /** @type {?} */ c = s.children[PRIMARY_OUTLET];
            return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);
        }
        return s;
    }
    /**
     * @param {?} segmentGroup
     * @param {?} slicedSegments
     * @param {?} routes
     * @param {?} children
     * @return {?}
     */
    function addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
        var /** @type {?} */ res = {};
        for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
            var r = routes_1[_i];
            if (isEmptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {
                res[getOutlet(r)] = new UrlSegmentGroup([], {});
            }
        }
        return Object.assign({}, children, res);
    }
    /**
     * @param {?} routes
     * @param {?} primarySegmentGroup
     * @return {?}
     */
    function createChildrenForEmptySegments(routes, primarySegmentGroup) {
        var /** @type {?} */ res = {};
        res[PRIMARY_OUTLET] = primarySegmentGroup;
        for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {
            var r = routes_2[_i];
            if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {
                res[getOutlet(r)] = new UrlSegmentGroup([], {});
            }
        }
        return res;
    }
    /**
     * @param {?} segmentGroup
     * @param {?} segments
     * @param {?} routes
     * @return {?}
     */
    function containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, segments, routes) {
        return routes.some(function (r) { return isEmptyPathRedirect(segmentGroup, segments, r) && getOutlet(r) !== PRIMARY_OUTLET; });
    }
    /**
     * @param {?} segmentGroup
     * @param {?} segments
     * @param {?} routes
     * @return {?}
     */
    function containsEmptyPathRedirects(segmentGroup, segments, routes) {
        return routes.some(function (r) { return isEmptyPathRedirect(segmentGroup, segments, r); });
    }
    /**
     * @param {?} segmentGroup
     * @param {?} segments
     * @param {?} r
     * @return {?}
     */
    function isEmptyPathRedirect(segmentGroup, segments, r) {
        if ((segmentGroup.hasChildren() || segments.length > 0) && r.pathMatch === 'full') {
            return false;
        }
        return r.path === '' && r.redirectTo !== undefined;
    }
    /**
     * @param {?} route
     * @return {?}
     */
    function getOutlet(route) {
        return route.outlet || PRIMARY_OUTLET;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var Tree = (function () {
        /**
         * @param {?} root
         */
        function Tree(root) {
            this._root = root;
        }
        Object.defineProperty(Tree.prototype, "root", {
            /**
             * @return {?}
             */
            get: function () { return this._root.value; },
            enumerable: true,
            configurable: true
        });
        /**
         * \@internal
         * @param {?} t
         * @return {?}
         */
        Tree.prototype.parent = function (t) {
            var /** @type {?} */ p = this.pathFromRoot(t);
            return p.length > 1 ? p[p.length - 2] : null;
        };
        /**
         * \@internal
         * @param {?} t
         * @return {?}
         */
        Tree.prototype.children = function (t) {
            var /** @type {?} */ n = findNode(t, this._root);
            return n ? n.children.map(function (t) { return t.value; }) : [];
        };
        /**
         * \@internal
         * @param {?} t
         * @return {?}
         */
        Tree.prototype.firstChild = function (t) {
            var /** @type {?} */ n = findNode(t, this._root);
            return n && n.children.length > 0 ? n.children[0].value : null;
        };
        /**
         * \@internal
         * @param {?} t
         * @return {?}
         */
        Tree.prototype.siblings = function (t) {
            var /** @type {?} */ p = findPath(t, this._root);
            if (p.length < 2)
                return [];
            var /** @type {?} */ c = p[p.length - 2].children.map(function (c) { return c.value; });
            return c.filter(function (cc) { return cc !== t; });
        };
        /**
         * \@internal
         * @param {?} t
         * @return {?}
         */
        Tree.prototype.pathFromRoot = function (t) { return findPath(t, this._root).map(function (s) { return s.value; }); };
        return Tree;
    }());
    /**
     * @template T
     * @param {?} value
     * @param {?} node
     * @return {?}
     */
    function findNode(value, node) {
        if (value === node.value)
            return node;
        for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
            var child = _a[_i];
            var /** @type {?} */ node_1 = findNode(value, child);
            if (node_1)
                return node_1;
        }
        return null;
    }
    /**
     * @template T
     * @param {?} value
     * @param {?} node
     * @return {?}
     */
    function findPath(value, node) {
        if (value === node.value)
            return [node];
        for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
            var child = _a[_i];
            var /** @type {?} */ path = findPath(value, child);
            if (path.length) {
                path.unshift(node);
                return path;
            }
        }
        return [];
    }
    var TreeNode = (function () {
        /**
         * @param {?} value
         * @param {?} children
         */
        function TreeNode(value, children) {
            this.value = value;
            this.children = children;
        }
        /**
         * @return {?}
         */
        TreeNode.prototype.toString = function () { return "TreeNode(" + this.value + ")"; };
        return TreeNode;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@whatItDoes Represents the state of the router.
     *
     * \@howToUse
     *
     * ```
     * \@Component({templateUrl:'template.html'})
     * class MyComponent {
     *   constructor(router: Router) {
     *     const state: RouterState = router.routerState;
     *     const root: ActivatedRoute = state.root;
     *     const child = root.firstChild;
     *     const id: Observable<string> = child.params.map(p => p.id);
     *     //...
     *   }
     * }
     * ```
     *
     * \@description
     * RouterState is a tree of activated routes. Every node in this tree knows about the "consumed" URL
     * segments, the extracted parameters, and the resolved data.
     *
     * See {\@link ActivatedRoute} for more information.
     *
     * \@stable
     */
    var RouterState = (function (_super) {
        __extends(RouterState, _super);
        /**
         * \@internal
         * @param {?} root
         * @param {?} snapshot
         */
        function RouterState(root, snapshot) {
            var _this = _super.call(this, root) || this;
            _this.snapshot = snapshot;
            setRouterState(_this, root);
            return _this;
        }
        /**
         * @return {?}
         */
        RouterState.prototype.toString = function () { return this.snapshot.toString(); };
        return RouterState;
    }(Tree));
    /**
     * @param {?} urlTree
     * @param {?} rootComponent
     * @return {?}
     */
    function createEmptyState(urlTree, rootComponent) {
        var /** @type {?} */ snapshot = createEmptyStateSnapshot(urlTree, rootComponent);
        var /** @type {?} */ emptyUrl = new BehaviorSubject_2([new UrlSegment('', {})]);
        var /** @type {?} */ emptyParams = new BehaviorSubject_2({});
        var /** @type {?} */ emptyData = new BehaviorSubject_2({});
        var /** @type {?} */ emptyQueryParams = new BehaviorSubject_2({});
        var /** @type {?} */ fragment = new BehaviorSubject_2('');
        var /** @type {?} */ activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);
        activated.snapshot = snapshot.root;
        return new RouterState(new TreeNode(activated, []), snapshot);
    }
    /**
     * @param {?} urlTree
     * @param {?} rootComponent
     * @return {?}
     */
    function createEmptyStateSnapshot(urlTree, rootComponent) {
        var /** @type {?} */ emptyParams = {};
        var /** @type {?} */ emptyData = {};
        var /** @type {?} */ emptyQueryParams = {};
        var /** @type {?} */ fragment = '';
        var /** @type {?} */ activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});
        return new RouterStateSnapshot('', new TreeNode(activated, []));
    }
    /**
     * \@whatItDoes Contains the information about a route associated with a component loaded in an
     * outlet.
     * An `ActivatedRoute` can also be used to traverse the router state tree.
     *
     * \@howToUse
     *
     * ```
     * \@Component({...})
     * class MyComponent {
     *   constructor(route: ActivatedRoute) {
     *     const id: Observable<string> = route.params.map(p => p.id);
     *     const url: Observable<string> = route.url.map(segments => segments.join(''));
     *     // route.data includes both `data` and `resolve`
     *     const user = route.data.map(d => d.user);
     *   }
     * }
     * ```
     *
     * \@stable
     */
    var ActivatedRoute = (function () {
        /**
         * \@internal
         * @param {?} url
         * @param {?} params
         * @param {?} queryParams
         * @param {?} fragment
         * @param {?} data
         * @param {?} outlet
         * @param {?} component
         * @param {?} futureSnapshot
         */
        function ActivatedRoute(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {
            this.url = url;
            this.params = params;
            this.queryParams = queryParams;
            this.fragment = fragment;
            this.data = data;
            this.outlet = outlet;
            this.component = component;
            this._futureSnapshot = futureSnapshot;
        }
        Object.defineProperty(ActivatedRoute.prototype, "routeConfig", {
            /**
             * The configuration used to match this route
             * @return {?}
             */
            get: function () { return this._futureSnapshot.routeConfig; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "root", {
            /**
             * The root of the router state
             * @return {?}
             */
            get: function () { return this._routerState.root; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "parent", {
            /**
             * The parent of this route in the router state tree
             * @return {?}
             */
            get: function () { return this._routerState.parent(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "firstChild", {
            /**
             * The first child of this route in the router state tree
             * @return {?}
             */
            get: function () { return this._routerState.firstChild(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "children", {
            /**
             * The children of this route in the router state tree
             * @return {?}
             */
            get: function () { return this._routerState.children(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "pathFromRoot", {
            /**
             * The path from the root of the router state tree to this route
             * @return {?}
             */
            get: function () { return this._routerState.pathFromRoot(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "paramMap", {
            /**
             * @return {?}
             */
            get: function () {
                if (!this._paramMap) {
                    this._paramMap = map_3.call(this.params, function (p) { return convertToParamMap(p); });
                }
                return this._paramMap;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "queryParamMap", {
            /**
             * @return {?}
             */
            get: function () {
                if (!this._queryParamMap) {
                    this._queryParamMap =
                        map_3.call(this.queryParams, function (p) { return convertToParamMap(p); });
                }
                return this._queryParamMap;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ActivatedRoute.prototype.toString = function () {
            return this.snapshot ? this.snapshot.toString() : "Future(" + this._futureSnapshot + ")";
        };
        return ActivatedRoute;
    }());
    /**
     * \@internal
     * @param {?} route
     * @return {?}
     */
    function inheritedParamsDataResolve(route) {
        var /** @type {?} */ pathToRoot = route.pathFromRoot;
        var /** @type {?} */ inhertingStartingFrom = pathToRoot.length - 1;
        while (inhertingStartingFrom >= 1) {
            var /** @type {?} */ current = pathToRoot[inhertingStartingFrom];
            var /** @type {?} */ parent = pathToRoot[inhertingStartingFrom - 1];
            // current route is an empty path => inherits its parent's params and data
            if (current.routeConfig && current.routeConfig.path === '') {
                inhertingStartingFrom--;
                // parent is componentless => current route should inherit its params and data
            }
            else if (!parent.component) {
                inhertingStartingFrom--;
            }
            else {
                break;
            }
        }
        return pathToRoot.slice(inhertingStartingFrom).reduce(function (res, curr) {
            var /** @type {?} */ params = Object.assign({}, res.params, curr.params);
            var /** @type {?} */ data = Object.assign({}, res.data, curr.data);
            var /** @type {?} */ resolve = Object.assign({}, res.resolve, curr._resolvedData);
            return { params: params, data: data, resolve: resolve };
        }, /** @type {?} */ ({ params: {}, data: {}, resolve: {} }));
    }
    /**
     * \@whatItDoes Contains the information about a route associated with a component loaded in an
     * outlet
     * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router
     * state tree.
     *
     * \@howToUse
     *
     * ```
     * \@Component({templateUrl:'./my-component.html'})
     * class MyComponent {
     *   constructor(route: ActivatedRoute) {
     *     const id: string = route.snapshot.params.id;
     *     const url: string = route.snapshot.url.join('');
     *     const user = route.snapshot.data.user;
     *   }
     * }
     * ```
     *
     * \@stable
     */
    var ActivatedRouteSnapshot = (function () {
        /**
         * \@internal
         * @param {?} url
         * @param {?} params
         * @param {?} queryParams
         * @param {?} fragment
         * @param {?} data
         * @param {?} outlet
         * @param {?} component
         * @param {?} routeConfig
         * @param {?} urlSegment
         * @param {?} lastPathIndex
         * @param {?} resolve
         */
        function ActivatedRouteSnapshot(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {
            this.url = url;
            this.params = params;
            this.queryParams = queryParams;
            this.fragment = fragment;
            this.data = data;
            this.outlet = outlet;
            this.component = component;
            this._routeConfig = routeConfig;
            this._urlSegment = urlSegment;
            this._lastPathIndex = lastPathIndex;
            this._resolve = resolve;
        }
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "routeConfig", {
            /**
             * The configuration used to match this route
             * @return {?}
             */
            get: function () { return this._routeConfig; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "root", {
            /**
             * The root of the router state
             * @return {?}
             */
            get: function () { return this._routerState.root; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "parent", {
            /**
             * The parent of this route in the router state tree
             * @return {?}
             */
            get: function () { return this._routerState.parent(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "firstChild", {
            /**
             * The first child of this route in the router state tree
             * @return {?}
             */
            get: function () { return this._routerState.firstChild(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "children", {
            /**
             * The children of this route in the router state tree
             * @return {?}
             */
            get: function () { return this._routerState.children(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "pathFromRoot", {
            /**
             * The path from the root of the router state tree to this route
             * @return {?}
             */
            get: function () { return this._routerState.pathFromRoot(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "paramMap", {
            /**
             * @return {?}
             */
            get: function () {
                if (!this._paramMap) {
                    this._paramMap = convertToParamMap(this.params);
                }
                return this._paramMap;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "queryParamMap", {
            /**
             * @return {?}
             */
            get: function () {
                if (!this._queryParamMap) {
                    this._queryParamMap = convertToParamMap(this.queryParams);
                }
                return this._queryParamMap;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ActivatedRouteSnapshot.prototype.toString = function () {
            var /** @type {?} */ url = this.url.map(function (segment) { return segment.toString(); }).join('/');
            var /** @type {?} */ matched = this._routeConfig ? this._routeConfig.path : '';
            return "Route(url:'" + url + "', path:'" + matched + "')";
        };
        return ActivatedRouteSnapshot;
    }());
    /**
     * \@whatItDoes Represents the state of the router at a moment in time.
     *
     * \@howToUse
     *
     * ```
     * \@Component({templateUrl:'template.html'})
     * class MyComponent {
     *   constructor(router: Router) {
     *     const state: RouterState = router.routerState;
     *     const snapshot: RouterStateSnapshot = state.snapshot;
     *     const root: ActivatedRouteSnapshot = snapshot.root;
     *     const child = root.firstChild;
     *     const id: Observable<string> = child.params.map(p => p.id);
     *     //...
     *   }
     * }
     * ```
     *
     * \@description
     * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about
     * the "consumed" URL segments, the extracted parameters, and the resolved data.
     *
     * \@stable
     */
    var RouterStateSnapshot = (function (_super) {
        __extends(RouterStateSnapshot, _super);
        /**
         * \@internal
         * @param {?} url
         * @param {?} root
         */
        function RouterStateSnapshot(url, root) {
            var _this = _super.call(this, root) || this;
            _this.url = url;
            setRouterState(_this, root);
            return _this;
        }
        /**
         * @return {?}
         */
        RouterStateSnapshot.prototype.toString = function () { return serializeNode(this._root); };
        return RouterStateSnapshot;
    }(Tree));
    /**
     * @template U, T
     * @param {?} state
     * @param {?} node
     * @return {?}
     */
    function setRouterState(state, node) {
        node.value._routerState = state;
        node.children.forEach(function (c) { return setRouterState(state, c); });
    }
    /**
     * @param {?} node
     * @return {?}
     */
    function serializeNode(node) {
        var /** @type {?} */ c = node.children.length > 0 ? " { " + node.children.map(serializeNode).join(", ") + " } " : '';
        return "" + node.value + c;
    }
    /**
     * The expectation is that the activate route is created with the right set of parameters.
     * So we push new values into the observables only when they are not the initial values.
     * And we detect that by checking if the snapshot field is set.
     * @param {?} route
     * @return {?}
     */
    function advanceActivatedRoute(route) {
        if (route.snapshot) {
            var /** @type {?} */ currentSnapshot = route.snapshot;
            var /** @type {?} */ nextSnapshot = route._futureSnapshot;
            route.snapshot = nextSnapshot;
            if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {
                ((route.queryParams)).next(nextSnapshot.queryParams);
            }
            if (currentSnapshot.fragment !== nextSnapshot.fragment) {
                ((route.fragment)).next(nextSnapshot.fragment);
            }
            if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {
                ((route.params)).next(nextSnapshot.params);
            }
            if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {
                ((route.url)).next(nextSnapshot.url);
            }
            if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {
                ((route.data)).next(nextSnapshot.data);
            }
        }
        else {
            route.snapshot = route._futureSnapshot;
            // this is for resolved data
            ((route.data)).next(route._futureSnapshot.data);
        }
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function equalParamsAndUrlSegments(a, b) {
        var /** @type {?} */ equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);
        var /** @type {?} */ parentsMismatch = !a.parent !== !b.parent;
        return equalUrlParams && !parentsMismatch &&
            (!a.parent || equalParamsAndUrlSegments(a.parent, /** @type {?} */ ((b.parent))));
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} routeReuseStrategy
     * @param {?} curr
     * @param {?} prevState
     * @return {?}
     */
    function createRouterState(routeReuseStrategy, curr, prevState) {
        var /** @type {?} */ root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);
        return new RouterState(root, curr);
    }
    /**
     * @param {?} routeReuseStrategy
     * @param {?} curr
     * @param {?=} prevState
     * @return {?}
     */
    function createNode(routeReuseStrategy, curr, prevState) {
        // reuse an activated route that is currently displayed on the screen
        if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {
            var /** @type {?} */ value = prevState.value;
            value._futureSnapshot = curr.value;
            var /** @type {?} */ children = createOrReuseChildren(routeReuseStrategy, curr, prevState);
            return new TreeNode(value, children);
            // retrieve an activated route that is used to be displayed, but is not currently displayed
        }
        else if (routeReuseStrategy.retrieve(curr.value)) {
            var /** @type {?} */ tree_1 = ((routeReuseStrategy.retrieve(curr.value))).route;
            setFutureSnapshotsOfActivatedRoutes(curr, tree_1);
            return tree_1;
        }
        else {
            var /** @type {?} */ value = createActivatedRoute(curr.value);
            var /** @type {?} */ children = curr.children.map(function (c) { return createNode(routeReuseStrategy, c); });
            return new TreeNode(value, children);
        }
    }
    /**
     * @param {?} curr
     * @param {?} result
     * @return {?}
     */
    function setFutureSnapshotsOfActivatedRoutes(curr, result) {
        if (curr.value.routeConfig !== result.value.routeConfig) {
            throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');
        }
        if (curr.children.length !== result.children.length) {
            throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');
        }
        result.value._futureSnapshot = curr.value;
        for (var /** @type {?} */ i = 0; i < curr.children.length; ++i) {
            setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);
        }
    }
    /**
     * @param {?} routeReuseStrategy
     * @param {?} curr
     * @param {?} prevState
     * @return {?}
     */
    function createOrReuseChildren(routeReuseStrategy, curr, prevState) {
        return curr.children.map(function (child) {
            for (var _i = 0, _a = prevState.children; _i < _a.length; _i++) {
                var p = _a[_i];
                if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {
                    return createNode(routeReuseStrategy, child, p);
                }
            }
            return createNode(routeReuseStrategy, child);
        });
    }
    /**
     * @param {?} c
     * @return {?}
     */
    function createActivatedRoute(c) {
        return new ActivatedRoute(new BehaviorSubject_2(c.url), new BehaviorSubject_2(c.params), new BehaviorSubject_2(c.queryParams), new BehaviorSubject_2(c.fragment), new BehaviorSubject_2(c.data), c.outlet, c.component, c);
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} route
     * @param {?} urlTree
     * @param {?} commands
     * @param {?} queryParams
     * @param {?} fragment
     * @return {?}
     */
    function createUrlTree(route, urlTree, commands, queryParams, fragment) {
        if (commands.length === 0) {
            return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);
        }
        var /** @type {?} */ nav = computeNavigation(commands);
        if (nav.toRoot()) {
            return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);
        }
        var /** @type {?} */ startingPosition = findStartingPosition(nav, urlTree, route);
        var /** @type {?} */ segmentGroup = startingPosition.processChildren ?
            updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) :
            updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);
        return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);
    }
    /**
     * @param {?} command
     * @return {?}
     */
    function isMatrixParams(command) {
        return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;
    }
    /**
     * @param {?} oldSegmentGroup
     * @param {?} newSegmentGroup
     * @param {?} urlTree
     * @param {?} queryParams
     * @param {?} fragment
     * @return {?}
     */
    function tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {
        var /** @type {?} */ qp = {};
        if (queryParams) {
            forEach(queryParams, function (value, name) {
                qp[name] = Array.isArray(value) ? value.map(function (v) { return "" + v; }) : "" + value;
            });
        }
        if (urlTree.root === oldSegmentGroup) {
            return new UrlTree(newSegmentGroup, qp, fragment);
        }
        return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);
    }
    /**
     * @param {?} current
     * @param {?} oldSegment
     * @param {?} newSegment
     * @return {?}
     */
    function replaceSegment(current, oldSegment, newSegment) {
        var /** @type {?} */ children = {};
        forEach(current.children, function (c, outletName) {
            if (c === oldSegment) {
                children[outletName] = newSegment;
            }
            else {
                children[outletName] = replaceSegment(c, oldSegment, newSegment);
            }
        });
        return new UrlSegmentGroup(current.segments, children);
    }
    var Navigation = (function () {
        /**
         * @param {?} isAbsolute
         * @param {?} numberOfDoubleDots
         * @param {?} commands
         */
        function Navigation(isAbsolute, numberOfDoubleDots, commands) {
            this.isAbsolute = isAbsolute;
            this.numberOfDoubleDots = numberOfDoubleDots;
            this.commands = commands;
            if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {
                throw new Error('Root segment cannot have matrix parameters');
            }
            var cmdWithOutlet = commands.find(function (c) { return typeof c === 'object' && c != null && c.outlets; });
            if (cmdWithOutlet && cmdWithOutlet !== last$1$1(commands)) {
                throw new Error('{outlets:{}} has to be the last command');
            }
        }
        /**
         * @return {?}
         */
        Navigation.prototype.toRoot = function () {
            return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';
        };
        return Navigation;
    }());
    /**
     * Transforms commands to a normalized `Navigation`
     * @param {?} commands
     * @return {?}
     */
    function computeNavigation(commands) {
        if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {
            return new Navigation(true, 0, commands);
        }
        var /** @type {?} */ numberOfDoubleDots = 0;
        var /** @type {?} */ isAbsolute = false;
        var /** @type {?} */ res = commands.reduce(function (res, cmd, cmdIdx) {
            if (typeof cmd === 'object' && cmd != null) {
                if (cmd.outlets) {
                    var /** @type {?} */ outlets_1 = {};
                    forEach(cmd.outlets, function (commands, name) {
                        outlets_1[name] = typeof commands === 'string' ? commands.split('/') : commands;
                    });
                    return res.concat([{ outlets: outlets_1 }]);
                }
                if (cmd.segmentPath) {
                    return res.concat([cmd.segmentPath]);
                }
            }
            if (!(typeof cmd === 'string')) {
                return res.concat([cmd]);
            }
            if (cmdIdx === 0) {
                cmd.split('/').forEach(function (urlPart, partIndex) {
                    if (partIndex == 0 && urlPart === '.') ;
                    else if (partIndex == 0 && urlPart === '') {
                        isAbsolute = true;
                    }
                    else if (urlPart === '..') {
                        numberOfDoubleDots++;
                    }
                    else if (urlPart != '') {
                        res.push(urlPart);
                    }
                });
                return res;
            }
            return res.concat([cmd]);
        }, []);
        return new Navigation(isAbsolute, numberOfDoubleDots, res);
    }
    var Position = (function () {
        /**
         * @param {?} segmentGroup
         * @param {?} processChildren
         * @param {?} index
         */
        function Position(segmentGroup, processChildren, index) {
            this.segmentGroup = segmentGroup;
            this.processChildren = processChildren;
            this.index = index;
        }
        return Position;
    }());
    /**
     * @param {?} nav
     * @param {?} tree
     * @param {?} route
     * @return {?}
     */
    function findStartingPosition(nav, tree, route) {
        if (nav.isAbsolute) {
            return new Position(tree.root, true, 0);
        }
        if (route.snapshot._lastPathIndex === -1) {
            return new Position(route.snapshot._urlSegment, true, 0);
        }
        var /** @type {?} */ modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;
        var /** @type {?} */ index = route.snapshot._lastPathIndex + modifier;
        return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);
    }
    /**
     * @param {?} group
     * @param {?} index
     * @param {?} numberOfDoubleDots
     * @return {?}
     */
    function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {
        var /** @type {?} */ g = group;
        var /** @type {?} */ ci = index;
        var /** @type {?} */ dd = numberOfDoubleDots;
        while (dd > ci) {
            dd -= ci;
            g = ((g.parent));
            if (!g) {
                throw new Error('Invalid number of \'../\'');
            }
            ci = g.segments.length;
        }
        return new Position(g, false, ci - dd);
    }
    /**
     * @param {?} command
     * @return {?}
     */
    function getPath(command) {
        if (typeof command === 'object' && command != null && command.outlets) {
            return command.outlets[PRIMARY_OUTLET];
        }
        return "" + command;
    }
    /**
     * @param {?} commands
     * @return {?}
     */
    function getOutlets(commands) {
        if (!(typeof commands[0] === 'object'))
            return _a = {}, _a[PRIMARY_OUTLET] = commands, _a;
        if (commands[0].outlets === undefined)
            return _b = {}, _b[PRIMARY_OUTLET] = commands, _b;
        return commands[0].outlets;
        var _a, _b;
    }
    /**
     * @param {?} segmentGroup
     * @param {?} startIndex
     * @param {?} commands
     * @return {?}
     */
    function updateSegmentGroup(segmentGroup, startIndex, commands) {
        if (!segmentGroup) {
            segmentGroup = new UrlSegmentGroup([], {});
        }
        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
            return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
        }
        var /** @type {?} */ m = prefixedWith(segmentGroup, startIndex, commands);
        var /** @type {?} */ slicedCommands = commands.slice(m.commandIndex);
        if (m.match && m.pathIndex < segmentGroup.segments.length) {
            var /** @type {?} */ g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});
            g.children[PRIMARY_OUTLET] =
                new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);
            return updateSegmentGroupChildren(g, 0, slicedCommands);
        }
        else if (m.match && slicedCommands.length === 0) {
            return new UrlSegmentGroup(segmentGroup.segments, {});
        }
        else if (m.match && !segmentGroup.hasChildren()) {
            return createNewSegmentGroup(segmentGroup, startIndex, commands);
        }
        else if (m.match) {
            return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
        }
        else {
            return createNewSegmentGroup(segmentGroup, startIndex, commands);
        }
    }
    /**
     * @param {?} segmentGroup
     * @param {?} startIndex
     * @param {?} commands
     * @return {?}
     */
    function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
        if (commands.length === 0) {
            return new UrlSegmentGroup(segmentGroup.segments, {});
        }
        else {
            var /** @type {?} */ outlets_2 = getOutlets(commands);
            var /** @type {?} */ children_2 = {};
            forEach(outlets_2, function (commands, outlet) {
                if (commands !== null) {
                    children_2[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);
                }
            });
            forEach(segmentGroup.children, function (child, childOutlet) {
                if (outlets_2[childOutlet] === undefined) {
                    children_2[childOutlet] = child;
                }
            });
            return new UrlSegmentGroup(segmentGroup.segments, children_2);
        }
    }
    /**
     * @param {?} segmentGroup
     * @param {?} startIndex
     * @param {?} commands
     * @return {?}
     */
    function prefixedWith(segmentGroup, startIndex, commands) {
        var /** @type {?} */ currentCommandIndex = 0;
        var /** @type {?} */ currentPathIndex = startIndex;
        var /** @type {?} */ noMatch = { match: false, pathIndex: 0, commandIndex: 0 };
        while (currentPathIndex < segmentGroup.segments.length) {
            if (currentCommandIndex >= commands.length)
                return noMatch;
            var /** @type {?} */ path = segmentGroup.segments[currentPathIndex];
            var /** @type {?} */ curr = getPath(commands[currentCommandIndex]);
            var /** @type {?} */ next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
            if (currentPathIndex > 0 && curr === undefined)
                break;
            if (curr && next && (typeof next === 'object') && next.outlets === undefined) {
                if (!compare(curr, next, path))
                    return noMatch;
                currentCommandIndex += 2;
            }
            else {
                if (!compare(curr, {}, path))
                    return noMatch;
                currentCommandIndex++;
            }
            currentPathIndex++;
        }
        return { match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };
    }
    /**
     * @param {?} segmentGroup
     * @param {?} startIndex
     * @param {?} commands
     * @return {?}
     */
    function createNewSegmentGroup(segmentGroup, startIndex, commands) {
        var /** @type {?} */ paths = segmentGroup.segments.slice(0, startIndex);
        var /** @type {?} */ i = 0;
        while (i < commands.length) {
            if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {
                var /** @type {?} */ children = createNewSegmentChildren(commands[i].outlets);
                return new UrlSegmentGroup(paths, children);
            }
            // if we start with an object literal, we need to reuse the path part from the segment
            if (i === 0 && isMatrixParams(commands[0])) {
                var /** @type {?} */ p = segmentGroup.segments[startIndex];
                paths.push(new UrlSegment(p.path, commands[0]));
                i++;
                continue;
            }
            var /** @type {?} */ curr = getPath(commands[i]);
            var /** @type {?} */ next = (i < commands.length - 1) ? commands[i + 1] : null;
            if (curr && next && isMatrixParams(next)) {
                paths.push(new UrlSegment(curr, stringify$1(next)));
                i += 2;
            }
            else {
                paths.push(new UrlSegment(curr, {}));
                i++;
            }
        }
        return new UrlSegmentGroup(paths, {});
    }
    /**
     * @param {?} outlets
     * @return {?}
     */
    function createNewSegmentChildren(outlets) {
        var /** @type {?} */ children = {};
        forEach(outlets, function (commands, outlet) {
            if (commands !== null) {
                children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);
            }
        });
        return children;
    }
    /**
     * @param {?} params
     * @return {?}
     */
    function stringify$1(params) {
        var /** @type {?} */ res = {};
        forEach(params, function (v, k) { return res[k] = "" + v; });
        return res;
    }
    /**
     * @param {?} path
     * @param {?} params
     * @param {?} segment
     * @return {?}
     */
    function compare(path, params, segment) {
        return path == segment.path && shallowEqual(params, segment.parameters);
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var NoMatch$1 = (function () {
        function NoMatch$1() {
        }
        return NoMatch$1;
    }());
    /**
     * @param {?} rootComponentType
     * @param {?} config
     * @param {?} urlTree
     * @param {?} url
     * @return {?}
     */
    function recognize(rootComponentType, config, urlTree, url) {
        return new Recognizer(rootComponentType, config, urlTree, url).recognize();
    }
    var Recognizer = (function () {
        /**
         * @param {?} rootComponentType
         * @param {?} config
         * @param {?} urlTree
         * @param {?} url
         */
        function Recognizer(rootComponentType, config, urlTree, url) {
            this.rootComponentType = rootComponentType;
            this.config = config;
            this.urlTree = urlTree;
            this.url = url;
        }
        /**
         * @return {?}
         */
        Recognizer.prototype.recognize = function () {
            try {
                var /** @type {?} */ rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config).segmentGroup;
                var /** @type {?} */ children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);
                var /** @type {?} */ root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(this.urlTree.queryParams), /** @type {?} */ ((this.urlTree.fragment)), {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});
                var /** @type {?} */ rootNode = new TreeNode(root, children);
                var /** @type {?} */ routeState = new RouterStateSnapshot(this.url, rootNode);
                this.inheritParamsAndData(routeState._root);
                return of_1(routeState);
            }
            catch (e) {
                return new Observable_2(function (obs) { return obs.error(e); });
            }
        };
        /**
         * @param {?} routeNode
         * @return {?}
         */
        Recognizer.prototype.inheritParamsAndData = function (routeNode) {
            var _this = this;
            var /** @type {?} */ route = routeNode.value;
            var /** @type {?} */ i = inheritedParamsDataResolve(route);
            route.params = Object.freeze(i.params);
            route.data = Object.freeze(i.data);
            routeNode.children.forEach(function (n) { return _this.inheritParamsAndData(n); });
        };
        /**
         * @param {?} config
         * @param {?} segmentGroup
         * @param {?} outlet
         * @return {?}
         */
        Recognizer.prototype.processSegmentGroup = function (config, segmentGroup, outlet) {
            if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
                return this.processChildren(config, segmentGroup);
            }
            return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);
        };
        /**
         * @param {?} config
         * @param {?} segmentGroup
         * @return {?}
         */
        Recognizer.prototype.processChildren = function (config, segmentGroup) {
            var _this = this;
            var /** @type {?} */ children = mapChildrenIntoArray(segmentGroup, function (child, childOutlet) { return _this.processSegmentGroup(config, child, childOutlet); });
            checkOutletNameUniqueness(children);
            sortActivatedRouteSnapshots(children);
            return children;
        };
        /**
         * @param {?} config
         * @param {?} segmentGroup
         * @param {?} segments
         * @param {?} outlet
         * @return {?}
         */
        Recognizer.prototype.processSegment = function (config, segmentGroup, segments, outlet) {
            for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {
                var r = config_1[_i];
                try {
                    return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);
                }
                catch (e) {
                    if (!(e instanceof NoMatch$1))
                        throw e;
                }
            }
            if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {
                return [];
            }
            throw new NoMatch$1();
        };
        /**
         * @param {?} segmentGroup
         * @param {?} segments
         * @param {?} outlet
         * @return {?}
         */
        Recognizer.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {
            return segments.length === 0 && !segmentGroup.children[outlet];
        };
        /**
         * @param {?} route
         * @param {?} rawSegment
         * @param {?} segments
         * @param {?} outlet
         * @return {?}
         */
        Recognizer.prototype.processSegmentAgainstRoute = function (route, rawSegment, segments, outlet) {
            if (route.redirectTo)
                throw new NoMatch$1();
            if ((route.outlet || PRIMARY_OUTLET) !== outlet)
                throw new NoMatch$1();
            if (route.path === '**') {
                var /** @type {?} */ params = segments.length > 0 ? ((last$1$1(segments))).parameters : {};
                var /** @type {?} */ snapshot_1 = new ActivatedRouteSnapshot(segments, params, Object.freeze(this.urlTree.queryParams), /** @type {?} */ ((this.urlTree.fragment)), getData(route), outlet, /** @type {?} */ ((route.component)), route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));
                return [new TreeNode(snapshot_1, [])];
            }
            var _a = match$1(rawSegment, route, segments), consumedSegments = _a.consumedSegments, parameters = _a.parameters, lastChild = _a.lastChild;
            var /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);
            var /** @type {?} */ childConfig = getChildConfig(route);
            var _b = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _b.segmentGroup, slicedSegments = _b.slicedSegments;
            var /** @type {?} */ snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze(this.urlTree.queryParams), /** @type {?} */ ((this.urlTree.fragment)), getData(route), outlet, /** @type {?} */ ((route.component)), route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));
            if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
                var /** @type {?} */ children_3 = this.processChildren(childConfig, segmentGroup);
                return [new TreeNode(snapshot, children_3)];
            }
            if (childConfig.length === 0 && slicedSegments.length === 0) {
                return [new TreeNode(snapshot, [])];
            }
            var /** @type {?} */ children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);
            return [new TreeNode(snapshot, children)];
        };
        return Recognizer;
    }());
    /**
     * @param {?} nodes
     * @return {?}
     */
    function sortActivatedRouteSnapshots(nodes) {
        nodes.sort(function (a, b) {
            if (a.value.outlet === PRIMARY_OUTLET)
                return -1;
            if (b.value.outlet === PRIMARY_OUTLET)
                return 1;
            return a.value.outlet.localeCompare(b.value.outlet);
        });
    }
    /**
     * @param {?} route
     * @return {?}
     */
    function getChildConfig(route) {
        if (route.children) {
            return route.children;
        }
        if (route.loadChildren) {
            return ((route._loadedConfig)).routes;
        }
        return [];
    }
    /**
     * @param {?} segmentGroup
     * @param {?} route
     * @param {?} segments
     * @return {?}
     */
    function match$1(segmentGroup, route, segments) {
        if (route.path === '') {
            if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {
                throw new NoMatch$1();
            }
            return { consumedSegments: [], lastChild: 0, parameters: {} };
        }
        var /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;
        var /** @type {?} */ res = matcher(segments, segmentGroup, route);
        if (!res)
            throw new NoMatch$1();
        var /** @type {?} */ posParams = {};
        forEach(/** @type {?} */ ((res.posParams)), function (v, k) { posParams[k] = v.path; });
        var /** @type {?} */ parameters = res.consumed.length > 0 ? Object.assign({}, posParams, res.consumed[res.consumed.length - 1].parameters) :
            posParams;
        return { consumedSegments: res.consumed, lastChild: res.consumed.length, parameters: parameters };
    }
    /**
     * @param {?} nodes
     * @return {?}
     */
    function checkOutletNameUniqueness(nodes) {
        var /** @type {?} */ names = {};
        nodes.forEach(function (n) {
            var /** @type {?} */ routeWithSameOutletName = names[n.value.outlet];
            if (routeWithSameOutletName) {
                var /** @type {?} */ p = routeWithSameOutletName.url.map(function (s) { return s.toString(); }).join('/');
                var /** @type {?} */ c = n.value.url.map(function (s) { return s.toString(); }).join('/');
                throw new Error("Two segments cannot have the same outlet name: '" + p + "' and '" + c + "'.");
            }
            names[n.value.outlet] = n.value;
        });
    }
    /**
     * @param {?} segmentGroup
     * @return {?}
     */
    function getSourceSegmentGroup(segmentGroup) {
        var /** @type {?} */ s = segmentGroup;
        while (s._sourceSegment) {
            s = s._sourceSegment;
        }
        return s;
    }
    /**
     * @param {?} segmentGroup
     * @return {?}
     */
    function getPathIndexShift(segmentGroup) {
        var /** @type {?} */ s = segmentGroup;
        var /** @type {?} */ res = (s._segmentIndexShift ? s._segmentIndexShift : 0);
        while (s._sourceSegment) {
            s = s._sourceSegment;
            res += (s._segmentIndexShift ? s._segmentIndexShift : 0);
        }
        return res - 1;
    }
    /**
     * @param {?} segmentGroup
     * @param {?} consumedSegments
     * @param {?} slicedSegments
     * @param {?} config
     * @return {?}
     */
    function split$1(segmentGroup, consumedSegments, slicedSegments, config) {
        if (slicedSegments.length > 0 &&
            containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {
            var /** @type {?} */ s_1 = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
            s_1._sourceSegment = segmentGroup;
            s_1._segmentIndexShift = consumedSegments.length;
            return { segmentGroup: s_1, slicedSegments: [] };
        }
        if (slicedSegments.length === 0 &&
            containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {
            var /** @type {?} */ s_2 = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
            s_2._sourceSegment = segmentGroup;
            s_2._segmentIndexShift = consumedSegments.length;
            return { segmentGroup: s_2, slicedSegments: slicedSegments };
        }
        var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
        s._sourceSegment = segmentGroup;
        s._segmentIndexShift = consumedSegments.length;
        return { segmentGroup: s, slicedSegments: slicedSegments };
    }
    /**
     * @param {?} segmentGroup
     * @param {?} slicedSegments
     * @param {?} routes
     * @param {?} children
     * @return {?}
     */
    function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
        var /** @type {?} */ res = {};
        for (var _i = 0, routes_3 = routes; _i < routes_3.length; _i++) {
            var r = routes_3[_i];
            if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {
                var /** @type {?} */ s = new UrlSegmentGroup([], {});
                s._sourceSegment = segmentGroup;
                s._segmentIndexShift = segmentGroup.segments.length;
                res[getOutlet$1(r)] = s;
            }
        }
        return Object.assign({}, children, res);
    }
    /**
     * @param {?} segmentGroup
     * @param {?} consumedSegments
     * @param {?} routes
     * @param {?} primarySegment
     * @return {?}
     */
    function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {
        var /** @type {?} */ res = {};
        res[PRIMARY_OUTLET] = primarySegment;
        primarySegment._sourceSegment = segmentGroup;
        primarySegment._segmentIndexShift = consumedSegments.length;
        for (var _i = 0, routes_4 = routes; _i < routes_4.length; _i++) {
            var r = routes_4[_i];
            if (r.path === '' && getOutlet$1(r) !== PRIMARY_OUTLET) {
                var /** @type {?} */ s = new UrlSegmentGroup([], {});
                s._sourceSegment = segmentGroup;
                s._segmentIndexShift = consumedSegments.length;
                res[getOutlet$1(r)] = s;
            }
        }
        return res;
    }
    /**
     * @param {?} segmentGroup
     * @param {?} slicedSegments
     * @param {?} routes
     * @return {?}
     */
    function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {
        return routes.some(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet$1(r) !== PRIMARY_OUTLET; });
    }
    /**
     * @param {?} segmentGroup
     * @param {?} slicedSegments
     * @param {?} routes
     * @return {?}
     */
    function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {
        return routes.some(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r); });
    }
    /**
     * @param {?} segmentGroup
     * @param {?} slicedSegments
     * @param {?} r
     * @return {?}
     */
    function emptyPathMatch(segmentGroup, slicedSegments, r) {
        if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {
            return false;
        }
        return r.path === '' && r.redirectTo === undefined;
    }
    /**
     * @param {?} route
     * @return {?}
     */
    function getOutlet$1(route) {
        return route.outlet || PRIMARY_OUTLET;
    }
    /**
     * @param {?} route
     * @return {?}
     */
    function getData(route) {
        return route.data || {};
    }
    /**
     * @param {?} route
     * @return {?}
     */
    function getResolve(route) {
        return route.resolve || {};
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@whatItDoes Provides a way to customize when activated routes get reused.
     *
     * \@experimental
     * @abstract
     */
    var RouteReuseStrategy = (function () {
        function RouteReuseStrategy() {
        }
        /**
         * Determines if this route (and its subtree) should be detached to be reused later
         * @abstract
         * @param {?} route
         * @return {?}
         */
        RouteReuseStrategy.prototype.shouldDetach = function (route) { };
        /**
         * Stores the detached route.
         *
         * Storing a `null` value should erase the previously stored value.
         * @abstract
         * @param {?} route
         * @param {?} handle
         * @return {?}
         */
        RouteReuseStrategy.prototype.store = function (route, handle) { };
        /**
         * Determines if this route (and its subtree) should be reattached
         * @abstract
         * @param {?} route
         * @return {?}
         */
        RouteReuseStrategy.prototype.shouldAttach = function (route) { };
        /**
         * Retrieves the previously stored route
         * @abstract
         * @param {?} route
         * @return {?}
         */
        RouteReuseStrategy.prototype.retrieve = function (route) { };
        /**
         * Determines if a route should be reused
         * @abstract
         * @param {?} future
         * @param {?} curr
         * @return {?}
         */
        RouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) { };
        return RouteReuseStrategy;
    }());
    /**
     * Does not detach any subtrees. Reuses routes as long as their route config is the same.
     */
    var DefaultRouteReuseStrategy = (function () {
        function DefaultRouteReuseStrategy() {
        }
        /**
         * @param {?} route
         * @return {?}
         */
        DefaultRouteReuseStrategy.prototype.shouldDetach = function (route) { return false; };
        /**
         * @param {?} route
         * @param {?} detachedTree
         * @return {?}
         */
        DefaultRouteReuseStrategy.prototype.store = function (route, detachedTree) { };
        /**
         * @param {?} route
         * @return {?}
         */
        DefaultRouteReuseStrategy.prototype.shouldAttach = function (route) { return false; };
        /**
         * @param {?} route
         * @return {?}
         */
        DefaultRouteReuseStrategy.prototype.retrieve = function (route) { return null; };
        /**
         * @param {?} future
         * @param {?} curr
         * @return {?}
         */
        DefaultRouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) {
            return future.routeConfig === curr.routeConfig;
        };
        return DefaultRouteReuseStrategy;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@docsNotRequired
     * \@experimental
     */
    var ROUTES = new InjectionToken('ROUTES');
    var RouterConfigLoader = (function () {
        /**
         * @param {?} loader
         * @param {?} compiler
         * @param {?=} onLoadStartListener
         * @param {?=} onLoadEndListener
         */
        function RouterConfigLoader(loader, compiler, onLoadStartListener, onLoadEndListener) {
            this.loader = loader;
            this.compiler = compiler;
            this.onLoadStartListener = onLoadStartListener;
            this.onLoadEndListener = onLoadEndListener;
        }
        /**
         * @param {?} parentInjector
         * @param {?} route
         * @return {?}
         */
        RouterConfigLoader.prototype.load = function (parentInjector, route) {
            var _this = this;
            if (this.onLoadStartListener) {
                this.onLoadStartListener(route);
            }
            var /** @type {?} */ moduleFactory$ = this.loadModuleFactory(/** @type {?} */ ((route.loadChildren)));
            return map_3.call(moduleFactory$, function (factory) {
                if (_this.onLoadEndListener) {
                    _this.onLoadEndListener(route);
                }
                var /** @type {?} */ module = factory.create(parentInjector);
                return new LoadedRouterConfig(flatten$1(module.injector.get(ROUTES)), module);
            });
        };
        /**
         * @param {?} loadChildren
         * @return {?}
         */
        RouterConfigLoader.prototype.loadModuleFactory = function (loadChildren) {
            var _this = this;
            if (typeof loadChildren === 'string') {
                return fromPromise_1(this.loader.load(loadChildren));
            }
            else {
                return mergeMap_3.call(wrapIntoObservable(loadChildren()), function (t) {
                    if (t instanceof NgModuleFactory) {
                        return of_1(t);
                    }
                    else {
                        return fromPromise_1(_this.compiler.compileModuleAsync(t));
                    }
                });
            }
        };
        return RouterConfigLoader;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@whatItDoes Provides a way to migrate AngularJS applications to Angular.
     *
     * \@experimental
     * @abstract
     */
    var UrlHandlingStrategy = (function () {
        function UrlHandlingStrategy() {
        }
        /**
         * Tells the router if this URL should be processed.
         *
         * When it returns true, the router will execute the regular navigation.
         * When it returns false, the router will set the router state to an empty state.
         * As a result, all the active components will be destroyed.
         *
         * @abstract
         * @param {?} url
         * @return {?}
         */
        UrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { };
        /**
         * Extracts the part of the URL that should be handled by the router.
         * The rest of the URL will remain untouched.
         * @abstract
         * @param {?} url
         * @return {?}
         */
        UrlHandlingStrategy.prototype.extract = function (url) { };
        /**
         * Merges the URL fragment with the rest of the URL.
         * @abstract
         * @param {?} newUrlPart
         * @param {?} rawUrl
         * @return {?}
         */
        UrlHandlingStrategy.prototype.merge = function (newUrlPart, rawUrl) { };
        return UrlHandlingStrategy;
    }());
    /**
     * \@experimental
     */
    var DefaultUrlHandlingStrategy = (function () {
        function DefaultUrlHandlingStrategy() {
        }
        /**
         * @param {?} url
         * @return {?}
         */
        DefaultUrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { return true; };
        /**
         * @param {?} url
         * @return {?}
         */
        DefaultUrlHandlingStrategy.prototype.extract = function (url) { return url; };
        /**
         * @param {?} newUrlPart
         * @param {?} wholeUrl
         * @return {?}
         */
        DefaultUrlHandlingStrategy.prototype.merge = function (newUrlPart, wholeUrl) { return newUrlPart; };
        return DefaultUrlHandlingStrategy;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} error
     * @return {?}
     */
    function defaultErrorHandler(error) {
        throw error;
    }
    /**
     * \@internal
     * @param {?} snapshot
     * @return {?}
     */
    function defaultRouterHook(snapshot) {
        return (of_1(null));
    }
    /**
     * \@whatItDoes Provides the navigation and url manipulation capabilities.
     *
     * See {\@link Routes} for more details and examples.
     *
     * \@ngModule RouterModule
     *
     * \@stable
     */
    var Router = (function () {
        /**
         * @param {?} rootComponentType
         * @param {?} urlSerializer
         * @param {?} rootContexts
         * @param {?} location
         * @param {?} injector
         * @param {?} loader
         * @param {?} compiler
         * @param {?} config
         */
        function Router(rootComponentType, urlSerializer, rootContexts, location, injector, loader, compiler, config) {
            var _this = this;
            this.rootComponentType = rootComponentType;
            this.urlSerializer = urlSerializer;
            this.rootContexts = rootContexts;
            this.location = location;
            this.config = config;
            this.navigations = new BehaviorSubject_2(/** @type {?} */ ((null)));
            this.routerEvents = new Subject_2();
            this.navigationId = 0;
            /**
             * Error handler that is invoked when a navigation errors.
             *
             * See {\@link ErrorHandler} for more information.
             */
            this.errorHandler = defaultErrorHandler;
            /**
             * Indicates if at least one navigation happened.
             */
            this.navigated = false;
            /**
             * Used by RouterModule. This allows us to
             * pause the navigation either before preactivation or after it.
             * \@internal
             */
            this.hooks = {
                beforePreactivation: defaultRouterHook,
                afterPreactivation: defaultRouterHook
            };
            /**
             * Extracts and merges URLs. Used for AngularJS to Angular migrations.
             */
            this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();
            this.routeReuseStrategy = new DefaultRouteReuseStrategy();
            var onLoadStart = function (r) { return _this.triggerEvent(new RouteConfigLoadStart(r)); };
            var onLoadEnd = function (r) { return _this.triggerEvent(new RouteConfigLoadEnd(r)); };
            this.ngModule = injector.get(NgModuleRef);
            this.resetConfig(config);
            this.currentUrlTree = createEmptyUrlTree();
            this.rawUrlTree = this.currentUrlTree;
            this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);
            this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);
            this.processNavigations();
        }
        /**
         * \@internal
         * TODO: this should be removed once the constructor of the router made internal
         * @param {?} rootComponentType
         * @return {?}
         */
        Router.prototype.resetRootComponentType = function (rootComponentType) {
            this.rootComponentType = rootComponentType;
            // TODO: vsavkin router 4.0 should make the root component set to null
            // this will simplify the lifecycle of the router.
            this.currentRouterState.root.component = this.rootComponentType;
        };
        /**
         * Sets up the location change listener and performs the initial navigation.
         * @return {?}
         */
        Router.prototype.initialNavigation = function () {
            this.setUpLocationChangeListener();
            if (this.navigationId === 0) {
                this.navigateByUrl(this.location.path(true), { replaceUrl: true });
            }
        };
        /**
         * Sets up the location change listener.
         * @return {?}
         */
        Router.prototype.setUpLocationChangeListener = function () {
            var _this = this;
            // Zone.current.wrap is needed because of the issue with RxJS scheduler,
            // which does not work properly with zone.js in IE and Safari
            if (!this.locationSubscription) {
                this.locationSubscription = (this.location.subscribe(Zone.current.wrap(function (change) {
                    var /** @type {?} */ rawUrlTree = _this.urlSerializer.parse(change['url']);
                    var /** @type {?} */ source = change['type'] === 'popstate' ? 'popstate' : 'hashchange';
                    setTimeout(function () { _this.scheduleNavigation(rawUrlTree, source, { replaceUrl: true }); }, 0);
                })));
            }
        };
        Object.defineProperty(Router.prototype, "routerState", {
            /**
             * The current route state
             * @return {?}
             */
            get: function () { return this.currentRouterState; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Router.prototype, "url", {
            /**
             * The current url
             * @return {?}
             */
            get: function () { return this.serializeUrl(this.currentUrlTree); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Router.prototype, "events", {
            /**
             * An observable of router events
             * @return {?}
             */
            get: function () { return this.routerEvents; },
            enumerable: true,
            configurable: true
        });
        /**
         * \@internal
         * @param {?} e
         * @return {?}
         */
        Router.prototype.triggerEvent = function (e) { this.routerEvents.next(e); };
        /**
         * Resets the configuration used for navigation and generating links.
         *
         * ### Usage
         *
         * ```
         * router.resetConfig([
         *  { path: 'team/:id', component: TeamCmp, children: [
         *    { path: 'simple', component: SimpleCmp },
         *    { path: 'user/:name', component: UserCmp }
         *  ]}
         * ]);
         * ```
         * @param {?} config
         * @return {?}
         */
        Router.prototype.resetConfig = function (config) {
            validateConfig(config);
            this.config = config;
            this.navigated = false;
        };
        /**
         * \@docsNotRequired
         * @return {?}
         */
        Router.prototype.ngOnDestroy = function () { this.dispose(); };
        /**
         * Disposes of the router
         * @return {?}
         */
        Router.prototype.dispose = function () {
            if (this.locationSubscription) {
                this.locationSubscription.unsubscribe();
                this.locationSubscription = ((null));
            }
        };
        /**
         * Applies an array of commands to the current url tree and creates a new url tree.
         *
         * When given an activate route, applies the given commands starting from the route.
         * When not given a route, applies the given command starting from the root.
         *
         * ### Usage
         *
         * ```
         * // create /team/33/user/11
         * router.createUrlTree(['/team', 33, 'user', 11]);
         *
         * // create /team/33;expand=true/user/11
         * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);
         *
         * // you can collapse static segments like this (this works only with the first passed-in value):
         * router.createUrlTree(['/team/33/user', userId]);
         *
         * // If the first segment can contain slashes, and you do not want the router to split it, you
         * // can do the following:
         *
         * router.createUrlTree([{segmentPath: '/one/two'}]);
         *
         * // create /team/33/(user/11//right:chat)
         * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);
         *
         * // remove the right secondary node
         * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);
         *
         * // assuming the current url is `/team/33/user/11` and the route points to `user/11`
         *
         * // navigate to /team/33/user/11/details
         * router.createUrlTree(['details'], {relativeTo: route});
         *
         * // navigate to /team/33/user/22
         * router.createUrlTree(['../22'], {relativeTo: route});
         *
         * // navigate to /team/44/user/22
         * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});
         * ```
         * @param {?} commands
         * @param {?=} navigationExtras
         * @return {?}
         */
        Router.prototype.createUrlTree = function (commands, navigationExtras) {
            if (navigationExtras === void 0) { navigationExtras = {}; }
            var relativeTo = navigationExtras.relativeTo, queryParams = navigationExtras.queryParams, fragment = navigationExtras.fragment, preserveQueryParams = navigationExtras.preserveQueryParams, queryParamsHandling = navigationExtras.queryParamsHandling, preserveFragment = navigationExtras.preserveFragment;
            if (isDevMode() && preserveQueryParams && (console) && (console.warn)) {
                console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');
            }
            var /** @type {?} */ a = relativeTo || this.routerState.root;
            var /** @type {?} */ f = preserveFragment ? this.currentUrlTree.fragment : fragment;
            var /** @type {?} */ q = null;
            if (queryParamsHandling) {
                switch (queryParamsHandling) {
                    case 'merge':
                        q = Object.assign({}, this.currentUrlTree.queryParams, queryParams);
                        break;
                    case 'preserve':
                        q = this.currentUrlTree.queryParams;
                        break;
                    default:
                        q = queryParams || null;
                }
            }
            else {
                q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams || null;
            }
            return createUrlTree(a, this.currentUrlTree, commands, /** @type {?} */ ((q)), /** @type {?} */ ((f)));
        };
        /**
         * Navigate based on the provided url. This navigation is always absolute.
         *
         * Returns a promise that:
         * - resolves to 'true' when navigation succeeds,
         * - resolves to 'false' when navigation fails,
         * - is rejected when an error happens.
         *
         * ### Usage
         *
         * ```
         * router.navigateByUrl("/team/33/user/11");
         *
         * // Navigate without updating the URL
         * router.navigateByUrl("/team/33/user/11", { skipLocationChange: true });
         * ```
         *
         * In opposite to `navigate`, `navigateByUrl` takes a whole URL
         * and does not apply any delta to the current one.
         * @param {?} url
         * @param {?=} extras
         * @return {?}
         */
        Router.prototype.navigateByUrl = function (url, extras) {
            if (extras === void 0) { extras = { skipLocationChange: false }; }
            var /** @type {?} */ urlTree = url instanceof UrlTree ? url : this.parseUrl(url);
            var /** @type {?} */ mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);
            return this.scheduleNavigation(mergedTree, 'imperative', extras);
        };
        /**
         * Navigate based on the provided array of commands and a starting point.
         * If no starting route is provided, the navigation is absolute.
         *
         * Returns a promise that:
         * - resolves to 'true' when navigation succeeds,
         * - resolves to 'false' when navigation fails,
         * - is rejected when an error happens.
         *
         * ### Usage
         *
         * ```
         * router.navigate(['team', 33, 'user', 11], {relativeTo: route});
         *
         * // Navigate without updating the URL
         * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});
         * ```
         *
         * In opposite to `navigateByUrl`, `navigate` always takes a delta that is applied to the current
         * URL.
         * @param {?} commands
         * @param {?=} extras
         * @return {?}
         */
        Router.prototype.navigate = function (commands, extras) {
            if (extras === void 0) { extras = { skipLocationChange: false }; }
            validateCommands(commands);
            if (typeof extras.queryParams === 'object' && extras.queryParams !== null) {
                extras.queryParams = this.removeEmptyProps(extras.queryParams);
            }
            return this.navigateByUrl(this.createUrlTree(commands, extras), extras);
        };
        /**
         * Serializes a {\@link UrlTree} into a string
         * @param {?} url
         * @return {?}
         */
        Router.prototype.serializeUrl = function (url) { return this.urlSerializer.serialize(url); };
        /**
         * Parses a string into a {\@link UrlTree}
         * @param {?} url
         * @return {?}
         */
        Router.prototype.parseUrl = function (url) { return this.urlSerializer.parse(url); };
        /**
         * Returns whether the url is activated
         * @param {?} url
         * @param {?} exact
         * @return {?}
         */
        Router.prototype.isActive = function (url, exact) {
            if (url instanceof UrlTree) {
                return containsTree(this.currentUrlTree, url, exact);
            }
            var /** @type {?} */ urlTree = this.urlSerializer.parse(url);
            return containsTree(this.currentUrlTree, urlTree, exact);
        };
        /**
         * @param {?} params
         * @return {?}
         */
        Router.prototype.removeEmptyProps = function (params) {
            return Object.keys(params).reduce(function (result, key) {
                var /** @type {?} */ value = params[key];
                if (value !== null && value !== undefined) {
                    result[key] = value;
                }
                return result;
            }, {});
        };
        /**
         * @return {?}
         */
        Router.prototype.processNavigations = function () {
            var _this = this;
            concatMap_3
                .call(this.navigations, function (nav) {
                if (nav) {
                    _this.executeScheduledNavigation(nav);
                    // a failed navigation should not stop the router from processing
                    // further navigations => the catch
                    return nav.promise.catch(function () { });
                }
                else {
                    return (of_1(null));
                }
            })
                .subscribe(function () { });
        };
        /**
         * @param {?} rawUrl
         * @param {?} source
         * @param {?} extras
         * @return {?}
         */
        Router.prototype.scheduleNavigation = function (rawUrl, source, extras) {
            var /** @type {?} */ lastNavigation = this.navigations.value;
            // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),
            // and that navigation results in 'replaceState' that leads to the same URL,
            // we should skip those.
            if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&
                lastNavigation.rawUrl.toString() === rawUrl.toString()) {
                return Promise.resolve(true); // return value is not used
            }
            // Because of a bug in IE and Edge, the location class fires two events (popstate and
            // hashchange) every single time. The second one should be ignored. Otherwise, the URL will
            // flicker.
            if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&
                lastNavigation.rawUrl.toString() === rawUrl.toString()) {
                return Promise.resolve(true); // return value is not used
            }
            var /** @type {?} */ resolve = null;
            var /** @type {?} */ reject = null;
            var /** @type {?} */ promise = new Promise(function (res, rej) {
                resolve = res;
                reject = rej;
            });
            var /** @type {?} */ id = ++this.navigationId;
            this.navigations.next({ id: id, source: source, rawUrl: rawUrl, extras: extras, resolve: resolve, reject: reject, promise: promise });
            // Make sure that the error is propagated even though `processNavigations` catch
            // handler does not rethrow
            return promise.catch(function (e) { return Promise.reject(e); });
        };
        /**
         * @param {?} __0
         * @return {?}
         */
        Router.prototype.executeScheduledNavigation = function (_a) {
            var _this = this;
            var id = _a.id, rawUrl = _a.rawUrl, extras = _a.extras, resolve = _a.resolve, reject = _a.reject;
            var /** @type {?} */ url = this.urlHandlingStrategy.extract(rawUrl);
            var /** @type {?} */ urlTransition = !this.navigated || url.toString() !== this.currentUrlTree.toString();
            if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {
                this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
                Promise.resolve()
                    .then(function (_) { return _this.runNavigate(url, rawUrl, !!extras.skipLocationChange, !!extras.replaceUrl, id, null); })
                    .then(resolve, reject);
                // we cannot process the current URL, but we could process the previous one =>
                // we need to do some cleanup
            }
            else if (urlTransition && this.rawUrlTree &&
                this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {
                this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
                Promise.resolve()
                    .then(function (_) { return _this.runNavigate(url, rawUrl, false, false, id, createEmptyState(url, _this.rootComponentType).snapshot); })
                    .then(resolve, reject);
            }
            else {
                this.rawUrlTree = rawUrl;
                resolve(null);
            }
        };
        /**
         * @param {?} url
         * @param {?} rawUrl
         * @param {?} shouldPreventPushState
         * @param {?} shouldReplaceUrl
         * @param {?} id
         * @param {?} precreatedState
         * @return {?}
         */
        Router.prototype.runNavigate = function (url, rawUrl, shouldPreventPushState, shouldReplaceUrl, id, precreatedState) {
            var _this = this;
            if (id !== this.navigationId) {
                this.location.go(this.urlSerializer.serialize(this.currentUrlTree));
                this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), "Navigation ID " + id + " is not equal to the current navigation id " + this.navigationId));
                return Promise.resolve(false);
            }
            return new Promise(function (resolvePromise, rejectPromise) {
                // create an observable of the url and route state snapshot
                // this operation do not result in any side effects
                var /** @type {?} */ urlAndSnapshot$;
                if (!precreatedState) {
                    var /** @type {?} */ moduleInjector = _this.ngModule.injector;
                    var /** @type {?} */ redirectsApplied$ = applyRedirects(moduleInjector, _this.configLoader, _this.urlSerializer, url, _this.config);
                    urlAndSnapshot$ = mergeMap_3.call(redirectsApplied$, function (appliedUrl) {
                        return map_3.call(recognize(_this.rootComponentType, _this.config, appliedUrl, _this.serializeUrl(appliedUrl)), function (snapshot) {
                            _this.routerEvents.next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl), snapshot));
                            return { appliedUrl: appliedUrl, snapshot: snapshot };
                        });
                    });
                }
                else {
                    urlAndSnapshot$ = of_1({ appliedUrl: url, snapshot: precreatedState });
                }
                var /** @type {?} */ beforePreactivationDone$ = mergeMap_3.call(urlAndSnapshot$, function (p) {
                    return map_3.call(_this.hooks.beforePreactivation(p.snapshot), function () { return p; });
                });
                // run preactivation: guards and data resolvers
                var /** @type {?} */ preActivation;
                var /** @type {?} */ preactivationTraverse$ = map_3.call(beforePreactivationDone$, function (_a) {
                    var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;
                    var /** @type {?} */ moduleInjector = _this.ngModule.injector;
                    preActivation =
                        new PreActivation(snapshot, _this.currentRouterState.snapshot, moduleInjector);
                    preActivation.traverse(_this.rootContexts);
                    return { appliedUrl: appliedUrl, snapshot: snapshot };
                });
                var /** @type {?} */ preactivationCheckGuards$ = mergeMap_3.call(preactivationTraverse$, function (_a) {
                    var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;
                    if (_this.navigationId !== id)
                        return of_1(false);
                    _this.triggerEvent(new GuardsCheckStart(id, _this.serializeUrl(url), appliedUrl, snapshot));
                    return map_3.call(preActivation.checkGuards(), function (shouldActivate) {
                        _this.triggerEvent(new GuardsCheckEnd(id, _this.serializeUrl(url), appliedUrl, snapshot, shouldActivate));
                        return { appliedUrl: appliedUrl, snapshot: snapshot, shouldActivate: shouldActivate };
                    });
                });
                var /** @type {?} */ preactivationResolveData$ = mergeMap_3.call(preactivationCheckGuards$, function (p) {
                    if (_this.navigationId !== id)
                        return of_1(false);
                    if (p.shouldActivate && preActivation.isActivating()) {
                        _this.triggerEvent(new ResolveStart(id, _this.serializeUrl(url), p.appliedUrl, p.snapshot));
                        return map_3.call(preActivation.resolveData(), function () {
                            _this.triggerEvent(new ResolveEnd(id, _this.serializeUrl(url), p.appliedUrl, p.snapshot));
                            return p;
                        });
                    }
                    else {
                        return of_1(p);
                    }
                });
                var /** @type {?} */ preactivationDone$ = mergeMap_3.call(preactivationResolveData$, function (p) {
                    return map_3.call(_this.hooks.afterPreactivation(p.snapshot), function () { return p; });
                });
                // create router state
                // this operation has side effects => route state is being affected
                var /** @type {?} */ routerState$ = map_3.call(preactivationDone$, function (_a) {
                    var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot, shouldActivate = _a.shouldActivate;
                    if (shouldActivate) {
                        var /** @type {?} */ state = createRouterState(_this.routeReuseStrategy, snapshot, _this.currentRouterState);
                        return { appliedUrl: appliedUrl, state: state, shouldActivate: shouldActivate };
                    }
                    else {
                        return { appliedUrl: appliedUrl, state: null, shouldActivate: shouldActivate };
                    }
                });
                // applied the new router state
                // this operation has side effects
                var /** @type {?} */ navigationIsSuccessful;
                var /** @type {?} */ storedState = _this.currentRouterState;
                var /** @type {?} */ storedUrl = _this.currentUrlTree;
                routerState$
                    .forEach(function (_a) {
                    var appliedUrl = _a.appliedUrl, state = _a.state, shouldActivate = _a.shouldActivate;
                    if (!shouldActivate || id !== _this.navigationId) {
                        navigationIsSuccessful = false;
                        return;
                    }
                    _this.currentUrlTree = appliedUrl;
                    _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);
                    _this.currentRouterState = state;
                    if (!shouldPreventPushState) {
                        var /** @type {?} */ path = _this.urlSerializer.serialize(_this.rawUrlTree);
                        if (_this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {
                            _this.location.replaceState(path);
                        }
                        else {
                            _this.location.go(path);
                        }
                    }
                    new ActivateRoutes(_this.routeReuseStrategy, state, storedState)
                        .activate(_this.rootContexts);
                    navigationIsSuccessful = true;
                })
                    .then(function () {
                    if (navigationIsSuccessful) {
                        _this.navigated = true;
                        _this.routerEvents.next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(_this.currentUrlTree)));
                        resolvePromise(true);
                    }
                    else {
                        _this.resetUrlToCurrentUrlTree();
                        _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), ''));
                        resolvePromise(false);
                    }
                }, function (e) {
                    if (isNavigationCancelingError(e)) {
                        _this.resetUrlToCurrentUrlTree();
                        _this.navigated = true;
                        _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), e.message));
                        resolvePromise(false);
                    }
                    else {
                        _this.routerEvents.next(new NavigationError(id, _this.serializeUrl(url), e));
                        try {
                            resolvePromise(_this.errorHandler(e));
                        }
                        catch (ee) {
                            rejectPromise(ee);
                        }
                    }
                    _this.currentRouterState = storedState;
                    _this.currentUrlTree = storedUrl;
                    _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);
                    _this.location.replaceState(_this.serializeUrl(_this.rawUrlTree));
                });
            });
        };
        /**
         * @return {?}
         */
        Router.prototype.resetUrlToCurrentUrlTree = function () {
            var /** @type {?} */ path = this.urlSerializer.serialize(this.rawUrlTree);
            this.location.replaceState(path);
        };
        return Router;
    }());
    var CanActivate = (function () {
        /**
         * @param {?} path
         */
        function CanActivate(path) {
            this.path = path;
        }
        Object.defineProperty(CanActivate.prototype, "route", {
            /**
             * @return {?}
             */
            get: function () { return this.path[this.path.length - 1]; },
            enumerable: true,
            configurable: true
        });
        return CanActivate;
    }());
    var CanDeactivate = (function () {
        /**
         * @param {?} component
         * @param {?} route
         */
        function CanDeactivate(component, route) {
            this.component = component;
            this.route = route;
        }
        return CanDeactivate;
    }());
    var PreActivation = (function () {
        /**
         * @param {?} future
         * @param {?} curr
         * @param {?} moduleInjector
         */
        function PreActivation(future, curr, moduleInjector) {
            this.future = future;
            this.curr = curr;
            this.moduleInjector = moduleInjector;
            this.canActivateChecks = [];
            this.canDeactivateChecks = [];
        }
        /**
         * @param {?} parentContexts
         * @return {?}
         */
        PreActivation.prototype.traverse = function (parentContexts) {
            var /** @type {?} */ futureRoot = this.future._root;
            var /** @type {?} */ currRoot = this.curr ? this.curr._root : null;
            this.traverseChildRoutes(futureRoot, currRoot, parentContexts, [futureRoot.value]);
        };
        /**
         * @return {?}
         */
        PreActivation.prototype.checkGuards = function () {
            var _this = this;
            if (!this.isDeactivating() && !this.isActivating()) {
                return of_1(true);
            }
            var /** @type {?} */ canDeactivate$ = this.runCanDeactivateChecks();
            return mergeMap_3.call(canDeactivate$, function (canDeactivate) { return canDeactivate ? _this.runCanActivateChecks() : of_1(false); });
        };
        /**
         * @return {?}
         */
        PreActivation.prototype.resolveData = function () {
            var _this = this;
            if (!this.isActivating())
                return of_1(null);
            var /** @type {?} */ checks$ = from_2(this.canActivateChecks);
            var /** @type {?} */ runningChecks$ = concatMap_3.call(checks$, function (check) { return _this.runResolve(check.route); });
            return reduce_3.call(runningChecks$, function (_, __) { return _; });
        };
        /**
         * @return {?}
         */
        PreActivation.prototype.isDeactivating = function () { return this.canDeactivateChecks.length !== 0; };
        /**
         * @return {?}
         */
        PreActivation.prototype.isActivating = function () { return this.canActivateChecks.length !== 0; };
        /**
         * @param {?} futureNode
         * @param {?} currNode
         * @param {?} contexts
         * @param {?} futurePath
         * @return {?}
         */
        PreActivation.prototype.traverseChildRoutes = function (futureNode, currNode, contexts, futurePath) {
            var _this = this;
            var /** @type {?} */ prevChildren = nodeChildrenAsMap(currNode);
            // Process the children of the future route
            futureNode.children.forEach(function (c) {
                _this.traverseRoutes(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]));
                delete prevChildren[c.value.outlet];
            });
            // Process any children left from the current route (not active for the future route)
            forEach(prevChildren, function (v, k) { return _this.deactivateRouteAndItsChildren(v, /** @type {?} */ ((contexts)).getContext(k)); });
        };
        /**
         * @param {?} futureNode
         * @param {?} currNode
         * @param {?} parentContexts
         * @param {?} futurePath
         * @return {?}
         */
        PreActivation.prototype.traverseRoutes = function (futureNode, currNode, parentContexts, futurePath) {
            var /** @type {?} */ future = futureNode.value;
            var /** @type {?} */ curr = currNode ? currNode.value : null;
            var /** @type {?} */ context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;
            // reusing the node
            if (curr && future._routeConfig === curr._routeConfig) {
                var /** @type {?} */ shouldRunGuardsAndResolvers = this.shouldRunGuardsAndResolvers(curr, future, /** @type {?} */ ((future._routeConfig)).runGuardsAndResolvers);
                if (shouldRunGuardsAndResolvers) {
                    this.canActivateChecks.push(new CanActivate(futurePath));
                }
                else {
                    // we need to set the data
                    future.data = curr.data;
                    future._resolvedData = curr._resolvedData;
                }
                // If we have a component, we need to go through an outlet.
                if (future.component) {
                    this.traverseChildRoutes(futureNode, currNode, context ? context.children : null, futurePath);
                    // if we have a componentless route, we recurse but keep the same outlet map.
                }
                else {
                    this.traverseChildRoutes(futureNode, currNode, parentContexts, futurePath);
                }
                if (shouldRunGuardsAndResolvers) {
                    var /** @type {?} */ outlet = ((((context)).outlet));
                    this.canDeactivateChecks.push(new CanDeactivate(outlet.component, curr));
                }
            }
            else {
                if (curr) {
                    this.deactivateRouteAndItsChildren(currNode, context);
                }
                this.canActivateChecks.push(new CanActivate(futurePath));
                // If we have a component, we need to go through an outlet.
                if (future.component) {
                    this.traverseChildRoutes(futureNode, null, context ? context.children : null, futurePath);
                    // if we have a componentless route, we recurse but keep the same outlet map.
                }
                else {
                    this.traverseChildRoutes(futureNode, null, parentContexts, futurePath);
                }
            }
        };
        /**
         * @param {?} curr
         * @param {?} future
         * @param {?} mode
         * @return {?}
         */
        PreActivation.prototype.shouldRunGuardsAndResolvers = function (curr, future, mode) {
            switch (mode) {
                case 'always':
                    return true;
                case 'paramsOrQueryParamsChange':
                    return !equalParamsAndUrlSegments(curr, future) ||
                        !shallowEqual(curr.queryParams, future.queryParams);
                case 'paramsChange':
                default:
                    return !equalParamsAndUrlSegments(curr, future);
            }
        };
        /**
         * @param {?} route
         * @param {?} context
         * @return {?}
         */
        PreActivation.prototype.deactivateRouteAndItsChildren = function (route, context) {
            var _this = this;
            var /** @type {?} */ children = nodeChildrenAsMap(route);
            var /** @type {?} */ r = route.value;
            forEach(children, function (node, childName) {
                if (!r.component) {
                    _this.deactivateRouteAndItsChildren(node, context);
                }
                else if (context) {
                    _this.deactivateRouteAndItsChildren(node, context.children.getContext(childName));
                }
                else {
                    _this.deactivateRouteAndItsChildren(node, null);
                }
            });
            if (!r.component) {
                this.canDeactivateChecks.push(new CanDeactivate(null, r));
            }
            else if (context && context.outlet && context.outlet.isActivated) {
                this.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));
            }
            else {
                this.canDeactivateChecks.push(new CanDeactivate(null, r));
            }
        };
        /**
         * @return {?}
         */
        PreActivation.prototype.runCanDeactivateChecks = function () {
            var _this = this;
            var /** @type {?} */ checks$ = from_2(this.canDeactivateChecks);
            var /** @type {?} */ runningChecks$ = mergeMap_3.call(checks$, function (check) { return _this.runCanDeactivate(check.component, check.route); });
            return every_3.call(runningChecks$, function (result) { return result === true; });
        };
        /**
         * @return {?}
         */
        PreActivation.prototype.runCanActivateChecks = function () {
            var _this = this;
            var /** @type {?} */ checks$ = from_2(this.canActivateChecks);
            var /** @type {?} */ runningChecks$ = concatMap_3.call(checks$, function (check) { return andObservables(from_2([_this.runCanActivateChild(check.path), _this.runCanActivate(check.route)])); });
            return every_3.call(runningChecks$, function (result) { return result === true; });
        };
        /**
         * @param {?} future
         * @return {?}
         */
        PreActivation.prototype.runCanActivate = function (future) {
            var _this = this;
            var /** @type {?} */ canActivate = future._routeConfig ? future._routeConfig.canActivate : null;
            if (!canActivate || canActivate.length === 0)
                return of_1(true);
            var /** @type {?} */ obs = map_3.call(from_2(canActivate), function (c) {
                var /** @type {?} */ guard = _this.getToken(c, future);
                var /** @type {?} */ observable;
                if (guard.canActivate) {
                    observable = wrapIntoObservable(guard.canActivate(future, _this.future));
                }
                else {
                    observable = wrapIntoObservable(guard(future, _this.future));
                }
                return first_3.call(observable);
            });
            return andObservables(obs);
        };
        /**
         * @param {?} path
         * @return {?}
         */
        PreActivation.prototype.runCanActivateChild = function (path) {
            var _this = this;
            var /** @type {?} */ future = path[path.length - 1];
            var /** @type {?} */ canActivateChildGuards = path.slice(0, path.length - 1)
                .reverse()
                .map(function (p) { return _this.extractCanActivateChild(p); })
                .filter(function (_) { return _ !== null; });
            return andObservables(map_3.call(from_2(canActivateChildGuards), function (d) {
                var /** @type {?} */ obs = map_3.call(from_2(d.guards), function (c) {
                    var /** @type {?} */ guard = _this.getToken(c, d.node);
                    var /** @type {?} */ observable;
                    if (guard.canActivateChild) {
                        observable = wrapIntoObservable(guard.canActivateChild(future, _this.future));
                    }
                    else {
                        observable = wrapIntoObservable(guard(future, _this.future));
                    }
                    return first_3.call(observable);
                });
                return andObservables(obs);
            }));
        };
        /**
         * @param {?} p
         * @return {?}
         */
        PreActivation.prototype.extractCanActivateChild = function (p) {
            var /** @type {?} */ canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;
            if (!canActivateChild || canActivateChild.length === 0)
                return null;
            return { node: p, guards: canActivateChild };
        };
        /**
         * @param {?} component
         * @param {?} curr
         * @return {?}
         */
        PreActivation.prototype.runCanDeactivate = function (component, curr) {
            var _this = this;
            var /** @type {?} */ canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;
            if (!canDeactivate || canDeactivate.length === 0)
                return of_1(true);
            var /** @type {?} */ canDeactivate$ = mergeMap_3.call(from_2(canDeactivate), function (c) {
                var /** @type {?} */ guard = _this.getToken(c, curr);
                var /** @type {?} */ observable;
                if (guard.canDeactivate) {
                    observable =
                        wrapIntoObservable(guard.canDeactivate(component, curr, _this.curr, _this.future));
                }
                else {
                    observable = wrapIntoObservable(guard(component, curr, _this.curr, _this.future));
                }
                return first_3.call(observable);
            });
            return every_3.call(canDeactivate$, function (result) { return result === true; });
        };
        /**
         * @param {?} future
         * @return {?}
         */
        PreActivation.prototype.runResolve = function (future) {
            var /** @type {?} */ resolve = future._resolve;
            return map_3.call(this.resolveNode(resolve, future), function (resolvedData) {
                future._resolvedData = resolvedData;
                future.data = Object.assign({}, future.data, inheritedParamsDataResolve(future).resolve);
                return null;
            });
        };
        /**
         * @param {?} resolve
         * @param {?} future
         * @return {?}
         */
        PreActivation.prototype.resolveNode = function (resolve, future) {
            var _this = this;
            var /** @type {?} */ keys = Object.keys(resolve);
            if (keys.length === 0) {
                return of_1({});
            }
            if (keys.length === 1) {
                var /** @type {?} */ key_1 = keys[0];
                return map_3.call(this.getResolver(resolve[key_1], future), function (value) {
                    return _a = {}, _a[key_1] = value, _a;
                    var _a;
                });
            }
            var /** @type {?} */ data = {};
            var /** @type {?} */ runningResolvers$ = mergeMap_3.call(from_2(keys), function (key) {
                return map_3.call(_this.getResolver(resolve[key], future), function (value) {
                    data[key] = value;
                    return value;
                });
            });
            return map_3.call(last_3.call(runningResolvers$), function () { return data; });
        };
        /**
         * @param {?} injectionToken
         * @param {?} future
         * @return {?}
         */
        PreActivation.prototype.getResolver = function (injectionToken, future) {
            var /** @type {?} */ resolver = this.getToken(injectionToken, future);
            return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, this.future)) :
                wrapIntoObservable(resolver(future, this.future));
        };
        /**
         * @param {?} token
         * @param {?} snapshot
         * @return {?}
         */
        PreActivation.prototype.getToken = function (token, snapshot) {
            var /** @type {?} */ config = closestLoadedConfig(snapshot);
            var /** @type {?} */ injector = config ? config.module.injector : this.moduleInjector;
            return injector.get(token);
        };
        return PreActivation;
    }());
    var ActivateRoutes = (function () {
        /**
         * @param {?} routeReuseStrategy
         * @param {?} futureState
         * @param {?} currState
         */
        function ActivateRoutes(routeReuseStrategy, futureState, currState) {
            this.routeReuseStrategy = routeReuseStrategy;
            this.futureState = futureState;
            this.currState = currState;
        }
        /**
         * @param {?} parentContexts
         * @return {?}
         */
        ActivateRoutes.prototype.activate = function (parentContexts) {
            var /** @type {?} */ futureRoot = this.futureState._root;
            var /** @type {?} */ currRoot = this.currState ? this.currState._root : null;
            this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);
            advanceActivatedRoute(this.futureState.root);
            this.activateChildRoutes(futureRoot, currRoot, parentContexts);
        };
        /**
         * @param {?} futureNode
         * @param {?} currNode
         * @param {?} contexts
         * @return {?}
         */
        ActivateRoutes.prototype.deactivateChildRoutes = function (futureNode, currNode, contexts) {
            var _this = this;
            var /** @type {?} */ children = nodeChildrenAsMap(currNode);
            // Recurse on the routes active in the future state to de-activate deeper children
            futureNode.children.forEach(function (futureChild) {
                var /** @type {?} */ childOutletName = futureChild.value.outlet;
                _this.deactivateRoutes(futureChild, children[childOutletName], contexts);
                delete children[childOutletName];
            });
            // De-activate the routes that will not be re-used
            forEach(children, function (v, childName) {
                _this.deactivateRouteAndItsChildren(v, contexts);
            });
        };
        /**
         * @param {?} futureNode
         * @param {?} currNode
         * @param {?} parentContext
         * @return {?}
         */
        ActivateRoutes.prototype.deactivateRoutes = function (futureNode, currNode, parentContext) {
            var /** @type {?} */ future = futureNode.value;
            var /** @type {?} */ curr = currNode ? currNode.value : null;
            if (future === curr) {
                // Reusing the node, check to see if the children need to be de-activated
                if (future.component) {
                    // If we have a normal route, we need to go through an outlet.
                    var /** @type {?} */ context = parentContext.getContext(future.outlet);
                    if (context) {
                        this.deactivateChildRoutes(futureNode, currNode, context.children);
                    }
                }
                else {
                    // if we have a componentless route, we recurse but keep the same outlet map.
                    this.deactivateChildRoutes(futureNode, currNode, parentContext);
                }
            }
            else {
                if (curr) {
                    // Deactivate the current route which will not be re-used
                    this.deactivateRouteAndItsChildren(currNode, parentContext);
                }
            }
        };
        /**
         * @param {?} route
         * @param {?} parentContexts
         * @return {?}
         */
        ActivateRoutes.prototype.deactivateRouteAndItsChildren = function (route, parentContexts) {
            if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {
                this.detachAndStoreRouteSubtree(route, parentContexts);
            }
            else {
                this.deactivateRouteAndOutlet(route, parentContexts);
            }
        };
        /**
         * @param {?} route
         * @param {?} parentContexts
         * @return {?}
         */
        ActivateRoutes.prototype.detachAndStoreRouteSubtree = function (route, parentContexts) {
            var /** @type {?} */ context = parentContexts.getContext(route.value.outlet);
            if (context && context.outlet) {
                var /** @type {?} */ componentRef = context.outlet.detach();
                var /** @type {?} */ contexts = context.children.onOutletDeactivated();
                this.routeReuseStrategy.store(route.value.snapshot, { componentRef: componentRef, route: route, contexts: contexts });
            }
        };
        /**
         * @param {?} route
         * @param {?} parentContexts
         * @return {?}
         */
        ActivateRoutes.prototype.deactivateRouteAndOutlet = function (route, parentContexts) {
            var _this = this;
            var /** @type {?} */ context = parentContexts.getContext(route.value.outlet);
            if (context) {
                var /** @type {?} */ children = nodeChildrenAsMap(route);
                var /** @type {?} */ contexts_1 = route.value.component ? context.children : parentContexts;
                forEach(children, function (v, k) { return _this.deactivateRouteAndItsChildren(v, contexts_1); });
                if (context.outlet) {
                    // Destroy the component
                    context.outlet.deactivate();
                    // Destroy the contexts for all the outlets that were in the component
                    context.children.onOutletDeactivated();
                }
            }
        };
        /**
         * @param {?} futureNode
         * @param {?} currNode
         * @param {?} contexts
         * @return {?}
         */
        ActivateRoutes.prototype.activateChildRoutes = function (futureNode, currNode, contexts) {
            var _this = this;
            var /** @type {?} */ children = nodeChildrenAsMap(currNode);
            futureNode.children.forEach(function (c) { _this.activateRoutes(c, children[c.value.outlet], contexts); });
        };
        /**
         * @param {?} futureNode
         * @param {?} currNode
         * @param {?} parentContexts
         * @return {?}
         */
        ActivateRoutes.prototype.activateRoutes = function (futureNode, currNode, parentContexts) {
            var /** @type {?} */ future = futureNode.value;
            var /** @type {?} */ curr = currNode ? currNode.value : null;
            advanceActivatedRoute(future);
            // reusing the node
            if (future === curr) {
                if (future.component) {
                    // If we have a normal route, we need to go through an outlet.
                    var /** @type {?} */ context = parentContexts.getOrCreateContext(future.outlet);
                    this.activateChildRoutes(futureNode, currNode, context.children);
                }
                else {
                    // if we have a componentless route, we recurse but keep the same outlet map.
                    this.activateChildRoutes(futureNode, currNode, parentContexts);
                }
            }
            else {
                if (future.component) {
                    // if we have a normal route, we need to place the component into the outlet and recurse.
                    var /** @type {?} */ context = parentContexts.getOrCreateContext(future.outlet);
                    if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {
                        var /** @type {?} */ stored = ((this.routeReuseStrategy.retrieve(future.snapshot)));
                        this.routeReuseStrategy.store(future.snapshot, null);
                        context.children.onOutletReAttached(stored.contexts);
                        context.attachRef = stored.componentRef;
                        context.route = stored.route.value;
                        if (context.outlet) {
                            // Attach right away when the outlet has already been instantiated
                            // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated
                            context.outlet.attach(stored.componentRef, stored.route.value);
                        }
                        advanceActivatedRouteNodeAndItsChildren(stored.route);
                    }
                    else {
                        var /** @type {?} */ config = parentLoadedConfig(future.snapshot);
                        var /** @type {?} */ cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;
                        context.route = future;
                        context.resolver = cmpFactoryResolver;
                        if (context.outlet) {
                            // Activate the outlet when it has already been instantiated
                            // Otherwise it will get activated from its `ngOnInit` when instantiated
                            context.outlet.activateWith(future, cmpFactoryResolver);
                        }
                        this.activateChildRoutes(futureNode, null, context.children);
                    }
                }
                else {
                    // if we have a componentless route, we recurse but keep the same outlet map.
                    this.activateChildRoutes(futureNode, null, parentContexts);
                }
            }
        };
        return ActivateRoutes;
    }());
    /**
     * @param {?} node
     * @return {?}
     */
    function advanceActivatedRouteNodeAndItsChildren(node) {
        advanceActivatedRoute(node.value);
        node.children.forEach(advanceActivatedRouteNodeAndItsChildren);
    }
    /**
     * @param {?} snapshot
     * @return {?}
     */
    function parentLoadedConfig(snapshot) {
        for (var /** @type {?} */ s = snapshot.parent; s; s = s.parent) {
            var /** @type {?} */ route = s._routeConfig;
            if (route && route._loadedConfig)
                return route._loadedConfig;
            if (route && route.component)
                return null;
        }
        return null;
    }
    /**
     * @param {?} snapshot
     * @return {?}
     */
    function closestLoadedConfig(snapshot) {
        if (!snapshot)
            return null;
        for (var /** @type {?} */ s = snapshot.parent; s; s = s.parent) {
            var /** @type {?} */ route = s._routeConfig;
            if (route && route._loadedConfig)
                return route._loadedConfig;
        }
        return null;
    }
    /**
     * @template T
     * @param {?} node
     * @return {?}
     */
    function nodeChildrenAsMap(node) {
        var /** @type {?} */ map$$1 = {};
        if (node) {
            node.children.forEach(function (child) { return map$$1[child.value.outlet] = child; });
        }
        return map$$1;
    }
    /**
     * @param {?} commands
     * @return {?}
     */
    function validateCommands(commands) {
        for (var /** @type {?} */ i = 0; i < commands.length; i++) {
            var /** @type {?} */ cmd = commands[i];
            if (cmd == null) {
                throw new Error("The requested path contains " + cmd + " segment at index " + i);
            }
        }
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@whatItDoes Lets you link to specific parts of your app.
     *
     * \@howToUse
     *
     * Consider the following route configuration:
     * `[{ path: 'user/:name', component: UserCmp }]`
     *
     * When linking to this `user/:name` route, you can write:
     * `<a routerLink='/user/bob'>link to user component</a>`
     *
     * \@description
     *
     * The RouterLink directives let you link to specific parts of your app.
     *
     * When the link is static, you can use the directive as follows:
     * `<a routerLink="/user/bob">link to user component</a>`
     *
     * If you use dynamic values to generate the link, you can pass an array of path
     * segments, followed by the params for each segment.
     *
     * For instance `['/team', teamId, 'user', userName, {details: true}]`
     * means that we want to generate a link to `/team/11/user/bob;details=true`.
     *
     * Multiple static segments can be merged into one
     * (e.g., `['/team/11/user', userName, {details: true}]`).
     *
     * The first segment name can be prepended with `/`, `./`, or `../`:
     * * If the first segment begins with `/`, the router will look up the route from the root of the
     *   app.
     * * If the first segment begins with `./`, or doesn't begin with a slash, the router will
     *   instead look in the children of the current activated route.
     * * And if the first segment begins with `../`, the router will go up one level.
     *
     * You can set query params and fragment as follows:
     *
     * ```
     * <a [routerLink]="['/user/bob']" [queryParams]="{debug: true}" fragment="education">
     *   link to user component
     * </a>
     * ```
     * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.
     *
     * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the
     * directive to preserve the current query params and fragment:
     *
     * ```
     * <a [routerLink]="['/user/bob']" preserveQueryParams preserveFragment>
     *   link to user component
     * </a>
     * ```
     *
     * You can tell the directive to how to handle queryParams, available options are:
     *  - 'merge' merge the queryParams into the current queryParams
     *  - 'preserve' preserve the current queryParams
     *  - default / '' use the queryParams only
     *  same options for {\@link NavigationExtras#queryParamsHandling}
     *
     * ```
     * <a [routerLink]="['/user/bob']" [queryParams]="{debug: true}" queryParamsHandling="merge">
     *   link to user component
     * </a>
     * ```
     *
     * The router link directive always treats the provided input as a delta to the current url.
     *
     * For instance, if the current url is `/user/(box//aux:team)`.
     *
     * Then the following link `<a [routerLink]="['/user/jim']">Jim</a>` will generate the link
     * `/user/(jim//aux:team)`.
     *
     * \@ngModule RouterModule
     *
     * See {\@link Router#createUrlTree} for more information.
     *
     * \@stable
     */
    var RouterLink = (function () {
        /**
         * @param {?} router
         * @param {?} route
         * @param {?} tabIndex
         * @param {?} renderer
         * @param {?} el
         */
        function RouterLink(router, route, tabIndex, renderer, el) {
            this.router = router;
            this.route = route;
            this.commands = [];
            if (tabIndex == null) {
                renderer.setAttribute(el.nativeElement, 'tabindex', '0');
            }
        }
        Object.defineProperty(RouterLink.prototype, "routerLink", {
            /**
             * @param {?} commands
             * @return {?}
             */
            set: function (commands) {
                if (commands != null) {
                    this.commands = Array.isArray(commands) ? commands : [commands];
                }
                else {
                    this.commands = [];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterLink.prototype, "preserveQueryParams", {
            /**
             * @deprecated 4.0.0 use `queryParamsHandling` instead.
             * @param {?} value
             * @return {?}
             */
            set: function (value) {
                if (isDevMode() && (console) && (console.warn)) {
                    console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');
                }
                this.preserve = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        RouterLink.prototype.onClick = function () {
            var /** @type {?} */ extras = {
                skipLocationChange: attrBoolValue(this.skipLocationChange),
                replaceUrl: attrBoolValue(this.replaceUrl),
            };
            this.router.navigateByUrl(this.urlTree, extras);
            return true;
        };
        Object.defineProperty(RouterLink.prototype, "urlTree", {
            /**
             * @return {?}
             */
            get: function () {
                return this.router.createUrlTree(this.commands, {
                    relativeTo: this.route,
                    queryParams: this.queryParams,
                    fragment: this.fragment,
                    preserveQueryParams: attrBoolValue(this.preserve),
                    queryParamsHandling: this.queryParamsHandling,
                    preserveFragment: attrBoolValue(this.preserveFragment),
                });
            },
            enumerable: true,
            configurable: true
        });
        return RouterLink;
    }());
    RouterLink.decorators = [
        { type: Directive, args: [{ selector: ':not(a)[routerLink]' },] },
    ];
    /**
     * @nocollapse
     */
    RouterLink.ctorParameters = function () { return [
        { type: Router, },
        { type: ActivatedRoute, },
        { type: undefined, decorators: [{ type: Attribute, args: ['tabindex',] },] },
        { type: Renderer2, },
        { type: ElementRef, },
    ]; };
    RouterLink.propDecorators = {
        'queryParams': [{ type: Input },],
        'fragment': [{ type: Input },],
        'queryParamsHandling': [{ type: Input },],
        'preserveFragment': [{ type: Input },],
        'skipLocationChange': [{ type: Input },],
        'replaceUrl': [{ type: Input },],
        'routerLink': [{ type: Input },],
        'preserveQueryParams': [{ type: Input },],
        'onClick': [{ type: HostListener, args: ['click',] },],
    };
    /**
     * \@whatItDoes Lets you link to specific parts of your app.
     *
     * See {\@link RouterLink} for more information.
     *
     * \@ngModule RouterModule
     *
     * \@stable
     */
    var RouterLinkWithHref = (function () {
        /**
         * @param {?} router
         * @param {?} route
         * @param {?} locationStrategy
         */
        function RouterLinkWithHref(router, route, locationStrategy) {
            var _this = this;
            this.router = router;
            this.route = route;
            this.locationStrategy = locationStrategy;
            this.commands = [];
            this.subscription = router.events.subscribe(function (s) {
                if (s instanceof NavigationEnd) {
                    _this.updateTargetUrlAndHref();
                }
            });
        }
        Object.defineProperty(RouterLinkWithHref.prototype, "routerLink", {
            /**
             * @param {?} commands
             * @return {?}
             */
            set: function (commands) {
                if (commands != null) {
                    this.commands = Array.isArray(commands) ? commands : [commands];
                }
                else {
                    this.commands = [];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterLinkWithHref.prototype, "preserveQueryParams", {
            /**
             * @param {?} value
             * @return {?}
             */
            set: function (value) {
                if (isDevMode() && (console) && (console.warn)) {
                    console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');
                }
                this.preserve = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        RouterLinkWithHref.prototype.ngOnChanges = function (changes) { this.updateTargetUrlAndHref(); };
        /**
         * @return {?}
         */
        RouterLinkWithHref.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };
        /**
         * @param {?} button
         * @param {?} ctrlKey
         * @param {?} metaKey
         * @param {?} shiftKey
         * @return {?}
         */
        RouterLinkWithHref.prototype.onClick = function (button, ctrlKey, metaKey, shiftKey) {
            if (button !== 0 || ctrlKey || metaKey || shiftKey) {
                return true;
            }
            if (typeof this.target === 'string' && this.target != '_self') {
                return true;
            }
            var /** @type {?} */ extras = {
                skipLocationChange: attrBoolValue(this.skipLocationChange),
                replaceUrl: attrBoolValue(this.replaceUrl),
            };
            this.router.navigateByUrl(this.urlTree, extras);
            return false;
        };
        /**
         * @return {?}
         */
        RouterLinkWithHref.prototype.updateTargetUrlAndHref = function () {
            this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
        };
        Object.defineProperty(RouterLinkWithHref.prototype, "urlTree", {
            /**
             * @return {?}
             */
            get: function () {
                return this.router.createUrlTree(this.commands, {
                    relativeTo: this.route,
                    queryParams: this.queryParams,
                    fragment: this.fragment,
                    preserveQueryParams: attrBoolValue(this.preserve),
                    queryParamsHandling: this.queryParamsHandling,
                    preserveFragment: attrBoolValue(this.preserveFragment),
                });
            },
            enumerable: true,
            configurable: true
        });
        return RouterLinkWithHref;
    }());
    RouterLinkWithHref.decorators = [
        { type: Directive, args: [{ selector: 'a[routerLink]' },] },
    ];
    /**
     * @nocollapse
     */
    RouterLinkWithHref.ctorParameters = function () { return [
        { type: Router, },
        { type: ActivatedRoute, },
        { type: LocationStrategy, },
    ]; };
    RouterLinkWithHref.propDecorators = {
        'target': [{ type: HostBinding, args: ['attr.target',] }, { type: Input },],
        'queryParams': [{ type: Input },],
        'fragment': [{ type: Input },],
        'queryParamsHandling': [{ type: Input },],
        'preserveFragment': [{ type: Input },],
        'skipLocationChange': [{ type: Input },],
        'replaceUrl': [{ type: Input },],
        'href': [{ type: HostBinding },],
        'routerLink': [{ type: Input },],
        'preserveQueryParams': [{ type: Input },],
        'onClick': [{ type: HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey'],] },],
    };
    /**
     * @param {?} s
     * @return {?}
     */
    function attrBoolValue(s) {
        return s === '' || !!s;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@whatItDoes Lets you add a CSS class to an element when the link's route becomes active.
     *
     * \@howToUse
     *
     * ```
     * <a routerLink="/user/bob" routerLinkActive="active-link">Bob</a>
     * ```
     *
     * \@description
     *
     * The RouterLinkActive directive lets you add a CSS class to an element when the link's route
     * becomes active.
     *
     * Consider the following example:
     *
     * ```
     * <a routerLink="/user/bob" routerLinkActive="active-link">Bob</a>
     * ```
     *
     * When the url is either '/user' or '/user/bob', the active-link class will
     * be added to the `a` tag. If the url changes, the class will be removed.
     *
     * You can set more than one class, as follows:
     *
     * ```
     * <a routerLink="/user/bob" routerLinkActive="class1 class2">Bob</a>
     * <a routerLink="/user/bob" [routerLinkActive]="['class1', 'class2']">Bob</a>
     * ```
     *
     * You can configure RouterLinkActive by passing `exact: true`. This will add the classes
     * only when the url matches the link exactly.
     *
     * ```
     * <a routerLink="/user/bob" routerLinkActive="active-link" [routerLinkActiveOptions]="{exact:
     * true}">Bob</a>
     * ```
     *
     * You can assign the RouterLinkActive instance to a template variable and directly check
     * the `isActive` status.
     * ```
     * <a routerLink="/user/bob" routerLinkActive #rla="routerLinkActive">
     *   Bob {{ rla.isActive ? '(already open)' : ''}}
     * </a>
     * ```
     *
     * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.
     *
     * ```
     * <div routerLinkActive="active-link" [routerLinkActiveOptions]="{exact: true}">
     *   <a routerLink="/user/jim">Jim</a>
     *   <a routerLink="/user/bob">Bob</a>
     * </div>
     * ```
     *
     * This will set the active-link class on the div tag if the url is either '/user/jim' or
     * '/user/bob'.
     *
     * \@ngModule RouterModule
     *
     * \@stable
     */
    var RouterLinkActive = (function () {
        /**
         * @param {?} router
         * @param {?} element
         * @param {?} renderer
         * @param {?} cdr
         */
        function RouterLinkActive(router, element, renderer, cdr) {
            var _this = this;
            this.router = router;
            this.element = element;
            this.renderer = renderer;
            this.cdr = cdr;
            this.classes = [];
            this.active = false;
            this.routerLinkActiveOptions = { exact: false };
            this.subscription = router.events.subscribe(function (s) {
                if (s instanceof NavigationEnd) {
                    _this.update();
                }
            });
        }
        Object.defineProperty(RouterLinkActive.prototype, "isActive", {
            /**
             * @return {?}
             */
            get: function () { return this.active; },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        RouterLinkActive.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.links.changes.subscribe(function (_) { return _this.update(); });
            this.linksWithHrefs.changes.subscribe(function (_) { return _this.update(); });
            this.update();
        };
        Object.defineProperty(RouterLinkActive.prototype, "routerLinkActive", {
            /**
             * @param {?} data
             * @return {?}
             */
            set: function (data) {
                var /** @type {?} */ classes = Array.isArray(data) ? data : data.split(' ');
                this.classes = classes.filter(function (c) { return !!c; });
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        RouterLinkActive.prototype.ngOnChanges = function (changes) { this.update(); };
        /**
         * @return {?}
         */
        RouterLinkActive.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };
        /**
         * @return {?}
         */
        RouterLinkActive.prototype.update = function () {
            var _this = this;
            if (!this.links || !this.linksWithHrefs || !this.router.navigated)
                return;
            Promise.resolve().then(function () {
                var /** @type {?} */ hasActiveLinks = _this.hasActiveLinks();
                if (_this.active !== hasActiveLinks) {
                    _this.active = hasActiveLinks;
                    _this.classes.forEach(function (c) {
                        if (hasActiveLinks) {
                            _this.renderer.addClass(_this.element.nativeElement, c);
                        }
                        else {
                            _this.renderer.removeClass(_this.element.nativeElement, c);
                        }
                    });
                }
            });
        };
        /**
         * @param {?} router
         * @return {?}
         */
        RouterLinkActive.prototype.isLinkActive = function (router) {
            var _this = this;
            return function (link) { return router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact); };
        };
        /**
         * @return {?}
         */
        RouterLinkActive.prototype.hasActiveLinks = function () {
            return this.links.some(this.isLinkActive(this.router)) ||
                this.linksWithHrefs.some(this.isLinkActive(this.router));
        };
        return RouterLinkActive;
    }());
    RouterLinkActive.decorators = [
        { type: Directive, args: [{
                    selector: '[routerLinkActive]',
                    exportAs: 'routerLinkActive',
                },] },
    ];
    /**
     * @nocollapse
     */
    RouterLinkActive.ctorParameters = function () { return [
        { type: Router, },
        { type: ElementRef, },
        { type: Renderer2, },
        { type: ChangeDetectorRef, },
    ]; };
    RouterLinkActive.propDecorators = {
        'links': [{ type: ContentChildren, args: [RouterLink, { descendants: true },] },],
        'linksWithHrefs': [{ type: ContentChildren, args: [RouterLinkWithHref, { descendants: true },] },],
        'routerLinkActiveOptions': [{ type: Input },],
        'routerLinkActive': [{ type: Input },],
    };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Store contextual information about a {\@link RouterOutlet}
     *
     * \@stable
     */
    var OutletContext = (function () {
        function OutletContext() {
            this.outlet = null;
            this.route = null;
            this.resolver = null;
            this.children = new ChildrenOutletContexts();
            this.attachRef = null;
        }
        return OutletContext;
    }());
    /**
     * Store contextual information about the children (= nested) {\@link RouterOutlet}
     *
     * \@stable
     */
    var ChildrenOutletContexts = (function () {
        function ChildrenOutletContexts() {
            this.contexts = new Map();
        }
        /**
         * Called when a `RouterOutlet` directive is instantiated
         * @param {?} childName
         * @param {?} outlet
         * @return {?}
         */
        ChildrenOutletContexts.prototype.onChildOutletCreated = function (childName, outlet) {
            var /** @type {?} */ context = this.getOrCreateContext(childName);
            context.outlet = outlet;
            this.contexts.set(childName, context);
        };
        /**
         * Called when a `RouterOutlet` directive is destroyed.
         * We need to keep the context as the outlet could be destroyed inside a NgIf and might be
         * re-created later.
         * @param {?} childName
         * @return {?}
         */
        ChildrenOutletContexts.prototype.onChildOutletDestroyed = function (childName) {
            var /** @type {?} */ context = this.getContext(childName);
            if (context) {
                context.outlet = null;
            }
        };
        /**
         * Called when the corresponding route is deactivated during navigation.
         * Because the component get destroyed, all children outlet are destroyed.
         * @return {?}
         */
        ChildrenOutletContexts.prototype.onOutletDeactivated = function () {
            var /** @type {?} */ contexts = this.contexts;
            this.contexts = new Map();
            return contexts;
        };
        /**
         * @param {?} contexts
         * @return {?}
         */
        ChildrenOutletContexts.prototype.onOutletReAttached = function (contexts) { this.contexts = contexts; };
        /**
         * @param {?} childName
         * @return {?}
         */
        ChildrenOutletContexts.prototype.getOrCreateContext = function (childName) {
            var /** @type {?} */ context = this.getContext(childName);
            if (!context) {
                context = new OutletContext();
                this.contexts.set(childName, context);
            }
            return context;
        };
        /**
         * @param {?} childName
         * @return {?}
         */
        ChildrenOutletContexts.prototype.getContext = function (childName) { return this.contexts.get(childName) || null; };
        return ChildrenOutletContexts;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@whatItDoes Acts as a placeholder that Angular dynamically fills based on the current router
     * state.
     *
     * \@howToUse
     *
     * ```
     * <router-outlet></router-outlet>
     * <router-outlet name='left'></router-outlet>
     * <router-outlet name='right'></router-outlet>
     * ```
     *
     * A router outlet will emit an activate event any time a new component is being instantiated,
     * and a deactivate event when it is being destroyed.
     *
     * ```
     * <router-outlet
     *   (activate)='onActivate($event)'
     *   (deactivate)='onDeactivate($event)'></router-outlet>
     * ```
     * \@ngModule RouterModule
     *
     * \@stable
     */
    var RouterOutlet = (function () {
        /**
         * @param {?} parentContexts
         * @param {?} location
         * @param {?} resolver
         * @param {?} name
         * @param {?} changeDetector
         */
        function RouterOutlet(parentContexts, location, resolver, name, changeDetector) {
            this.parentContexts = parentContexts;
            this.location = location;
            this.resolver = resolver;
            this.changeDetector = changeDetector;
            this.activated = null;
            this._activatedRoute = null;
            this.activateEvents = new EventEmitter();
            this.deactivateEvents = new EventEmitter();
            this.name = name || PRIMARY_OUTLET;
            parentContexts.onChildOutletCreated(this.name, this);
        }
        /**
         * @return {?}
         */
        RouterOutlet.prototype.ngOnDestroy = function () { this.parentContexts.onChildOutletDestroyed(this.name); };
        /**
         * @return {?}
         */
        RouterOutlet.prototype.ngOnInit = function () {
            if (!this.activated) {
                // If the outlet was not instantiated at the time the route got activated we need to populate
                // the outlet when it is initialized (ie inside a NgIf)
                var /** @type {?} */ context = this.parentContexts.getContext(this.name);
                if (context && context.route) {
                    if (context.attachRef) {
                        // `attachRef` is populated when there is an existing component to mount
                        this.attach(context.attachRef, context.route);
                    }
                    else {
                        // otherwise the component defined in the configuration is created
                        this.activateWith(context.route, context.resolver || null);
                    }
                }
            }
        };
        Object.defineProperty(RouterOutlet.prototype, "locationInjector", {
            /**
             * @deprecated since v4 *
             * @return {?}
             */
            get: function () { return this.location.injector; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterOutlet.prototype, "locationFactoryResolver", {
            /**
             * @deprecated since v4 *
             * @return {?}
             */
            get: function () { return this.resolver; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterOutlet.prototype, "isActivated", {
            /**
             * @return {?}
             */
            get: function () { return !!this.activated; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterOutlet.prototype, "component", {
            /**
             * @return {?}
             */
            get: function () {
                if (!this.activated)
                    throw new Error('Outlet is not activated');
                return this.activated.instance;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterOutlet.prototype, "activatedRoute", {
            /**
             * @return {?}
             */
            get: function () {
                if (!this.activated)
                    throw new Error('Outlet is not activated');
                return (this._activatedRoute);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterOutlet.prototype, "activatedRouteData", {
            /**
             * @return {?}
             */
            get: function () {
                if (this._activatedRoute) {
                    return this._activatedRoute.snapshot.data;
                }
                return {};
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Called when the `RouteReuseStrategy` instructs to detach the subtree
         * @return {?}
         */
        RouterOutlet.prototype.detach = function () {
            if (!this.activated)
                throw new Error('Outlet is not activated');
            this.location.detach();
            var /** @type {?} */ cmp = this.activated;
            this.activated = null;
            this._activatedRoute = null;
            return cmp;
        };
        /**
         * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree
         * @param {?} ref
         * @param {?} activatedRoute
         * @return {?}
         */
        RouterOutlet.prototype.attach = function (ref, activatedRoute) {
            this.activated = ref;
            this._activatedRoute = activatedRoute;
            this.location.insert(ref.hostView);
        };
        /**
         * @return {?}
         */
        RouterOutlet.prototype.deactivate = function () {
            if (this.activated) {
                var /** @type {?} */ c = this.component;
                this.activated.destroy();
                this.activated = null;
                this._activatedRoute = null;
                this.deactivateEvents.emit(c);
            }
        };
        /**
         * @param {?} activatedRoute
         * @param {?} resolver
         * @return {?}
         */
        RouterOutlet.prototype.activateWith = function (activatedRoute, resolver) {
            if (this.isActivated) {
                throw new Error('Cannot activate an already activated outlet');
            }
            this._activatedRoute = activatedRoute;
            var /** @type {?} */ snapshot = activatedRoute._futureSnapshot;
            var /** @type {?} */ component = (((snapshot._routeConfig)).component);
            resolver = resolver || this.resolver;
            var /** @type {?} */ factory = resolver.resolveComponentFactory(component);
            var /** @type {?} */ childContexts = this.parentContexts.getOrCreateContext(this.name).children;
            var /** @type {?} */ injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);
            this.activated = this.location.createComponent(factory, this.location.length, injector);
            // Calling `markForCheck` to make sure we will run the change detection when the
            // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.
            this.changeDetector.markForCheck();
            this.activateEvents.emit(this.activated.instance);
        };
        return RouterOutlet;
    }());
    RouterOutlet.decorators = [
        { type: Directive, args: [{ selector: 'router-outlet', exportAs: 'outlet' },] },
    ];
    /**
     * @nocollapse
     */
    RouterOutlet.ctorParameters = function () { return [
        { type: ChildrenOutletContexts, },
        { type: ViewContainerRef, },
        { type: ComponentFactoryResolver, },
        { type: undefined, decorators: [{ type: Attribute, args: ['name',] },] },
        { type: ChangeDetectorRef, },
    ]; };
    RouterOutlet.propDecorators = {
        'activateEvents': [{ type: Output, args: ['activate',] },],
        'deactivateEvents': [{ type: Output, args: ['deactivate',] },],
    };
    var OutletInjector = (function () {
        /**
         * @param {?} route
         * @param {?} childContexts
         * @param {?} parent
         */
        function OutletInjector(route, childContexts, parent) {
            this.route = route;
            this.childContexts = childContexts;
            this.parent = parent;
        }
        /**
         * @param {?} token
         * @param {?=} notFoundValue
         * @return {?}
         */
        OutletInjector.prototype.get = function (token, notFoundValue) {
            if (token === ActivatedRoute) {
                return this.route;
            }
            if (token === ChildrenOutletContexts) {
                return this.childContexts;
            }
            return this.parent.get(token, notFoundValue);
        };
        return OutletInjector;
    }());
    /**
    *@license
    *Copyright Google Inc. All Rights Reserved.
    *
    *Use of this source code is governed by an MIT-style license that can be
    *found in the LICENSE file at https://angular.io/license
    */
    /**
     * \@whatItDoes Provides a preloading strategy.
     *
     * \@experimental
     * @abstract
     */
    var PreloadingStrategy = (function () {
        function PreloadingStrategy() {
        }
        /**
         * @abstract
         * @param {?} route
         * @param {?} fn
         * @return {?}
         */
        PreloadingStrategy.prototype.preload = function (route, fn) { };
        return PreloadingStrategy;
    }());
    /**
     * \@whatItDoes Provides a preloading strategy that preloads all modules as quickly as possible.
     *
     * \@howToUse
     *
     * ```
     * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})
     * ```
     *
     * \@experimental
     */
    var PreloadAllModules = (function () {
        function PreloadAllModules() {
        }
        /**
         * @param {?} route
         * @param {?} fn
         * @return {?}
         */
        PreloadAllModules.prototype.preload = function (route, fn) {
            return _catch_2.call(fn(), function () { return of_1(null); });
        };
        return PreloadAllModules;
    }());
    /**
     * \@whatItDoes Provides a preloading strategy that does not preload any modules.
     *
     * \@description
     *
     * This strategy is enabled by default.
     *
     * \@experimental
     */
    var NoPreloading = (function () {
        function NoPreloading() {
        }
        /**
         * @param {?} route
         * @param {?} fn
         * @return {?}
         */
        NoPreloading.prototype.preload = function (route, fn) { return of_1(null); };
        return NoPreloading;
    }());
    /**
     * The preloader optimistically loads all router configurations to
     * make navigations into lazily-loaded sections of the application faster.
     *
     * The preloader runs in the background. When the router bootstraps, the preloader
     * starts listening to all navigation events. After every such event, the preloader
     * will check if any configurations can be loaded lazily.
     *
     * If a route is protected by `canLoad` guards, the preloaded will not load it.
     *
     * \@stable
     */
    var RouterPreloader = (function () {
        /**
         * @param {?} router
         * @param {?} moduleLoader
         * @param {?} compiler
         * @param {?} injector
         * @param {?} preloadingStrategy
         */
        function RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {
            this.router = router;
            this.injector = injector;
            this.preloadingStrategy = preloadingStrategy;
            var onStartLoad = function (r) { return router.triggerEvent(new RouteConfigLoadStart(r)); };
            var onEndLoad = function (r) { return router.triggerEvent(new RouteConfigLoadEnd(r)); };
            this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);
        }
        /**
         * @return {?}
         */
        RouterPreloader.prototype.setUpPreloading = function () {
            var _this = this;
            var /** @type {?} */ navigations$ = filter_3.call(this.router.events, function (e) { return e instanceof NavigationEnd; });
            this.subscription = concatMap_3.call(navigations$, function () { return _this.preload(); }).subscribe(function () { });
        };
        /**
         * @return {?}
         */
        RouterPreloader.prototype.preload = function () {
            var /** @type {?} */ ngModule = this.injector.get(NgModuleRef);
            return this.processRoutes(ngModule, this.router.config);
        };
        /**
         * @return {?}
         */
        RouterPreloader.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };
        /**
         * @param {?} ngModule
         * @param {?} routes
         * @return {?}
         */
        RouterPreloader.prototype.processRoutes = function (ngModule, routes) {
            var /** @type {?} */ res = [];
            for (var _i = 0, routes_5 = routes; _i < routes_5.length; _i++) {
                var route = routes_5[_i];
                // we already have the config loaded, just recurse
                if (route.loadChildren && !route.canLoad && route._loadedConfig) {
                    var /** @type {?} */ childConfig = route._loadedConfig;
                    res.push(this.processRoutes(childConfig.module, childConfig.routes));
                    // no config loaded, fetch the config
                }
                else if (route.loadChildren && !route.canLoad) {
                    res.push(this.preloadConfig(ngModule, route));
                    // recurse into children
                }
                else if (route.children) {
                    res.push(this.processRoutes(ngModule, route.children));
                }
            }
            return mergeAll_3.call(from_2(res));
        };
        /**
         * @param {?} ngModule
         * @param {?} route
         * @return {?}
         */
        RouterPreloader.prototype.preloadConfig = function (ngModule, route) {
            var _this = this;
            return this.preloadingStrategy.preload(route, function () {
                var /** @type {?} */ loaded$ = _this.loader.load(ngModule.injector, route);
                return mergeMap_3.call(loaded$, function (config) {
                    route._loadedConfig = config;
                    return _this.processRoutes(config.module, config.routes);
                });
            });
        };
        return RouterPreloader;
    }());
    RouterPreloader.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    RouterPreloader.ctorParameters = function () { return [
        { type: Router, },
        { type: NgModuleFactoryLoader, },
        { type: Compiler, },
        { type: Injector, },
        { type: PreloadingStrategy, },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@whatItDoes Contains a list of directives
     * \@stable
     */
    var ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive];
    /**
     * \@whatItDoes Is used in DI to configure the router.
     * \@stable
     */
    var ROUTER_CONFIGURATION = new InjectionToken('ROUTER_CONFIGURATION');
    /**
     * \@docsNotRequired
     */
    var ROUTER_FORROOT_GUARD = new InjectionToken('ROUTER_FORROOT_GUARD');
    var ROUTER_PROVIDERS = [
        Location,
        { provide: UrlSerializer, useClass: DefaultUrlSerializer },
        {
            provide: Router,
            useFactory: setupRouter,
            deps: [
                ApplicationRef, UrlSerializer, ChildrenOutletContexts, Location, Injector,
                NgModuleFactoryLoader, Compiler, ROUTES, ROUTER_CONFIGURATION,
                [UrlHandlingStrategy, new Optional()], [RouteReuseStrategy, new Optional()]
            ]
        },
        ChildrenOutletContexts,
        { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },
        { provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader },
        RouterPreloader,
        NoPreloading,
        PreloadAllModules,
        { provide: ROUTER_CONFIGURATION, useValue: { enableTracing: false } },
    ];
    /**
     * @return {?}
     */
    function routerNgProbeToken() {
        return new NgProbeToken('Router', Router);
    }
    /**
     * \@whatItDoes Adds router directives and providers.
     *
     * \@howToUse
     *
     * RouterModule can be imported multiple times: once per lazily-loaded bundle.
     * Since the router deals with a global shared resource--location, we cannot have
     * more than one router service active.
     *
     * That is why there are two ways to create the module: `RouterModule.forRoot` and
     * `RouterModule.forChild`.
     *
     * * `forRoot` creates a module that contains all the directives, the given routes, and the router
     *   service itself.
     * * `forChild` creates a module that contains all the directives and the given routes, but does not
     *   include the router service.
     *
     * When registered at the root, the module should be used as follows
     *
     * ```
     * \@NgModule({
     *   imports: [RouterModule.forRoot(ROUTES)]
     * })
     * class MyNgModule {}
     * ```
     *
     * For submodules and lazy loaded submodules the module should be used as follows:
     *
     * ```
     * \@NgModule({
     *   imports: [RouterModule.forChild(ROUTES)]
     * })
     * class MyNgModule {}
     * ```
     *
     * \@description
     *
     * Managing state transitions is one of the hardest parts of building applications. This is
     * especially true on the web, where you also need to ensure that the state is reflected in the URL.
     * In addition, we often want to split applications into multiple bundles and load them on demand.
     * Doing this transparently is not trivial.
     *
     * The Angular router solves these problems. Using the router, you can declaratively specify
     * application states, manage state transitions while taking care of the URL, and load bundles on
     * demand.
     *
     * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an
     * overview of how the router should be used.
     *
     * \@stable
     */
    var RouterModule = (function () {
        /**
         * @param {?} guard
         * @param {?} router
         */
        function RouterModule(guard, router) {
        }
        /**
         * Creates a module with all the router providers and directives. It also optionally sets up an
         * application listener to perform an initial navigation.
         *
         * Options:
         * * `enableTracing` makes the router log all its internal events to the console.
         * * `useHash` enables the location strategy that uses the URL fragment instead of the history
         * API.
         * * `initialNavigation` disables the initial navigation.
         * * `errorHandler` provides a custom error handler.
         * @param {?} routes
         * @param {?=} config
         * @return {?}
         */
        RouterModule.forRoot = function (routes, config) {
            return {
                ngModule: RouterModule,
                providers: [
                    ROUTER_PROVIDERS,
                    provideRoutes(routes),
                    {
                        provide: ROUTER_FORROOT_GUARD,
                        useFactory: provideForRootGuard,
                        deps: [[Router, new Optional(), new SkipSelf()]]
                    },
                    { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },
                    {
                        provide: LocationStrategy,
                        useFactory: provideLocationStrategy,
                        deps: [
                            PlatformLocation, [new Inject(APP_BASE_HREF), new Optional()], ROUTER_CONFIGURATION
                        ]
                    },
                    {
                        provide: PreloadingStrategy,
                        useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :
                            NoPreloading
                    },
                    { provide: NgProbeToken, multi: true, useFactory: routerNgProbeToken },
                    provideRouterInitializer(),
                ],
            };
        };
        /**
         * Creates a module with all the router directives and a provider registering routes.
         * @param {?} routes
         * @return {?}
         */
        RouterModule.forChild = function (routes) {
            return { ngModule: RouterModule, providers: [provideRoutes(routes)] };
        };
        return RouterModule;
    }());
    RouterModule.decorators = [
        { type: NgModule, args: [{ declarations: ROUTER_DIRECTIVES, exports: ROUTER_DIRECTIVES },] },
    ];
    /**
     * @nocollapse
     */
    RouterModule.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ROUTER_FORROOT_GUARD,] },] },
        { type: Router, decorators: [{ type: Optional },] },
    ]; };
    /**
     * @param {?} platformLocationStrategy
     * @param {?} baseHref
     * @param {?=} options
     * @return {?}
     */
    function provideLocationStrategy(platformLocationStrategy, baseHref, options) {
        if (options === void 0) { options = {}; }
        return options.useHash ? new HashLocationStrategy(platformLocationStrategy, baseHref) :
            new PathLocationStrategy(platformLocationStrategy, baseHref);
    }
    /**
     * @param {?} router
     * @return {?}
     */
    function provideForRootGuard(router) {
        if (router) {
            throw new Error("RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.");
        }
        return 'guarded';
    }
    /**
     * \@whatItDoes Registers routes.
     *
     * \@howToUse
     *
     * ```
     * \@NgModule({
     *   imports: [RouterModule.forChild(ROUTES)],
     *   providers: [provideRoutes(EXTRA_ROUTES)]
     * })
     * class MyNgModule {}
     * ```
     *
     * \@stable
     * @param {?} routes
     * @return {?}
     */
    function provideRoutes(routes) {
        return [
            { provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes },
            { provide: ROUTES, multi: true, useValue: routes },
        ];
    }
    /**
     * @param {?} ref
     * @param {?} urlSerializer
     * @param {?} contexts
     * @param {?} location
     * @param {?} injector
     * @param {?} loader
     * @param {?} compiler
     * @param {?} config
     * @param {?=} opts
     * @param {?=} urlHandlingStrategy
     * @param {?=} routeReuseStrategy
     * @return {?}
     */
    function setupRouter(ref, urlSerializer, contexts, location, injector, loader, compiler, config, opts, urlHandlingStrategy, routeReuseStrategy) {
        if (opts === void 0) { opts = {}; }
        var /** @type {?} */ router = new Router(null, urlSerializer, contexts, location, injector, loader, compiler, flatten$1(config));
        if (urlHandlingStrategy) {
            router.urlHandlingStrategy = urlHandlingStrategy;
        }
        if (routeReuseStrategy) {
            router.routeReuseStrategy = routeReuseStrategy;
        }
        if (opts.errorHandler) {
            router.errorHandler = opts.errorHandler;
        }
        if (opts.enableTracing) {
            var /** @type {?} */ dom_1 = getDOM();
            router.events.subscribe(function (e) {
                dom_1.logGroup("Router Event: " + ((e.constructor)).name);
                dom_1.log(e.toString());
                dom_1.log(e);
                dom_1.logGroupEnd();
            });
        }
        return router;
    }
    /**
     * @param {?} router
     * @return {?}
     */
    function rootRoute(router) {
        return router.routerState.root;
    }
    /**
     * To initialize the router properly we need to do in two steps:
     *
     * We need to start the navigation in a APP_INITIALIZER to block the bootstrap if
     * a resolver or a guards executes asynchronously. Second, we need to actually run
     * activation in a BOOTSTRAP_LISTENER. We utilize the afterPreactivation
     * hook provided by the router to do that.
     *
     * The router navigation starts, reaches the point when preactivation is done, and then
     * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.
     */
    var RouterInitializer = (function () {
        /**
         * @param {?} injector
         */
        function RouterInitializer(injector) {
            this.injector = injector;
            this.initNavigation = false;
            this.resultOfPreactivationDone = new Subject_2();
        }
        /**
         * @return {?}
         */
        RouterInitializer.prototype.appInitializer = function () {
            var _this = this;
            var /** @type {?} */ p = this.injector.get(LOCATION_INITIALIZED, Promise.resolve(null));
            return p.then(function () {
                var /** @type {?} */ resolve = ((null));
                var /** @type {?} */ res = new Promise(function (r) { return resolve = r; });
                var /** @type {?} */ router = _this.injector.get(Router);
                var /** @type {?} */ opts = _this.injector.get(ROUTER_CONFIGURATION);
                if (_this.isLegacyDisabled(opts) || _this.isLegacyEnabled(opts)) {
                    resolve(true);
                }
                else if (opts.initialNavigation === 'disabled') {
                    router.setUpLocationChangeListener();
                    resolve(true);
                }
                else if (opts.initialNavigation === 'enabled') {
                    router.hooks.afterPreactivation = function () {
                        // only the initial navigation should be delayed
                        if (!_this.initNavigation) {
                            _this.initNavigation = true;
                            resolve(true);
                            return _this.resultOfPreactivationDone;
                            // subsequent navigations should not be delayed
                        }
                        else {
                            return (of_1(null));
                        }
                    };
                    router.initialNavigation();
                }
                else {
                    throw new Error("Invalid initialNavigation options: '" + opts.initialNavigation + "'");
                }
                return res;
            });
        };
        /**
         * @param {?} bootstrappedComponentRef
         * @return {?}
         */
        RouterInitializer.prototype.bootstrapListener = function (bootstrappedComponentRef) {
            var /** @type {?} */ opts = this.injector.get(ROUTER_CONFIGURATION);
            var /** @type {?} */ preloader = this.injector.get(RouterPreloader);
            var /** @type {?} */ router = this.injector.get(Router);
            var /** @type {?} */ ref = this.injector.get(ApplicationRef);
            if (bootstrappedComponentRef !== ref.components[0]) {
                return;
            }
            if (this.isLegacyEnabled(opts)) {
                router.initialNavigation();
            }
            else if (this.isLegacyDisabled(opts)) {
                router.setUpLocationChangeListener();
            }
            preloader.setUpPreloading();
            router.resetRootComponentType(ref.componentTypes[0]);
            this.resultOfPreactivationDone.next(/** @type {?} */ ((null)));
            this.resultOfPreactivationDone.complete();
        };
        /**
         * @param {?} opts
         * @return {?}
         */
        RouterInitializer.prototype.isLegacyEnabled = function (opts) {
            return opts.initialNavigation === 'legacy_enabled' || opts.initialNavigation === true ||
                opts.initialNavigation === undefined;
        };
        /**
         * @param {?} opts
         * @return {?}
         */
        RouterInitializer.prototype.isLegacyDisabled = function (opts) {
            return opts.initialNavigation === 'legacy_disabled' || opts.initialNavigation === false;
        };
        return RouterInitializer;
    }());
    RouterInitializer.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    RouterInitializer.ctorParameters = function () { return [
        { type: Injector, },
    ]; };
    /**
     * @param {?} r
     * @return {?}
     */
    function getAppInitializer(r) {
        return r.appInitializer.bind(r);
    }
    /**
     * @param {?} r
     * @return {?}
     */
    function getBootstrapListener(r) {
        return r.bootstrapListener.bind(r);
    }
    /**
     * A token for the router initializer that will be called after the app is bootstrapped.
     *
     * \@experimental
     */
    var ROUTER_INITIALIZER = new InjectionToken('Router Initializer');
    /**
     * @return {?}
     */
    function provideRouterInitializer() {
        return [
            RouterInitializer,
            {
                provide: APP_INITIALIZER,
                multi: true,
                useFactory: getAppInitializer,
                deps: [RouterInitializer]
            },
            { provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [RouterInitializer] },
            { provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER },
        ];
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @module
     * @description
     * Entry point for all public APIs of the common package.
     */
    /**
     * \@stable
     */
    var VERSION$3 = new Version('4.4.7');

    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a
     * `HttpResponse`.
     *
     * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the
     * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the
     * `HttpBackend`.
     *
     * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.
     *
     * \@experimental
     * @abstract
     */
    var HttpHandler = (function () {
        function HttpHandler() {
        }
        /**
         * @abstract
         * @param {?} req
         * @return {?}
         */
        HttpHandler.prototype.handle = function (req) { };
        return HttpHandler;
    }());
    /**
     * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.
     *
     * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.
     *
     * When injected, `HttpBackend` dispatches requests directly to the backend, without going
     * through the interceptor chain.
     *
     * \@experimental
     * @abstract
     */
    var HttpBackend = (function () {
        function HttpBackend() {
        }
        /**
         * @abstract
         * @param {?} req
         * @return {?}
         */
        HttpBackend.prototype.handle = function (req) { };
        return HttpBackend;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to
     * serialize and parse URL parameter keys and values.
     *
     * \@experimental
     */
    var HttpUrlEncodingCodec = (function () {
        function HttpUrlEncodingCodec() {
        }
        /**
         * @param {?} k
         * @return {?}
         */
        HttpUrlEncodingCodec.prototype.encodeKey = function (k) { return standardEncoding(k); };
        /**
         * @param {?} v
         * @return {?}
         */
        HttpUrlEncodingCodec.prototype.encodeValue = function (v) { return standardEncoding(v); };
        /**
         * @param {?} k
         * @return {?}
         */
        HttpUrlEncodingCodec.prototype.decodeKey = function (k) { return decodeURIComponent(k); };
        /**
         * @param {?} v
         * @return {?}
         */
        HttpUrlEncodingCodec.prototype.decodeValue = function (v) { return decodeURIComponent(v); };
        return HttpUrlEncodingCodec;
    }());
    /**
     * @param {?} rawParams
     * @param {?} codec
     * @return {?}
     */
    function paramParser(rawParams, codec) {
        var /** @type {?} */ map$$1 = new Map();
        if (rawParams.length > 0) {
            var /** @type {?} */ params = rawParams.split('&');
            params.forEach(function (param) {
                var /** @type {?} */ eqIdx = param.indexOf('=');
                var _a = eqIdx == -1 ?
                    [codec.decodeKey(param), ''] :
                    [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))], key = _a[0], val = _a[1];
                var /** @type {?} */ list = map$$1.get(key) || [];
                list.push(val);
                map$$1.set(key, list);
            });
        }
        return map$$1;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    function standardEncoding(v) {
        return encodeURIComponent(v)
            .replace(/%40/gi, '@')
            .replace(/%3A/gi, ':')
            .replace(/%24/gi, '$')
            .replace(/%2C/gi, ',')
            .replace(/%3B/gi, ';')
            .replace(/%2B/gi, '+')
            .replace(/%3D/gi, '=')
            .replace(/%3F/gi, '?')
            .replace(/%2F/gi, '/');
    }
    /**
     * An HTTP request/response body that represents serialized parameters,
     * per the MIME type `application/x-www-form-urlencoded`.
     *
     * This class is immuatable - all mutation operations return a new instance.
     *
     * \@experimental
     */
    var HttpParams = (function () {
        /**
         * @param {?=} options
         */
        function HttpParams(options) {
            if (options === void 0) { options = {}; }
            this.updates = null;
            this.cloneFrom = null;
            this.encoder = options.encoder || new HttpUrlEncodingCodec();
            this.map = !!options.fromString ? paramParser(options.fromString, this.encoder) : null;
        }
        /**
         * Check whether the body has one or more values for the given parameter name.
         * @param {?} param
         * @return {?}
         */
        HttpParams.prototype.has = function (param) {
            this.init();
            return ((this.map)).has(param);
        };
        /**
         * Get the first value for the given parameter name, or `null` if it's not present.
         * @param {?} param
         * @return {?}
         */
        HttpParams.prototype.get = function (param) {
            this.init();
            var /** @type {?} */ res = ((this.map)).get(param);
            return !!res ? res[0] : null;
        };
        /**
         * Get all values for the given parameter name, or `null` if it's not present.
         * @param {?} param
         * @return {?}
         */
        HttpParams.prototype.getAll = function (param) {
            this.init();
            return ((this.map)).get(param) || null;
        };
        /**
         * Get all the parameter names for this body.
         * @return {?}
         */
        HttpParams.prototype.keys = function () {
            this.init();
            return Array.from(/** @type {?} */ ((this.map)).keys());
        };
        /**
         * Construct a new body with an appended value for the given parameter name.
         * @param {?} param
         * @param {?} value
         * @return {?}
         */
        HttpParams.prototype.append = function (param, value) { return this.clone({ param: param, value: value, op: 'a' }); };
        /**
         * Construct a new body with a new value for the given parameter name.
         * @param {?} param
         * @param {?} value
         * @return {?}
         */
        HttpParams.prototype.set = function (param, value) { return this.clone({ param: param, value: value, op: 's' }); };
        /**
         * Construct a new body with either the given value for the given parameter
         * removed, if a value is given, or all values for the given parameter removed
         * if not.
         * @param {?} param
         * @param {?=} value
         * @return {?}
         */
        HttpParams.prototype.delete = function (param, value) { return this.clone({ param: param, value: value, op: 'd' }); };
        /**
         * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are
         * separated by `&`s.
         * @return {?}
         */
        HttpParams.prototype.toString = function () {
            var _this = this;
            this.init();
            return this.keys()
                .map(function (key) {
                var /** @type {?} */ eKey = _this.encoder.encodeKey(key);
                return ((((_this.map)).get(key))).map(function (value) { return eKey + '=' + _this.encoder.encodeValue(value); })
                    .join('&');
            })
                .join('&');
        };
        /**
         * @param {?} update
         * @return {?}
         */
        HttpParams.prototype.clone = function (update) {
            var /** @type {?} */ clone = new HttpParams({ encoder: this.encoder });
            clone.cloneFrom = this.cloneFrom || this;
            clone.updates = (this.updates || []).concat([update]);
            return clone;
        };
        /**
         * @return {?}
         */
        HttpParams.prototype.init = function () {
            var _this = this;
            if (this.map === null) {
                this.map = new Map();
            }
            if (this.cloneFrom !== null) {
                this.cloneFrom.init();
                this.cloneFrom.keys().forEach(function (key) { return ((_this.map)).set(key, /** @type {?} */ ((((((_this.cloneFrom)).map)).get(key)))); }); /** @type {?} */
                ((this.updates)).forEach(function (update) {
                    switch (update.op) {
                        case 'a':
                        case 's':
                            var /** @type {?} */ base = (update.op === 'a' ? ((_this.map)).get(update.param) : undefined) || [];
                            base.push(/** @type {?} */ ((update.value))); /** @type {?} */
                            ((_this.map)).set(update.param, base);
                            break;
                        case 'd':
                            if (update.value !== undefined) {
                                var /** @type {?} */ base_1 = ((_this.map)).get(update.param) || [];
                                var /** @type {?} */ idx = base_1.indexOf(update.value);
                                if (idx !== -1) {
                                    base_1.splice(idx, 1);
                                }
                                if (base_1.length > 0) {
                                    ((_this.map)).set(update.param, base_1);
                                }
                                else {
                                    ((_this.map)).delete(update.param);
                                }
                            }
                            else {
                                ((_this.map)).delete(update.param);
                                break;
                            }
                    }
                });
                this.cloneFrom = null;
            }
        };
        return HttpParams;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Immutable set of Http headers, with lazy parsing.
     * \@experimental
     */
    var HttpHeaders = (function () {
        /**
         * @param {?=} headers
         */
        function HttpHeaders(headers) {
            var _this = this;
            /**
             * Internal map of lowercased header names to the normalized
             * form of the name (the form seen first).
             */
            this.normalizedNames = new Map();
            /**
             * Queued updates to be materialized the next initialization.
             */
            this.lazyUpdate = null;
            if (!headers) {
                this.headers = new Map();
            }
            else if (typeof headers === 'string') {
                this.lazyInit = function () {
                    _this.headers = new Map();
                    headers.split('\n').forEach(function (line) {
                        var index = line.indexOf(':');
                        if (index > 0) {
                            var name = line.slice(0, index);
                            var key = name.toLowerCase();
                            var value = line.slice(index + 1).trim();
                            _this.maybeSetNormalizedName(name, key);
                            if (_this.headers.has(key)) {
                                _this.headers.get(key).push(value);
                            }
                            else {
                                _this.headers.set(key, [value]);
                            }
                        }
                    });
                };
            }
            else {
                this.lazyInit = function () {
                    _this.headers = new Map();
                    Object.keys(headers).forEach(function (name) {
                        var values = headers[name];
                        var key = name.toLowerCase();
                        if (typeof values === 'string') {
                            values = [values];
                        }
                        if (values.length > 0) {
                            _this.headers.set(key, values);
                            _this.maybeSetNormalizedName(name, key);
                        }
                    });
                };
            }
        }
        /**
         * Checks for existence of header by given name.
         * @param {?} name
         * @return {?}
         */
        HttpHeaders.prototype.has = function (name) {
            this.init();
            return this.headers.has(name.toLowerCase());
        };
        /**
         * Returns first header that matches given name.
         * @param {?} name
         * @return {?}
         */
        HttpHeaders.prototype.get = function (name) {
            this.init();
            var /** @type {?} */ values = this.headers.get(name.toLowerCase());
            return values && values.length > 0 ? values[0] : null;
        };
        /**
         * Returns the names of the headers
         * @return {?}
         */
        HttpHeaders.prototype.keys = function () {
            this.init();
            return Array.from(this.normalizedNames.values());
        };
        /**
         * Returns list of header values for a given name.
         * @param {?} name
         * @return {?}
         */
        HttpHeaders.prototype.getAll = function (name) {
            this.init();
            return this.headers.get(name.toLowerCase()) || null;
        };
        /**
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        HttpHeaders.prototype.append = function (name, value) {
            return this.clone({ name: name, value: value, op: 'a' });
        };
        /**
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        HttpHeaders.prototype.set = function (name, value) {
            return this.clone({ name: name, value: value, op: 's' });
        };
        /**
         * @param {?} name
         * @param {?=} value
         * @return {?}
         */
        HttpHeaders.prototype.delete = function (name, value) {
            return this.clone({ name: name, value: value, op: 'd' });
        };
        /**
         * @param {?} name
         * @param {?} lcName
         * @return {?}
         */
        HttpHeaders.prototype.maybeSetNormalizedName = function (name, lcName) {
            if (!this.normalizedNames.has(lcName)) {
                this.normalizedNames.set(lcName, name);
            }
        };
        /**
         * @return {?}
         */
        HttpHeaders.prototype.init = function () {
            var _this = this;
            if (!!this.lazyInit) {
                if (this.lazyInit instanceof HttpHeaders) {
                    this.copyFrom(this.lazyInit);
                }
                else {
                    this.lazyInit();
                }
                this.lazyInit = null;
                if (!!this.lazyUpdate) {
                    this.lazyUpdate.forEach(function (update) { return _this.applyUpdate(update); });
                    this.lazyUpdate = null;
                }
            }
        };
        /**
         * @param {?} other
         * @return {?}
         */
        HttpHeaders.prototype.copyFrom = function (other) {
            var _this = this;
            other.init();
            Array.from(other.headers.keys()).forEach(function (key) {
                _this.headers.set(key, /** @type {?} */ ((other.headers.get(key))));
                _this.normalizedNames.set(key, /** @type {?} */ ((other.normalizedNames.get(key))));
            });
        };
        /**
         * @param {?} update
         * @return {?}
         */
        HttpHeaders.prototype.clone = function (update) {
            var /** @type {?} */ clone = new HttpHeaders();
            clone.lazyInit =
                (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;
            clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);
            return clone;
        };
        /**
         * @param {?} update
         * @return {?}
         */
        HttpHeaders.prototype.applyUpdate = function (update) {
            var /** @type {?} */ key = update.name.toLowerCase();
            switch (update.op) {
                case 'a':
                case 's':
                    var /** @type {?} */ value = ((update.value));
                    if (typeof value === 'string') {
                        value = [value];
                    }
                    if (value.length === 0) {
                        return;
                    }
                    this.maybeSetNormalizedName(update.name, key);
                    var /** @type {?} */ base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];
                    base.push.apply(base, value);
                    this.headers.set(key, base);
                    break;
                case 'd':
                    var /** @type {?} */ toDelete_1 = (update.value);
                    if (!toDelete_1) {
                        this.headers.delete(key);
                        this.normalizedNames.delete(key);
                    }
                    else {
                        var /** @type {?} */ existing = this.headers.get(key);
                        if (!existing) {
                            return;
                        }
                        existing = existing.filter(function (value) { return toDelete_1.indexOf(value) === -1; });
                        if (existing.length === 0) {
                            this.headers.delete(key);
                            this.normalizedNames.delete(key);
                        }
                        else {
                            this.headers.set(key, existing);
                        }
                    }
                    break;
            }
        };
        /**
         * \@internal
         * @param {?} fn
         * @return {?}
         */
        HttpHeaders.prototype.forEach = function (fn) {
            var _this = this;
            this.init();
            Array.from(this.normalizedNames.keys())
                .forEach(function (key) { return fn(/** @type {?} */ ((_this.normalizedNames.get(key))), /** @type {?} */ ((_this.headers.get(key)))); });
        };
        return HttpHeaders;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Determine whether the given HTTP method may include a body.
     * @param {?} method
     * @return {?}
     */
    function mightHaveBody(method) {
        switch (method) {
            case 'DELETE':
            case 'GET':
            case 'HEAD':
            case 'OPTIONS':
            case 'JSONP':
                return false;
            default:
                return true;
        }
    }
    /**
     * Safely assert whether the given value is an ArrayBuffer.
     *
     * In some execution environments ArrayBuffer is not defined.
     * @param {?} value
     * @return {?}
     */
    function isArrayBuffer(value) {
        return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;
    }
    /**
     * Safely assert whether the given value is a Blob.
     *
     * In some execution environments Blob is not defined.
     * @param {?} value
     * @return {?}
     */
    function isBlob(value) {
        return typeof Blob !== 'undefined' && value instanceof Blob;
    }
    /**
     * Safely assert whether the given value is a FormData instance.
     *
     * In some execution environments FormData is not defined.
     * @param {?} value
     * @return {?}
     */
    function isFormData(value) {
        return typeof FormData !== 'undefined' && value instanceof FormData;
    }
    /**
     * An outgoing HTTP request with an optional typed body.
     *
     * `HttpRequest` represents an outgoing request, including URL, method,
     * headers, body, and other request configuration options. Instances should be
     * assumed to be immutable. To modify a `HttpRequest`, the `clone`
     * method should be used.
     *
     * \@experimental
     */
    var HttpRequest = (function () {
        /**
         * @param {?} method
         * @param {?} url
         * @param {?=} third
         * @param {?=} fourth
         */
        function HttpRequest(method, url, third, fourth) {
            this.url = url;
            /**
             * The request body, or `null` if one isn't set.
             *
             * Bodies are not enforced to be immutable, as they can include a reference to any
             * user-defined data type. However, interceptors should take care to preserve
             * idempotence by treating them as such.
             */
            this.body = null;
            /**
             * Whether this request should be made in a way that exposes progress events.
             *
             * Progress events are expensive (change detection runs on each event) and so
             * they should only be requested if the consumer intends to monitor them.
             */
            this.reportProgress = false;
            /**
             * Whether this request should be sent with outgoing credentials (cookies).
             */
            this.withCredentials = false;
            /**
             * The expected response type of the server.
             *
             * This is used to parse the response appropriately before returning it to
             * the requestee.
             */
            this.responseType = 'json';
            this.method = method.toUpperCase();
            // Next, need to figure out which argument holds the HttpRequestInit
            // options, if any.
            var options;
            // Check whether a body argument is expected. The only valid way to omit
            // the body argument is to use a known no-body method like GET.
            if (mightHaveBody(this.method) || !!fourth) {
                // Body is the third argument, options are the fourth.
                this.body = third || null;
                options = fourth;
            }
            else {
                // No body required, options are the third argument. The body stays null.
                options = third;
            }
            // If options have been passed, interpret them.
            if (options) {
                // Normalize reportProgress and withCredentials.
                this.reportProgress = !!options.reportProgress;
                this.withCredentials = !!options.withCredentials;
                // Override default response type of 'json' if one is provided.
                if (!!options.responseType) {
                    this.responseType = options.responseType;
                }
                // Override headers if they're provided.
                if (!!options.headers) {
                    this.headers = options.headers;
                }
                if (!!options.params) {
                    this.params = options.params;
                }
            }
            // If no headers have been passed in, construct a new HttpHeaders instance.
            if (!this.headers) {
                this.headers = new HttpHeaders();
            }
            // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.
            if (!this.params) {
                this.params = new HttpParams();
                this.urlWithParams = url;
            }
            else {
                // Encode the parameters to a string in preparation for inclusion in the URL.
                var params = this.params.toString();
                if (params.length === 0) {
                    // No parameters, the visible URL is just the URL given at creation time.
                    this.urlWithParams = url;
                }
                else {
                    // Does the URL already have query parameters? Look for '?'.
                    var qIdx = url.indexOf('?');
                    // There are 3 cases to handle:
                    // 1) No existing parameters -> append '?' followed by params.
                    // 2) '?' exists and is followed by existing query string ->
                    //    append '&' followed by params.
                    // 3) '?' exists at the end of the url -> append params directly.
                    // This basically amounts to determining the character, if any, with
                    // which to join the URL and parameters.
                    var sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');
                    this.urlWithParams = url + sep + params;
                }
            }
        }
        /**
         * Transform the free-form body into a serialized format suitable for
         * transmission to the server.
         * @return {?}
         */
        HttpRequest.prototype.serializeBody = function () {
            // If no body is present, no need to serialize it.
            if (this.body === null) {
                return null;
            }
            // Check whether the body is already in a serialized form. If so,
            // it can just be returned directly.
            if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||
                typeof this.body === 'string') {
                return this.body;
            }
            // Check whether the body is an instance of HttpUrlEncodedParams.
            if (this.body instanceof HttpParams) {
                return this.body.toString();
            }
            // Check whether the body is an object or array, and serialize with JSON if so.
            if (typeof this.body === 'object' || typeof this.body === 'boolean' ||
                Array.isArray(this.body)) {
                return JSON.stringify(this.body);
            }
            // Fall back on toString() for everything else.
            return ((this.body)).toString();
        };
        /**
         * Examine the body and attempt to infer an appropriate MIME type
         * for it.
         *
         * If no such type can be inferred, this method will return `null`.
         * @return {?}
         */
        HttpRequest.prototype.detectContentTypeHeader = function () {
            // An empty body has no content type.
            if (this.body === null) {
                return null;
            }
            // FormData bodies rely on the browser's content type assignment.
            if (isFormData(this.body)) {
                return null;
            }
            // Blobs usually have their own content type. If it doesn't, then
            // no type can be inferred.
            if (isBlob(this.body)) {
                return this.body.type || null;
            }
            // Array buffers have unknown contents and thus no type can be inferred.
            if (isArrayBuffer(this.body)) {
                return null;
            }
            // Technically, strings could be a form of JSON data, but it's safe enough
            // to assume they're plain strings.
            if (typeof this.body === 'string') {
                return 'text/plain';
            }
            // `HttpUrlEncodedParams` has its own content-type.
            if (this.body instanceof HttpParams) {
                return 'application/x-www-form-urlencoded;charset=UTF-8';
            }
            // Arrays, objects, and numbers will be encoded as JSON.
            if (typeof this.body === 'object' || typeof this.body === 'number' ||
                Array.isArray(this.body)) {
                return 'application/json';
            }
            // No type could be inferred.
            return null;
        };
        /**
         * @param {?=} update
         * @return {?}
         */
        HttpRequest.prototype.clone = function (update) {
            if (update === void 0) { update = {}; }
            // For method, url, and responseType, take the current value unless
            // it is overridden in the update hash.
            var /** @type {?} */ method = update.method || this.method;
            var /** @type {?} */ url = update.url || this.url;
            var /** @type {?} */ responseType = update.responseType || this.responseType;
            // The body is somewhat special - a `null` value in update.body means
            // whatever current body is present is being overridden with an empty
            // body, whereas an `undefined` value in update.body implies no
            // override.
            var /** @type {?} */ body = (update.body !== undefined) ? update.body : this.body;
            // Carefully handle the boolean options to differentiate between
            // `false` and `undefined` in the update args.
            var /** @type {?} */ withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;
            var /** @type {?} */ reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;
            // Headers and params may be appended to if `setHeaders` or
            // `setParams` are used.
            var /** @type {?} */ headers = update.headers || this.headers;
            var /** @type {?} */ params = update.params || this.params;
            // Check whether the caller has asked to add headers.
            if (update.setHeaders !== undefined) {
                // Set every requested header.
                headers =
                    Object.keys(update.setHeaders)
                        .reduce(function (headers, name) { return headers.set(name, /** @type {?} */ ((update.setHeaders))[name]); }, headers);
            }
            // Check whether the caller has asked to set params.
            if (update.setParams) {
                // Set every requested param.
                params = Object.keys(update.setParams)
                    .reduce(function (params, param) { return params.set(param, /** @type {?} */ ((update.setParams))[param]); }, params);
            }
            // Finally, construct the new HttpRequest using the pieces from above.
            return new HttpRequest(method, url, body, {
                params: params, headers: headers, reportProgress: reportProgress, responseType: responseType, withCredentials: withCredentials,
            });
        };
        return HttpRequest;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var HttpEventType = {};
    HttpEventType.Sent = 0;
    HttpEventType.UploadProgress = 1;
    HttpEventType.ResponseHeader = 2;
    HttpEventType.DownloadProgress = 3;
    HttpEventType.Response = 4;
    HttpEventType.User = 5;
    HttpEventType[HttpEventType.Sent] = "Sent";
    HttpEventType[HttpEventType.UploadProgress] = "UploadProgress";
    HttpEventType[HttpEventType.ResponseHeader] = "ResponseHeader";
    HttpEventType[HttpEventType.DownloadProgress] = "DownloadProgress";
    HttpEventType[HttpEventType.Response] = "Response";
    HttpEventType[HttpEventType.User] = "User";
    /**
     * Base class for both `HttpResponse` and `HttpHeaderResponse`.
     *
     * \@experimental
     * @abstract
     */
    var HttpResponseBase = (function () {
        /**
         * Super-constructor for all responses.
         *
         * The single parameter accepted is an initialization hash. Any properties
         * of the response passed there will override the default values.
         * @param {?} init
         * @param {?=} defaultStatus
         * @param {?=} defaultStatusText
         */
        function HttpResponseBase(init, defaultStatus, defaultStatusText) {
            if (defaultStatus === void 0) { defaultStatus = 200; }
            if (defaultStatusText === void 0) { defaultStatusText = 'OK'; }
            // If the hash has values passed, use them to initialize the response.
            // Otherwise use the default values.
            this.headers = init.headers || new HttpHeaders();
            this.status = init.status !== undefined ? init.status : defaultStatus;
            this.statusText = init.statusText || defaultStatusText;
            this.url = init.url || null;
            // Cache the ok value to avoid defining a getter.
            this.ok = this.status >= 200 && this.status < 300;
        }
        return HttpResponseBase;
    }());
    /**
     * A partial HTTP response which only includes the status and header data,
     * but no response body.
     *
     * `HttpHeaderResponse` is a `HttpEvent` available on the response
     * event stream, only when progress events are requested.
     *
     * \@experimental
     */
    var HttpHeaderResponse = (function (_super) {
        __extends(HttpHeaderResponse, _super);
        /**
         * Create a new `HttpHeaderResponse` with the given parameters.
         * @param {?=} init
         */
        function HttpHeaderResponse(init) {
            if (init === void 0) { init = {}; }
            var _this = _super.call(this, init) || this;
            _this.type = HttpEventType.ResponseHeader;
            return _this;
        }
        /**
         * Copy this `HttpHeaderResponse`, overriding its contents with the
         * given parameter hash.
         * @param {?=} update
         * @return {?}
         */
        HttpHeaderResponse.prototype.clone = function (update) {
            if (update === void 0) { update = {}; }
            // Perform a straightforward initialization of the new HttpHeaderResponse,
            // overriding the current parameters with new ones if given.
            return new HttpHeaderResponse({
                headers: update.headers || this.headers,
                status: update.status !== undefined ? update.status : this.status,
                statusText: update.statusText || this.statusText,
                url: update.url || this.url || undefined,
            });
        };
        return HttpHeaderResponse;
    }(HttpResponseBase));
    /**
     * A full HTTP response, including a typed response body (which may be `null`
     * if one was not returned).
     *
     * `HttpResponse` is a `HttpEvent` available on the response event
     * stream.
     *
     * \@experimental
     */
    var HttpResponse = (function (_super) {
        __extends(HttpResponse, _super);
        /**
         * Construct a new `HttpResponse`.
         * @param {?=} init
         */
        function HttpResponse(init) {
            if (init === void 0) { init = {}; }
            var _this = _super.call(this, init) || this;
            _this.type = HttpEventType.Response;
            _this.body = init.body || null;
            return _this;
        }
        /**
         * @param {?=} update
         * @return {?}
         */
        HttpResponse.prototype.clone = function (update) {
            if (update === void 0) { update = {}; }
            return new HttpResponse({
                body: (update.body !== undefined) ? update.body : this.body,
                headers: update.headers || this.headers,
                status: (update.status !== undefined) ? update.status : this.status,
                statusText: update.statusText || this.statusText,
                url: update.url || this.url || undefined,
            });
        };
        return HttpResponse;
    }(HttpResponseBase));
    /**
     * A response that represents an error or failure, either from a
     * non-successful HTTP status, an error while executing the request,
     * or some other failure which occurred during the parsing of the response.
     *
     * Any error returned on the `Observable` response stream will be
     * wrapped in an `HttpErrorResponse` to provide additional context about
     * the state of the HTTP layer when the error occurred. The error property
     * will contain either a wrapped Error object or the error response returned
     * from the server.
     *
     * \@experimental
     */
    var HttpErrorResponse = (function (_super) {
        __extends(HttpErrorResponse, _super);
        /**
         * @param {?} init
         */
        function HttpErrorResponse(init) {
            var _this = 
            // Initialize with a default status of 0 / Unknown Error.
            _super.call(this, init, 0, 'Unknown Error') || this;
            _this.name = 'HttpErrorResponse';
            /**
             * Errors are never okay, even when the status code is in the 2xx success range.
             */
            _this.ok = false;
            // If the response was successful, then this was a parse error. Otherwise, it was
            // a protocol-level failure of some sort. Either the request failed in transit
            // or the server returned an unsuccessful status code.
            if (_this.status >= 200 && _this.status < 300) {
                _this.message = "Http failure during parsing for " + (init.url || '(unknown url)');
            }
            else {
                _this.message =
                    "Http failure response for " + (init.url || '(unknown url)') + ": " + init.status + " " + init.statusText;
            }
            _this.error = init.error || null;
            return _this;
        }
        return HttpErrorResponse;
    }(HttpResponseBase));
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and
     * the given `body`. Basically, this clones the object and adds the body.
     * @template T
     * @param {?} options
     * @param {?} body
     * @return {?}
     */
    function addBody(options, body) {
        return {
            body: body,
            headers: options.headers,
            observe: options.observe,
            params: options.params,
            reportProgress: options.reportProgress,
            responseType: options.responseType,
            withCredentials: options.withCredentials,
        };
    }
    /**
     * Perform HTTP requests.
     *
     * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.
     * Each request method has multiple signatures, and the return type varies according to which
     * signature is called (mainly the values of `observe` and `responseType`).
     *
     * \@experimental
     */
    var HttpClient = (function () {
        /**
         * @param {?} handler
         */
        function HttpClient(handler) {
            this.handler = handler;
        }
        /**
         * Constructs an `Observable` for a particular HTTP request that, when subscribed,
         * fires the request through the chain of registered interceptors and on to the
         * server.
         *
         * This method can be called in one of two ways. Either an `HttpRequest`
         * instance can be passed directly as the only parameter, or a method can be
         * passed as the first parameter, a string URL as the second, and an
         * options hash as the third.
         *
         * If a `HttpRequest` object is passed directly, an `Observable` of the
         * raw `HttpEvent` stream will be returned.
         *
         * If a request is instead built by providing a URL, the options object
         * determines the return type of `request()`. In addition to configuring
         * request parameters such as the outgoing headers and/or the body, the options
         * hash specifies two key pieces of information about the request: the
         * `responseType` and what to `observe`.
         *
         * The `responseType` value determines how a successful response body will be
         * parsed. If `responseType` is the default `json`, a type interface for the
         * resulting object may be passed as a type parameter to `request()`.
         *
         * The `observe` value determines the return type of `request()`, based on what
         * the consumer is interested in observing. A value of `events` will return an
         * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,
         * including progress events by default. A value of `response` will return an
         * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`
         * depends on the `responseType` and any optionally provided type parameter.
         * A value of `body` will return an `Observable<T>` with the same `T` body type.
         * @param {?} first
         * @param {?=} url
         * @param {?=} options
         * @return {?}
         */
        HttpClient.prototype.request = function (first, url, options) {
            var _this = this;
            if (options === void 0) { options = {}; }
            var /** @type {?} */ req;
            // Firstly, check whether the primary argument is an instance of `HttpRequest`.
            if (first instanceof HttpRequest) {
                // It is. The other arguments must be undefined (per the signatures) and can be
                // ignored.
                req = (first);
            }
            else {
                // It's a string, so it represents a URL. Construct a request based on it,
                // and incorporate the remaining arguments (assuming GET unless a method is
                // provided.
                req = new HttpRequest(first, /** @type {?} */ ((url)), options.body || null, {
                    headers: options.headers,
                    params: options.params,
                    reportProgress: options.reportProgress,
                    // By default, JSON is assumed to be returned for all calls.
                    responseType: options.responseType || 'json',
                    withCredentials: options.withCredentials,
                });
            }
            // Start with an Observable.of() the initial request, and run the handler (which
            // includes all interceptors) inside a concatMap(). This way, the handler runs
            // inside an Observable chain, which causes interceptors to be re-run on every
            // subscription (this also makes retries re-run the handler, including interceptors).
            var /** @type {?} */ events$ = concatMap_3.call(of_1(req), function (req) { return _this.handler.handle(req); });
            // If coming via the API signature which accepts a previously constructed HttpRequest,
            // the only option is to get the event stream. Otherwise, return the event stream if
            // that is what was requested.
            if (first instanceof HttpRequest || options.observe === 'events') {
                return events$;
            }
            // The requested stream contains either the full response or the body. In either
            // case, the first step is to filter the event stream to extract a stream of
            // responses(s).
            var /** @type {?} */ res$ = filter_3.call(events$, function (event) { return event instanceof HttpResponse; });
            // Decide which stream to return.
            switch (options.observe || 'body') {
                case 'body':
                    // The requested stream is the body. Map the response stream to the response
                    // body. This could be done more simply, but a misbehaving interceptor might
                    // transform the response body into a different format and ignore the requested
                    // responseType. Guard against this by validating that the response is of the
                    // requested type.
                    switch (req.responseType) {
                        case 'arraybuffer':
                            return map_3.call(res$, function (res) {
                                // Validate that the body is an ArrayBuffer.
                                if (res.body !== null && !(res.body instanceof ArrayBuffer)) {
                                    throw new Error('Response is not an ArrayBuffer.');
                                }
                                return res.body;
                            });
                        case 'blob':
                            return map_3.call(res$, function (res) {
                                // Validate that the body is a Blob.
                                if (res.body !== null && !(res.body instanceof Blob)) {
                                    throw new Error('Response is not a Blob.');
                                }
                                return res.body;
                            });
                        case 'text':
                            return map_3.call(res$, function (res) {
                                // Validate that the body is a string.
                                if (res.body !== null && typeof res.body !== 'string') {
                                    throw new Error('Response is not a string.');
                                }
                                return res.body;
                            });
                        case 'json':
                        default:
                            // No validation needed for JSON responses, as they can be of any type.
                            return map_3.call(res$, function (res) { return res.body; });
                    }
                case 'response':
                    // The response stream was requested directly, so return it.
                    return res$;
                default:
                    // Guard against new future observe types being added.
                    throw new Error("Unreachable: unhandled observe type " + options.observe + "}");
            }
        };
        /**
         * Constructs an `Observable` which, when subscribed, will cause the configured
         * DELETE request to be executed on the server. See the individual overloads for
         * details of `delete()`'s return type based on the provided options.
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        HttpClient.prototype.delete = function (url, options) {
            if (options === void 0) { options = {}; }
            return this.request('DELETE', url, /** @type {?} */ (options));
        };
        /**
         * Constructs an `Observable` which, when subscribed, will cause the configured
         * GET request to be executed on the server. See the individual overloads for
         * details of `get()`'s return type based on the provided options.
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        HttpClient.prototype.get = function (url, options) {
            if (options === void 0) { options = {}; }
            return this.request('GET', url, /** @type {?} */ (options));
        };
        /**
         * Constructs an `Observable` which, when subscribed, will cause the configured
         * HEAD request to be executed on the server. See the individual overloads for
         * details of `head()`'s return type based on the provided options.
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        HttpClient.prototype.head = function (url, options) {
            if (options === void 0) { options = {}; }
            return this.request('HEAD', url, /** @type {?} */ (options));
        };
        /**
         * Constructs an `Observable` which, when subscribed, will cause a request
         * with the special method `JSONP` to be dispatched via the interceptor pipeline.
         *
         * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).
         * If no such interceptor is reached, then the `JSONP` request will likely be
         * rejected by the configured backend.
         * @template T
         * @param {?} url
         * @param {?} callbackParam
         * @return {?}
         */
        HttpClient.prototype.jsonp = function (url, callbackParam) {
            return this.request('JSONP', url, {
                params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),
                observe: 'body',
                responseType: 'json',
            });
        };
        /**
         * Constructs an `Observable` which, when subscribed, will cause the configured
         * OPTIONS request to be executed on the server. See the individual overloads for
         * details of `options()`'s return type based on the provided options.
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        HttpClient.prototype.options = function (url, options) {
            if (options === void 0) { options = {}; }
            return this.request('OPTIONS', url, /** @type {?} */ (options));
        };
        /**
         * Constructs an `Observable` which, when subscribed, will cause the configured
         * PATCH request to be executed on the server. See the individual overloads for
         * details of `patch()`'s return type based on the provided options.
         * @param {?} url
         * @param {?} body
         * @param {?=} options
         * @return {?}
         */
        HttpClient.prototype.patch = function (url, body, options) {
            if (options === void 0) { options = {}; }
            return this.request('PATCH', url, addBody(options, body));
        };
        /**
         * Constructs an `Observable` which, when subscribed, will cause the configured
         * POST request to be executed on the server. See the individual overloads for
         * details of `post()`'s return type based on the provided options.
         * @param {?} url
         * @param {?} body
         * @param {?=} options
         * @return {?}
         */
        HttpClient.prototype.post = function (url, body, options) {
            if (options === void 0) { options = {}; }
            return this.request('POST', url, addBody(options, body));
        };
        /**
         * Constructs an `Observable` which, when subscribed, will cause the configured
         * POST request to be executed on the server. See the individual overloads for
         * details of `post()`'s return type based on the provided options.
         * @param {?} url
         * @param {?} body
         * @param {?=} options
         * @return {?}
         */
        HttpClient.prototype.put = function (url, body, options) {
            if (options === void 0) { options = {}; }
            return this.request('PUT', url, addBody(options, body));
        };
        return HttpClient;
    }());
    HttpClient.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    HttpClient.ctorParameters = function () { return [
        { type: HttpHandler, },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.
     *
     * \@experimental
     */
    var HttpInterceptorHandler = (function () {
        /**
         * @param {?} next
         * @param {?} interceptor
         */
        function HttpInterceptorHandler(next, interceptor) {
            this.next = next;
            this.interceptor = interceptor;
        }
        /**
         * @param {?} req
         * @return {?}
         */
        HttpInterceptorHandler.prototype.handle = function (req) {
            return this.interceptor.intercept(req, this.next);
        };
        return HttpInterceptorHandler;
    }());
    /**
     * A multi-provider token which represents the array of `HttpInterceptor`s that
     * are registered.
     *
     * \@experimental
     */
    var HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');
    var NoopInterceptor = (function () {
        function NoopInterceptor() {
        }
        /**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
        NoopInterceptor.prototype.intercept = function (req, next) {
            return next.handle(req);
        };
        return NoopInterceptor;
    }());
    NoopInterceptor.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    NoopInterceptor.ctorParameters = function () { return []; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // Every request made through JSONP needs a callback name that's unique across the
    // whole page. Each request is assigned an id and the callback name is constructed
    // from that. The next id to be assigned is tracked in a global variable here that
    // is shared among all applications on the page.
    var nextRequestId = 0;
    // Error text given when a JSONP script is injected, but doesn't invoke the callback
    // passed in its URL.
    var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
    // Error text given when a request is passed to the JsonpClientBackend that doesn't
    // have a request method JSONP.
    var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';
    var JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';
    /**
     * DI token/abstract type representing a map of JSONP callbacks.
     *
     * In the browser, this should always be the `window` object.
     *
     * \@experimental
     * @abstract
     */
    var JsonpCallbackContext = (function () {
        function JsonpCallbackContext() {
        }
        return JsonpCallbackContext;
    }());
    /**
     * `HttpBackend` that only processes `HttpRequest` with the JSONP method,
     * by performing JSONP style requests.
     *
     * \@experimental
     */
    var JsonpClientBackend = (function () {
        /**
         * @param {?} callbackMap
         * @param {?} document
         */
        function JsonpClientBackend(callbackMap, document) {
            this.callbackMap = callbackMap;
            this.document = document;
        }
        /**
         * Get the name of the next callback method, by incrementing the global `nextRequestId`.
         * @return {?}
         */
        JsonpClientBackend.prototype.nextCallback = function () { return "ng_jsonp_callback_" + nextRequestId++; };
        /**
         * Process a JSONP request and return an event stream of the results.
         * @param {?} req
         * @return {?}
         */
        JsonpClientBackend.prototype.handle = function (req) {
            var _this = this;
            // Firstly, check both the method and response type. If either doesn't match
            // then the request was improperly routed here and cannot be handled.
            if (req.method !== 'JSONP') {
                throw new Error(JSONP_ERR_WRONG_METHOD);
            }
            else if (req.responseType !== 'json') {
                throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);
            }
            // Everything else happens inside the Observable boundary.
            return new Observable_2(function (observer) {
                // The first step to make a request is to generate the callback name, and replace the
                // callback placeholder in the URL with the name. Care has to be taken here to ensure
                // a trailing &, if matched, gets inserted back into the URL in the correct place.
                var /** @type {?} */ callback = _this.nextCallback();
                var /** @type {?} */ url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, "=" + callback + "$1");
                // Construct the <script> tag and point it at the URL.
                var /** @type {?} */ node = _this.document.createElement('script');
                node.src = url;
                // A JSONP request requires waiting for multiple callbacks. These variables
                // are closed over and track state across those callbacks.
                // The response object, if one has been received, or null otherwise.
                var /** @type {?} */ body = null;
                // Whether the response callback has been called.
                var /** @type {?} */ finished = false;
                // Whether the request has been cancelled (and thus any other callbacks)
                // should be ignored.
                var /** @type {?} */ cancelled = false;
                // Set the response callback in this.callbackMap (which will be the window
                // object in the browser. The script being loaded via the <script> tag will
                // eventually call this callback.
                _this.callbackMap[callback] = function (data) {
                    // Data has been received from the JSONP script. Firstly, delete this callback.
                    delete _this.callbackMap[callback];
                    // Next, make sure the request wasn't cancelled in the meantime.
                    if (cancelled) {
                        return;
                    }
                    // Set state to indicate data was received.
                    body = data;
                    finished = true;
                };
                // cleanup() is a utility closure that removes the <script> from the page and
                // the response callback from the window. This logic is used in both the
                // success, error, and cancellation paths, so it's extracted out for convenience.
                var /** @type {?} */ cleanup = function () {
                    // Remove the <script> tag if it's still on the page.
                    if (node.parentNode) {
                        node.parentNode.removeChild(node);
                    }
                    // Remove the response callback from the callbackMap (window object in the
                    // browser).
                    delete _this.callbackMap[callback];
                };
                // onLoad() is the success callback which runs after the response callback
                // if the JSONP script loads successfully. The event itself is unimportant.
                // If something went wrong, onLoad() may run without the response callback
                // having been invoked.
                var /** @type {?} */ onLoad = function (event) {
                    // Do nothing if the request has been cancelled.
                    if (cancelled) {
                        return;
                    }
                    // Cleanup the page.
                    cleanup();
                    // Check whether the response callback has run.
                    if (!finished) {
                        // It hasn't, something went wrong with the request. Return an error via
                        // the Observable error path. All JSONP errors have status 0.
                        observer.error(new HttpErrorResponse({
                            url: url,
                            status: 0,
                            statusText: 'JSONP Error',
                            error: new Error(JSONP_ERR_NO_CALLBACK),
                        }));
                        return;
                    }
                    // Success. body either contains the response body or null if none was
                    // returned.
                    observer.next(new HttpResponse({
                        body: body,
                        status: 200,
                        statusText: 'OK', url: url,
                    }));
                    // Complete the stream, the resposne is over.
                    observer.complete();
                };
                // onError() is the error callback, which runs if the script returned generates
                // a Javascript error. It emits the error via the Observable error channel as
                // a HttpErrorResponse.
                var /** @type {?} */ onError = function (error) {
                    // If the request was already cancelled, no need to emit anything.
                    if (cancelled) {
                        return;
                    }
                    cleanup();
                    // Wrap the error in a HttpErrorResponse.
                    observer.error(new HttpErrorResponse({
                        error: error,
                        status: 0,
                        statusText: 'JSONP Error', url: url,
                    }));
                };
                // Subscribe to both the success (load) and error events on the <script> tag,
                // and add it to the page.
                node.addEventListener('load', onLoad);
                node.addEventListener('error', onError);
                _this.document.body.appendChild(node);
                // The request has now been successfully sent.
                observer.next({ type: HttpEventType.Sent });
                // Cancellation handler.
                return function () {
                    // Track the cancellation so event listeners won't do anything even if already scheduled.
                    cancelled = true;
                    // Remove the event listeners so they won't run if the events later fire.
                    node.removeEventListener('load', onLoad);
                    node.removeEventListener('error', onError);
                    // And finally, clean up the page.
                    cleanup();
                };
            });
        };
        return JsonpClientBackend;
    }());
    JsonpClientBackend.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    JsonpClientBackend.ctorParameters = function () { return [
        { type: JsonpCallbackContext, },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    ]; };
    /**
     * An `HttpInterceptor` which identifies requests with the method JSONP and
     * shifts them to the `JsonpClientBackend`.
     *
     * \@experimental
     */
    var JsonpInterceptor = (function () {
        /**
         * @param {?} jsonp
         */
        function JsonpInterceptor(jsonp) {
            this.jsonp = jsonp;
        }
        /**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
        JsonpInterceptor.prototype.intercept = function (req, next) {
            if (req.method === 'JSONP') {
                return this.jsonp.handle(/** @type {?} */ (req));
            }
            // Fall through for normal HTTP requests.
            return next.handle(req);
        };
        return JsonpInterceptor;
    }());
    JsonpInterceptor.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    JsonpInterceptor.ctorParameters = function () { return [
        { type: JsonpClientBackend, },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var XSSI_PREFIX = /^\)\]\}',?\n/;
    /**
     * Determine an appropriate URL for the response, by checking either
     * XMLHttpRequest.responseURL or the X-Request-URL header.
     * @param {?} xhr
     * @return {?}
     */
    function getResponseUrl(xhr) {
        if ('responseURL' in xhr && xhr.responseURL) {
            return xhr.responseURL;
        }
        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
            return xhr.getResponseHeader('X-Request-URL');
        }
        return null;
    }
    /**
     * A wrapper around the `XMLHttpRequest` constructor.
     *
     * \@experimental
     * @abstract
     */
    var XhrFactory = (function () {
        function XhrFactory() {
        }
        /**
         * @abstract
         * @return {?}
         */
        XhrFactory.prototype.build = function () { };
        return XhrFactory;
    }());
    /**
     * A factory for \@{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.
     *
     * \@experimental
     */
    var BrowserXhr = (function () {
        function BrowserXhr() {
        }
        /**
         * @return {?}
         */
        BrowserXhr.prototype.build = function () { return ((new XMLHttpRequest())); };
        return BrowserXhr;
    }());
    BrowserXhr.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    BrowserXhr.ctorParameters = function () { return []; };
    /**
     * An `HttpBackend` which uses the XMLHttpRequest API to send
     * requests to a backend server.
     *
     * \@experimental
     */
    var HttpXhrBackend = (function () {
        /**
         * @param {?} xhrFactory
         */
        function HttpXhrBackend(xhrFactory) {
            this.xhrFactory = xhrFactory;
        }
        /**
         * Process a request and return a stream of response events.
         * @param {?} req
         * @return {?}
         */
        HttpXhrBackend.prototype.handle = function (req) {
            var _this = this;
            // Quick check to give a better error message when a user attempts to use
            // HttpClient.jsonp() without installing the JsonpClientModule
            if (req.method === 'JSONP') {
                throw new Error("Attempted to construct Jsonp request without JsonpClientModule installed.");
            }
            // Everything happens on Observable subscription.
            return new Observable_2(function (observer) {
                // Start by setting up the XHR object with request method, URL, and withCredentials flag.
                var /** @type {?} */ xhr = _this.xhrFactory.build();
                xhr.open(req.method, req.urlWithParams);
                if (!!req.withCredentials) {
                    xhr.withCredentials = true;
                }
                // Add all the requested headers.
                req.headers.forEach(function (name, values) { return xhr.setRequestHeader(name, values.join(',')); });
                // Add an Accept header if one isn't present already.
                if (!req.headers.has('Accept')) {
                    xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');
                }
                // Auto-detect the Content-Type header if one isn't present already.
                if (!req.headers.has('Content-Type')) {
                    var /** @type {?} */ detectedType = req.detectContentTypeHeader();
                    // Sometimes Content-Type detection fails.
                    if (detectedType !== null) {
                        xhr.setRequestHeader('Content-Type', detectedType);
                    }
                }
                // Set the responseType if one was requested.
                if (req.responseType) {
                    var /** @type {?} */ responseType = req.responseType.toLowerCase();
                    // JSON responses need to be processed as text. This is because if the server
                    // returns an XSSI-prefixed JSON response, the browser will fail to parse it,
                    // xhr.response will be null, and xhr.responseText cannot be accessed to
                    // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON
                    // is parsed by first requesting text and then applying JSON.parse.
                    xhr.responseType = (((responseType !== 'json') ? responseType : 'text'));
                }
                // Serialize the request body if one is present. If not, this will be set to null.
                var /** @type {?} */ reqBody = req.serializeBody();
                // If progress events are enabled, response headers will be delivered
                // in two events - the HttpHeaderResponse event and the full HttpResponse
                // event. However, since response headers don't change in between these
                // two events, it doesn't make sense to parse them twice. So headerResponse
                // caches the data extracted from the response whenever it's first parsed,
                // to ensure parsing isn't duplicated.
                var /** @type {?} */ headerResponse = null;
                // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest
                // state, and memoizes it into headerResponse.
                var /** @type {?} */ partialFromXhr = function () {
                    if (headerResponse !== null) {
                        return headerResponse;
                    }
                    // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).
                    var /** @type {?} */ status = xhr.status === 1223 ? 204 : xhr.status;
                    var /** @type {?} */ statusText = xhr.statusText || 'OK';
                    // Parse headers from XMLHttpRequest - this step is lazy.
                    var /** @type {?} */ headers = new HttpHeaders(xhr.getAllResponseHeaders());
                    // Read the response URL from the XMLHttpResponse instance and fall back on the
                    // request URL.
                    var /** @type {?} */ url = getResponseUrl(xhr) || req.url;
                    // Construct the HttpHeaderResponse and memoize it.
                    headerResponse = new HttpHeaderResponse({ headers: headers, status: status, statusText: statusText, url: url });
                    return headerResponse;
                };
                // Next, a few closures are defined for the various events which XMLHttpRequest can
                // emit. This allows them to be unregistered as event listeners later.
                // First up is the load event, which represents a response being fully available.
                var /** @type {?} */ onLoad = function () {
                    // Read response state from the memoized partial data.
                    var _a = partialFromXhr(), headers = _a.headers, status = _a.status, statusText = _a.statusText, url = _a.url;
                    // The body will be read out if present.
                    var /** @type {?} */ body = null;
                    if (status !== 204) {
                        // Use XMLHttpRequest.response if set, responseText otherwise.
                        body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;
                    }
                    // Normalize another potential bug (this one comes from CORS).
                    if (status === 0) {
                        status = !!body ? 200 : 0;
                    }
                    // ok determines whether the response will be transmitted on the event or
                    // error channel. Unsuccessful status codes (not 2xx) will always be errors,
                    // but a successful status code can still result in an error if the user
                    // asked for JSON data and the body cannot be parsed as such.
                    var /** @type {?} */ ok = status >= 200 && status < 300;
                    // Check whether the body needs to be parsed as JSON (in many cases the browser
                    // will have done that already).
                    if (ok && req.responseType === 'json' && typeof body === 'string') {
                        // Attempt the parse. If it fails, a parse error should be delivered to the user.
                        body = body.replace(XSSI_PREFIX, '');
                        try {
                            body = JSON.parse(body);
                        }
                        catch (error) {
                            // Even though the response status was 2xx, this is still an error.
                            ok = false;
                            // The parse error contains the text of the body that failed to parse.
                            body = ({ error: error, text: body });
                        }
                    }
                    else if (!ok && req.responseType === 'json' && typeof body === 'string') {
                        try {
                            // Attempt to parse the body as JSON.
                            body = JSON.parse(body);
                        }
                        catch (error) {
                            // Cannot be certain that the body was meant to be parsed as JSON.
                            // Leave the body as a string.
                        }
                    }
                    if (ok) {
                        // A successful response is delivered on the event stream.
                        observer.next(new HttpResponse({
                            body: body,
                            headers: headers,
                            status: status,
                            statusText: statusText,
                            url: url || undefined,
                        }));
                        // The full body has been received and delivered, no further events
                        // are possible. This request is complete.
                        observer.complete();
                    }
                    else {
                        // An unsuccessful request is delivered on the error channel.
                        observer.error(new HttpErrorResponse({
                            // The error in this case is the response body (error from the server).
                            error: body,
                            headers: headers,
                            status: status,
                            statusText: statusText,
                            url: url || undefined,
                        }));
                    }
                };
                // The onError callback is called when something goes wrong at the network level.
                // Connection timeout, DNS error, offline, etc. These are actual errors, and are
                // transmitted on the error channel.
                var /** @type {?} */ onError = function (error) {
                    var /** @type {?} */ res = new HttpErrorResponse({
                        error: error,
                        status: xhr.status || 0,
                        statusText: xhr.statusText || 'Unknown Error',
                    });
                    observer.error(res);
                };
                // The sentHeaders flag tracks whether the HttpResponseHeaders event
                // has been sent on the stream. This is necessary to track if progress
                // is enabled since the event will be sent on only the first download
                // progerss event.
                var /** @type {?} */ sentHeaders = false;
                // The download progress event handler, which is only registered if
                // progress events are enabled.
                var /** @type {?} */ onDownProgress = function (event) {
                    // Send the HttpResponseHeaders event if it hasn't been sent already.
                    if (!sentHeaders) {
                        observer.next(partialFromXhr());
                        sentHeaders = true;
                    }
                    // Start building the download progress event to deliver on the response
                    // event stream.
                    var /** @type {?} */ progressEvent = {
                        type: HttpEventType.DownloadProgress,
                        loaded: event.loaded,
                    };
                    // Set the total number of bytes in the event if it's available.
                    if (event.lengthComputable) {
                        progressEvent.total = event.total;
                    }
                    // If the request was for text content and a partial response is
                    // available on XMLHttpRequest, include it in the progress event
                    // to allow for streaming reads.
                    if (req.responseType === 'text' && !!xhr.responseText) {
                        progressEvent.partialText = xhr.responseText;
                    }
                    // Finally, fire the event.
                    observer.next(progressEvent);
                };
                // The upload progress event handler, which is only registered if
                // progress events are enabled.
                var /** @type {?} */ onUpProgress = function (event) {
                    // Upload progress events are simpler. Begin building the progress
                    // event.
                    var /** @type {?} */ progress = {
                        type: HttpEventType.UploadProgress,
                        loaded: event.loaded,
                    };
                    // If the total number of bytes being uploaded is available, include
                    // it.
                    if (event.lengthComputable) {
                        progress.total = event.total;
                    }
                    // Send the event.
                    observer.next(progress);
                };
                // By default, register for load and error events.
                xhr.addEventListener('load', onLoad);
                xhr.addEventListener('error', onError);
                // Progress events are only enabled if requested.
                if (req.reportProgress) {
                    // Download progress is always enabled if requested.
                    xhr.addEventListener('progress', onDownProgress);
                    // Upload progress depends on whether there is a body to upload.
                    if (reqBody !== null && xhr.upload) {
                        xhr.upload.addEventListener('progress', onUpProgress);
                    }
                }
                // Fire the request, and notify the event stream that it was fired.
                xhr.send(reqBody);
                observer.next({ type: HttpEventType.Sent });
                // This is the return from the Observable function, which is the
                // request cancellation handler.
                return function () {
                    // On a cancellation, remove all registered event listeners.
                    xhr.removeEventListener('error', onError);
                    xhr.removeEventListener('load', onLoad);
                    if (req.reportProgress) {
                        xhr.removeEventListener('progress', onDownProgress);
                        if (reqBody !== null && xhr.upload) {
                            xhr.upload.removeEventListener('progress', onUpProgress);
                        }
                    }
                    // Finally, abort the in-flight request.
                    xhr.abort();
                };
            });
        };
        return HttpXhrBackend;
    }());
    HttpXhrBackend.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    HttpXhrBackend.ctorParameters = function () { return [
        { type: XhrFactory, },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');
    var XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');
    /**
     * Retrieves the current XSRF token to use with the next outgoing request.
     *
     * \@experimental
     * @abstract
     */
    var HttpXsrfTokenExtractor = (function () {
        function HttpXsrfTokenExtractor() {
        }
        /**
         * Get the XSRF token to use with an outgoing request.
         *
         * Will be called for every request, so the token may change between requests.
         * @abstract
         * @return {?}
         */
        HttpXsrfTokenExtractor.prototype.getToken = function () { };
        return HttpXsrfTokenExtractor;
    }());
    /**
     * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.
     */
    var HttpXsrfCookieExtractor = (function () {
        /**
         * @param {?} doc
         * @param {?} platform
         * @param {?} cookieName
         */
        function HttpXsrfCookieExtractor(doc, platform, cookieName) {
            this.doc = doc;
            this.platform = platform;
            this.cookieName = cookieName;
            this.lastCookieString = '';
            this.lastToken = null;
            /**
             * \@internal for testing
             */
            this.parseCount = 0;
        }
        /**
         * @return {?}
         */
        HttpXsrfCookieExtractor.prototype.getToken = function () {
            if (this.platform === 'server') {
                return null;
            }
            var /** @type {?} */ cookieString = this.doc.cookie || '';
            if (cookieString !== this.lastCookieString) {
                this.parseCount++;
                this.lastToken = parseCookieValue(cookieString, this.cookieName);
                this.lastCookieString = cookieString;
            }
            return this.lastToken;
        };
        return HttpXsrfCookieExtractor;
    }());
    HttpXsrfCookieExtractor.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    HttpXsrfCookieExtractor.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
        { type: undefined, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] },] },
    ]; };
    /**
     * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.
     */
    var HttpXsrfInterceptor = (function () {
        /**
         * @param {?} tokenService
         * @param {?} headerName
         */
        function HttpXsrfInterceptor(tokenService, headerName) {
            this.tokenService = tokenService;
            this.headerName = headerName;
        }
        /**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
        HttpXsrfInterceptor.prototype.intercept = function (req, next) {
            var /** @type {?} */ lcUrl = req.url.toLowerCase();
            // Skip both non-mutating requests and absolute URLs.
            // Non-mutating requests don't require a token, and absolute URLs require special handling
            // anyway as the cookie set
            // on our origin is not the same as the token expected by another origin.
            if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||
                lcUrl.startsWith('https://')) {
                return next.handle(req);
            }
            var /** @type {?} */ token = this.tokenService.getToken();
            // Be careful not to overwrite an existing header of the same name.
            if (token !== null && !req.headers.has(this.headerName)) {
                req = req.clone({ headers: req.headers.set(this.headerName, token) });
            }
            return next.handle(req);
        };
        return HttpXsrfInterceptor;
    }());
    HttpXsrfInterceptor.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    HttpXsrfInterceptor.ctorParameters = function () { return [
        { type: HttpXsrfTokenExtractor, },
        { type: undefined, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] },] },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Constructs an `HttpHandler` that applies a bunch of `HttpInterceptor`s
     * to a request before passing it to the given `HttpBackend`.
     *
     * Meant to be used as a factory function within `HttpClientModule`.
     *
     * \@experimental
     * @param {?} backend
     * @param {?=} interceptors
     * @return {?}
     */
    function interceptingHandler(backend, interceptors) {
        if (interceptors === void 0) { interceptors = []; }
        if (!interceptors) {
            return backend;
        }
        return interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, backend);
    }
    /**
     * `NgModule` which adds XSRF protection support to outgoing requests.
     *
     * Provided the server supports a cookie-based XSRF protection system, this
     * module can be used directly to configure XSRF protection with the correct
     * cookie and header names.
     *
     * If no such names are provided, the default is to use `X-XSRF-TOKEN` for
     * the header name and `XSRF-TOKEN` for the cookie name.
     *
     * \@experimental
     */
    var HttpClientXsrfModule = (function () {
        function HttpClientXsrfModule() {
        }
        /**
         * Disable the default XSRF protection.
         * @return {?}
         */
        HttpClientXsrfModule.disable = function () {
            return {
                ngModule: HttpClientXsrfModule,
                providers: [
                    { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },
                ],
            };
        };
        /**
         * Configure XSRF protection to use the given cookie name or header name,
         * or the default names (as described above) if not provided.
         * @param {?=} options
         * @return {?}
         */
        HttpClientXsrfModule.withOptions = function (options) {
            if (options === void 0) { options = {}; }
            return {
                ngModule: HttpClientXsrfModule,
                providers: [
                    options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],
                    options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],
                ],
            };
        };
        return HttpClientXsrfModule;
    }());
    HttpClientXsrfModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        HttpXsrfInterceptor,
                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },
                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },
                        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },
                        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },
                    ],
                },] },
    ];
    /**
     * @nocollapse
     */
    HttpClientXsrfModule.ctorParameters = function () { return []; };
    /**
     * `NgModule` which provides the `HttpClient` and associated services.
     *
     * Interceptors can be added to the chain behind `HttpClient` by binding them
     * to the multiprovider for `HTTP_INTERCEPTORS`.
     *
     * \@experimental
     */
    var HttpClientModule = (function () {
        function HttpClientModule() {
        }
        return HttpClientModule;
    }());
    HttpClientModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        HttpClientXsrfModule.withOptions({
                            cookieName: 'XSRF-TOKEN',
                            headerName: 'X-XSRF-TOKEN',
                        }),
                    ],
                    providers: [
                        HttpClient,
                        // HttpHandler is the backend + interceptors and is constructed
                        // using the interceptingHandler factory function.
                        {
                            provide: HttpHandler,
                            useFactory: interceptingHandler,
                            deps: [HttpBackend, [new Optional(), new Inject(HTTP_INTERCEPTORS)]],
                        },
                        HttpXhrBackend,
                        { provide: HttpBackend, useExisting: HttpXhrBackend },
                        BrowserXhr,
                        { provide: XhrFactory, useExisting: BrowserXhr },
                    ],
                },] },
    ];
    /**
     * @nocollapse
     */
    HttpClientModule.ctorParameters = function () { return []; };

    var Model = /** @class */ (function () {
        function Model(data) {
            this.defaultConstructor(data);
        }
        Model.prototype.defaultConstructor = function (data) {
            var self = this;
            if (undefined !== data && null !== data) {
                for (var prop in data) {
                    if ("attributes" !== prop) {
                        if (typeof data[prop] !== "function" && data[prop] != null && data[prop] !== "") {
                            self[prop] = data[prop];
                        }
                    }
                }
                if (undefined !== data.attributes && null !== data.attributes) {
                    for (var prop in data.attributes) {
                        if (typeof data.attributes[prop] !== "function"
                            && data.attributes[prop] != null
                            && data.attributes[prop] !== "") {
                            self[prop] = data.attributes[prop];
                        }
                    }
                }
            }
        };
        return Model;
    }());

    var __extends$v = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var Fields = /** @class */ (function (_super) {
        __extends$v(Fields, _super);
        function Fields(data) {
            var _this = _super.call(this, data) || this;
            // Non-json properties are not added to class if not initialized
            _this.codeSON = "";
            _this.codeTourplan = "";
            _this.codevad = false;
            _this.groupes = "";
            _this.inactiveEmployee = false;
            _this.inactiveStatus = false;
            _this.inbound = false;
            _this.leadsMax = 45;
            _this.leadsMin = 15;
            _this.outbound = false;
            _this.phoneExtension = "";
            _this.phoneNumber = "";
            _this.selectedFunction = "";
            _this.selectedManager = "";
            _this.selectedOffice = "";
            _this.selectedOrganisation = "";
            _this.title = "";
            _this.userValue = "user_default";
            return _this;
        }
        return Fields;
    }(Model));

    var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$2 = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var FieldsService = /** @class */ (function () {
        function FieldsService(http) {
            this.http = http;
            this.myObj = {};
            this.fields = new Fields();
            //
        }
        FieldsService.prototype.getData = function () {
            var _this = this;
            var fields = [
                "accounts",
                "civilites",
                "destinations",
                "functions",
                "managers",
                "offices",
                "orgas",
                "others",
                "roles",
                "services",
                "teams",
                "userFields",
                "userTemplates",
            ];
            var promises = fields.map(function (field) { return _this.getSingleField(field); });
            return Promise.all(promises)
                .then(function (result) { return new Promise(function (resolve, reject) { return resolve(result); }); });
        };
        FieldsService.prototype.getSingleField = function (field) {
            var _this = this;
            return this.http.get("./src/app/assets/" + field + ".json")
                .map(function (res) {
                _this.myObj[field] = res["data"];
                return _this.myObj;
            })
                .toPromise();
        };
        FieldsService = __decorate$2([
            Injectable(),
            __metadata$2("design:paramtypes", [HttpClient])
        ], FieldsService);
        return FieldsService;
    }());

    var __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ParserService = /** @class */ (function () {
        function ParserService() {
        }
        ParserService.prototype.getData = function (data) {
            var myData = data
                .replace(/'/g, "")
                .replace(/"/g, "")
                .split(",");
            return myData;
        };
        ParserService = __decorate$3([
            Injectable()
        ], ParserService);
        return ParserService;
    }());

    var __extends$w = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ErrorObservable = (function (_super) {
        __extends$w(ErrorObservable, _super);
        function ErrorObservable(error, scheduler) {
            _super.call(this);
            this.error = error;
            this.scheduler = scheduler;
        }
        /**
         * Creates an Observable that emits no items to the Observer and immediately
         * emits an error notification.
         *
         * <span class="informal">Just emits 'error', and nothing else.
         * </span>
         *
         * <img src="./img/throw.png" width="100%">
         *
         * This static operator is useful for creating a simple Observable that only
         * emits the error notification. It can be used for composing with other
         * Observables, such as in a {@link mergeMap}.
         *
         * @example <caption>Emit the number 7, then emit an error.</caption>
         * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);
         * result.subscribe(x => console.log(x), e => console.error(e));
         *
         * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>
         * var interval = Rx.Observable.interval(1000);
         * var result = interval.mergeMap(x =>
         *   x === 13 ?
         *     Rx.Observable.throw('Thirteens are bad') :
         *     Rx.Observable.of('a', 'b', 'c')
         * );
         * result.subscribe(x => console.log(x), e => console.error(e));
         *
         * @see {@link create}
         * @see {@link empty}
         * @see {@link never}
         * @see {@link of}
         *
         * @param {any} error The particular Error to pass to the error notification.
         * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
         * the emission of the error notification.
         * @return {Observable} An error Observable: emits only the error notification
         * using the given error argument.
         * @static true
         * @name throw
         * @owner Observable
         */
        ErrorObservable.create = function (error, scheduler) {
            return new ErrorObservable(error, scheduler);
        };
        ErrorObservable.dispatch = function (arg) {
            var error = arg.error, subscriber = arg.subscriber;
            subscriber.error(error);
        };
        /** @deprecated internal use only */ ErrorObservable.prototype._subscribe = function (subscriber) {
            var error = this.error;
            var scheduler = this.scheduler;
            subscriber.syncErrorThrowable = true;
            if (scheduler) {
                return scheduler.schedule(ErrorObservable.dispatch, 0, {
                    error: error, subscriber: subscriber
                });
            }
            else {
                subscriber.error(error);
            }
        };
        return ErrorObservable;
    }(Observable_1.Observable));
    var ErrorObservable_2 = ErrorObservable;


    var ErrorObservable_1 = {
    	ErrorObservable: ErrorObservable_2
    };

    var _throw_1 = ErrorObservable_1.ErrorObservable.create;

    var __extends$x = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var AuditSubscriber = (function (_super) {
        __extends$x(AuditSubscriber, _super);
        function AuditSubscriber(destination, durationSelector) {
            _super.call(this, destination);
            this.durationSelector = durationSelector;
            this.hasValue = false;
        }
        AuditSubscriber.prototype._next = function (value) {
            this.value = value;
            this.hasValue = true;
            if (!this.throttled) {
                var duration = tryCatch_1.tryCatch(this.durationSelector)(value);
                if (duration === errorObject.errorObject) {
                    this.destination.error(errorObject.errorObject.e);
                }
                else {
                    var innerSubscription = subscribeToResult_1.subscribeToResult(this, duration);
                    if (innerSubscription.closed) {
                        this.clearThrottle();
                    }
                    else {
                        this.add(this.throttled = innerSubscription);
                    }
                }
            }
        };
        AuditSubscriber.prototype.clearThrottle = function () {
            var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
            if (throttled) {
                this.remove(throttled);
                this.throttled = null;
                throttled.unsubscribe();
            }
            if (hasValue) {
                this.value = null;
                this.hasValue = false;
                this.destination.next(value);
            }
        };
        AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
            this.clearThrottle();
        };
        AuditSubscriber.prototype.notifyComplete = function () {
            this.clearThrottle();
        };
        return AuditSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$y = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    /**
     * A unit of work to be executed in a {@link Scheduler}. An action is typically
     * created from within a Scheduler and an RxJS user does not need to concern
     * themselves about creating and manipulating an Action.
     *
     * ```ts
     * class Action<T> extends Subscription {
     *   new (scheduler: Scheduler, work: (state?: T) => void);
     *   schedule(state?: T, delay: number = 0): Subscription;
     * }
     * ```
     *
     * @class Action<T>
     */
    var Action = (function (_super) {
        __extends$y(Action, _super);
        function Action(scheduler, work) {
            _super.call(this);
        }
        /**
         * Schedules this action on its parent Scheduler for execution. May be passed
         * some context object, `state`. May happen at some point in the future,
         * according to the `delay` parameter, if specified.
         * @param {T} [state] Some contextual data that the `work` function uses when
         * called by the Scheduler.
         * @param {number} [delay] Time to wait before executing the work, where the
         * time unit is implicit and defined by the Scheduler.
         * @return {void}
         */
        Action.prototype.schedule = function (state, delay) {
            if (delay === void 0) { delay = 0; }
            return this;
        };
        return Action;
    }(Subscription_1.Subscription));
    var Action_2 = Action;


    var Action_1 = {
    	Action: Action_2
    };

    var __extends$z = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };


    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var AsyncAction = (function (_super) {
        __extends$z(AsyncAction, _super);
        function AsyncAction(scheduler, work) {
            _super.call(this, scheduler, work);
            this.scheduler = scheduler;
            this.pending = false;
            this.work = work;
        }
        AsyncAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) { delay = 0; }
            if (this.closed) {
                return this;
            }
            // Always replace the current state with the new state.
            this.state = state;
            // Set the pending flag indicating that this action has been scheduled, or
            // has recursively rescheduled itself.
            this.pending = true;
            var id = this.id;
            var scheduler = this.scheduler;
            //
            // Important implementation note:
            //
            // Actions only execute once by default, unless rescheduled from within the
            // scheduled callback. This allows us to implement single and repeat
            // actions via the same code path, without adding API surface area, as well
            // as mimic traditional recursion but across asynchronous boundaries.
            //
            // However, JS runtimes and timers distinguish between intervals achieved by
            // serial `setTimeout` calls vs. a single `setInterval` call. An interval of
            // serial `setTimeout` calls can be individually delayed, which delays
            // scheduling the next `setTimeout`, and so on. `setInterval` attempts to
            // guarantee the interval callback will be invoked more precisely to the
            // interval period, regardless of load.
            //
            // Therefore, we use `setInterval` to schedule single and repeat actions.
            // If the action reschedules itself with the same delay, the interval is not
            // canceled. If the action doesn't reschedule, or reschedules with a
            // different delay, the interval will be canceled after scheduled callback
            // execution.
            //
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, delay);
            }
            this.delay = delay;
            // If this action has already an async Id, don't request a new one.
            this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
            return this;
        };
        AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            return root.root.setInterval(scheduler.flush.bind(scheduler, this), delay);
        };
        AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            // If this action is rescheduled with the same delay time, don't clear the interval id.
            if (delay !== null && this.delay === delay && this.pending === false) {
                return id;
            }
            // Otherwise, if the action's delay time is different from the current delay,
            // or the action has been rescheduled before it's executed, clear the interval id
            return root.root.clearInterval(id) && undefined || undefined;
        };
        /**
         * Immediately executes this action and the `work` it contains.
         * @return {any}
         */
        AsyncAction.prototype.execute = function (state, delay) {
            if (this.closed) {
                return new Error('executing a cancelled action');
            }
            this.pending = false;
            var error = this._execute(state, delay);
            if (error) {
                return error;
            }
            else if (this.pending === false && this.id != null) {
                // Dequeue if the action didn't reschedule itself. Don't call
                // unsubscribe(), because the action could reschedule later.
                // For example:
                // ```
                // scheduler.schedule(function doWork(counter) {
                //   /* ... I'm a busy worker bee ... */
                //   var originalAction = this;
                //   /* wait 100ms before rescheduling the action */
                //   setTimeout(function () {
                //     originalAction.schedule(counter + 1);
                //   }, 100);
                // }, 1000);
                // ```
                this.id = this.recycleAsyncId(this.scheduler, this.id, null);
            }
        };
        AsyncAction.prototype._execute = function (state, delay) {
            var errored = false;
            var errorValue = undefined;
            try {
                this.work(state);
            }
            catch (e) {
                errored = true;
                errorValue = !!e && e || new Error(e);
            }
            if (errored) {
                this.unsubscribe();
                return errorValue;
            }
        };
        /** @deprecated internal use only */ AsyncAction.prototype._unsubscribe = function () {
            var id = this.id;
            var scheduler = this.scheduler;
            var actions = scheduler.actions;
            var index = actions.indexOf(this);
            this.work = null;
            this.state = null;
            this.pending = false;
            this.scheduler = null;
            if (index !== -1) {
                actions.splice(index, 1);
            }
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, null);
            }
            this.delay = null;
        };
        return AsyncAction;
    }(Action_1.Action));
    var AsyncAction_2 = AsyncAction;


    var AsyncAction_1 = {
    	AsyncAction: AsyncAction_2
    };

    /**
     * An execution context and a data structure to order tasks and schedule their
     * execution. Provides a notion of (potentially virtual) time, through the
     * `now()` getter method.
     *
     * Each unit of work in a Scheduler is called an {@link Action}.
     *
     * ```ts
     * class Scheduler {
     *   now(): number;
     *   schedule(work, delay?, state?): Subscription;
     * }
     * ```
     *
     * @class Scheduler
     */
    var Scheduler = (function () {
        function Scheduler(SchedulerAction, now) {
            if (now === void 0) { now = Scheduler.now; }
            this.SchedulerAction = SchedulerAction;
            this.now = now;
        }
        /**
         * Schedules a function, `work`, for execution. May happen at some point in
         * the future, according to the `delay` parameter, if specified. May be passed
         * some context object, `state`, which will be passed to the `work` function.
         *
         * The given arguments will be processed an stored as an Action object in a
         * queue of actions.
         *
         * @param {function(state: ?T): ?Subscription} work A function representing a
         * task, or some unit of work to be executed by the Scheduler.
         * @param {number} [delay] Time to wait before executing the work, where the
         * time unit is implicit and defined by the Scheduler itself.
         * @param {T} [state] Some contextual data that the `work` function uses when
         * called by the Scheduler.
         * @return {Subscription} A subscription in order to be able to unsubscribe
         * the scheduled work.
         */
        Scheduler.prototype.schedule = function (work, delay, state) {
            if (delay === void 0) { delay = 0; }
            return new this.SchedulerAction(this, work).schedule(state, delay);
        };
        Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };
        return Scheduler;
    }());
    var Scheduler_2 = Scheduler;


    var Scheduler_1 = {
    	Scheduler: Scheduler_2
    };

    var __extends$A = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    var AsyncScheduler = (function (_super) {
        __extends$A(AsyncScheduler, _super);
        function AsyncScheduler() {
            _super.apply(this, arguments);
            this.actions = [];
            /**
             * A flag to indicate whether the Scheduler is currently executing a batch of
             * queued actions.
             * @type {boolean}
             */
            this.active = false;
            /**
             * An internal ID used to track the latest asynchronous task such as those
             * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and
             * others.
             * @type {any}
             */
            this.scheduled = undefined;
        }
        AsyncScheduler.prototype.flush = function (action) {
            var actions = this.actions;
            if (this.active) {
                actions.push(action);
                return;
            }
            var error;
            this.active = true;
            do {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            } while (action = actions.shift()); // exhaust the scheduler queue
            this.active = false;
            if (error) {
                while (action = actions.shift()) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AsyncScheduler;
    }(Scheduler_1.Scheduler));
    var AsyncScheduler_2 = AsyncScheduler;


    var AsyncScheduler_1 = {
    	AsyncScheduler: AsyncScheduler_2
    };

    /**
     *
     * Async Scheduler
     *
     * <span class="informal">Schedule task as if you used setTimeout(task, duration)</span>
     *
     * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript
     * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating
     * in intervals.
     *
     * If you just want to "defer" task, that is to perform it right after currently
     * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),
     * better choice will be the {@link asap} scheduler.
     *
     * @example <caption>Use async scheduler to delay task</caption>
     * const task = () => console.log('it works!');
     *
     * Rx.Scheduler.async.schedule(task, 2000);
     *
     * // After 2 seconds logs:
     * // "it works!"
     *
     *
     * @example <caption>Use async scheduler to repeat task in intervals</caption>
     * function task(state) {
     *   console.log(state);
     *   this.schedule(state + 1, 1000); // `this` references currently executing Action,
     *                                   // which we reschedule with new state and delay
     * }
     *
     * Rx.Scheduler.async.schedule(task, 3000, 0);
     *
     * // Logs:
     * // 0 after 3s
     * // 1 after 4s
     * // 2 after 5s
     * // 3 after 6s
     *
     * @static true
     * @name async
     * @owner Scheduler
     */
    var async_1 = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);


    var async = {
    	async: async_1
    };

    function isNumeric$1(val) {
        // parseFloat NaNs numeric-cast false positives (null|true|false|"")
        // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
        // subtraction forces infinities to NaN
        // adding 1 corrects loss of precision from parseFloat (#15100)
        return !isArray.isArray(val) && (val - parseFloat(val) + 1) >= 0;
    }
    var isNumeric_2 = isNumeric$1;


    var isNumeric_1 = {
    	isNumeric: isNumeric_2
    };

    function isDate$1(value) {
        return value instanceof Date && !isNaN(+value);
    }
    var isDate_2 = isDate$1;


    var isDate_1 = {
    	isDate: isDate_2
    };

    var __extends$B = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };





    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var TimerObservable = (function (_super) {
        __extends$B(TimerObservable, _super);
        function TimerObservable(dueTime, period, scheduler) {
            if (dueTime === void 0) { dueTime = 0; }
            _super.call(this);
            this.period = -1;
            this.dueTime = 0;
            if (isNumeric_1.isNumeric(period)) {
                this.period = Number(period) < 1 && 1 || Number(period);
            }
            else if (isScheduler_1.isScheduler(period)) {
                scheduler = period;
            }
            if (!isScheduler_1.isScheduler(scheduler)) {
                scheduler = async.async;
            }
            this.scheduler = scheduler;
            this.dueTime = isDate_1.isDate(dueTime) ?
                (+dueTime - this.scheduler.now()) :
                dueTime;
        }
        /**
         * Creates an Observable that starts emitting after an `initialDelay` and
         * emits ever increasing numbers after each `period` of time thereafter.
         *
         * <span class="informal">Its like {@link interval}, but you can specify when
         * should the emissions start.</span>
         *
         * <img src="./img/timer.png" width="100%">
         *
         * `timer` returns an Observable that emits an infinite sequence of ascending
         * integers, with a constant interval of time, `period` of your choosing
         * between those emissions. The first emission happens after the specified
         * `initialDelay`. The initial delay may be a {@link Date}. By default, this
         * operator uses the `async` IScheduler to provide a notion of time, but you
         * may pass any IScheduler to it. If `period` is not specified, the output
         * Observable emits only one value, `0`. Otherwise, it emits an infinite
         * sequence.
         *
         * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>
         * var numbers = Rx.Observable.timer(3000, 1000);
         * numbers.subscribe(x => console.log(x));
         *
         * @example <caption>Emits one number after five seconds</caption>
         * var numbers = Rx.Observable.timer(5000);
         * numbers.subscribe(x => console.log(x));
         *
         * @see {@link interval}
         * @see {@link delay}
         *
         * @param {number|Date} initialDelay The initial delay time to wait before
         * emitting the first value of `0`.
         * @param {number} [period] The period of time between emissions of the
         * subsequent numbers.
         * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling
         * the emission of values, and providing a notion of "time".
         * @return {Observable} An Observable that emits a `0` after the
         * `initialDelay` and ever increasing numbers after each `period` of time
         * thereafter.
         * @static true
         * @name timer
         * @owner Observable
         */
        TimerObservable.create = function (initialDelay, period, scheduler) {
            if (initialDelay === void 0) { initialDelay = 0; }
            return new TimerObservable(initialDelay, period, scheduler);
        };
        TimerObservable.dispatch = function (state) {
            var index = state.index, period = state.period, subscriber = state.subscriber;
            var action = this;
            subscriber.next(index);
            if (subscriber.closed) {
                return;
            }
            else if (period === -1) {
                return subscriber.complete();
            }
            state.index = index + 1;
            action.schedule(state, period);
        };
        /** @deprecated internal use only */ TimerObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;
            return scheduler.schedule(TimerObservable.dispatch, dueTime, {
                index: index, period: period, subscriber: subscriber
            });
        };
        return TimerObservable;
    }(Observable_1.Observable));

    var __extends$C = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var BufferSubscriber = (function (_super) {
        __extends$C(BufferSubscriber, _super);
        function BufferSubscriber(destination, closingNotifier) {
            _super.call(this, destination);
            this.buffer = [];
            this.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
        }
        BufferSubscriber.prototype._next = function (value) {
            this.buffer.push(value);
        };
        BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var buffer = this.buffer;
            this.buffer = [];
            this.destination.next(buffer);
        };
        return BufferSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$D = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var BufferCountSubscriber = (function (_super) {
        __extends$D(BufferCountSubscriber, _super);
        function BufferCountSubscriber(destination, bufferSize) {
            _super.call(this, destination);
            this.bufferSize = bufferSize;
            this.buffer = [];
        }
        BufferCountSubscriber.prototype._next = function (value) {
            var buffer = this.buffer;
            buffer.push(value);
            if (buffer.length == this.bufferSize) {
                this.destination.next(buffer);
                this.buffer = [];
            }
        };
        BufferCountSubscriber.prototype._complete = function () {
            var buffer = this.buffer;
            if (buffer.length > 0) {
                this.destination.next(buffer);
            }
            _super.prototype._complete.call(this);
        };
        return BufferCountSubscriber;
    }(Subscriber_1.Subscriber));
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var BufferSkipCountSubscriber = (function (_super) {
        __extends$D(BufferSkipCountSubscriber, _super);
        function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
            _super.call(this, destination);
            this.bufferSize = bufferSize;
            this.startBufferEvery = startBufferEvery;
            this.buffers = [];
            this.count = 0;
        }
        BufferSkipCountSubscriber.prototype._next = function (value) {
            var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;
            this.count++;
            if (count % startBufferEvery === 0) {
                buffers.push([]);
            }
            for (var i = buffers.length; i--;) {
                var buffer = buffers[i];
                buffer.push(value);
                if (buffer.length === bufferSize) {
                    buffers.splice(i, 1);
                    this.destination.next(buffer);
                }
            }
        };
        BufferSkipCountSubscriber.prototype._complete = function () {
            var _a = this, buffers = _a.buffers, destination = _a.destination;
            while (buffers.length > 0) {
                var buffer = buffers.shift();
                if (buffer.length > 0) {
                    destination.next(buffer);
                }
            }
            _super.prototype._complete.call(this);
        };
        return BufferSkipCountSubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$E = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Context = (function () {
        function Context() {
            this.buffer = [];
        }
        return Context;
    }());
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var BufferTimeSubscriber = (function (_super) {
        __extends$E(BufferTimeSubscriber, _super);
        function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
            _super.call(this, destination);
            this.bufferTimeSpan = bufferTimeSpan;
            this.bufferCreationInterval = bufferCreationInterval;
            this.maxBufferSize = maxBufferSize;
            this.scheduler = scheduler;
            this.contexts = [];
            var context = this.openContext();
            this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
            if (this.timespanOnly) {
                var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
                this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
            }
            else {
                var closeState = { subscriber: this, context: context };
                var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: this, scheduler: scheduler };
                this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
                this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
            }
        }
        BufferTimeSubscriber.prototype._next = function (value) {
            var contexts = this.contexts;
            var len = contexts.length;
            var filledBufferContext;
            for (var i = 0; i < len; i++) {
                var context = contexts[i];
                var buffer = context.buffer;
                buffer.push(value);
                if (buffer.length == this.maxBufferSize) {
                    filledBufferContext = context;
                }
            }
            if (filledBufferContext) {
                this.onBufferFull(filledBufferContext);
            }
        };
        BufferTimeSubscriber.prototype._error = function (err) {
            this.contexts.length = 0;
            _super.prototype._error.call(this, err);
        };
        BufferTimeSubscriber.prototype._complete = function () {
            var _a = this, contexts = _a.contexts, destination = _a.destination;
            while (contexts.length > 0) {
                var context = contexts.shift();
                destination.next(context.buffer);
            }
            _super.prototype._complete.call(this);
        };
        /** @deprecated internal use only */ BufferTimeSubscriber.prototype._unsubscribe = function () {
            this.contexts = null;
        };
        BufferTimeSubscriber.prototype.onBufferFull = function (context) {
            this.closeContext(context);
            var closeAction = context.closeAction;
            closeAction.unsubscribe();
            this.remove(closeAction);
            if (!this.closed && this.timespanOnly) {
                context = this.openContext();
                var bufferTimeSpan = this.bufferTimeSpan;
                var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
                this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
            }
        };
        BufferTimeSubscriber.prototype.openContext = function () {
            var context = new Context();
            this.contexts.push(context);
            return context;
        };
        BufferTimeSubscriber.prototype.closeContext = function (context) {
            this.destination.next(context.buffer);
            var contexts = this.contexts;
            var spliceIndex = contexts ? contexts.indexOf(context) : -1;
            if (spliceIndex >= 0) {
                contexts.splice(contexts.indexOf(context), 1);
            }
        };
        return BufferTimeSubscriber;
    }(Subscriber_1.Subscriber));
    function dispatchBufferTimeSpanOnly(state) {
        var subscriber = state.subscriber;
        var prevContext = state.context;
        if (prevContext) {
            subscriber.closeContext(prevContext);
        }
        if (!subscriber.closed) {
            state.context = subscriber.openContext();
            state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
        }
    }
    function dispatchBufferCreation(state) {
        var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;
        var context = subscriber.openContext();
        var action = this;
        if (!subscriber.closed) {
            subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));
            action.schedule(state, bufferCreationInterval);
        }
    }
    function dispatchBufferClose(arg) {
        var subscriber = arg.subscriber, context = arg.context;
        subscriber.closeContext(context);
    }

    var __extends$F = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var BufferToggleSubscriber = (function (_super) {
        __extends$F(BufferToggleSubscriber, _super);
        function BufferToggleSubscriber(destination, openings, closingSelector) {
            _super.call(this, destination);
            this.openings = openings;
            this.closingSelector = closingSelector;
            this.contexts = [];
            this.add(subscribeToResult_1.subscribeToResult(this, openings));
        }
        BufferToggleSubscriber.prototype._next = function (value) {
            var contexts = this.contexts;
            var len = contexts.length;
            for (var i = 0; i < len; i++) {
                contexts[i].buffer.push(value);
            }
        };
        BufferToggleSubscriber.prototype._error = function (err) {
            var contexts = this.contexts;
            while (contexts.length > 0) {
                var context = contexts.shift();
                context.subscription.unsubscribe();
                context.buffer = null;
                context.subscription = null;
            }
            this.contexts = null;
            _super.prototype._error.call(this, err);
        };
        BufferToggleSubscriber.prototype._complete = function () {
            var contexts = this.contexts;
            while (contexts.length > 0) {
                var context = contexts.shift();
                this.destination.next(context.buffer);
                context.subscription.unsubscribe();
                context.buffer = null;
                context.subscription = null;
            }
            this.contexts = null;
            _super.prototype._complete.call(this);
        };
        BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
        };
        BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
            this.closeBuffer(innerSub.context);
        };
        BufferToggleSubscriber.prototype.openBuffer = function (value) {
            try {
                var closingSelector = this.closingSelector;
                var closingNotifier = closingSelector.call(this, value);
                if (closingNotifier) {
                    this.trySubscribe(closingNotifier);
                }
            }
            catch (err) {
                this._error(err);
            }
        };
        BufferToggleSubscriber.prototype.closeBuffer = function (context) {
            var contexts = this.contexts;
            if (contexts && context) {
                var buffer = context.buffer, subscription = context.subscription;
                this.destination.next(buffer);
                contexts.splice(contexts.indexOf(context), 1);
                this.remove(subscription);
                subscription.unsubscribe();
            }
        };
        BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
            var contexts = this.contexts;
            var buffer = [];
            var subscription = new Subscription_1.Subscription();
            var context = { buffer: buffer, subscription: subscription };
            contexts.push(context);
            var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
            if (!innerSubscription || innerSubscription.closed) {
                this.closeBuffer(context);
            }
            else {
                innerSubscription.context = context;
                this.add(innerSubscription);
                subscription.add(innerSubscription);
            }
        };
        return BufferToggleSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$G = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var BufferWhenSubscriber = (function (_super) {
        __extends$G(BufferWhenSubscriber, _super);
        function BufferWhenSubscriber(destination, closingSelector) {
            _super.call(this, destination);
            this.closingSelector = closingSelector;
            this.subscribing = false;
            this.openBuffer();
        }
        BufferWhenSubscriber.prototype._next = function (value) {
            this.buffer.push(value);
        };
        BufferWhenSubscriber.prototype._complete = function () {
            var buffer = this.buffer;
            if (buffer) {
                this.destination.next(buffer);
            }
            _super.prototype._complete.call(this);
        };
        /** @deprecated internal use only */ BufferWhenSubscriber.prototype._unsubscribe = function () {
            this.buffer = null;
            this.subscribing = false;
        };
        BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.openBuffer();
        };
        BufferWhenSubscriber.prototype.notifyComplete = function () {
            if (this.subscribing) {
                this.complete();
            }
            else {
                this.openBuffer();
            }
        };
        BufferWhenSubscriber.prototype.openBuffer = function () {
            var closingSubscription = this.closingSubscription;
            if (closingSubscription) {
                this.remove(closingSubscription);
                closingSubscription.unsubscribe();
            }
            var buffer = this.buffer;
            if (this.buffer) {
                this.destination.next(buffer);
            }
            this.buffer = [];
            var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
            if (closingNotifier === errorObject.errorObject) {
                this.error(errorObject.errorObject.e);
            }
            else {
                closingSubscription = new Subscription_1.Subscription();
                this.closingSubscription = closingSubscription;
                this.add(closingSubscription);
                this.subscribing = true;
                closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
                this.subscribing = false;
            }
        };
        return BufferWhenSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$H = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };




    var none = {};
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var CombineLatestSubscriber = (function (_super) {
        __extends$H(CombineLatestSubscriber, _super);
        function CombineLatestSubscriber(destination, project) {
            _super.call(this, destination);
            this.project = project;
            this.active = 0;
            this.values = [];
            this.observables = [];
        }
        CombineLatestSubscriber.prototype._next = function (observable) {
            this.values.push(none);
            this.observables.push(observable);
        };
        CombineLatestSubscriber.prototype._complete = function () {
            var observables = this.observables;
            var len = observables.length;
            if (len === 0) {
                this.destination.complete();
            }
            else {
                this.active = len;
                this.toRespond = len;
                for (var i = 0; i < len; i++) {
                    var observable = observables[i];
                    this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
                }
            }
        };
        CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
            if ((this.active -= 1) === 0) {
                this.destination.complete();
            }
        };
        CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var values = this.values;
            var oldVal = values[outerIndex];
            var toRespond = !this.toRespond
                ? 0
                : oldVal === none ? --this.toRespond : this.toRespond;
            values[outerIndex] = innerValue;
            if (toRespond === 0) {
                if (this.project) {
                    this._tryProject(values);
                }
                else {
                    this.destination.next(values.slice());
                }
            }
        };
        CombineLatestSubscriber.prototype._tryProject = function (values) {
            var result;
            try {
                result = this.project.apply(this, values);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return CombineLatestSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$I = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var CountSubscriber = (function (_super) {
        __extends$I(CountSubscriber, _super);
        function CountSubscriber(destination, predicate, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.source = source;
            this.count = 0;
            this.index = 0;
        }
        CountSubscriber.prototype._next = function (value) {
            if (this.predicate) {
                this._tryPredicate(value);
            }
            else {
                this.count++;
            }
        };
        CountSubscriber.prototype._tryPredicate = function (value) {
            var result;
            try {
                result = this.predicate(value, this.index++, this.source);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this.count++;
            }
        };
        CountSubscriber.prototype._complete = function () {
            this.destination.next(this.count);
            this.destination.complete();
        };
        return CountSubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$J = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DebounceSubscriber = (function (_super) {
        __extends$J(DebounceSubscriber, _super);
        function DebounceSubscriber(destination, durationSelector) {
            _super.call(this, destination);
            this.durationSelector = durationSelector;
            this.hasValue = false;
            this.durationSubscription = null;
        }
        DebounceSubscriber.prototype._next = function (value) {
            try {
                var result = this.durationSelector.call(this, value);
                if (result) {
                    this._tryNext(value, result);
                }
            }
            catch (err) {
                this.destination.error(err);
            }
        };
        DebounceSubscriber.prototype._complete = function () {
            this.emitValue();
            this.destination.complete();
        };
        DebounceSubscriber.prototype._tryNext = function (value, duration) {
            var subscription = this.durationSubscription;
            this.value = value;
            this.hasValue = true;
            if (subscription) {
                subscription.unsubscribe();
                this.remove(subscription);
            }
            subscription = subscribeToResult_1.subscribeToResult(this, duration);
            if (!subscription.closed) {
                this.add(this.durationSubscription = subscription);
            }
        };
        DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.emitValue();
        };
        DebounceSubscriber.prototype.notifyComplete = function () {
            this.emitValue();
        };
        DebounceSubscriber.prototype.emitValue = function () {
            if (this.hasValue) {
                var value = this.value;
                var subscription = this.durationSubscription;
                if (subscription) {
                    this.durationSubscription = null;
                    subscription.unsubscribe();
                    this.remove(subscription);
                }
                this.value = null;
                this.hasValue = false;
                _super.prototype._next.call(this, value);
            }
        };
        return DebounceSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$K = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DebounceTimeSubscriber = (function (_super) {
        __extends$K(DebounceTimeSubscriber, _super);
        function DebounceTimeSubscriber(destination, dueTime, scheduler) {
            _super.call(this, destination);
            this.dueTime = dueTime;
            this.scheduler = scheduler;
            this.debouncedSubscription = null;
            this.lastValue = null;
            this.hasValue = false;
        }
        DebounceTimeSubscriber.prototype._next = function (value) {
            this.clearDebounce();
            this.lastValue = value;
            this.hasValue = true;
            this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext$1, this.dueTime, this));
        };
        DebounceTimeSubscriber.prototype._complete = function () {
            this.debouncedNext();
            this.destination.complete();
        };
        DebounceTimeSubscriber.prototype.debouncedNext = function () {
            this.clearDebounce();
            if (this.hasValue) {
                this.destination.next(this.lastValue);
                this.lastValue = null;
                this.hasValue = false;
            }
        };
        DebounceTimeSubscriber.prototype.clearDebounce = function () {
            var debouncedSubscription = this.debouncedSubscription;
            if (debouncedSubscription !== null) {
                this.remove(debouncedSubscription);
                debouncedSubscription.unsubscribe();
                this.debouncedSubscription = null;
            }
        };
        return DebounceTimeSubscriber;
    }(Subscriber_1.Subscriber));
    function dispatchNext$1(subscriber) {
        subscriber.debouncedNext();
    }

    var __extends$L = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DelaySubscriber = (function (_super) {
        __extends$L(DelaySubscriber, _super);
        function DelaySubscriber(destination, delay, scheduler) {
            _super.call(this, destination);
            this.delay = delay;
            this.scheduler = scheduler;
            this.queue = [];
            this.active = false;
            this.errored = false;
        }
        DelaySubscriber.dispatch = function (state) {
            var source = state.source;
            var queue = source.queue;
            var scheduler = state.scheduler;
            var destination = state.destination;
            while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
                queue.shift().notification.observe(destination);
            }
            if (queue.length > 0) {
                var delay_1 = Math.max(0, queue[0].time - scheduler.now());
                this.schedule(state, delay_1);
            }
            else {
                this.unsubscribe();
                source.active = false;
            }
        };
        DelaySubscriber.prototype._schedule = function (scheduler) {
            this.active = true;
            this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
                source: this, destination: this.destination, scheduler: scheduler
            }));
        };
        DelaySubscriber.prototype.scheduleNotification = function (notification) {
            if (this.errored === true) {
                return;
            }
            var scheduler = this.scheduler;
            var message = new DelayMessage(scheduler.now() + this.delay, notification);
            this.queue.push(message);
            if (this.active === false) {
                this._schedule(scheduler);
            }
        };
        DelaySubscriber.prototype._next = function (value) {
            this.scheduleNotification(Notification_1.Notification.createNext(value));
        };
        DelaySubscriber.prototype._error = function (err) {
            this.errored = true;
            this.queue = [];
            this.destination.error(err);
        };
        DelaySubscriber.prototype._complete = function () {
            this.scheduleNotification(Notification_1.Notification.createComplete());
        };
        return DelaySubscriber;
    }(Subscriber_1.Subscriber));
    var DelayMessage = (function () {
        function DelayMessage(time, notification) {
            this.time = time;
            this.notification = notification;
        }
        return DelayMessage;
    }());

    var __extends$M = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DelayWhenSubscriber = (function (_super) {
        __extends$M(DelayWhenSubscriber, _super);
        function DelayWhenSubscriber(destination, delayDurationSelector) {
            _super.call(this, destination);
            this.delayDurationSelector = delayDurationSelector;
            this.completed = false;
            this.delayNotifierSubscriptions = [];
            this.values = [];
        }
        DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(outerValue);
            this.removeSubscription(innerSub);
            this.tryComplete();
        };
        DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
            this._error(error);
        };
        DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
            var value = this.removeSubscription(innerSub);
            if (value) {
                this.destination.next(value);
            }
            this.tryComplete();
        };
        DelayWhenSubscriber.prototype._next = function (value) {
            try {
                var delayNotifier = this.delayDurationSelector(value);
                if (delayNotifier) {
                    this.tryDelay(delayNotifier, value);
                }
            }
            catch (err) {
                this.destination.error(err);
            }
        };
        DelayWhenSubscriber.prototype._complete = function () {
            this.completed = true;
            this.tryComplete();
        };
        DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
            subscription.unsubscribe();
            var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
            var value = null;
            if (subscriptionIdx !== -1) {
                value = this.values[subscriptionIdx];
                this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
                this.values.splice(subscriptionIdx, 1);
            }
            return value;
        };
        DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
            var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);
            if (notifierSubscription && !notifierSubscription.closed) {
                this.add(notifierSubscription);
                this.delayNotifierSubscriptions.push(notifierSubscription);
            }
            this.values.push(value);
        };
        DelayWhenSubscriber.prototype.tryComplete = function () {
            if (this.completed && this.delayNotifierSubscriptions.length === 0) {
                this.destination.complete();
            }
        };
        return DelayWhenSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SubscriptionDelayObservable = (function (_super) {
        __extends$M(SubscriptionDelayObservable, _super);
        function SubscriptionDelayObservable(/** @deprecated internal use only */ source, subscriptionDelay) {
            _super.call(this);
            this.source = source;
            this.subscriptionDelay = subscriptionDelay;
        }
        /** @deprecated internal use only */ SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
            this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
        };
        return SubscriptionDelayObservable;
    }(Observable_1.Observable));
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SubscriptionDelaySubscriber = (function (_super) {
        __extends$M(SubscriptionDelaySubscriber, _super);
        function SubscriptionDelaySubscriber(parent, source) {
            _super.call(this);
            this.parent = parent;
            this.source = source;
            this.sourceSubscribed = false;
        }
        SubscriptionDelaySubscriber.prototype._next = function (unused) {
            this.subscribeToSource();
        };
        SubscriptionDelaySubscriber.prototype._error = function (err) {
            this.unsubscribe();
            this.parent.error(err);
        };
        SubscriptionDelaySubscriber.prototype._complete = function () {
            this.subscribeToSource();
        };
        SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
            if (!this.sourceSubscribed) {
                this.sourceSubscribed = true;
                this.unsubscribe();
                this.source.subscribe(this.parent);
            }
        };
        return SubscriptionDelaySubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$N = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DeMaterializeSubscriber = (function (_super) {
        __extends$N(DeMaterializeSubscriber, _super);
        function DeMaterializeSubscriber(destination) {
            _super.call(this, destination);
        }
        DeMaterializeSubscriber.prototype._next = function (value) {
            value.observe(this.destination);
        };
        return DeMaterializeSubscriber;
    }(Subscriber_1.Subscriber));

    function minimalSetImpl() {
        // THIS IS NOT a full impl of Set, this is just the minimum
        // bits of functionality we need for this library.
        return (function () {
            function MinimalSet() {
                this._values = [];
            }
            MinimalSet.prototype.add = function (value) {
                if (!this.has(value)) {
                    this._values.push(value);
                }
            };
            MinimalSet.prototype.has = function (value) {
                return this._values.indexOf(value) !== -1;
            };
            Object.defineProperty(MinimalSet.prototype, "size", {
                get: function () {
                    return this._values.length;
                },
                enumerable: true,
                configurable: true
            });
            MinimalSet.prototype.clear = function () {
                this._values.length = 0;
            };
            return MinimalSet;
        }());
    }
    var minimalSetImpl_1 = minimalSetImpl;
    var Set$1 = root.root.Set || minimalSetImpl();


    var _Set = {
    	minimalSetImpl: minimalSetImpl_1,
    	Set: Set$1
    };

    var __extends$O = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DistinctSubscriber = (function (_super) {
        __extends$O(DistinctSubscriber, _super);
        function DistinctSubscriber(destination, keySelector, flushes) {
            _super.call(this, destination);
            this.keySelector = keySelector;
            this.values = new _Set.Set();
            if (flushes) {
                this.add(subscribeToResult_1.subscribeToResult(this, flushes));
            }
        }
        DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.values.clear();
        };
        DistinctSubscriber.prototype.notifyError = function (error, innerSub) {
            this._error(error);
        };
        DistinctSubscriber.prototype._next = function (value) {
            if (this.keySelector) {
                this._useKeySelector(value);
            }
            else {
                this._finalizeNext(value, value);
            }
        };
        DistinctSubscriber.prototype._useKeySelector = function (value) {
            var key;
            var destination = this.destination;
            try {
                key = this.keySelector(value);
            }
            catch (err) {
                destination.error(err);
                return;
            }
            this._finalizeNext(key, value);
        };
        DistinctSubscriber.prototype._finalizeNext = function (key, value) {
            var values = this.values;
            if (!values.has(key)) {
                values.add(key);
                this.destination.next(value);
            }
        };
        return DistinctSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$P = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DistinctUntilChangedSubscriber = (function (_super) {
        __extends$P(DistinctUntilChangedSubscriber, _super);
        function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
            _super.call(this, destination);
            this.keySelector = keySelector;
            this.hasKey = false;
            if (typeof compare === 'function') {
                this.compare = compare;
            }
        }
        DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
            return x === y;
        };
        DistinctUntilChangedSubscriber.prototype._next = function (value) {
            var keySelector = this.keySelector;
            var key = value;
            if (keySelector) {
                key = tryCatch_1.tryCatch(this.keySelector)(value);
                if (key === errorObject.errorObject) {
                    return this.destination.error(errorObject.errorObject.e);
                }
            }
            var result = false;
            if (this.hasKey) {
                result = tryCatch_1.tryCatch(this.compare)(this.key, key);
                if (result === errorObject.errorObject) {
                    return this.destination.error(errorObject.errorObject.e);
                }
            }
            else {
                this.hasKey = true;
            }
            if (Boolean(result) === false) {
                this.key = key;
                this.destination.next(value);
            }
        };
        return DistinctUntilChangedSubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$Q = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ElementAtSubscriber = (function (_super) {
        __extends$Q(ElementAtSubscriber, _super);
        function ElementAtSubscriber(destination, index, defaultValue) {
            _super.call(this, destination);
            this.index = index;
            this.defaultValue = defaultValue;
        }
        ElementAtSubscriber.prototype._next = function (x) {
            if (this.index-- === 0) {
                this.destination.next(x);
                this.destination.complete();
            }
        };
        ElementAtSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (this.index >= 0) {
                if (typeof this.defaultValue !== 'undefined') {
                    destination.next(this.defaultValue);
                }
                else {
                    destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError);
                }
            }
            destination.complete();
        };
        return ElementAtSubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$R = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SwitchFirstSubscriber = (function (_super) {
        __extends$R(SwitchFirstSubscriber, _super);
        function SwitchFirstSubscriber(destination) {
            _super.call(this, destination);
            this.hasCompleted = false;
            this.hasSubscription = false;
        }
        SwitchFirstSubscriber.prototype._next = function (value) {
            if (!this.hasSubscription) {
                this.hasSubscription = true;
                this.add(subscribeToResult_1.subscribeToResult(this, value));
            }
        };
        SwitchFirstSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (!this.hasSubscription) {
                this.destination.complete();
            }
        };
        SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {
            this.remove(innerSub);
            this.hasSubscription = false;
            if (this.hasCompleted) {
                this.destination.complete();
            }
        };
        return SwitchFirstSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$S = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SwitchFirstMapSubscriber = (function (_super) {
        __extends$S(SwitchFirstMapSubscriber, _super);
        function SwitchFirstMapSubscriber(destination, project, resultSelector) {
            _super.call(this, destination);
            this.project = project;
            this.resultSelector = resultSelector;
            this.hasSubscription = false;
            this.hasCompleted = false;
            this.index = 0;
        }
        SwitchFirstMapSubscriber.prototype._next = function (value) {
            if (!this.hasSubscription) {
                this.tryNext(value);
            }
        };
        SwitchFirstMapSubscriber.prototype.tryNext = function (value) {
            var index = this.index++;
            var destination = this.destination;
            try {
                var result = this.project(value, index);
                this.hasSubscription = true;
                this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
            }
            catch (err) {
                destination.error(err);
            }
        };
        SwitchFirstMapSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (!this.hasSubscription) {
                this.destination.complete();
            }
        };
        SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
            if (resultSelector) {
                this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);
            }
            else {
                destination.next(innerValue);
            }
        };
        SwitchFirstMapSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {
            var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
            try {
                var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
                destination.next(result);
            }
            catch (err) {
                destination.error(err);
            }
        };
        SwitchFirstMapSubscriber.prototype.notifyError = function (err) {
            this.destination.error(err);
        };
        SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {
            this.remove(innerSub);
            this.hasSubscription = false;
            if (this.hasCompleted) {
                this.destination.complete();
            }
        };
        return SwitchFirstMapSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$T = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ExpandSubscriber = (function (_super) {
        __extends$T(ExpandSubscriber, _super);
        function ExpandSubscriber(destination, project, concurrent, scheduler) {
            _super.call(this, destination);
            this.project = project;
            this.concurrent = concurrent;
            this.scheduler = scheduler;
            this.index = 0;
            this.active = 0;
            this.hasCompleted = false;
            if (concurrent < Number.POSITIVE_INFINITY) {
                this.buffer = [];
            }
        }
        ExpandSubscriber.dispatch = function (arg) {
            var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;
            subscriber.subscribeToProjection(result, value, index);
        };
        ExpandSubscriber.prototype._next = function (value) {
            var destination = this.destination;
            if (destination.closed) {
                this._complete();
                return;
            }
            var index = this.index++;
            if (this.active < this.concurrent) {
                destination.next(value);
                var result = tryCatch_1.tryCatch(this.project)(value, index);
                if (result === errorObject.errorObject) {
                    destination.error(errorObject.errorObject.e);
                }
                else if (!this.scheduler) {
                    this.subscribeToProjection(result, value, index);
                }
                else {
                    var state = { subscriber: this, result: result, value: value, index: index };
                    this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
                }
            }
            else {
                this.buffer.push(value);
            }
        };
        ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
            this.active++;
            this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
        };
        ExpandSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.hasCompleted && this.active === 0) {
                this.destination.complete();
            }
        };
        ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this._next(innerValue);
        };
        ExpandSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer && buffer.length > 0) {
                this._next(buffer.shift());
            }
            if (this.hasCompleted && this.active === 0) {
                this.destination.complete();
            }
        };
        return ExpandSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$U = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var FinallySubscriber = (function (_super) {
        __extends$U(FinallySubscriber, _super);
        function FinallySubscriber(destination, callback) {
            _super.call(this, destination);
            this.add(new Subscription_1.Subscription(callback));
        }
        return FinallySubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$V = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var FindValueSubscriber = (function (_super) {
        __extends$V(FindValueSubscriber, _super);
        function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.source = source;
            this.yieldIndex = yieldIndex;
            this.thisArg = thisArg;
            this.index = 0;
        }
        FindValueSubscriber.prototype.notifyComplete = function (value) {
            var destination = this.destination;
            destination.next(value);
            destination.complete();
        };
        FindValueSubscriber.prototype._next = function (value) {
            var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;
            var index = this.index++;
            try {
                var result = predicate.call(thisArg || this, value, index, this.source);
                if (result) {
                    this.notifyComplete(this.yieldIndex ? index : value);
                }
            }
            catch (err) {
                this.destination.error(err);
            }
        };
        FindValueSubscriber.prototype._complete = function () {
            this.notifyComplete(this.yieldIndex ? -1 : undefined);
        };
        return FindValueSubscriber;
    }(Subscriber_1.Subscriber));

    var MapPolyfill = (function () {
        function MapPolyfill() {
            this.size = 0;
            this._values = [];
            this._keys = [];
        }
        MapPolyfill.prototype.get = function (key) {
            var i = this._keys.indexOf(key);
            return i === -1 ? undefined : this._values[i];
        };
        MapPolyfill.prototype.set = function (key, value) {
            var i = this._keys.indexOf(key);
            if (i === -1) {
                this._keys.push(key);
                this._values.push(value);
                this.size++;
            }
            else {
                this._values[i] = value;
            }
            return this;
        };
        MapPolyfill.prototype.delete = function (key) {
            var i = this._keys.indexOf(key);
            if (i === -1) {
                return false;
            }
            this._values.splice(i, 1);
            this._keys.splice(i, 1);
            this.size--;
            return true;
        };
        MapPolyfill.prototype.clear = function () {
            this._keys.length = 0;
            this._values.length = 0;
            this.size = 0;
        };
        MapPolyfill.prototype.forEach = function (cb, thisArg) {
            for (var i = 0; i < this.size; i++) {
                cb.call(thisArg, this._values[i], this._keys[i]);
            }
        };
        return MapPolyfill;
    }());
    var MapPolyfill_2 = MapPolyfill;


    var MapPolyfill_1 = {
    	MapPolyfill: MapPolyfill_2
    };

    var Map$1 = root.root.Map || (function () { return MapPolyfill_1.MapPolyfill; })();


    var _Map = {
    	Map: Map$1
    };

    var FastMap = (function () {
        function FastMap() {
            this.values = {};
        }
        FastMap.prototype.delete = function (key) {
            this.values[key] = null;
            return true;
        };
        FastMap.prototype.set = function (key, value) {
            this.values[key] = value;
            return this;
        };
        FastMap.prototype.get = function (key) {
            return this.values[key];
        };
        FastMap.prototype.forEach = function (cb, thisArg) {
            var values = this.values;
            for (var key in values) {
                if (values.hasOwnProperty(key) && values[key] !== null) {
                    cb.call(thisArg, values[key], key);
                }
            }
        };
        FastMap.prototype.clear = function () {
            this.values = {};
        };
        return FastMap;
    }());
    var FastMap_2 = FastMap;


    var FastMap_1 = {
    	FastMap: FastMap_2
    };

    var __extends$W = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var GroupBySubscriber = (function (_super) {
        __extends$W(GroupBySubscriber, _super);
        function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
            _super.call(this, destination);
            this.keySelector = keySelector;
            this.elementSelector = elementSelector;
            this.durationSelector = durationSelector;
            this.subjectSelector = subjectSelector;
            this.groups = null;
            this.attemptedToUnsubscribe = false;
            this.count = 0;
        }
        GroupBySubscriber.prototype._next = function (value) {
            var key;
            try {
                key = this.keySelector(value);
            }
            catch (err) {
                this.error(err);
                return;
            }
            this._group(value, key);
        };
        GroupBySubscriber.prototype._group = function (value, key) {
            var groups = this.groups;
            if (!groups) {
                groups = this.groups = typeof key === 'string' ? new FastMap_1.FastMap() : new _Map.Map();
            }
            var group = groups.get(key);
            var element;
            if (this.elementSelector) {
                try {
                    element = this.elementSelector(value);
                }
                catch (err) {
                    this.error(err);
                }
            }
            else {
                element = value;
            }
            if (!group) {
                group = this.subjectSelector ? this.subjectSelector() : new Subject_1.Subject();
                groups.set(key, group);
                var groupedObservable = new GroupedObservable(key, group, this);
                this.destination.next(groupedObservable);
                if (this.durationSelector) {
                    var duration = void 0;
                    try {
                        duration = this.durationSelector(new GroupedObservable(key, group));
                    }
                    catch (err) {
                        this.error(err);
                        return;
                    }
                    this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
                }
            }
            if (!group.closed) {
                group.next(element);
            }
        };
        GroupBySubscriber.prototype._error = function (err) {
            var groups = this.groups;
            if (groups) {
                groups.forEach(function (group, key) {
                    group.error(err);
                });
                groups.clear();
            }
            this.destination.error(err);
        };
        GroupBySubscriber.prototype._complete = function () {
            var groups = this.groups;
            if (groups) {
                groups.forEach(function (group, key) {
                    group.complete();
                });
                groups.clear();
            }
            this.destination.complete();
        };
        GroupBySubscriber.prototype.removeGroup = function (key) {
            this.groups.delete(key);
        };
        GroupBySubscriber.prototype.unsubscribe = function () {
            if (!this.closed) {
                this.attemptedToUnsubscribe = true;
                if (this.count === 0) {
                    _super.prototype.unsubscribe.call(this);
                }
            }
        };
        return GroupBySubscriber;
    }(Subscriber_1.Subscriber));
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var GroupDurationSubscriber = (function (_super) {
        __extends$W(GroupDurationSubscriber, _super);
        function GroupDurationSubscriber(key, group, parent) {
            _super.call(this, group);
            this.key = key;
            this.group = group;
            this.parent = parent;
        }
        GroupDurationSubscriber.prototype._next = function (value) {
            this.complete();
        };
        /** @deprecated internal use only */ GroupDurationSubscriber.prototype._unsubscribe = function () {
            var _a = this, parent = _a.parent, key = _a.key;
            this.key = this.parent = null;
            if (parent) {
                parent.removeGroup(key);
            }
        };
        return GroupDurationSubscriber;
    }(Subscriber_1.Subscriber));
    /**
     * An Observable representing values belonging to the same group represented by
     * a common key. The values emitted by a GroupedObservable come from the source
     * Observable. The common key is available as the field `key` on a
     * GroupedObservable instance.
     *
     * @class GroupedObservable<K, T>
     */
    var GroupedObservable = (function (_super) {
        __extends$W(GroupedObservable, _super);
        function GroupedObservable(key, groupSubject, refCountSubscription) {
            _super.call(this);
            this.key = key;
            this.groupSubject = groupSubject;
            this.refCountSubscription = refCountSubscription;
        }
        /** @deprecated internal use only */ GroupedObservable.prototype._subscribe = function (subscriber) {
            var subscription = new Subscription_1.Subscription();
            var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
            if (refCountSubscription && !refCountSubscription.closed) {
                subscription.add(new InnerRefCountSubscription(refCountSubscription));
            }
            subscription.add(groupSubject.subscribe(subscriber));
            return subscription;
        };
        return GroupedObservable;
    }(Observable_1.Observable));
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var InnerRefCountSubscription = (function (_super) {
        __extends$W(InnerRefCountSubscription, _super);
        function InnerRefCountSubscription(parent) {
            _super.call(this);
            this.parent = parent;
            parent.count++;
        }
        InnerRefCountSubscription.prototype.unsubscribe = function () {
            var parent = this.parent;
            if (!parent.closed && !this.closed) {
                _super.prototype.unsubscribe.call(this);
                parent.count -= 1;
                if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                    parent.unsubscribe();
                }
            }
        };
        return InnerRefCountSubscription;
    }(Subscription_1.Subscription));

    var __extends$X = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var IgnoreElementsSubscriber = (function (_super) {
        __extends$X(IgnoreElementsSubscriber, _super);
        function IgnoreElementsSubscriber() {
            _super.apply(this, arguments);
        }
        IgnoreElementsSubscriber.prototype._next = function (unused) {
        };
        return IgnoreElementsSubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$Y = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var IsEmptySubscriber = (function (_super) {
        __extends$Y(IsEmptySubscriber, _super);
        function IsEmptySubscriber(destination) {
            _super.call(this, destination);
        }
        IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
            var destination = this.destination;
            destination.next(isEmpty);
            destination.complete();
        };
        IsEmptySubscriber.prototype._next = function (value) {
            this.notifyComplete(false);
        };
        IsEmptySubscriber.prototype._complete = function () {
            this.notifyComplete(true);
        };
        return IsEmptySubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$Z = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MapToSubscriber = (function (_super) {
        __extends$Z(MapToSubscriber, _super);
        function MapToSubscriber(destination, value) {
            _super.call(this, destination);
            this.value = value;
        }
        MapToSubscriber.prototype._next = function (x) {
            this.destination.next(this.value);
        };
        return MapToSubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$_ = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MaterializeSubscriber = (function (_super) {
        __extends$_(MaterializeSubscriber, _super);
        function MaterializeSubscriber(destination) {
            _super.call(this, destination);
        }
        MaterializeSubscriber.prototype._next = function (value) {
            this.destination.next(Notification_1.Notification.createNext(value));
        };
        MaterializeSubscriber.prototype._error = function (err) {
            var destination = this.destination;
            destination.next(Notification_1.Notification.createError(err));
            destination.complete();
        };
        MaterializeSubscriber.prototype._complete = function () {
            var destination = this.destination;
            destination.next(Notification_1.Notification.createComplete());
            destination.complete();
        };
        return MaterializeSubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$10 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MergeMapToSubscriber = (function (_super) {
        __extends$10(MergeMapToSubscriber, _super);
        function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {
            if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
            _super.call(this, destination);
            this.ish = ish;
            this.resultSelector = resultSelector;
            this.concurrent = concurrent;
            this.hasCompleted = false;
            this.buffer = [];
            this.active = 0;
            this.index = 0;
        }
        MergeMapToSubscriber.prototype._next = function (value) {
            if (this.active < this.concurrent) {
                var resultSelector = this.resultSelector;
                var index = this.index++;
                var ish = this.ish;
                var destination = this.destination;
                this.active++;
                this._innerSub(ish, destination, resultSelector, value, index);
            }
            else {
                this.buffer.push(value);
            }
        };
        MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {
            this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
        };
        MergeMapToSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
        };
        MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
            if (resultSelector) {
                this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);
            }
            else {
                destination.next(innerValue);
            }
        };
        MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {
            var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
            var result;
            try {
                result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
            }
            catch (err) {
                destination.error(err);
                return;
            }
            destination.next(result);
        };
        MergeMapToSubscriber.prototype.notifyError = function (err) {
            this.destination.error(err);
        };
        MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            }
            else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeMapToSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$11 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MergeScanSubscriber = (function (_super) {
        __extends$11(MergeScanSubscriber, _super);
        function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
            _super.call(this, destination);
            this.accumulator = accumulator;
            this.acc = acc;
            this.concurrent = concurrent;
            this.hasValue = false;
            this.hasCompleted = false;
            this.buffer = [];
            this.active = 0;
            this.index = 0;
        }
        MergeScanSubscriber.prototype._next = function (value) {
            if (this.active < this.concurrent) {
                var index = this.index++;
                var ish = tryCatch_1.tryCatch(this.accumulator)(this.acc, value);
                var destination = this.destination;
                if (ish === errorObject.errorObject) {
                    destination.error(errorObject.errorObject.e);
                }
                else {
                    this.active++;
                    this._innerSub(ish, value, index);
                }
            }
            else {
                this.buffer.push(value);
            }
        };
        MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {
            this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
        };
        MergeScanSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                if (this.hasValue === false) {
                    this.destination.next(this.acc);
                }
                this.destination.complete();
            }
        };
        MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var destination = this.destination;
            this.acc = innerValue;
            this.hasValue = true;
            destination.next(innerValue);
        };
        MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            }
            else if (this.active === 0 && this.hasCompleted) {
                if (this.hasValue === false) {
                    this.destination.next(this.acc);
                }
                this.destination.complete();
            }
        };
        return MergeScanSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$12 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OnErrorResumeNextSubscriber = (function (_super) {
        __extends$12(OnErrorResumeNextSubscriber, _super);
        function OnErrorResumeNextSubscriber(destination, nextSources) {
            _super.call(this, destination);
            this.destination = destination;
            this.nextSources = nextSources;
        }
        OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {
            this.subscribeToNextSource();
        };
        OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {
            this.subscribeToNextSource();
        };
        OnErrorResumeNextSubscriber.prototype._error = function (err) {
            this.subscribeToNextSource();
        };
        OnErrorResumeNextSubscriber.prototype._complete = function () {
            this.subscribeToNextSource();
        };
        OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
            var next = this.nextSources.shift();
            if (next) {
                this.add(subscribeToResult_1.subscribeToResult(this, next));
            }
            else {
                this.destination.complete();
            }
        };
        return OnErrorResumeNextSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$13 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var PairwiseSubscriber = (function (_super) {
        __extends$13(PairwiseSubscriber, _super);
        function PairwiseSubscriber(destination) {
            _super.call(this, destination);
            this.hasPrev = false;
        }
        PairwiseSubscriber.prototype._next = function (value) {
            if (this.hasPrev) {
                this.destination.next([this.prev, value]);
            }
            else {
                this.hasPrev = true;
            }
            this.prev = value;
        };
        return PairwiseSubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$14 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };


    /**
     * @class AsyncSubject<T>
     */
    var AsyncSubject = (function (_super) {
        __extends$14(AsyncSubject, _super);
        function AsyncSubject() {
            _super.apply(this, arguments);
            this.value = null;
            this.hasNext = false;
            this.hasCompleted = false;
        }
        /** @deprecated internal use only */ AsyncSubject.prototype._subscribe = function (subscriber) {
            if (this.hasError) {
                subscriber.error(this.thrownError);
                return Subscription_1.Subscription.EMPTY;
            }
            else if (this.hasCompleted && this.hasNext) {
                subscriber.next(this.value);
                subscriber.complete();
                return Subscription_1.Subscription.EMPTY;
            }
            return _super.prototype._subscribe.call(this, subscriber);
        };
        AsyncSubject.prototype.next = function (value) {
            if (!this.hasCompleted) {
                this.value = value;
                this.hasNext = true;
            }
        };
        AsyncSubject.prototype.error = function (error) {
            if (!this.hasCompleted) {
                _super.prototype.error.call(this, error);
            }
        };
        AsyncSubject.prototype.complete = function () {
            this.hasCompleted = true;
            if (this.hasNext) {
                _super.prototype.next.call(this, this.value);
            }
            _super.prototype.complete.call(this);
        };
        return AsyncSubject;
    }(Subject_1.Subject));

    var __extends$15 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var QueueAction = (function (_super) {
        __extends$15(QueueAction, _super);
        function QueueAction(scheduler, work) {
            _super.call(this, scheduler, work);
            this.scheduler = scheduler;
            this.work = work;
        }
        QueueAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) { delay = 0; }
            if (delay > 0) {
                return _super.prototype.schedule.call(this, state, delay);
            }
            this.delay = delay;
            this.state = state;
            this.scheduler.flush(this);
            return this;
        };
        QueueAction.prototype.execute = function (state, delay) {
            return (delay > 0 || this.closed) ?
                _super.prototype.execute.call(this, state, delay) :
                this._execute(state, delay);
        };
        QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            // If delay exists and is greater than 0, or if the delay is null (the
            // action wasn't rescheduled) but was originally scheduled as an async
            // action, then recycle as an async action.
            if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            // Otherwise flush the scheduler starting with this action.
            return scheduler.flush(this);
        };
        return QueueAction;
    }(AsyncAction_1.AsyncAction));
    var QueueAction_2 = QueueAction;


    var QueueAction_1 = {
    	QueueAction: QueueAction_2
    };

    var __extends$16 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    var QueueScheduler = (function (_super) {
        __extends$16(QueueScheduler, _super);
        function QueueScheduler() {
            _super.apply(this, arguments);
        }
        return QueueScheduler;
    }(AsyncScheduler_1.AsyncScheduler));
    var QueueScheduler_2 = QueueScheduler;


    var QueueScheduler_1 = {
    	QueueScheduler: QueueScheduler_2
    };

    /**
     *
     * Queue Scheduler
     *
     * <span class="informal">Put every next task on a queue, instead of executing it immediately</span>
     *
     * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.
     *
     * When used without delay, it schedules given task synchronously - executes it right when
     * it is scheduled. However when called recursively, that is when inside the scheduled task,
     * another task is scheduled with queue scheduler, instead of executing immediately as well,
     * that task will be put on a queue and wait for current one to finish.
     *
     * This means that when you execute task with `queue` scheduler, you are sure it will end
     * before any other task scheduled with that scheduler will start.
     *
     * @examples <caption>Schedule recursively first, then do something</caption>
     *
     * Rx.Scheduler.queue.schedule(() => {
     *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue
     *
     *   console.log('first');
     * });
     *
     * // Logs:
     * // "first"
     * // "second"
     *
     *
     * @example <caption>Reschedule itself recursively</caption>
     *
     * Rx.Scheduler.queue.schedule(function(state) {
     *   if (state !== 0) {
     *     console.log('before', state);
     *     this.schedule(state - 1); // `this` references currently executing Action,
     *                               // which we reschedule with new state
     *     console.log('after', state);
     *   }
     * }, 0, 3);
     *
     * // In scheduler that runs recursively, you would expect:
     * // "before", 3
     * // "before", 2
     * // "before", 1
     * // "after", 1
     * // "after", 2
     * // "after", 3
     *
     * // But with queue it logs:
     * // "before", 3
     * // "after", 3
     * // "before", 2
     * // "after", 2
     * // "before", 1
     * // "after", 1
     *
     *
     * @static true
     * @name queue
     * @owner Scheduler
     */
    var queue_1 = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);


    var queue = {
    	queue: queue_1
    };

    var __extends$17 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };






    /**
     * @class ReplaySubject<T>
     */
    var ReplaySubject = (function (_super) {
        __extends$17(ReplaySubject, _super);
        function ReplaySubject(bufferSize, windowTime, scheduler) {
            if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }
            if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }
            _super.call(this);
            this.scheduler = scheduler;
            this._events = [];
            this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
            this._windowTime = windowTime < 1 ? 1 : windowTime;
        }
        ReplaySubject.prototype.next = function (value) {
            var now = this._getNow();
            this._events.push(new ReplayEvent(now, value));
            this._trimBufferThenGetEvents();
            _super.prototype.next.call(this, value);
        };
        /** @deprecated internal use only */ ReplaySubject.prototype._subscribe = function (subscriber) {
            var _events = this._trimBufferThenGetEvents();
            var scheduler = this.scheduler;
            var subscription;
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            else if (this.hasError) {
                subscription = Subscription_1.Subscription.EMPTY;
            }
            else if (this.isStopped) {
                subscription = Subscription_1.Subscription.EMPTY;
            }
            else {
                this.observers.push(subscriber);
                subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
            }
            if (scheduler) {
                subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));
            }
            var len = _events.length;
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i].value);
            }
            if (this.hasError) {
                subscriber.error(this.thrownError);
            }
            else if (this.isStopped) {
                subscriber.complete();
            }
            return subscription;
        };
        ReplaySubject.prototype._getNow = function () {
            return (this.scheduler || queue.queue).now();
        };
        ReplaySubject.prototype._trimBufferThenGetEvents = function () {
            var now = this._getNow();
            var _bufferSize = this._bufferSize;
            var _windowTime = this._windowTime;
            var _events = this._events;
            var eventsCount = _events.length;
            var spliceCount = 0;
            // Trim events that fall out of the time window.
            // Start at the front of the list. Break early once
            // we encounter an event that falls within the window.
            while (spliceCount < eventsCount) {
                if ((now - _events[spliceCount].time) < _windowTime) {
                    break;
                }
                spliceCount++;
            }
            if (eventsCount > _bufferSize) {
                spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
            }
            if (spliceCount > 0) {
                _events.splice(0, spliceCount);
            }
            return _events;
        };
        return ReplaySubject;
    }(Subject_1.Subject));
    var ReplayEvent = (function () {
        function ReplayEvent(time, value) {
            this.time = time;
            this.value = value;
        }
        return ReplayEvent;
    }());

    var __extends$18 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var RaceSubscriber = (function (_super) {
        __extends$18(RaceSubscriber, _super);
        function RaceSubscriber(destination) {
            _super.call(this, destination);
            this.hasFirst = false;
            this.observables = [];
            this.subscriptions = [];
        }
        RaceSubscriber.prototype._next = function (observable) {
            this.observables.push(observable);
        };
        RaceSubscriber.prototype._complete = function () {
            var observables = this.observables;
            var len = observables.length;
            if (len === 0) {
                this.destination.complete();
            }
            else {
                for (var i = 0; i < len && !this.hasFirst; i++) {
                    var observable = observables[i];
                    var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);
                    if (this.subscriptions) {
                        this.subscriptions.push(subscription);
                    }
                    this.add(subscription);
                }
                this.observables = null;
            }
        };
        RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (!this.hasFirst) {
                this.hasFirst = true;
                for (var i = 0; i < this.subscriptions.length; i++) {
                    if (i !== outerIndex) {
                        var subscription = this.subscriptions[i];
                        subscription.unsubscribe();
                        this.remove(subscription);
                    }
                }
                this.subscriptions = null;
            }
            this.destination.next(innerValue);
        };
        return RaceSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$19 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var RepeatSubscriber = (function (_super) {
        __extends$19(RepeatSubscriber, _super);
        function RepeatSubscriber(destination, count, source) {
            _super.call(this, destination);
            this.count = count;
            this.source = source;
        }
        RepeatSubscriber.prototype.complete = function () {
            if (!this.isStopped) {
                var _a = this, source = _a.source, count = _a.count;
                if (count === 0) {
                    return _super.prototype.complete.call(this);
                }
                else if (count > -1) {
                    this.count = count - 1;
                }
                source.subscribe(this._unsubscribeAndRecycle());
            }
        };
        return RepeatSubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$1a = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var RepeatWhenSubscriber = (function (_super) {
        __extends$1a(RepeatWhenSubscriber, _super);
        function RepeatWhenSubscriber(destination, notifier, source) {
            _super.call(this, destination);
            this.notifier = notifier;
            this.source = source;
            this.sourceIsBeingSubscribedTo = true;
        }
        RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.sourceIsBeingSubscribedTo = true;
            this.source.subscribe(this);
        };
        RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {
            if (this.sourceIsBeingSubscribedTo === false) {
                return _super.prototype.complete.call(this);
            }
        };
        RepeatWhenSubscriber.prototype.complete = function () {
            this.sourceIsBeingSubscribedTo = false;
            if (!this.isStopped) {
                if (!this.retries) {
                    this.subscribeToRetries();
                }
                if (!this.retriesSubscription || this.retriesSubscription.closed) {
                    return _super.prototype.complete.call(this);
                }
                this._unsubscribeAndRecycle();
                this.notifications.next();
            }
        };
        /** @deprecated internal use only */ RepeatWhenSubscriber.prototype._unsubscribe = function () {
            var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
            if (notifications) {
                notifications.unsubscribe();
                this.notifications = null;
            }
            if (retriesSubscription) {
                retriesSubscription.unsubscribe();
                this.retriesSubscription = null;
            }
            this.retries = null;
        };
        /** @deprecated internal use only */ RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {
            var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;
            this.notifications = null;
            this.retries = null;
            this.retriesSubscription = null;
            _super.prototype._unsubscribeAndRecycle.call(this);
            this.notifications = notifications;
            this.retries = retries;
            this.retriesSubscription = retriesSubscription;
            return this;
        };
        RepeatWhenSubscriber.prototype.subscribeToRetries = function () {
            this.notifications = new Subject_1.Subject();
            var retries = tryCatch_1.tryCatch(this.notifier)(this.notifications);
            if (retries === errorObject.errorObject) {
                return _super.prototype.complete.call(this);
            }
            this.retries = retries;
            this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
        };
        return RepeatWhenSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$1b = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var RetrySubscriber = (function (_super) {
        __extends$1b(RetrySubscriber, _super);
        function RetrySubscriber(destination, count, source) {
            _super.call(this, destination);
            this.count = count;
            this.source = source;
        }
        RetrySubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var _a = this, source = _a.source, count = _a.count;
                if (count === 0) {
                    return _super.prototype.error.call(this, err);
                }
                else if (count > -1) {
                    this.count = count - 1;
                }
                source.subscribe(this._unsubscribeAndRecycle());
            }
        };
        return RetrySubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$1c = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var RetryWhenSubscriber = (function (_super) {
        __extends$1c(RetryWhenSubscriber, _super);
        function RetryWhenSubscriber(destination, notifier, source) {
            _super.call(this, destination);
            this.notifier = notifier;
            this.source = source;
        }
        RetryWhenSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var errors = this.errors;
                var retries = this.retries;
                var retriesSubscription = this.retriesSubscription;
                if (!retries) {
                    errors = new Subject_1.Subject();
                    retries = tryCatch_1.tryCatch(this.notifier)(errors);
                    if (retries === errorObject.errorObject) {
                        return _super.prototype.error.call(this, errorObject.errorObject.e);
                    }
                    retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
                }
                else {
                    this.errors = null;
                    this.retriesSubscription = null;
                }
                this._unsubscribeAndRecycle();
                this.errors = errors;
                this.retries = retries;
                this.retriesSubscription = retriesSubscription;
                errors.next(err);
            }
        };
        /** @deprecated internal use only */ RetryWhenSubscriber.prototype._unsubscribe = function () {
            var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
            if (errors) {
                errors.unsubscribe();
                this.errors = null;
            }
            if (retriesSubscription) {
                retriesSubscription.unsubscribe();
                this.retriesSubscription = null;
            }
            this.retries = null;
        };
        RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var _a = this, errors = _a.errors, retries = _a.retries, retriesSubscription = _a.retriesSubscription;
            this.errors = null;
            this.retries = null;
            this.retriesSubscription = null;
            this._unsubscribeAndRecycle();
            this.errors = errors;
            this.retries = retries;
            this.retriesSubscription = retriesSubscription;
            this.source.subscribe(this);
        };
        return RetryWhenSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$1d = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SampleSubscriber = (function (_super) {
        __extends$1d(SampleSubscriber, _super);
        function SampleSubscriber() {
            _super.apply(this, arguments);
            this.hasValue = false;
        }
        SampleSubscriber.prototype._next = function (value) {
            this.value = value;
            this.hasValue = true;
        };
        SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.emitValue();
        };
        SampleSubscriber.prototype.notifyComplete = function () {
            this.emitValue();
        };
        SampleSubscriber.prototype.emitValue = function () {
            if (this.hasValue) {
                this.hasValue = false;
                this.destination.next(this.value);
            }
        };
        return SampleSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$1e = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SampleTimeSubscriber = (function (_super) {
        __extends$1e(SampleTimeSubscriber, _super);
        function SampleTimeSubscriber(destination, period, scheduler) {
            _super.call(this, destination);
            this.period = period;
            this.scheduler = scheduler;
            this.hasValue = false;
            this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period: period }));
        }
        SampleTimeSubscriber.prototype._next = function (value) {
            this.lastValue = value;
            this.hasValue = true;
        };
        SampleTimeSubscriber.prototype.notifyNext = function () {
            if (this.hasValue) {
                this.hasValue = false;
                this.destination.next(this.lastValue);
            }
        };
        return SampleTimeSubscriber;
    }(Subscriber_1.Subscriber));
    function dispatchNotification(state) {
        var subscriber = state.subscriber, period = state.period;
        subscriber.notifyNext();
        this.schedule(state, period);
    }

    var __extends$1f = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SequenceEqualSubscriber = (function (_super) {
        __extends$1f(SequenceEqualSubscriber, _super);
        function SequenceEqualSubscriber(destination, compareTo, comparor) {
            _super.call(this, destination);
            this.compareTo = compareTo;
            this.comparor = comparor;
            this._a = [];
            this._b = [];
            this._oneComplete = false;
            this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));
        }
        SequenceEqualSubscriber.prototype._next = function (value) {
            if (this._oneComplete && this._b.length === 0) {
                this.emit(false);
            }
            else {
                this._a.push(value);
                this.checkValues();
            }
        };
        SequenceEqualSubscriber.prototype._complete = function () {
            if (this._oneComplete) {
                this.emit(this._a.length === 0 && this._b.length === 0);
            }
            else {
                this._oneComplete = true;
            }
        };
        SequenceEqualSubscriber.prototype.checkValues = function () {
            var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;
            while (_a.length > 0 && _b.length > 0) {
                var a = _a.shift();
                var b = _b.shift();
                var areEqual = false;
                if (comparor) {
                    areEqual = tryCatch_1.tryCatch(comparor)(a, b);
                    if (areEqual === errorObject.errorObject) {
                        this.destination.error(errorObject.errorObject.e);
                    }
                }
                else {
                    areEqual = a === b;
                }
                if (!areEqual) {
                    this.emit(false);
                }
            }
        };
        SequenceEqualSubscriber.prototype.emit = function (value) {
            var destination = this.destination;
            destination.next(value);
            destination.complete();
        };
        SequenceEqualSubscriber.prototype.nextB = function (value) {
            if (this._oneComplete && this._a.length === 0) {
                this.emit(false);
            }
            else {
                this._b.push(value);
                this.checkValues();
            }
        };
        return SequenceEqualSubscriber;
    }(Subscriber_1.Subscriber));
    var SequenceEqualCompareToSubscriber = (function (_super) {
        __extends$1f(SequenceEqualCompareToSubscriber, _super);
        function SequenceEqualCompareToSubscriber(destination, parent) {
            _super.call(this, destination);
            this.parent = parent;
        }
        SequenceEqualCompareToSubscriber.prototype._next = function (value) {
            this.parent.nextB(value);
        };
        SequenceEqualCompareToSubscriber.prototype._error = function (err) {
            this.parent.error(err);
        };
        SequenceEqualCompareToSubscriber.prototype._complete = function () {
            this.parent._complete();
        };
        return SequenceEqualCompareToSubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$1g = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SingleSubscriber = (function (_super) {
        __extends$1g(SingleSubscriber, _super);
        function SingleSubscriber(destination, predicate, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.source = source;
            this.seenValue = false;
            this.index = 0;
        }
        SingleSubscriber.prototype.applySingleValue = function (value) {
            if (this.seenValue) {
                this.destination.error('Sequence contains more than one element');
            }
            else {
                this.seenValue = true;
                this.singleValue = value;
            }
        };
        SingleSubscriber.prototype._next = function (value) {
            var index = this.index++;
            if (this.predicate) {
                this.tryNext(value, index);
            }
            else {
                this.applySingleValue(value);
            }
        };
        SingleSubscriber.prototype.tryNext = function (value, index) {
            try {
                if (this.predicate(value, index, this.source)) {
                    this.applySingleValue(value);
                }
            }
            catch (err) {
                this.destination.error(err);
            }
        };
        SingleSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (this.index > 0) {
                destination.next(this.seenValue ? this.singleValue : undefined);
                destination.complete();
            }
            else {
                destination.error(new EmptyError_1.EmptyError);
            }
        };
        return SingleSubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$1h = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SkipSubscriber = (function (_super) {
        __extends$1h(SkipSubscriber, _super);
        function SkipSubscriber(destination, total) {
            _super.call(this, destination);
            this.total = total;
            this.count = 0;
        }
        SkipSubscriber.prototype._next = function (x) {
            if (++this.count > this.total) {
                this.destination.next(x);
            }
        };
        return SkipSubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$1i = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SkipLastSubscriber = (function (_super) {
        __extends$1i(SkipLastSubscriber, _super);
        function SkipLastSubscriber(destination, _skipCount) {
            _super.call(this, destination);
            this._skipCount = _skipCount;
            this._count = 0;
            this._ring = new Array(_skipCount);
        }
        SkipLastSubscriber.prototype._next = function (value) {
            var skipCount = this._skipCount;
            var count = this._count++;
            if (count < skipCount) {
                this._ring[count] = value;
            }
            else {
                var currentIndex = count % skipCount;
                var ring = this._ring;
                var oldValue = ring[currentIndex];
                ring[currentIndex] = value;
                this.destination.next(oldValue);
            }
        };
        return SkipLastSubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$1j = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SkipUntilSubscriber = (function (_super) {
        __extends$1j(SkipUntilSubscriber, _super);
        function SkipUntilSubscriber(destination, notifier) {
            _super.call(this, destination);
            this.hasValue = false;
            this.isInnerStopped = false;
            this.add(subscribeToResult_1.subscribeToResult(this, notifier));
        }
        SkipUntilSubscriber.prototype._next = function (value) {
            if (this.hasValue) {
                _super.prototype._next.call(this, value);
            }
        };
        SkipUntilSubscriber.prototype._complete = function () {
            if (this.isInnerStopped) {
                _super.prototype._complete.call(this);
            }
            else {
                this.unsubscribe();
            }
        };
        SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.hasValue = true;
        };
        SkipUntilSubscriber.prototype.notifyComplete = function () {
            this.isInnerStopped = true;
            if (this.isStopped) {
                _super.prototype._complete.call(this);
            }
        };
        return SkipUntilSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$1k = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SkipWhileSubscriber = (function (_super) {
        __extends$1k(SkipWhileSubscriber, _super);
        function SkipWhileSubscriber(destination, predicate) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.skipping = true;
            this.index = 0;
        }
        SkipWhileSubscriber.prototype._next = function (value) {
            var destination = this.destination;
            if (this.skipping) {
                this.tryCallPredicate(value);
            }
            if (!this.skipping) {
                destination.next(value);
            }
        };
        SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
            try {
                var result = this.predicate(value, this.index++);
                this.skipping = Boolean(result);
            }
            catch (err) {
                this.destination.error(err);
            }
        };
        return SkipWhileSubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$1l = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SwitchMapSubscriber = (function (_super) {
        __extends$1l(SwitchMapSubscriber, _super);
        function SwitchMapSubscriber(destination, project, resultSelector) {
            _super.call(this, destination);
            this.project = project;
            this.resultSelector = resultSelector;
            this.index = 0;
        }
        SwitchMapSubscriber.prototype._next = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            }
            catch (error) {
                this.destination.error(error);
                return;
            }
            this._innerSub(result, value, index);
        };
        SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {
            var innerSubscription = this.innerSubscription;
            if (innerSubscription) {
                innerSubscription.unsubscribe();
            }
            this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));
        };
        SwitchMapSubscriber.prototype._complete = function () {
            var innerSubscription = this.innerSubscription;
            if (!innerSubscription || innerSubscription.closed) {
                _super.prototype._complete.call(this);
            }
        };
        /** @deprecated internal use only */ SwitchMapSubscriber.prototype._unsubscribe = function () {
            this.innerSubscription = null;
        };
        SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
            this.remove(innerSub);
            this.innerSubscription = null;
            if (this.isStopped) {
                _super.prototype._complete.call(this);
            }
        };
        SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (this.resultSelector) {
                this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);
            }
            else {
                this.destination.next(innerValue);
            }
        };
        SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
            var result;
            try {
                result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return SwitchMapSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$1m = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SwitchMapToSubscriber = (function (_super) {
        __extends$1m(SwitchMapToSubscriber, _super);
        function SwitchMapToSubscriber(destination, inner, resultSelector) {
            _super.call(this, destination);
            this.inner = inner;
            this.resultSelector = resultSelector;
            this.index = 0;
        }
        SwitchMapToSubscriber.prototype._next = function (value) {
            var innerSubscription = this.innerSubscription;
            if (innerSubscription) {
                innerSubscription.unsubscribe();
            }
            this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));
        };
        SwitchMapToSubscriber.prototype._complete = function () {
            var innerSubscription = this.innerSubscription;
            if (!innerSubscription || innerSubscription.closed) {
                _super.prototype._complete.call(this);
            }
        };
        /** @deprecated internal use only */ SwitchMapToSubscriber.prototype._unsubscribe = function () {
            this.innerSubscription = null;
        };
        SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {
            this.remove(innerSub);
            this.innerSubscription = null;
            if (this.isStopped) {
                _super.prototype._complete.call(this);
            }
        };
        SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
            if (resultSelector) {
                this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);
            }
            else {
                destination.next(innerValue);
            }
        };
        SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
            var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
            var result;
            try {
                result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
            }
            catch (err) {
                destination.error(err);
                return;
            }
            destination.next(result);
        };
        return SwitchMapToSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$1n = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var TakeSubscriber = (function (_super) {
        __extends$1n(TakeSubscriber, _super);
        function TakeSubscriber(destination, total) {
            _super.call(this, destination);
            this.total = total;
            this.count = 0;
        }
        TakeSubscriber.prototype._next = function (value) {
            var total = this.total;
            var count = ++this.count;
            if (count <= total) {
                this.destination.next(value);
                if (count === total) {
                    this.destination.complete();
                    this.unsubscribe();
                }
            }
        };
        return TakeSubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$1o = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var TakeUntilSubscriber = (function (_super) {
        __extends$1o(TakeUntilSubscriber, _super);
        function TakeUntilSubscriber(destination, notifier) {
            _super.call(this, destination);
            this.notifier = notifier;
            this.add(subscribeToResult_1.subscribeToResult(this, notifier));
        }
        TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.complete();
        };
        TakeUntilSubscriber.prototype.notifyComplete = function () {
            // noop
        };
        return TakeUntilSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$1p = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var TakeWhileSubscriber = (function (_super) {
        __extends$1p(TakeWhileSubscriber, _super);
        function TakeWhileSubscriber(destination, predicate) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.index = 0;
        }
        TakeWhileSubscriber.prototype._next = function (value) {
            var destination = this.destination;
            var result;
            try {
                result = this.predicate(value, this.index++);
            }
            catch (err) {
                destination.error(err);
                return;
            }
            this.nextOrComplete(value, result);
        };
        TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
            var destination = this.destination;
            if (Boolean(predicateResult)) {
                destination.next(value);
            }
            else {
                destination.complete();
            }
        };
        return TakeWhileSubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$1q = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DoSubscriber = (function (_super) {
        __extends$1q(DoSubscriber, _super);
        function DoSubscriber(destination, nextOrObserver, error, complete) {
            _super.call(this, destination);
            var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);
            safeSubscriber.syncErrorThrowable = true;
            this.add(safeSubscriber);
            this.safeSubscriber = safeSubscriber;
        }
        DoSubscriber.prototype._next = function (value) {
            var safeSubscriber = this.safeSubscriber;
            safeSubscriber.next(value);
            if (safeSubscriber.syncErrorThrown) {
                this.destination.error(safeSubscriber.syncErrorValue);
            }
            else {
                this.destination.next(value);
            }
        };
        DoSubscriber.prototype._error = function (err) {
            var safeSubscriber = this.safeSubscriber;
            safeSubscriber.error(err);
            if (safeSubscriber.syncErrorThrown) {
                this.destination.error(safeSubscriber.syncErrorValue);
            }
            else {
                this.destination.error(err);
            }
        };
        DoSubscriber.prototype._complete = function () {
            var safeSubscriber = this.safeSubscriber;
            safeSubscriber.complete();
            if (safeSubscriber.syncErrorThrown) {
                this.destination.error(safeSubscriber.syncErrorValue);
            }
            else {
                this.destination.complete();
            }
        };
        return DoSubscriber;
    }(Subscriber_1.Subscriber));

    var throttle_1 = createCommonjsModule(function (module, exports) {
    var __extends = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };


    exports.defaultThrottleConfig = {
        leading: true,
        trailing: false
    };
    /**
     * Emits a value from the source Observable, then ignores subsequent source
     * values for a duration determined by another Observable, then repeats this
     * process.
     *
     * <span class="informal">It's like {@link throttleTime}, but the silencing
     * duration is determined by a second Observable.</span>
     *
     * <img src="./img/throttle.png" width="100%">
     *
     * `throttle` emits the source Observable values on the output Observable
     * when its internal timer is disabled, and ignores source values when the timer
     * is enabled. Initially, the timer is disabled. As soon as the first source
     * value arrives, it is forwarded to the output Observable, and then the timer
     * is enabled by calling the `durationSelector` function with the source value,
     * which returns the "duration" Observable. When the duration Observable emits a
     * value or completes, the timer is disabled, and this process repeats for the
     * next source value.
     *
     * @example <caption>Emit clicks at a rate of at most one click per second</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.throttle(ev => Rx.Observable.interval(1000));
     * result.subscribe(x => console.log(x));
     *
     * @see {@link audit}
     * @see {@link debounce}
     * @see {@link delayWhen}
     * @see {@link sample}
     * @see {@link throttleTime}
     *
     * @param {function(value: T): SubscribableOrPromise} durationSelector A function
     * that receives a value from the source Observable, for computing the silencing
     * duration for each source value, returned as an Observable or a Promise.
     * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults
     * to `{ leading: true, trailing: false }`.
     * @return {Observable<T>} An Observable that performs the throttle operation to
     * limit the rate of emissions from the source.
     * @method throttle
     * @owner Observable
     */
    function throttle(durationSelector, config) {
        if (config === void 0) { config = exports.defaultThrottleConfig; }
        return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };
    }
    exports.throttle = throttle;
    var ThrottleOperator = (function () {
        function ThrottleOperator(durationSelector, leading, trailing) {
            this.durationSelector = durationSelector;
            this.leading = leading;
            this.trailing = trailing;
        }
        ThrottleOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));
        };
        return ThrottleOperator;
    }());
    /**
     * We need this JSDoc comment for affecting ESDoc
     * @ignore
     * @extends {Ignored}
     */
    var ThrottleSubscriber = (function (_super) {
        __extends(ThrottleSubscriber, _super);
        function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
            _super.call(this, destination);
            this.destination = destination;
            this.durationSelector = durationSelector;
            this._leading = _leading;
            this._trailing = _trailing;
            this._hasTrailingValue = false;
        }
        ThrottleSubscriber.prototype._next = function (value) {
            if (this.throttled) {
                if (this._trailing) {
                    this._hasTrailingValue = true;
                    this._trailingValue = value;
                }
            }
            else {
                var duration = this.tryDurationSelector(value);
                if (duration) {
                    this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));
                }
                if (this._leading) {
                    this.destination.next(value);
                    if (this._trailing) {
                        this._hasTrailingValue = true;
                        this._trailingValue = value;
                    }
                }
            }
        };
        ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
            try {
                return this.durationSelector(value);
            }
            catch (err) {
                this.destination.error(err);
                return null;
            }
        };
        /** @deprecated internal use only */ ThrottleSubscriber.prototype._unsubscribe = function () {
            var _a = this, throttled = _a.throttled, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue, _trailing = _a._trailing;
            this._trailingValue = null;
            this._hasTrailingValue = false;
            if (throttled) {
                this.remove(throttled);
                this.throttled = null;
                throttled.unsubscribe();
            }
        };
        ThrottleSubscriber.prototype._sendTrailing = function () {
            var _a = this, destination = _a.destination, throttled = _a.throttled, _trailing = _a._trailing, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue;
            if (throttled && _trailing && _hasTrailingValue) {
                destination.next(_trailingValue);
                this._trailingValue = null;
                this._hasTrailingValue = false;
            }
        };
        ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this._sendTrailing();
            this._unsubscribe();
        };
        ThrottleSubscriber.prototype.notifyComplete = function () {
            this._sendTrailing();
            this._unsubscribe();
        };
        return ThrottleSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    });
    var throttle_2 = throttle_1.defaultThrottleConfig;
    var throttle_3 = throttle_1.throttle;

    var __extends$1r = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ThrottleTimeSubscriber = (function (_super) {
        __extends$1r(ThrottleTimeSubscriber, _super);
        function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
            _super.call(this, destination);
            this.duration = duration;
            this.scheduler = scheduler;
            this.leading = leading;
            this.trailing = trailing;
            this._hasTrailingValue = false;
            this._trailingValue = null;
        }
        ThrottleTimeSubscriber.prototype._next = function (value) {
            if (this.throttled) {
                if (this.trailing) {
                    this._trailingValue = value;
                    this._hasTrailingValue = true;
                }
            }
            else {
                this.add(this.throttled = this.scheduler.schedule(dispatchNext$2, this.duration, { subscriber: this }));
                if (this.leading) {
                    this.destination.next(value);
                }
            }
        };
        ThrottleTimeSubscriber.prototype.clearThrottle = function () {
            var throttled = this.throttled;
            if (throttled) {
                if (this.trailing && this._hasTrailingValue) {
                    this.destination.next(this._trailingValue);
                    this._trailingValue = null;
                    this._hasTrailingValue = false;
                }
                throttled.unsubscribe();
                this.remove(throttled);
                this.throttled = null;
            }
        };
        return ThrottleTimeSubscriber;
    }(Subscriber_1.Subscriber));
    function dispatchNext$2(arg) {
        var subscriber = arg.subscriber;
        subscriber.clearThrottle();
    }

    var __extends$1s = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var TimeInterval = (function () {
        function TimeInterval(value, interval) {
            this.value = value;
            this.interval = interval;
        }
        return TimeInterval;
    }());
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var TimeIntervalSubscriber = (function (_super) {
        __extends$1s(TimeIntervalSubscriber, _super);
        function TimeIntervalSubscriber(destination, scheduler) {
            _super.call(this, destination);
            this.scheduler = scheduler;
            this.lastTime = 0;
            this.lastTime = scheduler.now();
        }
        TimeIntervalSubscriber.prototype._next = function (value) {
            var now = this.scheduler.now();
            var span = now - this.lastTime;
            this.lastTime = now;
            this.destination.next(new TimeInterval(value, span));
        };
        return TimeIntervalSubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$1t = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when duetime elapses.
     *
     * @see {@link timeout}
     *
     * @class TimeoutError
     */
    var TimeoutError = (function (_super) {
        __extends$1t(TimeoutError, _super);
        function TimeoutError() {
            var err = _super.call(this, 'Timeout has occurred');
            this.name = err.name = 'TimeoutError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return TimeoutError;
    }(Error));

    var __extends$1u = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var TimeoutSubscriber = (function (_super) {
        __extends$1u(TimeoutSubscriber, _super);
        function TimeoutSubscriber(destination, absoluteTimeout, waitFor, scheduler, errorInstance) {
            _super.call(this, destination);
            this.absoluteTimeout = absoluteTimeout;
            this.waitFor = waitFor;
            this.scheduler = scheduler;
            this.errorInstance = errorInstance;
            this.action = null;
            this.scheduleTimeout();
        }
        TimeoutSubscriber.dispatchTimeout = function (subscriber) {
            subscriber.error(subscriber.errorInstance);
        };
        TimeoutSubscriber.prototype.scheduleTimeout = function () {
            var action = this.action;
            if (action) {
                // Recycle the action if we've already scheduled one. All the production
                // Scheduler Actions mutate their state/delay time and return themeselves.
                // VirtualActions are immutable, so they create and return a clone. In this
                // case, we need to set the action reference to the most recent VirtualAction,
                // to ensure that's the one we clone from next time.
                this.action = action.schedule(this, this.waitFor);
            }
            else {
                this.add(this.action = this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, this));
            }
        };
        TimeoutSubscriber.prototype._next = function (value) {
            if (!this.absoluteTimeout) {
                this.scheduleTimeout();
            }
            _super.prototype._next.call(this, value);
        };
        /** @deprecated internal use only */ TimeoutSubscriber.prototype._unsubscribe = function () {
            this.action = null;
            this.scheduler = null;
            this.errorInstance = null;
        };
        return TimeoutSubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$1v = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var TimeoutWithSubscriber = (function (_super) {
        __extends$1v(TimeoutWithSubscriber, _super);
        function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
            _super.call(this, destination);
            this.absoluteTimeout = absoluteTimeout;
            this.waitFor = waitFor;
            this.withObservable = withObservable;
            this.scheduler = scheduler;
            this.action = null;
            this.scheduleTimeout();
        }
        TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {
            var withObservable = subscriber.withObservable;
            subscriber._unsubscribeAndRecycle();
            subscriber.add(subscribeToResult_1.subscribeToResult(subscriber, withObservable));
        };
        TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
            var action = this.action;
            if (action) {
                // Recycle the action if we've already scheduled one. All the production
                // Scheduler Actions mutate their state/delay time and return themeselves.
                // VirtualActions are immutable, so they create and return a clone. In this
                // case, we need to set the action reference to the most recent VirtualAction,
                // to ensure that's the one we clone from next time.
                this.action = action.schedule(this, this.waitFor);
            }
            else {
                this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
            }
        };
        TimeoutWithSubscriber.prototype._next = function (value) {
            if (!this.absoluteTimeout) {
                this.scheduleTimeout();
            }
            _super.prototype._next.call(this, value);
        };
        /** @deprecated internal use only */ TimeoutWithSubscriber.prototype._unsubscribe = function () {
            this.action = null;
            this.scheduler = null;
            this.withObservable = null;
        };
        return TimeoutWithSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$1w = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var WindowSubscriber = (function (_super) {
        __extends$1w(WindowSubscriber, _super);
        function WindowSubscriber(destination) {
            _super.call(this, destination);
            this.window = new Subject_1.Subject();
            destination.next(this.window);
        }
        WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.openWindow();
        };
        WindowSubscriber.prototype.notifyError = function (error, innerSub) {
            this._error(error);
        };
        WindowSubscriber.prototype.notifyComplete = function (innerSub) {
            this._complete();
        };
        WindowSubscriber.prototype._next = function (value) {
            this.window.next(value);
        };
        WindowSubscriber.prototype._error = function (err) {
            this.window.error(err);
            this.destination.error(err);
        };
        WindowSubscriber.prototype._complete = function () {
            this.window.complete();
            this.destination.complete();
        };
        /** @deprecated internal use only */ WindowSubscriber.prototype._unsubscribe = function () {
            this.window = null;
        };
        WindowSubscriber.prototype.openWindow = function () {
            var prevWindow = this.window;
            if (prevWindow) {
                prevWindow.complete();
            }
            var destination = this.destination;
            var newWindow = this.window = new Subject_1.Subject();
            destination.next(newWindow);
        };
        return WindowSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$1x = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var WindowCountSubscriber = (function (_super) {
        __extends$1x(WindowCountSubscriber, _super);
        function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
            _super.call(this, destination);
            this.destination = destination;
            this.windowSize = windowSize;
            this.startWindowEvery = startWindowEvery;
            this.windows = [new Subject_1.Subject()];
            this.count = 0;
            destination.next(this.windows[0]);
        }
        WindowCountSubscriber.prototype._next = function (value) {
            var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
            var destination = this.destination;
            var windowSize = this.windowSize;
            var windows = this.windows;
            var len = windows.length;
            for (var i = 0; i < len && !this.closed; i++) {
                windows[i].next(value);
            }
            var c = this.count - windowSize + 1;
            if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
                windows.shift().complete();
            }
            if (++this.count % startWindowEvery === 0 && !this.closed) {
                var window_1 = new Subject_1.Subject();
                windows.push(window_1);
                destination.next(window_1);
            }
        };
        WindowCountSubscriber.prototype._error = function (err) {
            var windows = this.windows;
            if (windows) {
                while (windows.length > 0 && !this.closed) {
                    windows.shift().error(err);
                }
            }
            this.destination.error(err);
        };
        WindowCountSubscriber.prototype._complete = function () {
            var windows = this.windows;
            if (windows) {
                while (windows.length > 0 && !this.closed) {
                    windows.shift().complete();
                }
            }
            this.destination.complete();
        };
        /** @deprecated internal use only */ WindowCountSubscriber.prototype._unsubscribe = function () {
            this.count = 0;
            this.windows = null;
        };
        return WindowCountSubscriber;
    }(Subscriber_1.Subscriber));

    var __extends$1y = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var CountedSubject = (function (_super) {
        __extends$1y(CountedSubject, _super);
        function CountedSubject() {
            _super.apply(this, arguments);
            this._numberOfNextedValues = 0;
        }
        CountedSubject.prototype.next = function (value) {
            this._numberOfNextedValues++;
            _super.prototype.next.call(this, value);
        };
        Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", {
            get: function () {
                return this._numberOfNextedValues;
            },
            enumerable: true,
            configurable: true
        });
        return CountedSubject;
    }(Subject_1.Subject));
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var WindowTimeSubscriber = (function (_super) {
        __extends$1y(WindowTimeSubscriber, _super);
        function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
            _super.call(this, destination);
            this.destination = destination;
            this.windowTimeSpan = windowTimeSpan;
            this.windowCreationInterval = windowCreationInterval;
            this.maxWindowSize = maxWindowSize;
            this.scheduler = scheduler;
            this.windows = [];
            var window = this.openWindow();
            if (windowCreationInterval !== null && windowCreationInterval >= 0) {
                var closeState = { subscriber: this, window: window, context: null };
                var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: this, scheduler: scheduler };
                this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
                this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
            }
            else {
                var timeSpanOnlyState = { subscriber: this, window: window, windowTimeSpan: windowTimeSpan };
                this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
            }
        }
        WindowTimeSubscriber.prototype._next = function (value) {
            var windows = this.windows;
            var len = windows.length;
            for (var i = 0; i < len; i++) {
                var window_1 = windows[i];
                if (!window_1.closed) {
                    window_1.next(value);
                    if (window_1.numberOfNextedValues >= this.maxWindowSize) {
                        this.closeWindow(window_1);
                    }
                }
            }
        };
        WindowTimeSubscriber.prototype._error = function (err) {
            var windows = this.windows;
            while (windows.length > 0) {
                windows.shift().error(err);
            }
            this.destination.error(err);
        };
        WindowTimeSubscriber.prototype._complete = function () {
            var windows = this.windows;
            while (windows.length > 0) {
                var window_2 = windows.shift();
                if (!window_2.closed) {
                    window_2.complete();
                }
            }
            this.destination.complete();
        };
        WindowTimeSubscriber.prototype.openWindow = function () {
            var window = new CountedSubject();
            this.windows.push(window);
            var destination = this.destination;
            destination.next(window);
            return window;
        };
        WindowTimeSubscriber.prototype.closeWindow = function (window) {
            window.complete();
            var windows = this.windows;
            windows.splice(windows.indexOf(window), 1);
        };
        return WindowTimeSubscriber;
    }(Subscriber_1.Subscriber));
    function dispatchWindowTimeSpanOnly(state) {
        var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
        if (window) {
            subscriber.closeWindow(window);
        }
        state.window = subscriber.openWindow();
        this.schedule(state, windowTimeSpan);
    }
    function dispatchWindowCreation(state) {
        var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
        var window = subscriber.openWindow();
        var action = this;
        var context = { action: action, subscription: null };
        var timeSpanState = { subscriber: subscriber, window: window, context: context };
        context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
        action.add(context.subscription);
        action.schedule(state, windowCreationInterval);
    }
    function dispatchWindowClose(state) {
        var subscriber = state.subscriber, window = state.window, context = state.context;
        if (context && context.action && context.subscription) {
            context.action.remove(context.subscription);
        }
        subscriber.closeWindow(window);
    }

    var __extends$1z = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var WindowToggleSubscriber = (function (_super) {
        __extends$1z(WindowToggleSubscriber, _super);
        function WindowToggleSubscriber(destination, openings, closingSelector) {
            _super.call(this, destination);
            this.openings = openings;
            this.closingSelector = closingSelector;
            this.contexts = [];
            this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));
        }
        WindowToggleSubscriber.prototype._next = function (value) {
            var contexts = this.contexts;
            if (contexts) {
                var len = contexts.length;
                for (var i = 0; i < len; i++) {
                    contexts[i].window.next(value);
                }
            }
        };
        WindowToggleSubscriber.prototype._error = function (err) {
            var contexts = this.contexts;
            this.contexts = null;
            if (contexts) {
                var len = contexts.length;
                var index = -1;
                while (++index < len) {
                    var context = contexts[index];
                    context.window.error(err);
                    context.subscription.unsubscribe();
                }
            }
            _super.prototype._error.call(this, err);
        };
        WindowToggleSubscriber.prototype._complete = function () {
            var contexts = this.contexts;
            this.contexts = null;
            if (contexts) {
                var len = contexts.length;
                var index = -1;
                while (++index < len) {
                    var context = contexts[index];
                    context.window.complete();
                    context.subscription.unsubscribe();
                }
            }
            _super.prototype._complete.call(this);
        };
        /** @deprecated internal use only */ WindowToggleSubscriber.prototype._unsubscribe = function () {
            var contexts = this.contexts;
            this.contexts = null;
            if (contexts) {
                var len = contexts.length;
                var index = -1;
                while (++index < len) {
                    var context = contexts[index];
                    context.window.unsubscribe();
                    context.subscription.unsubscribe();
                }
            }
        };
        WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (outerValue === this.openings) {
                var closingSelector = this.closingSelector;
                var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);
                if (closingNotifier === errorObject.errorObject) {
                    return this.error(errorObject.errorObject.e);
                }
                else {
                    var window_1 = new Subject_1.Subject();
                    var subscription = new Subscription_1.Subscription();
                    var context = { window: window_1, subscription: subscription };
                    this.contexts.push(context);
                    var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
                    if (innerSubscription.closed) {
                        this.closeWindow(this.contexts.length - 1);
                    }
                    else {
                        innerSubscription.context = context;
                        subscription.add(innerSubscription);
                    }
                    this.destination.next(window_1);
                }
            }
            else {
                this.closeWindow(this.contexts.indexOf(outerValue));
            }
        };
        WindowToggleSubscriber.prototype.notifyError = function (err) {
            this.error(err);
        };
        WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
            if (inner !== this.openSubscription) {
                this.closeWindow(this.contexts.indexOf(inner.context));
            }
        };
        WindowToggleSubscriber.prototype.closeWindow = function (index) {
            if (index === -1) {
                return;
            }
            var contexts = this.contexts;
            var context = contexts[index];
            var window = context.window, subscription = context.subscription;
            contexts.splice(index, 1);
            window.complete();
            subscription.unsubscribe();
        };
        return WindowToggleSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$1A = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var WindowSubscriber$1 = (function (_super) {
        __extends$1A(WindowSubscriber, _super);
        function WindowSubscriber(destination, closingSelector) {
            _super.call(this, destination);
            this.destination = destination;
            this.closingSelector = closingSelector;
            this.openWindow();
        }
        WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.openWindow(innerSub);
        };
        WindowSubscriber.prototype.notifyError = function (error, innerSub) {
            this._error(error);
        };
        WindowSubscriber.prototype.notifyComplete = function (innerSub) {
            this.openWindow(innerSub);
        };
        WindowSubscriber.prototype._next = function (value) {
            this.window.next(value);
        };
        WindowSubscriber.prototype._error = function (err) {
            this.window.error(err);
            this.destination.error(err);
            this.unsubscribeClosingNotification();
        };
        WindowSubscriber.prototype._complete = function () {
            this.window.complete();
            this.destination.complete();
            this.unsubscribeClosingNotification();
        };
        WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
            if (this.closingNotification) {
                this.closingNotification.unsubscribe();
            }
        };
        WindowSubscriber.prototype.openWindow = function (innerSub) {
            if (innerSub === void 0) { innerSub = null; }
            if (innerSub) {
                this.remove(innerSub);
                innerSub.unsubscribe();
            }
            var prevWindow = this.window;
            if (prevWindow) {
                prevWindow.complete();
            }
            var window = this.window = new Subject_1.Subject();
            this.destination.next(window);
            var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
            if (closingNotifier === errorObject.errorObject) {
                var err = errorObject.errorObject.e;
                this.destination.error(err);
                this.window.error(err);
            }
            else {
                this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));
            }
        };
        return WindowSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$1B = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var WithLatestFromSubscriber = (function (_super) {
        __extends$1B(WithLatestFromSubscriber, _super);
        function WithLatestFromSubscriber(destination, observables, project) {
            _super.call(this, destination);
            this.observables = observables;
            this.project = project;
            this.toRespond = [];
            var len = observables.length;
            this.values = new Array(len);
            for (var i = 0; i < len; i++) {
                this.toRespond.push(i);
            }
            for (var i = 0; i < len; i++) {
                var observable = observables[i];
                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
            }
        }
        WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.values[outerIndex] = innerValue;
            var toRespond = this.toRespond;
            if (toRespond.length > 0) {
                var found = toRespond.indexOf(outerIndex);
                if (found !== -1) {
                    toRespond.splice(found, 1);
                }
            }
        };
        WithLatestFromSubscriber.prototype.notifyComplete = function () {
            // noop
        };
        WithLatestFromSubscriber.prototype._next = function (value) {
            if (this.toRespond.length === 0) {
                var args = [value].concat(this.values);
                if (this.project) {
                    this._tryProject(args);
                }
                else {
                    this.destination.next(args);
                }
            }
        };
        WithLatestFromSubscriber.prototype._tryProject = function (args) {
            var result;
            try {
                result = this.project.apply(this, args);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return WithLatestFromSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));

    var __extends$1C = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ZipSubscriber = (function (_super) {
        __extends$1C(ZipSubscriber, _super);
        function ZipSubscriber(destination, project, values) {
            if (values === void 0) { values = Object.create(null); }
            _super.call(this, destination);
            this.iterators = [];
            this.active = 0;
            this.project = (typeof project === 'function') ? project : null;
            this.values = values;
        }
        ZipSubscriber.prototype._next = function (value) {
            var iterators = this.iterators;
            if (isArray.isArray(value)) {
                iterators.push(new StaticArrayIterator(value));
            }
            else if (typeof value[iterator.iterator] === 'function') {
                iterators.push(new StaticIterator(value[iterator.iterator]()));
            }
            else {
                iterators.push(new ZipBufferIterator(this.destination, this, value));
            }
        };
        ZipSubscriber.prototype._complete = function () {
            var iterators = this.iterators;
            var len = iterators.length;
            if (len === 0) {
                this.destination.complete();
                return;
            }
            this.active = len;
            for (var i = 0; i < len; i++) {
                var iterator$$1 = iterators[i];
                if (iterator$$1.stillUnsubscribed) {
                    this.add(iterator$$1.subscribe(iterator$$1, i));
                }
                else {
                    this.active--; // not an observable
                }
            }
        };
        ZipSubscriber.prototype.notifyInactive = function () {
            this.active--;
            if (this.active === 0) {
                this.destination.complete();
            }
        };
        ZipSubscriber.prototype.checkIterators = function () {
            var iterators = this.iterators;
            var len = iterators.length;
            var destination = this.destination;
            // abort if not all of them have values
            for (var i = 0; i < len; i++) {
                var iterator$$1 = iterators[i];
                if (typeof iterator$$1.hasValue === 'function' && !iterator$$1.hasValue()) {
                    return;
                }
            }
            var shouldComplete = false;
            var args = [];
            for (var i = 0; i < len; i++) {
                var iterator$$1 = iterators[i];
                var result = iterator$$1.next();
                // check to see if it's completed now that you've gotten
                // the next value.
                if (iterator$$1.hasCompleted()) {
                    shouldComplete = true;
                }
                if (result.done) {
                    destination.complete();
                    return;
                }
                args.push(result.value);
            }
            if (this.project) {
                this._tryProject(args);
            }
            else {
                destination.next(args);
            }
            if (shouldComplete) {
                destination.complete();
            }
        };
        ZipSubscriber.prototype._tryProject = function (args) {
            var result;
            try {
                result = this.project.apply(this, args);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return ZipSubscriber;
    }(Subscriber_1.Subscriber));
    var StaticIterator = (function () {
        function StaticIterator(iterator$$1) {
            this.iterator = iterator$$1;
            this.nextResult = iterator$$1.next();
        }
        StaticIterator.prototype.hasValue = function () {
            return true;
        };
        StaticIterator.prototype.next = function () {
            var result = this.nextResult;
            this.nextResult = this.iterator.next();
            return result;
        };
        StaticIterator.prototype.hasCompleted = function () {
            var nextResult = this.nextResult;
            return nextResult && nextResult.done;
        };
        return StaticIterator;
    }());
    var StaticArrayIterator = (function () {
        function StaticArrayIterator(array) {
            this.array = array;
            this.index = 0;
            this.length = 0;
            this.length = array.length;
        }
        StaticArrayIterator.prototype[iterator.iterator] = function () {
            return this;
        };
        StaticArrayIterator.prototype.next = function (value) {
            var i = this.index++;
            var array = this.array;
            return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
        };
        StaticArrayIterator.prototype.hasValue = function () {
            return this.array.length > this.index;
        };
        StaticArrayIterator.prototype.hasCompleted = function () {
            return this.array.length === this.index;
        };
        return StaticArrayIterator;
    }());
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ZipBufferIterator = (function (_super) {
        __extends$1C(ZipBufferIterator, _super);
        function ZipBufferIterator(destination, parent, observable) {
            _super.call(this, destination);
            this.parent = parent;
            this.observable = observable;
            this.stillUnsubscribed = true;
            this.buffer = [];
            this.isComplete = false;
        }
        ZipBufferIterator.prototype[iterator.iterator] = function () {
            return this;
        };
        // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next
        //    this is legit because `next()` will never be called by a subscription in this case.
        ZipBufferIterator.prototype.next = function () {
            var buffer = this.buffer;
            if (buffer.length === 0 && this.isComplete) {
                return { value: null, done: true };
            }
            else {
                return { value: buffer.shift(), done: false };
            }
        };
        ZipBufferIterator.prototype.hasValue = function () {
            return this.buffer.length > 0;
        };
        ZipBufferIterator.prototype.hasCompleted = function () {
            return this.buffer.length === 0 && this.isComplete;
        };
        ZipBufferIterator.prototype.notifyComplete = function () {
            if (this.buffer.length > 0) {
                this.isComplete = true;
                this.parent.notifyInactive();
            }
            else {
                this.destination.complete();
            }
        };
        ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.buffer.push(innerValue);
            this.parent.checkIterators();
        };
        ZipBufferIterator.prototype.subscribe = function (value, index) {
            return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);
        };
        return ZipBufferIterator;
    }(OuterSubscriber_1.OuterSubscriber));

    var catchError$1 = catchError_1.catchError;

    var throttle = throttle_1.throttle;

    Observable_1.Observable.prototype.map = map_2$1.map;

    Observable_1.Observable.prototype.mergeMap = mergeMap_2$1.mergeMap;
    Observable_1.Observable.prototype.flatMap = mergeMap_2$1.mergeMap;

    // HACK: does nothing, because `toPromise` now lives on the `Observable` itself.
    // leaving this module here to prevent breakage.

    var __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$3 = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var SugarService = /** @class */ (function () {
        function SugarService(http) {
            this.http = http;
            this.roleList = [];
            this.teamList = [];
            this.userList = [];
            this.itemList = [];
            this.endPoint = "http://sh.pvcrm.com/sugarcrm/sugarcrm/api/";
            //
        }
        SugarService.prototype.getUserById = function (id) {
            return this.getData("users/" + id);
        };
        SugarService.prototype.getUsers = function () {
            return this.getData("users");
        };
        SugarService.prototype.getUserByUsername = function (username) {
            return this.getData("users")
                .then(function (users) { return users.filter(function (user) { return user.attributes["userName"] === username; }); })
                .then(function (user) { return user[0]; });
        };
        SugarService.prototype.getUserByEmail = function (email) {
            return this.getData("users")
                .then(function (users) { return users.filter(function (user) { return user.attributes["email"] === email; }); })
                .then(function (user) { return user[0]; });
        };
        SugarService.prototype.getUsersByTeam = function (team) {
            return this.getData("users")
                .then(function (users) { return users.filter(function (user) { return user.attributes["teamId"] === team; }); });
        };
        SugarService.prototype.getRoles = function () {
            return this.getData("roles");
        };
        SugarService.prototype.postDataToSugar = function (body) {
            return this.http.post(this.endPoint, body)
                .pipe(catchError$1(this.errorHandler));
        };
        SugarService.prototype.errorHandler = function (error) {
            return _throw_1(error);
        };
        SugarService.prototype.getData = function (item) {
            return this.http.get(this.endPoint + ("" + item))
                .map(function (array) { return array["data"]; })
                .toPromise();
        };
        SugarService = __decorate$4([
            Injectable(),
            __metadata$3("design:paramtypes", [HttpClient])
        ], SugarService);
        return SugarService;
    }());

    var __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$4 = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    // import { of } from "rxjs/observable/of";
    var SwitchVoxService = /** @class */ (function () {
        function SwitchVoxService(http) {
            this.http = http;
            this.username = "admin";
            this.password = "Nzv8P7!6CZp2x+#";
            this.endPoint = "https://sw.marcovasco.fr/xml";
            this.body = "<request method=\"switchvox.extensions.getVoicemailInfo\" version=\"17487\">\n  <parameters>\n  <sort_field>extension</sort_field>\n  <sort_order>ASC</sort_order>\n  <items_per_page>50</items_per_page>\n  <page_number>1</page_number>\n  </parameters>\n  </request>";
            //
        }
        SwitchVoxService.prototype.getData = function () {
            var headers = new HttpHeaders()
                .append("Content-Type", "application/xml")
                .append("Content-Type", "application/x-www-form-urlencoded")
                .append("Authorization", "Basic " + btoa(this.username + ":" + this.password));
            return this.http.post(this.endPoint, this.body, { headers: headers });
        };
        SwitchVoxService = __decorate$5([
            Injectable(),
            __metadata$4("design:paramtypes", [HttpClient])
        ], SwitchVoxService);
        return SwitchVoxService;
    }());

    var __extends$1D = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var User = /** @class */ (function (_super) {
        __extends$1D(User, _super);
        function User(data) {
            var _this = _super.call(this, data) || this;
            _this.status = "Active";
            _this.employeeStatus = "Active";
            _this.isAdmin = "0";
            _this.apiPortalUser = "0";
            _this.assignationNotification = "0";
            // used for mapping with api object
            if (data != null) {
                _super.prototype.defaultConstructor.call(_this, data);
            }
            return _this;
        }
        return User;
    }(Model));

    var __decorate$6 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$5 = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var CreateUserFormComponent = /** @class */ (function () {
        function CreateUserFormComponent(fieldsService, switchvoxService, sugarService, parserService, route) {
            this.fieldsService = fieldsService;
            this.switchvoxService = switchvoxService;
            this.sugarService = sugarService;
            this.parserService = parserService;
            this.route = route;
            this.passwordExists = false;
            this.usersFromSugar = [];
            //
        }
        CreateUserFormComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.fieldsService.getData()
                .then(function (res) { return _this.fields = new Fields(res[0]); });
            this.route.data
                .subscribe(function (data) {
                var _a = [data.userData[0], data.userData[1]], usr = _a[0], users = _a[1];
                _this.currentUser = new User(usr);
                users.forEach(function (user) { return _this.usersFromSugar.push(new User(user)); });
            });
        };
        CreateUserFormComponent.prototype.onParentChange = function (_a) {
            var e = _a.e, id = _a.id;
            // const myField = this.fields.others.find((field) => field.id === id);
            // myField.checked = e;
        };
        CreateUserFormComponent.prototype.onSubmit = function (form) {
            // this.sugarService.postDataToSugar(form)
            // .subscribe(
            //            (data) => console.log("DATA- ", data),
            //            (error) => this.errorMsg = error.statusText);
        };
        CreateUserFormComponent.prototype.trackByFn = function (index, item) {
            return item.id; // or index
        };
        CreateUserFormComponent.prototype.eraseFields = function (fields) {
            fields.forEach(function (field) { return field = ""; });
        };
        CreateUserFormComponent.prototype.unCheck = function (array) {
            array.forEach(function (x) { return x.checked = false; });
        };
        CreateUserFormComponent.prototype.unCheckArrays = function (arrays) {
            var _this = this;
            arrays.forEach(function (array) { return _this.unCheck(array); });
        };
        CreateUserFormComponent.prototype.resetSugar = function () {
            this.fields.inactiveStatus = false,
                this.fields.inactiveEmployee = false,
                this.fields.leadsMin = 15;
            this.fields.leadsMax = 45;
            this.fields.userValue = "user_default_xx";
            this.fields.selectedManager = null,
                this.eraseFields([
                    this.fields.codeSON,
                    this.fields.codeTourplan,
                    this.fields.codevad,
                    this.fields.groupes,
                    this.fields.inbound,
                    this.fields.outbound,
                    this.fields.phoneExtension,
                    this.fields.phoneNumber,
                    this.fields.selectedFunction,
                    this.fields.selectedOffice,
                    this.fields.selectedOrganisation,
                    this.fields.title,
                ]);
            this.unCheckArrays([
                this.fields.roles,
                this.fields.services,
                this.fields.others,
                this.fields.teams,
                this.fields.destinations,
                this.fields.orgas,
            ]);
        };
        CreateUserFormComponent = __decorate$6([
            Component({
                selector: "mv-app-create-user-form",
                templateUrl: "./create-user-form.component.html",
            }),
            __metadata$5("design:paramtypes", [FieldsService,
                SwitchVoxService,
                SugarService,
                ParserService,
                ActivatedRoute])
        ], CreateUserFormComponent);
        return CreateUserFormComponent;
    }());

    var __decorate$7 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$6 = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var DisableUserFormComponent = /** @class */ (function () {
        function DisableUserFormComponent(fieldsService, route, sugar) {
            this.fieldsService = fieldsService;
            this.route = route;
            this.sugar = sugar;
            this.users = [];
            this.enableAdd = true;
            this.disableGoogle = false;
            this.changePassword = false;
            this.disableSugarAccount = false;
            //
        }
        DisableUserFormComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.fieldsService.getData()
                .then(function (res) { return _this.fields = new Fields(res[0]); })
                .then(function (res) { return console.log(_this.fields); });
            this.sugar.getUsers()
                .then(function (users) { return users.forEach(function (user) {
                user["checked"] = false;
                _this.users.push(new User(user));
            }); })
                .then(function (res) { return console.log("this.users", _this.users); });
            this.route.paramMap.subscribe(function (params) { return (params); });
        };
        DisableUserFormComponent.prototype.trackByFn = function (index, item) {
            return item.id;
        };
        DisableUserFormComponent = __decorate$7([
            Component({
                selector: "mv-app-disable-user-form",
                styleUrls: ["./disable-user-form.css"],
                templateUrl: "./disable-user-form.component.html",
            }),
            __metadata$6("design:paramtypes", [FieldsService,
                ActivatedRoute,
                SugarService])
        ], DisableUserFormComponent);
        return DisableUserFormComponent;
    }());

    var __decorate$8 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$7 = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var ImportComponent = /** @class */ (function () {
        // tslint:enable:max-line-length
        function ImportComponent(parserService) {
            this.parserService = parserService;
            this.numberOfFields = 22;
            this.users = [];
            // tslint:disable:max-line-length
            this.csv = '"Cindy","Guerineau","","New","Ventes","","","cguerineau@marcovasco.fr","01 76 64 72 87","1287","cg11215!","","cguerineau","0","0","Active","0","Active","0","1","15","45","Coralie","Viarnes","","New","Ventes","","","cviarnes@marcovasco.fr","01 56 67 01 00","2100","cv19833!","","cviarnes","0","0","Active","0","Active","0","1","15","45","Nejma","Mebarki","","New","Ventes","","","nmebarki@marcovasco.fr","01 76 64 72 92","1292","nm62684!","","nmebarki","0","0","Active","0","Active","0","1","15","45","Fanny","Marh-Zhoock","","New","Ventes","","","farhzhoock@marcovasco.fr","01 56 67 00 88","2088","fm48032!","","farhzhoock","0","0","Active","0","Active","0","1","15","45"';
            //
        }
        ImportComponent.prototype.parse = function (d) {
            var _this = this;
            var raw = this.parserService.getData(d);
            if (raw.length % this.numberOfFields !== 0) {
                alert("Wrong number of values. Each user should have " + this.numberOfFields + " values");
                return;
            }
            this.usersData = this.chunkArray(raw, this.numberOfFields);
            this.usersData.forEach(function (user) {
                var myObj = {};
                var _a = user.slice(), firstname = _a[0], lastname = _a[1], id = _a[2], functionId = _a[3], serviceId = _a[4], officeId = _a[5], tourplanID = _a[6], email = _a[7], phoneWork = _a[8], phoneAsterisk = _a[9], password = _a[10], // not in user model
                managerId = _a[11], userName = _a[12], isAdmin = _a[13], apiPortalUser = _a[14], status = _a[15], assignationNotification = _a[16], employeeStatus = _a[17], groupUser = _a[18], // not in user model
                numberOfTeams = _a[19], // not in user model
                leadsMin = _a[20], leadsMax = _a[21];
                myObj["firstname"] = firstname;
                myObj["lastname"] = lastname;
                myObj["id"] = id;
                myObj["functionId"] = functionId;
                myObj["serviceId"] = serviceId;
                myObj["officeId"] = officeId;
                myObj["tourplanID"] = tourplanID;
                myObj["email"] = email;
                myObj["phoneWork"] = phoneWork;
                myObj["phoneAsterisk"] = phoneAsterisk;
                myObj["password"] = password;
                myObj["managerId"] = managerId;
                myObj["userName"] = userName;
                myObj["isAdmin"] = isAdmin;
                myObj["apiPortalUser"] = apiPortalUser;
                myObj["status"] = status;
                myObj["assignationNotification"] = assignationNotification;
                myObj["employeeStatus"] = employeeStatus;
                myObj["groupUser"] = groupUser;
                myObj["numberOfTeams"] = numberOfTeams;
                myObj["leadsMin"] = leadsMin;
                myObj["leadsMax"] = leadsMax;
                _this.users.push(new User(myObj));
            });
            console.log(this.users);
        };
        ImportComponent.prototype.chunkArray = function (myArray, chunkSize) {
            var results = [];
            while (myArray.length) {
                results.push(myArray.splice(0, chunkSize));
            }
            return results;
        };
        ImportComponent.prototype.ngOnInit = function () {
            //
        };
        ImportComponent.prototype.trackByFn = function (item, id) {
            return id;
        };
        ImportComponent = __decorate$8([
            Component({
                selector: "mv-import",
                styleUrls: ["./import.component.css"],
                templateUrl: "./import.component.html",
            }),
            __metadata$7("design:paramtypes", [ParserService])
        ], ImportComponent);
        return ImportComponent;
    }());

    var __extends$1E = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var Role = /** @class */ (function (_super) {
        __extends$1E(Role, _super);
        function Role(data) {
            var _this = _super.call(this, data) || this;
            _this.type = "users";
            return _this;
        }
        return Role;
    }(Model));

    var __decorate$9 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$8 = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var RolesComponent = /** @class */ (function () {
        // @ViewChild("disableForm") public form: any;
        function RolesComponent(sugarService) {
            this.sugarService = sugarService;
            this.rolesFromSugar = [];
            // constructor
        }
        RolesComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.sugarService.getRoles()
                .then(function (roles) {
                roles.forEach(function (role) {
                    _this.rolesFromSugar.push(new Role(role));
                });
            });
        };
        RolesComponent.prototype.trackByFn = function (index, item) {
            return index; // or item.id
        };
        RolesComponent = __decorate$9([
            Component({
                selector: "mv-app-roles",
                styleUrls: ["./roles.component.css"],
                templateUrl: "./roles.component.html",
            }),
            __metadata$8("design:paramtypes", [SugarService])
        ], RolesComponent);
        return RolesComponent;
    }());

    var __decorate$a = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$9 = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var UserComponent = /** @class */ (function () {
        // @ViewChild("disableForm") public form: any;
        function UserComponent(sugarService) {
            this.sugarService = sugarService;
            // constructor
        }
        UserComponent.prototype.ngOnInit = function () {
            var _this = this;
            var id = "4fd88823-0f55-2688-0f84-5bee19677712";
            this.sugarService.getUserById(id)
                .then(function (user) { return _this.user = new User(user); });
        };
        UserComponent.prototype.trackByFn = function (index, item) {
            return index; // or item.id
        };
        UserComponent = __decorate$a([
            Component({
                selector: "mv-app-user",
                styleUrls: ["./user.component.css"],
                templateUrl: "./user.component.html",
            }),
            __metadata$9("design:paramtypes", [SugarService])
        ], UserComponent);
        return UserComponent;
    }());

    var __decorate$b = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$a = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var UsersComponent = /** @class */ (function () {
        function UsersComponent(sugarService) {
            this.sugarService = sugarService;
            this.usersFromSugar = [];
            this.filteredUsers = [];
            this.filter = "All";
            // constructor
        }
        UsersComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.sugarService.getUsers()
                .then(function (users) { return users.forEach(function (user) { return _this.usersFromSugar.push(new User(user)); }); })
                .then(function (users) { return _this.filteredUsers = _this.usersFromSugar; });
        };
        UsersComponent.prototype.filterUsers = function (prop) {
            switch (prop) {
                case "inactive":
                    this.filter = "Inactive";
                    // tslint:disable-next-line:max-line-length
                    this.filteredUsers = this.usersFromSugar.filter(function (user) { return user.status !== "Active" || user.employeeStatus !== "Active"; });
                    break;
                case "active":
                    this.filter = "Active";
                    // tslint:disable-next-line:max-line-length
                    this.filteredUsers = this.usersFromSugar.filter(function (user) { return user.status === "Active" && user.employeeStatus === "Active"; });
                    break;
                case "all":
                    this.filter = "All";
                    this.filteredUsers = this.usersFromSugar;
                    break;
                default:
                    console.error("Users not filtered");
                    break;
            }
        };
        UsersComponent.prototype.trackByFn = function (index, item) {
            return index; // or item.id
        };
        UsersComponent = __decorate$b([
            Component({
                selector: "mv-app-users",
                styleUrls: ["./users.component.css"],
                templateUrl: "./users.component.html",
            }),
            __metadata$a("design:paramtypes", [SugarService])
        ], UsersComponent);
        return UsersComponent;
    }());

    var __decorate$c = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$b = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var SugarResolverService = /** @class */ (function () {
        function SugarResolverService(sugar) {
            this.sugar = sugar;
            //
        }
        SugarResolverService.prototype.resolve = function (route, state) {
            var id = route.params.id;
            var userPromise = this.sugar.getUserById(id);
            var usersPromise = this.sugar.getUsers();
            var promises = [userPromise, usersPromise];
            return new Promise(function (resolve, reject) {
                Promise.all(promises)
                    .then(function (res) { return resolve(res); }, function (error) { return reject("Probleme"); });
            });
        };
        SugarResolverService = __decorate$c([
            Injectable(),
            __metadata$b("design:paramtypes", [SugarService])
        ], SugarResolverService);
        return SugarResolverService;
    }());

    /* tslint:disable object-literal-sort-keys */
    var AppRoutes = [
        {
            path: "users/:id",
            component: CreateUserFormComponent,
            resolve: { userData: SugarResolverService },
        },
        {
            path: "create",
            component: CreateUserFormComponent,
        },
        {
            path: "users",
            component: UsersComponent,
        },
        {
            path: "user",
            component: UserComponent,
        },
        {
            path: "disable/:id",
            component: DisableUserFormComponent,
        },
        {
            path: "disable",
            component: DisableUserFormComponent,
        },
        {
            path: "roles",
            component: RolesComponent,
        },
        {
            path: "import",
            component: ImportComponent,
        },
        { path: "**", redirectTo: "users" },
    ];
    /* tslint:enable */

    /**
     * @license Angular v4.4.7
     * (c) 2010-2017 Google, Inc. https://angular.io/
     * License: MIT
     */
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * AnimationBuilder is an injectable service that is available when the {\@link
     * BrowserAnimationsModule BrowserAnimationsModule} or {\@link NoopAnimationsModule
     * NoopAnimationsModule} modules are used within an application.
     *
     * The purpose if this service is to produce an animation sequence programmatically within an
     * angular component or directive.
     *
     * Programmatic animations are first built and then a player is created when the build animation is
     * attached to an element.
     *
     * ```ts
     * // remember to include the BrowserAnimationsModule module for this to work...
     * import {AnimationBuilder} from '\@angular/animations';
     *
     * class MyCmp {
     *   constructor(private _builder: AnimationBuilder) {}
     *
     *   makeAnimation(element: any) {
     *     // first build the animation
     *     const myAnimation = this._builder.build([
     *       style({ width: 0 }),
     *       animate(1000, style({ width: '100px' }))
     *     ]);
     *
     *     // then create a player from it
     *     const player = myAnimation.create(element);
     *
     *     player.play();
     *   }
     * }
     * ```
     *
     * When an animation is built an instance of {\@link AnimationFactory AnimationFactory} will be
     * returned. Using that an {\@link AnimationPlayer AnimationPlayer} can be created which can then be
     * used to start the animation.
     *
     * \@experimental Animation support is experimental.
     * @abstract
     */
    var AnimationBuilder = (function () {
        function AnimationBuilder() {
        }
        /**
         * @abstract
         * @param {?} animation
         * @return {?}
         */
        AnimationBuilder.prototype.build = function (animation) { };
        return AnimationBuilder;
    }());
    /**
     * An instance of `AnimationFactory` is returned from {\@link AnimationBuilder#build
     * AnimationBuilder.build}.
     *
     * \@experimental Animation support is experimental.
     * @abstract
     */
    var AnimationFactory = (function () {
        function AnimationFactory() {
        }
        /**
         * @abstract
         * @param {?} element
         * @param {?=} options
         * @return {?}
         */
        AnimationFactory.prototype.create = function (element, options) { };
        return AnimationFactory;
    }());
    /**
     * \@experimental Animation support is experimental.
     */
    var AUTO_STYLE = '*';
    /**
     * `sequence` is an animation-specific function that is designed to be used inside of Angular's
     * animation DSL language. If this information is new, please navigate to the {\@link
     * Component#animations component animations metadata page} to gain a better understanding of
     * how animations in Angular are used.
     *
     * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used by
     * default when an array is passed as animation data into {\@link transition transition}.)
     *
     * The `sequence` function can either be used within a {\@link group group} or a {\@link transition
     * transition} and it will only continue to the next instruction once each of the inner animation
     * steps have completed.
     *
     * To perform animation styling in parallel with other animation steps then have a look at the
     * {\@link group group} animation function.
     *
     * ### Usage
     *
     * The `steps` data that is passed into the `sequence` animation function can either consist of
     * {\@link style style} or {\@link animate animate} function calls. A call to `style()` will apply the
     * provided styling data immediately while a call to `animate()` will apply its styling data over a
     * given time depending on its timing data.
     *
     * ```typescript
     * sequence([
     *   style({ opacity: 0 })),
     *   animate("1s", { opacity: 1 }))
     * ])
     * ```
     *
     * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
     *
     * \@experimental Animation support is experimental.
     * @param {?} steps
     * @param {?=} options
     * @return {?}
     */
    function sequence(steps, options) {
        if (options === void 0) { options = null; }
        return { type: 2 /* Sequence */, steps: steps, options: options };
    }
    /**
     * `style` is an animation-specific function that is designed to be used inside of Angular's
     * animation DSL language. If this information is new, please navigate to the {\@link
     * Component#animations component animations metadata page} to gain a better understanding of
     * how animations in Angular are used.
     *
     * `style` declares a key/value object containing CSS properties/styles that can then be used for
     * {\@link state animation states}, within an {\@link sequence animation sequence}, or as styling data
     * for both {\@link animate animate} and {\@link keyframes keyframes}.
     *
     * ### Usage
     *
     * `style` takes in a key/value string map as data and expects one or more CSS property/value pairs
     * to be defined.
     *
     * ```typescript
     * // string values are used for css properties
     * style({ background: "red", color: "blue" })
     *
     * // numerical (pixel) values are also supported
     * style({ width: 100, height: 0 })
     * ```
     *
     * #### Auto-styles (using `*`)
     *
     * When an asterix (`*`) character is used as a value then it will be detected from the element
     * being animated and applied as animation data when the animation starts.
     *
     * This feature proves useful for a state depending on layout and/or environment factors; in such
     * cases the styles are calculated just before the animation starts.
     *
     * ```typescript
     * // the steps below will animate from 0 to the
     * // actual height of the element
     * style({ height: 0 }),
     * animate("1s", style({ height: "*" }))
     * ```
     *
     * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
     *
     * \@experimental Animation support is experimental.
     * @param {?} tokens
     * @return {?}
     */
    function style(tokens) {
        return { type: 6 /* Style */, styles: tokens, offset: null };
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     * @param {?} cb
     * @return {?}
     */
    function scheduleMicroTask$1(cb) {
        Promise.resolve(null).then(cb);
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@experimental Animation support is experimental.
     */
    var NoopAnimationPlayer = (function () {
        function NoopAnimationPlayer() {
            this._onDoneFns = [];
            this._onStartFns = [];
            this._onDestroyFns = [];
            this._started = false;
            this._destroyed = false;
            this._finished = false;
            this.parentPlayer = null;
            this.totalTime = 0;
        }
        /**
         * @return {?}
         */
        NoopAnimationPlayer.prototype._onFinish = function () {
            if (!this._finished) {
                this._finished = true;
                this._onDoneFns.forEach(function (fn) { return fn(); });
                this._onDoneFns = [];
            }
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        NoopAnimationPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
        /**
         * @param {?} fn
         * @return {?}
         */
        NoopAnimationPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
        /**
         * @param {?} fn
         * @return {?}
         */
        NoopAnimationPlayer.prototype.onDestroy = function (fn) { this._onDestroyFns.push(fn); };
        /**
         * @return {?}
         */
        NoopAnimationPlayer.prototype.hasStarted = function () { return this._started; };
        /**
         * @return {?}
         */
        NoopAnimationPlayer.prototype.init = function () { };
        /**
         * @return {?}
         */
        NoopAnimationPlayer.prototype.play = function () {
            if (!this.hasStarted()) {
                this.triggerMicrotask();
                this._onStart();
            }
            this._started = true;
        };
        /**
         * @return {?}
         */
        NoopAnimationPlayer.prototype.triggerMicrotask = function () {
            var _this = this;
            scheduleMicroTask$1(function () { return _this._onFinish(); });
        };
        /**
         * @return {?}
         */
        NoopAnimationPlayer.prototype._onStart = function () {
            this._onStartFns.forEach(function (fn) { return fn(); });
            this._onStartFns = [];
        };
        /**
         * @return {?}
         */
        NoopAnimationPlayer.prototype.pause = function () { };
        /**
         * @return {?}
         */
        NoopAnimationPlayer.prototype.restart = function () { };
        /**
         * @return {?}
         */
        NoopAnimationPlayer.prototype.finish = function () { this._onFinish(); };
        /**
         * @return {?}
         */
        NoopAnimationPlayer.prototype.destroy = function () {
            if (!this._destroyed) {
                this._destroyed = true;
                if (!this.hasStarted()) {
                    this._onStart();
                }
                this.finish();
                this._onDestroyFns.forEach(function (fn) { return fn(); });
                this._onDestroyFns = [];
            }
        };
        /**
         * @return {?}
         */
        NoopAnimationPlayer.prototype.reset = function () { };
        /**
         * @param {?} p
         * @return {?}
         */
        NoopAnimationPlayer.prototype.setPosition = function (p) { };
        /**
         * @return {?}
         */
        NoopAnimationPlayer.prototype.getPosition = function () { return 0; };
        return NoopAnimationPlayer;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var AnimationGroupPlayer = (function () {
        /**
         * @param {?} _players
         */
        function AnimationGroupPlayer(_players) {
            var _this = this;
            this._players = _players;
            this._onDoneFns = [];
            this._onStartFns = [];
            this._finished = false;
            this._started = false;
            this._destroyed = false;
            this._onDestroyFns = [];
            this.parentPlayer = null;
            this.totalTime = 0;
            var doneCount = 0;
            var destroyCount = 0;
            var startCount = 0;
            var total = this._players.length;
            if (total == 0) {
                scheduleMicroTask$1(function () { return _this._onFinish(); });
            }
            else {
                this._players.forEach(function (player) {
                    player.parentPlayer = _this;
                    player.onDone(function () {
                        if (++doneCount >= total) {
                            _this._onFinish();
                        }
                    });
                    player.onDestroy(function () {
                        if (++destroyCount >= total) {
                            _this._onDestroy();
                        }
                    });
                    player.onStart(function () {
                        if (++startCount >= total) {
                            _this._onStart();
                        }
                    });
                });
            }
            this.totalTime = this._players.reduce(function (time, player) { return Math.max(time, player.totalTime); }, 0);
        }
        /**
         * @return {?}
         */
        AnimationGroupPlayer.prototype._onFinish = function () {
            if (!this._finished) {
                this._finished = true;
                this._onDoneFns.forEach(function (fn) { return fn(); });
                this._onDoneFns = [];
            }
        };
        /**
         * @return {?}
         */
        AnimationGroupPlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };
        /**
         * @param {?} fn
         * @return {?}
         */
        AnimationGroupPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
        /**
         * @return {?}
         */
        AnimationGroupPlayer.prototype._onStart = function () {
            if (!this.hasStarted()) {
                this._onStartFns.forEach(function (fn) { return fn(); });
                this._onStartFns = [];
                this._started = true;
            }
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        AnimationGroupPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
        /**
         * @param {?} fn
         * @return {?}
         */
        AnimationGroupPlayer.prototype.onDestroy = function (fn) { this._onDestroyFns.push(fn); };
        /**
         * @return {?}
         */
        AnimationGroupPlayer.prototype.hasStarted = function () { return this._started; };
        /**
         * @return {?}
         */
        AnimationGroupPlayer.prototype.play = function () {
            if (!this.parentPlayer) {
                this.init();
            }
            this._onStart();
            this._players.forEach(function (player) { return player.play(); });
        };
        /**
         * @return {?}
         */
        AnimationGroupPlayer.prototype.pause = function () { this._players.forEach(function (player) { return player.pause(); }); };
        /**
         * @return {?}
         */
        AnimationGroupPlayer.prototype.restart = function () { this._players.forEach(function (player) { return player.restart(); }); };
        /**
         * @return {?}
         */
        AnimationGroupPlayer.prototype.finish = function () {
            this._onFinish();
            this._players.forEach(function (player) { return player.finish(); });
        };
        /**
         * @return {?}
         */
        AnimationGroupPlayer.prototype.destroy = function () { this._onDestroy(); };
        /**
         * @return {?}
         */
        AnimationGroupPlayer.prototype._onDestroy = function () {
            if (!this._destroyed) {
                this._destroyed = true;
                this._onFinish();
                this._players.forEach(function (player) { return player.destroy(); });
                this._onDestroyFns.forEach(function (fn) { return fn(); });
                this._onDestroyFns = [];
            }
        };
        /**
         * @return {?}
         */
        AnimationGroupPlayer.prototype.reset = function () {
            this._players.forEach(function (player) { return player.reset(); });
            this._destroyed = false;
            this._finished = false;
            this._started = false;
        };
        /**
         * @param {?} p
         * @return {?}
         */
        AnimationGroupPlayer.prototype.setPosition = function (p) {
            var /** @type {?} */ timeAtPosition = p * this.totalTime;
            this._players.forEach(function (player) {
                var /** @type {?} */ position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;
                player.setPosition(position);
            });
        };
        /**
         * @return {?}
         */
        AnimationGroupPlayer.prototype.getPosition = function () {
            var /** @type {?} */ min = 0;
            this._players.forEach(function (player) {
                var /** @type {?} */ p = player.getPosition();
                min = Math.min(p, min);
            });
            return min;
        };
        Object.defineProperty(AnimationGroupPlayer.prototype, "players", {
            /**
             * @return {?}
             */
            get: function () { return this._players; },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        AnimationGroupPlayer.prototype.beforeDestroy = function () {
            this.players.forEach(function (player) {
                if (player.beforeDestroy) {
                    player.beforeDestroy();
                }
            });
        };
        return AnimationGroupPlayer;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var ɵPRE_STYLE = '!';

    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    function optimizeGroupPlayer(players) {
        switch (players.length) {
            case 0:
                return new NoopAnimationPlayer();
            case 1:
                return players[0];
            default:
                return new AnimationGroupPlayer(players);
        }
    }
    function normalizeKeyframes(driver, normalizer, element, keyframes$$1, preStyles, postStyles) {
        if (preStyles === void 0) { preStyles = {}; }
        if (postStyles === void 0) { postStyles = {}; }
        var errors = [];
        var normalizedKeyframes = [];
        var previousOffset = -1;
        var previousKeyframe = null;
        keyframes$$1.forEach(function (kf) {
            var offset = kf['offset'];
            var isSameOffset = offset == previousOffset;
            var normalizedKeyframe = (isSameOffset && previousKeyframe) || {};
            Object.keys(kf).forEach(function (prop) {
                var normalizedProp = prop;
                var normalizedValue = kf[prop];
                if (prop !== 'offset') {
                    normalizedProp = normalizer.normalizePropertyName(normalizedProp, errors);
                    switch (normalizedValue) {
                        case ɵPRE_STYLE:
                            normalizedValue = preStyles[prop];
                            break;
                        case AUTO_STYLE:
                            normalizedValue = postStyles[prop];
                            break;
                        default:
                            normalizedValue =
                                normalizer.normalizeStyleValue(prop, normalizedProp, normalizedValue, errors);
                            break;
                    }
                }
                normalizedKeyframe[normalizedProp] = normalizedValue;
            });
            if (!isSameOffset) {
                normalizedKeyframes.push(normalizedKeyframe);
            }
            previousKeyframe = normalizedKeyframe;
            previousOffset = offset;
        });
        if (errors.length) {
            var LINE_START = '\n - ';
            throw new Error("Unable to animate due to the following errors:" + LINE_START + errors.join(LINE_START));
        }
        return normalizedKeyframes;
    }
    function listenOnPlayer(player, eventName, event, callback) {
        switch (eventName) {
            case 'start':
                player.onStart(function () { return callback(event && copyAnimationEvent(event, 'start', player.totalTime)); });
                break;
            case 'done':
                player.onDone(function () { return callback(event && copyAnimationEvent(event, 'done', player.totalTime)); });
                break;
            case 'destroy':
                player.onDestroy(function () { return callback(event && copyAnimationEvent(event, 'destroy', player.totalTime)); });
                break;
        }
    }
    function copyAnimationEvent(e, phaseName, totalTime) {
        var event = makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, phaseName || e.phaseName, totalTime == undefined ? e.totalTime : totalTime);
        var data = e['_data'];
        if (data != null) {
            event['_data'] = data;
        }
        return event;
    }
    function makeAnimationEvent(element, triggerName, fromState, toState, phaseName, totalTime) {
        if (phaseName === void 0) { phaseName = ''; }
        if (totalTime === void 0) { totalTime = 0; }
        return { element: element, triggerName: triggerName, fromState: fromState, toState: toState, phaseName: phaseName, totalTime: totalTime };
    }
    function getOrSetAsInMap(map, key, defaultValue) {
        var value;
        if (map instanceof Map) {
            value = map.get(key);
            if (!value) {
                map.set(key, value = defaultValue);
            }
        }
        else {
            value = map[key];
            if (!value) {
                value = map[key] = defaultValue;
            }
        }
        return value;
    }
    function parseTimelineCommand(command) {
        var separatorPos = command.indexOf(':');
        var id = command.substring(1, separatorPos);
        var action = command.substr(separatorPos + 1);
        return [id, action];
    }
    var _contains = function (elm1, elm2) { return false; };
    var _matches = function (element, selector) { return false; };
    var _query = function (element, selector, multi) {
        return [];
    };
    if (typeof Element != 'undefined') {
        // this is well supported in all browsers
        _contains = function (elm1, elm2) { return elm1.contains(elm2); };
        if (Element.prototype.matches) {
            _matches = function (element, selector) { return element.matches(selector); };
        }
        else {
            var proto = Element.prototype;
            var fn_1 = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector ||
                proto.oMatchesSelector || proto.webkitMatchesSelector;
            if (fn_1) {
                _matches = function (element, selector) { return fn_1.apply(element, [selector]); };
            }
        }
        _query = function (element, selector, multi) {
            var results = [];
            if (multi) {
                results.push.apply(results, element.querySelectorAll(selector));
            }
            else {
                var elm = element.querySelector(selector);
                if (elm) {
                    results.push(elm);
                }
            }
            return results;
        };
    }
    var matchesElement = _matches;
    var containsElement = _contains;
    var invokeQuery = _query;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @experimental
     */
    var NoopAnimationDriver = (function () {
        function NoopAnimationDriver() {
        }
        NoopAnimationDriver.prototype.matchesElement = function (element, selector) {
            return matchesElement(element, selector);
        };
        NoopAnimationDriver.prototype.containsElement = function (elm1, elm2) { return containsElement(elm1, elm2); };
        NoopAnimationDriver.prototype.query = function (element, selector, multi) {
            return invokeQuery(element, selector, multi);
        };
        NoopAnimationDriver.prototype.computeStyle = function (element, prop, defaultValue) {
            return defaultValue || '';
        };
        NoopAnimationDriver.prototype.animate = function (element, keyframes$$1, duration, delay, easing, previousPlayers) {
            if (previousPlayers === void 0) { previousPlayers = []; }
            return new NoopAnimationPlayer();
        };
        return NoopAnimationDriver;
    }());
    /**
     * @experimental
     */
    var AnimationDriver = (function () {
        function AnimationDriver() {
        }
        return AnimationDriver;
    }());
    AnimationDriver.NOOP = new NoopAnimationDriver();
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var ONE_SECOND = 1000;
    var SUBSTITUTION_EXPR_START = '{{';
    var SUBSTITUTION_EXPR_END = '}}';
    var ENTER_CLASSNAME = 'ng-enter';
    var LEAVE_CLASSNAME = 'ng-leave';
    var ENTER_SELECTOR = '.ng-enter';
    var LEAVE_SELECTOR = '.ng-leave';
    var NG_TRIGGER_CLASSNAME = 'ng-trigger';
    var NG_TRIGGER_SELECTOR = '.ng-trigger';
    var NG_ANIMATING_CLASSNAME = 'ng-animating';
    var NG_ANIMATING_SELECTOR = '.ng-animating';
    function resolveTimingValue(value) {
        if (typeof value == 'number')
            return value;
        var matches = value.match(/^(-?[\.\d]+)(m?s)/);
        if (!matches || matches.length < 2)
            return 0;
        return _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
    }
    function _convertTimeValueToMS(value, unit) {
        switch (unit) {
            case 's':
                return value * ONE_SECOND;
            default:
                return value;
        }
    }
    function resolveTiming(timings, errors, allowNegativeValues) {
        return timings.hasOwnProperty('duration') ?
            timings :
            parseTimeExpression(timings, errors, allowNegativeValues);
    }
    function parseTimeExpression(exp, errors, allowNegativeValues) {
        var regex = /^(-?[\.\d]+)(m?s)(?:\s+(-?[\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i;
        var duration;
        var delay = 0;
        var easing = '';
        if (typeof exp === 'string') {
            var matches = exp.match(regex);
            if (matches === null) {
                errors.push("The provided timing value \"" + exp + "\" is invalid.");
                return { duration: 0, delay: 0, easing: '' };
            }
            duration = _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
            var delayMatch = matches[3];
            if (delayMatch != null) {
                delay = _convertTimeValueToMS(Math.floor(parseFloat(delayMatch)), matches[4]);
            }
            var easingVal = matches[5];
            if (easingVal) {
                easing = easingVal;
            }
        }
        else {
            duration = exp;
        }
        if (!allowNegativeValues) {
            var containsErrors = false;
            var startIndex = errors.length;
            if (duration < 0) {
                errors.push("Duration values below 0 are not allowed for this animation step.");
                containsErrors = true;
            }
            if (delay < 0) {
                errors.push("Delay values below 0 are not allowed for this animation step.");
                containsErrors = true;
            }
            if (containsErrors) {
                errors.splice(startIndex, 0, "The provided timing value \"" + exp + "\" is invalid.");
            }
        }
        return { duration: duration, delay: delay, easing: easing };
    }
    function copyObj(obj, destination) {
        if (destination === void 0) { destination = {}; }
        Object.keys(obj).forEach(function (prop) { destination[prop] = obj[prop]; });
        return destination;
    }
    function copyStyles(styles, readPrototype, destination) {
        if (destination === void 0) { destination = {}; }
        if (readPrototype) {
            // we make use of a for-in loop so that the
            // prototypically inherited properties are
            // revealed from the backFill map
            for (var prop in styles) {
                destination[prop] = styles[prop];
            }
        }
        else {
            copyObj(styles, destination);
        }
        return destination;
    }
    function setStyles(element, styles) {
        if (element['style']) {
            Object.keys(styles).forEach(function (prop) {
                var camelProp = dashCaseToCamelCase(prop);
                element.style[camelProp] = styles[prop];
            });
        }
    }
    function eraseStyles(element, styles) {
        if (element['style']) {
            Object.keys(styles).forEach(function (prop) {
                var camelProp = dashCaseToCamelCase(prop);
                element.style[camelProp] = '';
            });
        }
    }
    function normalizeAnimationEntry(steps) {
        if (Array.isArray(steps)) {
            if (steps.length == 1)
                return steps[0];
            return sequence(steps);
        }
        return steps;
    }
    function validateStyleParams(value, options, errors) {
        var params = options.params || {};
        var matches = extractStyleParams(value);
        if (matches.length) {
            matches.forEach(function (varName) {
                if (!params.hasOwnProperty(varName)) {
                    errors.push("Unable to resolve the local animation param " + varName + " in the given list of values");
                }
            });
        }
    }
    var PARAM_REGEX = new RegExp(SUBSTITUTION_EXPR_START + "\\s*(.+?)\\s*" + SUBSTITUTION_EXPR_END, 'g');
    function extractStyleParams(value) {
        var params = [];
        if (typeof value === 'string') {
            var val = value.toString();
            var match = void 0;
            while (match = PARAM_REGEX.exec(val)) {
                params.push(match[1]);
            }
            PARAM_REGEX.lastIndex = 0;
        }
        return params;
    }
    function interpolateParams(value, params, errors) {
        var original = value.toString();
        var str = original.replace(PARAM_REGEX, function (_, varName) {
            var localVal = params[varName];
            // this means that the value was never overidden by the data passed in by the user
            if (!params.hasOwnProperty(varName)) {
                errors.push("Please provide a value for the animation param " + varName);
                localVal = '';
            }
            return localVal.toString();
        });
        // we do this to assert that numeric values stay as they are
        return str == original ? value : str;
    }
    function iteratorToArray(iterator) {
        var arr = [];
        var item = iterator.next();
        while (!item.done) {
            arr.push(item.value);
            item = iterator.next();
        }
        return arr;
    }
    var DASH_CASE_REGEXP = /-+([a-z0-9])/g;
    function dashCaseToCamelCase(input) {
        return input.replace(DASH_CASE_REGEXP, function () {
            var m = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                m[_i] = arguments[_i];
            }
            return m[1].toUpperCase();
        });
    }
    function allowPreviousPlayerStylesMerge(duration, delay) {
        return duration === 0 || delay === 0;
    }
    function visitDslNode(visitor, node, context) {
        switch (node.type) {
            case 7 /* Trigger */:
                return visitor.visitTrigger(node, context);
            case 0 /* State */:
                return visitor.visitState(node, context);
            case 1 /* Transition */:
                return visitor.visitTransition(node, context);
            case 2 /* Sequence */:
                return visitor.visitSequence(node, context);
            case 3 /* Group */:
                return visitor.visitGroup(node, context);
            case 4 /* Animate */:
                return visitor.visitAnimate(node, context);
            case 5 /* Keyframes */:
                return visitor.visitKeyframes(node, context);
            case 6 /* Style */:
                return visitor.visitStyle(node, context);
            case 8 /* Reference */:
                return visitor.visitReference(node, context);
            case 9 /* AnimateChild */:
                return visitor.visitAnimateChild(node, context);
            case 10 /* AnimateRef */:
                return visitor.visitAnimateRef(node, context);
            case 11 /* Query */:
                return visitor.visitQuery(node, context);
            case 12 /* Stagger */:
                return visitor.visitStagger(node, context);
            default:
                throw new Error("Unable to resolve animation metadata node #" + node.type);
        }
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var ANY_STATE = '*';
    /**
     * @param {?} transitionValue
     * @param {?} errors
     * @return {?}
     */
    function parseTransitionExpr(transitionValue, errors) {
        var /** @type {?} */ expressions = [];
        if (typeof transitionValue == 'string') {
            ((transitionValue))
                .split(/\s*,\s*/)
                .forEach(function (str) { return parseInnerTransitionStr(str, expressions, errors); });
        }
        else {
            expressions.push(/** @type {?} */ (transitionValue));
        }
        return expressions;
    }
    /**
     * @param {?} eventStr
     * @param {?} expressions
     * @param {?} errors
     * @return {?}
     */
    function parseInnerTransitionStr(eventStr, expressions, errors) {
        if (eventStr[0] == ':') {
            eventStr = parseAnimationAlias(eventStr, errors);
        }
        var /** @type {?} */ match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
        if (match == null || match.length < 4) {
            errors.push("The provided transition expression \"" + eventStr + "\" is not supported");
            return expressions;
        }
        var /** @type {?} */ fromState = match[1];
        var /** @type {?} */ separator = match[2];
        var /** @type {?} */ toState = match[3];
        expressions.push(makeLambdaFromStates(fromState, toState));
        var /** @type {?} */ isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
        if (separator[0] == '<' && !isFullAnyStateExpr) {
            expressions.push(makeLambdaFromStates(toState, fromState));
        }
    }
    /**
     * @param {?} alias
     * @param {?} errors
     * @return {?}
     */
    function parseAnimationAlias(alias, errors) {
        switch (alias) {
            case ':enter':
                return 'void => *';
            case ':leave':
                return '* => void';
            default:
                errors.push("The transition alias value \"" + alias + "\" is not supported");
                return '* => *';
        }
    }
    var TRUE_BOOLEAN_VALUES = new Set();
    TRUE_BOOLEAN_VALUES.add('true');
    TRUE_BOOLEAN_VALUES.add('1');
    var FALSE_BOOLEAN_VALUES = new Set();
    FALSE_BOOLEAN_VALUES.add('false');
    FALSE_BOOLEAN_VALUES.add('0');
    /**
     * @param {?} lhs
     * @param {?} rhs
     * @return {?}
     */
    function makeLambdaFromStates(lhs, rhs) {
        var /** @type {?} */ LHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(lhs) || FALSE_BOOLEAN_VALUES.has(lhs);
        var /** @type {?} */ RHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(rhs) || FALSE_BOOLEAN_VALUES.has(rhs);
        return function (fromState, toState) {
            var /** @type {?} */ lhsMatch = lhs == ANY_STATE || lhs == fromState;
            var /** @type {?} */ rhsMatch = rhs == ANY_STATE || rhs == toState;
            if (!lhsMatch && LHS_MATCH_BOOLEAN && typeof fromState === 'boolean') {
                lhsMatch = fromState ? TRUE_BOOLEAN_VALUES.has(lhs) : FALSE_BOOLEAN_VALUES.has(lhs);
            }
            if (!rhsMatch && RHS_MATCH_BOOLEAN && typeof toState === 'boolean') {
                rhsMatch = toState ? TRUE_BOOLEAN_VALUES.has(rhs) : FALSE_BOOLEAN_VALUES.has(rhs);
            }
            return lhsMatch && rhsMatch;
        };
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var SELF_TOKEN = ':self';
    var SELF_TOKEN_REGEX = new RegExp("s*" + SELF_TOKEN + "s*,?", 'g');
    /**
     * @param {?} metadata
     * @param {?} errors
     * @return {?}
     */
    function buildAnimationAst(metadata, errors) {
        return new AnimationAstBuilderVisitor().build(metadata, errors);
    }
    var LEAVE_TOKEN = ':leave';
    var LEAVE_TOKEN_REGEX = new RegExp(LEAVE_TOKEN, 'g');
    var ENTER_TOKEN = ':enter';
    var ENTER_TOKEN_REGEX = new RegExp(ENTER_TOKEN, 'g');
    var ROOT_SELECTOR = '';
    var AnimationAstBuilderVisitor = (function () {
        function AnimationAstBuilderVisitor() {
        }
        /**
         * @param {?} metadata
         * @param {?} errors
         * @return {?}
         */
        AnimationAstBuilderVisitor.prototype.build = function (metadata, errors) {
            var /** @type {?} */ context = new AnimationAstBuilderContext(errors);
            this._resetContextStyleTimingState(context);
            return (visitDslNode(this, normalizeAnimationEntry(metadata), context));
        };
        /**
         * @param {?} context
         * @return {?}
         */
        AnimationAstBuilderVisitor.prototype._resetContextStyleTimingState = function (context) {
            context.currentQuerySelector = ROOT_SELECTOR;
            context.collectedStyles = {};
            context.collectedStyles[ROOT_SELECTOR] = {};
            context.currentTime = 0;
        };
        /**
         * @param {?} metadata
         * @param {?} context
         * @return {?}
         */
        AnimationAstBuilderVisitor.prototype.visitTrigger = function (metadata, context) {
            var _this = this;
            var /** @type {?} */ queryCount = context.queryCount = 0;
            var /** @type {?} */ depCount = context.depCount = 0;
            var /** @type {?} */ states = [];
            var /** @type {?} */ transitions = [];
            metadata.definitions.forEach(function (def) {
                _this._resetContextStyleTimingState(context);
                if (def.type == 0 /* State */) {
                    var /** @type {?} */ stateDef_1 = (def);
                    var /** @type {?} */ name = stateDef_1.name;
                    name.split(/\s*,\s*/).forEach(function (n) {
                        stateDef_1.name = n;
                        states.push(_this.visitState(stateDef_1, context));
                    });
                    stateDef_1.name = name;
                }
                else if (def.type == 1 /* Transition */) {
                    var /** @type {?} */ transition$$1 = _this.visitTransition(/** @type {?} */ (def), context);
                    queryCount += transition$$1.queryCount;
                    depCount += transition$$1.depCount;
                    transitions.push(transition$$1);
                }
                else {
                    context.errors.push('only state() and transition() definitions can sit inside of a trigger()');
                }
            });
            return {
                type: 7 /* Trigger */,
                name: metadata.name, states: states, transitions: transitions, queryCount: queryCount, depCount: depCount,
                options: null
            };
        };
        /**
         * @param {?} metadata
         * @param {?} context
         * @return {?}
         */
        AnimationAstBuilderVisitor.prototype.visitState = function (metadata, context) {
            var /** @type {?} */ styleAst = this.visitStyle(metadata.styles, context);
            var /** @type {?} */ astParams = (metadata.options && metadata.options.params) || null;
            if (styleAst.containsDynamicStyles) {
                var /** @type {?} */ missingSubs_1 = new Set();
                var /** @type {?} */ params_1 = astParams || {};
                styleAst.styles.forEach(function (value) {
                    if (isObject$1(value)) {
                        var /** @type {?} */ stylesObj_1 = (value);
                        Object.keys(stylesObj_1).forEach(function (prop) {
                            extractStyleParams(stylesObj_1[prop]).forEach(function (sub) {
                                if (!params_1.hasOwnProperty(sub)) {
                                    missingSubs_1.add(sub);
                                }
                            });
                        });
                    }
                });
                if (missingSubs_1.size) {
                    var /** @type {?} */ missingSubsArr = iteratorToArray(missingSubs_1.values());
                    context.errors.push("state(\"" + metadata.name + "\", ...) must define default values for all the following style substitutions: " + missingSubsArr.join(', '));
                }
            }
            return {
                type: 0 /* State */,
                name: metadata.name,
                style: styleAst,
                options: astParams ? { params: astParams } : null
            };
        };
        /**
         * @param {?} metadata
         * @param {?} context
         * @return {?}
         */
        AnimationAstBuilderVisitor.prototype.visitTransition = function (metadata, context) {
            context.queryCount = 0;
            context.depCount = 0;
            var /** @type {?} */ animation$$1 = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);
            var /** @type {?} */ matchers = parseTransitionExpr(metadata.expr, context.errors);
            return {
                type: 1 /* Transition */,
                matchers: matchers,
                animation: animation$$1,
                queryCount: context.queryCount,
                depCount: context.depCount,
                options: normalizeAnimationOptions(metadata.options)
            };
        };
        /**
         * @param {?} metadata
         * @param {?} context
         * @return {?}
         */
        AnimationAstBuilderVisitor.prototype.visitSequence = function (metadata, context) {
            var _this = this;
            return {
                type: 2 /* Sequence */,
                steps: metadata.steps.map(function (s) { return visitDslNode(_this, s, context); }),
                options: normalizeAnimationOptions(metadata.options)
            };
        };
        /**
         * @param {?} metadata
         * @param {?} context
         * @return {?}
         */
        AnimationAstBuilderVisitor.prototype.visitGroup = function (metadata, context) {
            var _this = this;
            var /** @type {?} */ currentTime = context.currentTime;
            var /** @type {?} */ furthestTime = 0;
            var /** @type {?} */ steps = metadata.steps.map(function (step) {
                context.currentTime = currentTime;
                var /** @type {?} */ innerAst = visitDslNode(_this, step, context);
                furthestTime = Math.max(furthestTime, context.currentTime);
                return innerAst;
            });
            context.currentTime = furthestTime;
            return {
                type: 3 /* Group */,
                steps: steps,
                options: normalizeAnimationOptions(metadata.options)
            };
        };
        /**
         * @param {?} metadata
         * @param {?} context
         * @return {?}
         */
        AnimationAstBuilderVisitor.prototype.visitAnimate = function (metadata, context) {
            var /** @type {?} */ timingAst = constructTimingAst(metadata.timings, context.errors);
            context.currentAnimateTimings = timingAst;
            var /** @type {?} */ styleAst;
            var /** @type {?} */ styleMetadata = metadata.styles ? metadata.styles : style({});
            if (styleMetadata.type == 5 /* Keyframes */) {
                styleAst = this.visitKeyframes(/** @type {?} */ (styleMetadata), context);
            }
            else {
                var /** @type {?} */ styleMetadata_1 = (metadata.styles);
                var /** @type {?} */ isEmpty = false;
                if (!styleMetadata_1) {
                    isEmpty = true;
                    var /** @type {?} */ newStyleData = {};
                    if (timingAst.easing) {
                        newStyleData['easing'] = timingAst.easing;
                    }
                    styleMetadata_1 = style(newStyleData);
                }
                context.currentTime += timingAst.duration + timingAst.delay;
                var /** @type {?} */ _styleAst = this.visitStyle(styleMetadata_1, context);
                _styleAst.isEmptyStep = isEmpty;
                styleAst = _styleAst;
            }
            context.currentAnimateTimings = null;
            return {
                type: 4 /* Animate */,
                timings: timingAst,
                style: styleAst,
                options: null
            };
        };
        /**
         * @param {?} metadata
         * @param {?} context
         * @return {?}
         */
        AnimationAstBuilderVisitor.prototype.visitStyle = function (metadata, context) {
            var /** @type {?} */ ast = this._makeStyleAst(metadata, context);
            this._validateStyleAst(ast, context);
            return ast;
        };
        /**
         * @param {?} metadata
         * @param {?} context
         * @return {?}
         */
        AnimationAstBuilderVisitor.prototype._makeStyleAst = function (metadata, context) {
            var /** @type {?} */ styles = [];
            if (Array.isArray(metadata.styles)) {
                ((metadata.styles)).forEach(function (styleTuple) {
                    if (typeof styleTuple == 'string') {
                        if (styleTuple == AUTO_STYLE) {
                            styles.push(/** @type {?} */ (styleTuple));
                        }
                        else {
                            context.errors.push("The provided style string value " + styleTuple + " is not allowed.");
                        }
                    }
                    else {
                        styles.push(/** @type {?} */ (styleTuple));
                    }
                });
            }
            else {
                styles.push(metadata.styles);
            }
            var /** @type {?} */ containsDynamicStyles = false;
            var /** @type {?} */ collectedEasing = null;
            styles.forEach(function (styleData) {
                if (isObject$1(styleData)) {
                    var /** @type {?} */ styleMap = (styleData);
                    var /** @type {?} */ easing = styleMap['easing'];
                    if (easing) {
                        collectedEasing = (easing);
                        delete styleMap['easing'];
                    }
                    if (!containsDynamicStyles) {
                        for (var /** @type {?} */ prop in styleMap) {
                            var /** @type {?} */ value = styleMap[prop];
                            if (value.toString().indexOf(SUBSTITUTION_EXPR_START) >= 0) {
                                containsDynamicStyles = true;
                                break;
                            }
                        }
                    }
                }
            });
            return {
                type: 6 /* Style */,
                styles: styles,
                easing: collectedEasing,
                offset: metadata.offset, containsDynamicStyles: containsDynamicStyles,
                options: null
            };
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationAstBuilderVisitor.prototype._validateStyleAst = function (ast, context) {
            var /** @type {?} */ timings = context.currentAnimateTimings;
            var /** @type {?} */ endTime = context.currentTime;
            var /** @type {?} */ startTime = context.currentTime;
            if (timings && startTime > 0) {
                startTime -= timings.duration + timings.delay;
            }
            ast.styles.forEach(function (tuple) {
                if (typeof tuple == 'string')
                    return;
                Object.keys(tuple).forEach(function (prop) {
                    var /** @type {?} */ collectedStyles = context.collectedStyles[((context.currentQuerySelector))];
                    var /** @type {?} */ collectedEntry = collectedStyles[prop];
                    var /** @type {?} */ updateCollectedStyle = true;
                    if (collectedEntry) {
                        if (startTime != endTime && startTime >= collectedEntry.startTime &&
                            endTime <= collectedEntry.endTime) {
                            context.errors.push("The CSS property \"" + prop + "\" that exists between the times of \"" + collectedEntry.startTime + "ms\" and \"" + collectedEntry.endTime + "ms\" is also being animated in a parallel animation between the times of \"" + startTime + "ms\" and \"" + endTime + "ms\"");
                            updateCollectedStyle = false;
                        }
                        // we always choose the smaller start time value since we
                        // want to have a record of the entire animation window where
                        // the style property is being animated in between
                        startTime = collectedEntry.startTime;
                    }
                    if (updateCollectedStyle) {
                        collectedStyles[prop] = { startTime: startTime, endTime: endTime };
                    }
                    if (context.options) {
                        validateStyleParams(tuple[prop], context.options, context.errors);
                    }
                });
            });
        };
        /**
         * @param {?} metadata
         * @param {?} context
         * @return {?}
         */
        AnimationAstBuilderVisitor.prototype.visitKeyframes = function (metadata, context) {
            var _this = this;
            var /** @type {?} */ ast = { type: 5 /* Keyframes */, styles: [], options: null };
            if (!context.currentAnimateTimings) {
                context.errors.push("keyframes() must be placed inside of a call to animate()");
                return ast;
            }
            var /** @type {?} */ MAX_KEYFRAME_OFFSET = 1;
            var /** @type {?} */ totalKeyframesWithOffsets = 0;
            var /** @type {?} */ offsets = [];
            var /** @type {?} */ offsetsOutOfOrder = false;
            var /** @type {?} */ keyframesOutOfRange = false;
            var /** @type {?} */ previousOffset = 0;
            var /** @type {?} */ keyframes$$1 = metadata.steps.map(function (styles) {
                var /** @type {?} */ style$$1 = _this._makeStyleAst(styles, context);
                var /** @type {?} */ offsetVal = style$$1.offset != null ? style$$1.offset : consumeOffset(style$$1.styles);
                var /** @type {?} */ offset = 0;
                if (offsetVal != null) {
                    totalKeyframesWithOffsets++;
                    offset = style$$1.offset = offsetVal;
                }
                keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;
                offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;
                previousOffset = offset;
                offsets.push(offset);
                return style$$1;
            });
            if (keyframesOutOfRange) {
                context.errors.push("Please ensure that all keyframe offsets are between 0 and 1");
            }
            if (offsetsOutOfOrder) {
                context.errors.push("Please ensure that all keyframe offsets are in order");
            }
            var /** @type {?} */ length = metadata.steps.length;
            var /** @type {?} */ generatedOffset = 0;
            if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {
                context.errors.push("Not all style() steps within the declared keyframes() contain offsets");
            }
            else if (totalKeyframesWithOffsets == 0) {
                generatedOffset = MAX_KEYFRAME_OFFSET / (length - 1);
            }
            var /** @type {?} */ limit = length - 1;
            var /** @type {?} */ currentTime = context.currentTime;
            var /** @type {?} */ currentAnimateTimings = ((context.currentAnimateTimings));
            var /** @type {?} */ animateDuration = currentAnimateTimings.duration;
            keyframes$$1.forEach(function (kf, i) {
                var /** @type {?} */ offset = generatedOffset > 0 ? (i == limit ? 1 : (generatedOffset * i)) : offsets[i];
                var /** @type {?} */ durationUpToThisFrame = offset * animateDuration;
                context.currentTime = currentTime + currentAnimateTimings.delay + durationUpToThisFrame;
                currentAnimateTimings.duration = durationUpToThisFrame;
                _this._validateStyleAst(kf, context);
                kf.offset = offset;
                ast.styles.push(kf);
            });
            return ast;
        };
        /**
         * @param {?} metadata
         * @param {?} context
         * @return {?}
         */
        AnimationAstBuilderVisitor.prototype.visitReference = function (metadata, context) {
            return {
                type: 8 /* Reference */,
                animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),
                options: normalizeAnimationOptions(metadata.options)
            };
        };
        /**
         * @param {?} metadata
         * @param {?} context
         * @return {?}
         */
        AnimationAstBuilderVisitor.prototype.visitAnimateChild = function (metadata, context) {
            context.depCount++;
            return {
                type: 9 /* AnimateChild */,
                options: normalizeAnimationOptions(metadata.options)
            };
        };
        /**
         * @param {?} metadata
         * @param {?} context
         * @return {?}
         */
        AnimationAstBuilderVisitor.prototype.visitAnimateRef = function (metadata, context) {
            return {
                type: 10 /* AnimateRef */,
                animation: this.visitReference(metadata.animation, context),
                options: normalizeAnimationOptions(metadata.options)
            };
        };
        /**
         * @param {?} metadata
         * @param {?} context
         * @return {?}
         */
        AnimationAstBuilderVisitor.prototype.visitQuery = function (metadata, context) {
            var /** @type {?} */ parentSelector = ((context.currentQuerySelector));
            var /** @type {?} */ options = ((metadata.options || {}));
            context.queryCount++;
            context.currentQuery = metadata;
            var _a = normalizeSelector(metadata.selector), selector = _a[0], includeSelf = _a[1];
            context.currentQuerySelector =
                parentSelector.length ? (parentSelector + ' ' + selector) : selector;
            getOrSetAsInMap(context.collectedStyles, context.currentQuerySelector, {});
            var /** @type {?} */ animation$$1 = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);
            context.currentQuery = null;
            context.currentQuerySelector = parentSelector;
            return {
                type: 11 /* Query */,
                selector: selector,
                limit: options.limit || 0,
                optional: !!options.optional, includeSelf: includeSelf, animation: animation$$1,
                originalSelector: metadata.selector,
                options: normalizeAnimationOptions(metadata.options)
            };
        };
        /**
         * @param {?} metadata
         * @param {?} context
         * @return {?}
         */
        AnimationAstBuilderVisitor.prototype.visitStagger = function (metadata, context) {
            if (!context.currentQuery) {
                context.errors.push("stagger() can only be used inside of query()");
            }
            var /** @type {?} */ timings = metadata.timings === 'full' ?
                { duration: 0, delay: 0, easing: 'full' } :
                resolveTiming(metadata.timings, context.errors, true);
            return {
                type: 12 /* Stagger */,
                animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context), timings: timings,
                options: null
            };
        };
        return AnimationAstBuilderVisitor;
    }());
    /**
     * @param {?} selector
     * @return {?}
     */
    function normalizeSelector(selector) {
        var /** @type {?} */ hasAmpersand = selector.split(/\s*,\s*/).find(function (token) { return token == SELF_TOKEN; }) ? true : false;
        if (hasAmpersand) {
            selector = selector.replace(SELF_TOKEN_REGEX, '');
        }
        selector = selector.replace(ENTER_TOKEN_REGEX, ENTER_SELECTOR)
            .replace(LEAVE_TOKEN_REGEX, LEAVE_SELECTOR)
            .replace(/@\*/g, NG_TRIGGER_SELECTOR)
            .replace(/@\w+/g, function (match) { return NG_TRIGGER_SELECTOR + '-' + match.substr(1); })
            .replace(/:animating/g, NG_ANIMATING_SELECTOR);
        return [selector, hasAmpersand];
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    function normalizeParams(obj) {
        return obj ? copyObj(obj) : null;
    }
    var AnimationAstBuilderContext = (function () {
        /**
         * @param {?} errors
         */
        function AnimationAstBuilderContext(errors) {
            this.errors = errors;
            this.queryCount = 0;
            this.depCount = 0;
            this.currentTransition = null;
            this.currentQuery = null;
            this.currentQuerySelector = null;
            this.currentAnimateTimings = null;
            this.currentTime = 0;
            this.collectedStyles = {};
            this.options = null;
        }
        return AnimationAstBuilderContext;
    }());
    /**
     * @param {?} styles
     * @return {?}
     */
    function consumeOffset(styles) {
        if (typeof styles == 'string')
            return null;
        var /** @type {?} */ offset = null;
        if (Array.isArray(styles)) {
            styles.forEach(function (styleTuple) {
                if (isObject$1(styleTuple) && styleTuple.hasOwnProperty('offset')) {
                    var /** @type {?} */ obj = (styleTuple);
                    offset = parseFloat(/** @type {?} */ (obj['offset']));
                    delete obj['offset'];
                }
            });
        }
        else if (isObject$1(styles) && styles.hasOwnProperty('offset')) {
            var /** @type {?} */ obj = (styles);
            offset = parseFloat(/** @type {?} */ (obj['offset']));
            delete obj['offset'];
        }
        return offset;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isObject$1(value) {
        return !Array.isArray(value) && typeof value == 'object';
    }
    /**
     * @param {?} value
     * @param {?} errors
     * @return {?}
     */
    function constructTimingAst(value, errors) {
        var /** @type {?} */ timings = null;
        if (value.hasOwnProperty('duration')) {
            timings = (value);
        }
        else if (typeof value == 'number') {
            var /** @type {?} */ duration = resolveTiming(/** @type {?} */ (value), errors).duration;
            return makeTimingAst(/** @type {?} */ (duration), 0, '');
        }
        var /** @type {?} */ strValue = (value);
        var /** @type {?} */ isDynamic = strValue.split(/\s+/).some(function (v) { return v.charAt(0) == '{' && v.charAt(1) == '{'; });
        if (isDynamic) {
            var /** @type {?} */ ast = (makeTimingAst(0, 0, ''));
            ast.dynamic = true;
            ast.strValue = strValue;
            return (ast);
        }
        timings = timings || resolveTiming(strValue, errors);
        return makeTimingAst(timings.duration, timings.delay, timings.easing);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    function normalizeAnimationOptions(options) {
        if (options) {
            options = copyObj(options);
            if (options['params']) {
                options['params'] = ((normalizeParams(options['params'])));
            }
        }
        else {
            options = {};
        }
        return options;
    }
    /**
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @return {?}
     */
    function makeTimingAst(duration, delay, easing) {
        return { duration: duration, delay: delay, easing: easing };
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} element
     * @param {?} keyframes
     * @param {?} preStyleProps
     * @param {?} postStyleProps
     * @param {?} duration
     * @param {?} delay
     * @param {?=} easing
     * @param {?=} subTimeline
     * @return {?}
     */
    function createTimelineInstruction(element, keyframes$$1, preStyleProps, postStyleProps, duration, delay, easing, subTimeline) {
        if (easing === void 0) { easing = null; }
        if (subTimeline === void 0) { subTimeline = false; }
        return {
            type: 1 /* TimelineAnimation */,
            element: element,
            keyframes: keyframes$$1,
            preStyleProps: preStyleProps,
            postStyleProps: postStyleProps,
            duration: duration,
            delay: delay,
            totalTime: duration + delay, easing: easing, subTimeline: subTimeline
        };
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var ElementInstructionMap = (function () {
        function ElementInstructionMap() {
            this._map = new Map();
        }
        /**
         * @param {?} element
         * @return {?}
         */
        ElementInstructionMap.prototype.consume = function (element) {
            var /** @type {?} */ instructions = this._map.get(element);
            if (instructions) {
                this._map.delete(element);
            }
            else {
                instructions = [];
            }
            return instructions;
        };
        /**
         * @param {?} element
         * @param {?} instructions
         * @return {?}
         */
        ElementInstructionMap.prototype.append = function (element, instructions) {
            var /** @type {?} */ existingInstructions = this._map.get(element);
            if (!existingInstructions) {
                this._map.set(element, existingInstructions = []);
            }
            existingInstructions.push.apply(existingInstructions, instructions);
        };
        /**
         * @param {?} element
         * @return {?}
         */
        ElementInstructionMap.prototype.has = function (element) { return this._map.has(element); };
        /**
         * @return {?}
         */
        ElementInstructionMap.prototype.clear = function () { this._map.clear(); };
        return ElementInstructionMap;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var ONE_FRAME_IN_MILLISECONDS = 1;
    /**
     * @param {?} driver
     * @param {?} rootElement
     * @param {?} ast
     * @param {?=} startingStyles
     * @param {?=} finalStyles
     * @param {?=} options
     * @param {?=} subInstructions
     * @param {?=} errors
     * @return {?}
     */
    function buildAnimationTimelines(driver, rootElement, ast, startingStyles, finalStyles, options, subInstructions, errors) {
        if (startingStyles === void 0) { startingStyles = {}; }
        if (finalStyles === void 0) { finalStyles = {}; }
        if (errors === void 0) { errors = []; }
        return new AnimationTimelineBuilderVisitor().buildKeyframes(driver, rootElement, ast, startingStyles, finalStyles, options, subInstructions, errors);
    }
    var AnimationTimelineBuilderVisitor = (function () {
        function AnimationTimelineBuilderVisitor() {
        }
        /**
         * @param {?} driver
         * @param {?} rootElement
         * @param {?} ast
         * @param {?} startingStyles
         * @param {?} finalStyles
         * @param {?} options
         * @param {?=} subInstructions
         * @param {?=} errors
         * @return {?}
         */
        AnimationTimelineBuilderVisitor.prototype.buildKeyframes = function (driver, rootElement, ast, startingStyles, finalStyles, options, subInstructions, errors) {
            if (errors === void 0) { errors = []; }
            subInstructions = subInstructions || new ElementInstructionMap();
            var /** @type {?} */ context = new AnimationTimelineContext(driver, rootElement, subInstructions, errors, []);
            context.options = options;
            context.currentTimeline.setStyles([startingStyles], null, context.errors, options);
            visitDslNode(this, ast, context);
            // this checks to see if an actual animation happened
            var /** @type {?} */ timelines = context.timelines.filter(function (timeline) { return timeline.containsAnimation(); });
            if (timelines.length && Object.keys(finalStyles).length) {
                var /** @type {?} */ tl = timelines[timelines.length - 1];
                if (!tl.allowOnlyTimelineStyles()) {
                    tl.setStyles([finalStyles], null, context.errors, options);
                }
            }
            return timelines.length ? timelines.map(function (timeline) { return timeline.buildKeyframes(); }) :
                [createTimelineInstruction(rootElement, [], [], [], 0, 0, '', false)];
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineBuilderVisitor.prototype.visitTrigger = function (ast, context) {
            // these values are not visited in this AST
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineBuilderVisitor.prototype.visitState = function (ast, context) {
            // these values are not visited in this AST
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineBuilderVisitor.prototype.visitTransition = function (ast, context) {
            // these values are not visited in this AST
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineBuilderVisitor.prototype.visitAnimateChild = function (ast, context) {
            var /** @type {?} */ elementInstructions = context.subInstructions.consume(context.element);
            if (elementInstructions) {
                var /** @type {?} */ innerContext = context.createSubContext(ast.options);
                var /** @type {?} */ startTime = context.currentTimeline.currentTime;
                var /** @type {?} */ endTime = this._visitSubInstructions(elementInstructions, innerContext, /** @type {?} */ (innerContext.options));
                if (startTime != endTime) {
                    // we do this on the upper context because we created a sub context for
                    // the sub child animations
                    context.transformIntoNewTimeline(endTime);
                }
            }
            context.previousNode = ast;
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineBuilderVisitor.prototype.visitAnimateRef = function (ast, context) {
            var /** @type {?} */ innerContext = context.createSubContext(ast.options);
            innerContext.transformIntoNewTimeline();
            this.visitReference(ast.animation, innerContext);
            context.transformIntoNewTimeline(innerContext.currentTimeline.currentTime);
            context.previousNode = ast;
        };
        /**
         * @param {?} instructions
         * @param {?} context
         * @param {?} options
         * @return {?}
         */
        AnimationTimelineBuilderVisitor.prototype._visitSubInstructions = function (instructions, context, options) {
            var /** @type {?} */ startTime = context.currentTimeline.currentTime;
            var /** @type {?} */ furthestTime = startTime;
            // this is a special-case for when a user wants to skip a sub
            // animation from being fired entirely.
            var /** @type {?} */ duration = options.duration != null ? resolveTimingValue(options.duration) : null;
            var /** @type {?} */ delay = options.delay != null ? resolveTimingValue(options.delay) : null;
            if (duration !== 0) {
                instructions.forEach(function (instruction) {
                    var /** @type {?} */ instructionTimings = context.appendInstructionToTimeline(instruction, duration, delay);
                    furthestTime =
                        Math.max(furthestTime, instructionTimings.duration + instructionTimings.delay);
                });
            }
            return furthestTime;
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineBuilderVisitor.prototype.visitReference = function (ast, context) {
            context.updateOptions(ast.options, true);
            visitDslNode(this, ast.animation, context);
            context.previousNode = ast;
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineBuilderVisitor.prototype.visitSequence = function (ast, context) {
            var _this = this;
            var /** @type {?} */ subContextCount = context.subContextCount;
            var /** @type {?} */ ctx = context;
            var /** @type {?} */ options = ast.options;
            if (options && (options.params || options.delay)) {
                ctx = context.createSubContext(options);
                ctx.transformIntoNewTimeline();
                if (options.delay != null) {
                    if (ctx.previousNode.type == 6 /* Style */) {
                        ctx.currentTimeline.snapshotCurrentStyles();
                        ctx.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
                    }
                    var /** @type {?} */ delay = resolveTimingValue(options.delay);
                    ctx.delayNextStep(delay);
                }
            }
            if (ast.steps.length) {
                ast.steps.forEach(function (s) { return visitDslNode(_this, s, ctx); });
                // this is here just incase the inner steps only contain or end with a style() call
                ctx.currentTimeline.applyStylesToKeyframe();
                // this means that some animation function within the sequence
                // ended up creating a sub timeline (which means the current
                // timeline cannot overlap with the contents of the sequence)
                if (ctx.subContextCount > subContextCount) {
                    ctx.transformIntoNewTimeline();
                }
            }
            context.previousNode = ast;
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineBuilderVisitor.prototype.visitGroup = function (ast, context) {
            var _this = this;
            var /** @type {?} */ innerTimelines = [];
            var /** @type {?} */ furthestTime = context.currentTimeline.currentTime;
            var /** @type {?} */ delay = ast.options && ast.options.delay ? resolveTimingValue(ast.options.delay) : 0;
            ast.steps.forEach(function (s) {
                var /** @type {?} */ innerContext = context.createSubContext(ast.options);
                if (delay) {
                    innerContext.delayNextStep(delay);
                }
                visitDslNode(_this, s, innerContext);
                furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);
                innerTimelines.push(innerContext.currentTimeline);
            });
            // this operation is run after the AST loop because otherwise
            // if the parent timeline's collected styles were updated then
            // it would pass in invalid data into the new-to-be forked items
            innerTimelines.forEach(function (timeline) { return context.currentTimeline.mergeTimelineCollectedStyles(timeline); });
            context.transformIntoNewTimeline(furthestTime);
            context.previousNode = ast;
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineBuilderVisitor.prototype._visitTiming = function (ast, context) {
            if (((ast)).dynamic) {
                var /** @type {?} */ strValue = ((ast)).strValue;
                var /** @type {?} */ timingValue = context.params ? interpolateParams(strValue, context.params, context.errors) : strValue;
                return resolveTiming(timingValue, context.errors);
            }
            else {
                return { duration: ast.duration, delay: ast.delay, easing: ast.easing };
            }
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineBuilderVisitor.prototype.visitAnimate = function (ast, context) {
            var /** @type {?} */ timings = context.currentAnimateTimings = this._visitTiming(ast.timings, context);
            var /** @type {?} */ timeline = context.currentTimeline;
            if (timings.delay) {
                context.incrementTime(timings.delay);
                timeline.snapshotCurrentStyles();
            }
            var /** @type {?} */ style$$1 = ast.style;
            if (style$$1.type == 5 /* Keyframes */) {
                this.visitKeyframes(style$$1, context);
            }
            else {
                context.incrementTime(timings.duration);
                this.visitStyle(/** @type {?} */ (style$$1), context);
                timeline.applyStylesToKeyframe();
            }
            context.currentAnimateTimings = null;
            context.previousNode = ast;
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineBuilderVisitor.prototype.visitStyle = function (ast, context) {
            var /** @type {?} */ timeline = context.currentTimeline;
            var /** @type {?} */ timings = ((context.currentAnimateTimings));
            // this is a special case for when a style() call
            // directly follows  an animate() call (but not inside of an animate() call)
            if (!timings && timeline.getCurrentStyleProperties().length) {
                timeline.forwardFrame();
            }
            var /** @type {?} */ easing = (timings && timings.easing) || ast.easing;
            if (ast.isEmptyStep) {
                timeline.applyEmptyStep(easing);
            }
            else {
                timeline.setStyles(ast.styles, easing, context.errors, context.options);
            }
            context.previousNode = ast;
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineBuilderVisitor.prototype.visitKeyframes = function (ast, context) {
            var /** @type {?} */ currentAnimateTimings = ((context.currentAnimateTimings));
            var /** @type {?} */ startTime = (((context.currentTimeline))).duration;
            var /** @type {?} */ duration = currentAnimateTimings.duration;
            var /** @type {?} */ innerContext = context.createSubContext();
            var /** @type {?} */ innerTimeline = innerContext.currentTimeline;
            innerTimeline.easing = currentAnimateTimings.easing;
            ast.styles.forEach(function (step) {
                var /** @type {?} */ offset = step.offset || 0;
                innerTimeline.forwardTime(offset * duration);
                innerTimeline.setStyles(step.styles, step.easing, context.errors, context.options);
                innerTimeline.applyStylesToKeyframe();
            });
            // this will ensure that the parent timeline gets all the styles from
            // the child even if the new timeline below is not used
            context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline);
            // we do this because the window between this timeline and the sub timeline
            // should ensure that the styles within are exactly the same as they were before
            context.transformIntoNewTimeline(startTime + duration);
            context.previousNode = ast;
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineBuilderVisitor.prototype.visitQuery = function (ast, context) {
            var _this = this;
            // in the event that the first step before this is a style step we need
            // to ensure the styles are applied before the children are animated
            var /** @type {?} */ startTime = context.currentTimeline.currentTime;
            var /** @type {?} */ options = ((ast.options || {}));
            var /** @type {?} */ delay = options.delay ? resolveTimingValue(options.delay) : 0;
            if (delay && (context.previousNode.type === 6 /* Style */ ||
                (startTime == 0 && context.currentTimeline.getCurrentStyleProperties().length))) {
                context.currentTimeline.snapshotCurrentStyles();
                context.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
            }
            var /** @type {?} */ furthestTime = startTime;
            var /** @type {?} */ elms = context.invokeQuery(ast.selector, ast.originalSelector, ast.limit, ast.includeSelf, options.optional ? true : false, context.errors);
            context.currentQueryTotal = elms.length;
            var /** @type {?} */ sameElementTimeline = null;
            elms.forEach(function (element, i) {
                context.currentQueryIndex = i;
                var /** @type {?} */ innerContext = context.createSubContext(ast.options, element);
                if (delay) {
                    innerContext.delayNextStep(delay);
                }
                if (element === context.element) {
                    sameElementTimeline = innerContext.currentTimeline;
                }
                visitDslNode(_this, ast.animation, innerContext);
                // this is here just incase the inner steps only contain or end
                // with a style() call (which is here to signal that this is a preparatory
                // call to style an element before it is animated again)
                innerContext.currentTimeline.applyStylesToKeyframe();
                var /** @type {?} */ endTime = innerContext.currentTimeline.currentTime;
                furthestTime = Math.max(furthestTime, endTime);
            });
            context.currentQueryIndex = 0;
            context.currentQueryTotal = 0;
            context.transformIntoNewTimeline(furthestTime);
            if (sameElementTimeline) {
                context.currentTimeline.mergeTimelineCollectedStyles(sameElementTimeline);
                context.currentTimeline.snapshotCurrentStyles();
            }
            context.previousNode = ast;
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineBuilderVisitor.prototype.visitStagger = function (ast, context) {
            var /** @type {?} */ parentContext = ((context.parentContext));
            var /** @type {?} */ tl = context.currentTimeline;
            var /** @type {?} */ timings = ast.timings;
            var /** @type {?} */ duration = Math.abs(timings.duration);
            var /** @type {?} */ maxTime = duration * (context.currentQueryTotal - 1);
            var /** @type {?} */ delay = duration * context.currentQueryIndex;
            var /** @type {?} */ staggerTransformer = timings.duration < 0 ? 'reverse' : timings.easing;
            switch (staggerTransformer) {
                case 'reverse':
                    delay = maxTime - delay;
                    break;
                case 'full':
                    delay = parentContext.currentStaggerTime;
                    break;
            }
            var /** @type {?} */ timeline = context.currentTimeline;
            if (delay) {
                timeline.delayNextStep(delay);
            }
            var /** @type {?} */ startingTime = timeline.currentTime;
            visitDslNode(this, ast.animation, context);
            context.previousNode = ast;
            // time = duration + delay
            // the reason why this computation is so complex is because
            // the inner timeline may either have a delay value or a stretched
            // keyframe depending on if a subtimeline is not used or is used.
            parentContext.currentStaggerTime =
                (tl.currentTime - startingTime) + (tl.startTime - parentContext.currentTimeline.startTime);
        };
        return AnimationTimelineBuilderVisitor;
    }());
    var DEFAULT_NOOP_PREVIOUS_NODE = ({});
    var AnimationTimelineContext = (function () {
        /**
         * @param {?} _driver
         * @param {?} element
         * @param {?} subInstructions
         * @param {?} errors
         * @param {?} timelines
         * @param {?=} initialTimeline
         */
        function AnimationTimelineContext(_driver, element, subInstructions, errors, timelines, initialTimeline) {
            this._driver = _driver;
            this.element = element;
            this.subInstructions = subInstructions;
            this.errors = errors;
            this.timelines = timelines;
            this.parentContext = null;
            this.currentAnimateTimings = null;
            this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
            this.subContextCount = 0;
            this.options = {};
            this.currentQueryIndex = 0;
            this.currentQueryTotal = 0;
            this.currentStaggerTime = 0;
            this.currentTimeline = initialTimeline || new TimelineBuilder(element, 0);
            timelines.push(this.currentTimeline);
        }
        Object.defineProperty(AnimationTimelineContext.prototype, "params", {
            /**
             * @return {?}
             */
            get: function () { return this.options.params; },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} options
         * @param {?=} skipIfExists
         * @return {?}
         */
        AnimationTimelineContext.prototype.updateOptions = function (options, skipIfExists) {
            var _this = this;
            if (!options)
                return;
            var /** @type {?} */ newOptions = (options);
            var /** @type {?} */ optionsToUpdate = this.options;
            // NOTE: this will get patched up when other animation methods support duration overrides
            if (newOptions.duration != null) {
                ((optionsToUpdate)).duration = resolveTimingValue(newOptions.duration);
            }
            if (newOptions.delay != null) {
                optionsToUpdate.delay = resolveTimingValue(newOptions.delay);
            }
            var /** @type {?} */ newParams = newOptions.params;
            if (newParams) {
                var /** @type {?} */ paramsToUpdate_1 = ((optionsToUpdate.params));
                if (!paramsToUpdate_1) {
                    paramsToUpdate_1 = this.options.params = {};
                }
                Object.keys(newParams).forEach(function (name) {
                    if (!skipIfExists || !paramsToUpdate_1.hasOwnProperty(name)) {
                        paramsToUpdate_1[name] = interpolateParams(newParams[name], paramsToUpdate_1, _this.errors);
                    }
                });
            }
        };
        /**
         * @return {?}
         */
        AnimationTimelineContext.prototype._copyOptions = function () {
            var /** @type {?} */ options = {};
            if (this.options) {
                var /** @type {?} */ oldParams_1 = this.options.params;
                if (oldParams_1) {
                    var /** @type {?} */ params_2 = options['params'] = {};
                    Object.keys(oldParams_1).forEach(function (name) { params_2[name] = oldParams_1[name]; });
                }
            }
            return options;
        };
        /**
         * @param {?=} options
         * @param {?=} element
         * @param {?=} newTime
         * @return {?}
         */
        AnimationTimelineContext.prototype.createSubContext = function (options, element, newTime) {
            if (options === void 0) { options = null; }
            var /** @type {?} */ target = element || this.element;
            var /** @type {?} */ context = new AnimationTimelineContext(this._driver, target, this.subInstructions, this.errors, this.timelines, this.currentTimeline.fork(target, newTime || 0));
            context.previousNode = this.previousNode;
            context.currentAnimateTimings = this.currentAnimateTimings;
            context.options = this._copyOptions();
            context.updateOptions(options);
            context.currentQueryIndex = this.currentQueryIndex;
            context.currentQueryTotal = this.currentQueryTotal;
            context.parentContext = this;
            this.subContextCount++;
            return context;
        };
        /**
         * @param {?=} newTime
         * @return {?}
         */
        AnimationTimelineContext.prototype.transformIntoNewTimeline = function (newTime) {
            this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
            this.currentTimeline = this.currentTimeline.fork(this.element, newTime);
            this.timelines.push(this.currentTimeline);
            return this.currentTimeline;
        };
        /**
         * @param {?} instruction
         * @param {?} duration
         * @param {?} delay
         * @return {?}
         */
        AnimationTimelineContext.prototype.appendInstructionToTimeline = function (instruction, duration, delay) {
            var /** @type {?} */ updatedTimings = {
                duration: duration != null ? duration : instruction.duration,
                delay: this.currentTimeline.currentTime + (delay != null ? delay : 0) + instruction.delay,
                easing: ''
            };
            var /** @type {?} */ builder = new SubTimelineBuilder(instruction.element, instruction.keyframes, instruction.preStyleProps, instruction.postStyleProps, updatedTimings, instruction.stretchStartingKeyframe);
            this.timelines.push(builder);
            return updatedTimings;
        };
        /**
         * @param {?} time
         * @return {?}
         */
        AnimationTimelineContext.prototype.incrementTime = function (time) {
            this.currentTimeline.forwardTime(this.currentTimeline.duration + time);
        };
        /**
         * @param {?} delay
         * @return {?}
         */
        AnimationTimelineContext.prototype.delayNextStep = function (delay) {
            // negative delays are not yet supported
            if (delay > 0) {
                this.currentTimeline.delayNextStep(delay);
            }
        };
        /**
         * @param {?} selector
         * @param {?} originalSelector
         * @param {?} limit
         * @param {?} includeSelf
         * @param {?} optional
         * @param {?} errors
         * @return {?}
         */
        AnimationTimelineContext.prototype.invokeQuery = function (selector, originalSelector, limit, includeSelf, optional, errors) {
            var /** @type {?} */ results = [];
            if (includeSelf) {
                results.push(this.element);
            }
            if (selector.length > 0) {
                var /** @type {?} */ multi = limit != 1;
                var /** @type {?} */ elements = this._driver.query(this.element, selector, multi);
                if (limit !== 0) {
                    elements = elements.slice(0, limit);
                }
                results.push.apply(results, elements);
            }
            if (!optional && results.length == 0) {
                errors.push("`query(\"" + originalSelector + "\")` returned zero elements. (Use `query(\"" + originalSelector + "\", { optional: true })` if you wish to allow this.)");
            }
            return results;
        };
        return AnimationTimelineContext;
    }());
    var TimelineBuilder = (function () {
        /**
         * @param {?} element
         * @param {?} startTime
         * @param {?=} _elementTimelineStylesLookup
         */
        function TimelineBuilder(element, startTime, _elementTimelineStylesLookup) {
            this.element = element;
            this.startTime = startTime;
            this._elementTimelineStylesLookup = _elementTimelineStylesLookup;
            this.duration = 0;
            this._previousKeyframe = {};
            this._currentKeyframe = {};
            this._keyframes = new Map();
            this._styleSummary = {};
            this._pendingStyles = {};
            this._backFill = {};
            this._currentEmptyStepKeyframe = null;
            if (!this._elementTimelineStylesLookup) {
                this._elementTimelineStylesLookup = new Map();
            }
            this._localTimelineStyles = Object.create(this._backFill, {});
            this._globalTimelineStyles = this._elementTimelineStylesLookup.get(element);
            if (!this._globalTimelineStyles) {
                this._globalTimelineStyles = this._localTimelineStyles;
                this._elementTimelineStylesLookup.set(element, this._localTimelineStyles);
            }
            this._loadKeyframe();
        }
        /**
         * @return {?}
         */
        TimelineBuilder.prototype.containsAnimation = function () {
            switch (this._keyframes.size) {
                case 0:
                    return false;
                case 1:
                    return this.getCurrentStyleProperties().length > 0;
                default:
                    return true;
            }
        };
        /**
         * @return {?}
         */
        TimelineBuilder.prototype.getCurrentStyleProperties = function () { return Object.keys(this._currentKeyframe); };
        Object.defineProperty(TimelineBuilder.prototype, "currentTime", {
            /**
             * @return {?}
             */
            get: function () { return this.startTime + this.duration; },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} delay
         * @return {?}
         */
        TimelineBuilder.prototype.delayNextStep = function (delay) {
            // in the event that a style() step is placed right before a stagger()
            // and that style() step is the very first style() value in the animation
            // then we need to make a copy of the keyframe [0, copy, 1] so that the delay
            // properly applies the style() values to work with the stagger...
            var /** @type {?} */ hasPreStyleStep = this._keyframes.size == 1 && Object.keys(this._pendingStyles).length;
            if (this.duration || hasPreStyleStep) {
                this.forwardTime(this.currentTime + delay);
                if (hasPreStyleStep) {
                    this.snapshotCurrentStyles();
                }
            }
            else {
                this.startTime += delay;
            }
        };
        /**
         * @param {?} element
         * @param {?=} currentTime
         * @return {?}
         */
        TimelineBuilder.prototype.fork = function (element, currentTime) {
            this.applyStylesToKeyframe();
            return new TimelineBuilder(element, currentTime || this.currentTime, this._elementTimelineStylesLookup);
        };
        /**
         * @return {?}
         */
        TimelineBuilder.prototype._loadKeyframe = function () {
            if (this._currentKeyframe) {
                this._previousKeyframe = this._currentKeyframe;
            }
            this._currentKeyframe = ((this._keyframes.get(this.duration)));
            if (!this._currentKeyframe) {
                this._currentKeyframe = Object.create(this._backFill, {});
                this._keyframes.set(this.duration, this._currentKeyframe);
            }
        };
        /**
         * @return {?}
         */
        TimelineBuilder.prototype.forwardFrame = function () {
            this.duration += ONE_FRAME_IN_MILLISECONDS;
            this._loadKeyframe();
        };
        /**
         * @param {?} time
         * @return {?}
         */
        TimelineBuilder.prototype.forwardTime = function (time) {
            this.applyStylesToKeyframe();
            this.duration = time;
            this._loadKeyframe();
        };
        /**
         * @param {?} prop
         * @param {?} value
         * @return {?}
         */
        TimelineBuilder.prototype._updateStyle = function (prop, value) {
            this._localTimelineStyles[prop] = value;
            this._globalTimelineStyles[prop] = value;
            this._styleSummary[prop] = { time: this.currentTime, value: value };
        };
        /**
         * @return {?}
         */
        TimelineBuilder.prototype.allowOnlyTimelineStyles = function () { return this._currentEmptyStepKeyframe !== this._currentKeyframe; };
        /**
         * @param {?} easing
         * @return {?}
         */
        TimelineBuilder.prototype.applyEmptyStep = function (easing) {
            var _this = this;
            if (easing) {
                this._previousKeyframe['easing'] = easing;
            }
            // special case for animate(duration):
            // all missing styles are filled with a `*` value then
            // if any destination styles are filled in later on the same
            // keyframe then they will override the overridden styles
            // We use `_globalTimelineStyles` here because there may be
            // styles in previous keyframes that are not present in this timeline
            Object.keys(this._globalTimelineStyles).forEach(function (prop) {
                _this._backFill[prop] = _this._globalTimelineStyles[prop] || AUTO_STYLE;
                _this._currentKeyframe[prop] = AUTO_STYLE;
            });
            this._currentEmptyStepKeyframe = this._currentKeyframe;
        };
        /**
         * @param {?} input
         * @param {?} easing
         * @param {?} errors
         * @param {?=} options
         * @return {?}
         */
        TimelineBuilder.prototype.setStyles = function (input, easing, errors, options) {
            var _this = this;
            if (easing) {
                this._previousKeyframe['easing'] = easing;
            }
            var /** @type {?} */ params = (options && options.params) || {};
            var /** @type {?} */ styles = flattenStyles$1(input, this._globalTimelineStyles);
            Object.keys(styles).forEach(function (prop) {
                var /** @type {?} */ val = interpolateParams(styles[prop], params, errors);
                _this._pendingStyles[prop] = val;
                if (!_this._localTimelineStyles.hasOwnProperty(prop)) {
                    _this._backFill[prop] = _this._globalTimelineStyles.hasOwnProperty(prop) ?
                        _this._globalTimelineStyles[prop] :
                        AUTO_STYLE;
                }
                _this._updateStyle(prop, val);
            });
        };
        /**
         * @return {?}
         */
        TimelineBuilder.prototype.applyStylesToKeyframe = function () {
            var _this = this;
            var /** @type {?} */ styles = this._pendingStyles;
            var /** @type {?} */ props = Object.keys(styles);
            if (props.length == 0)
                return;
            this._pendingStyles = {};
            props.forEach(function (prop) {
                var /** @type {?} */ val = styles[prop];
                _this._currentKeyframe[prop] = val;
            });
            Object.keys(this._localTimelineStyles).forEach(function (prop) {
                if (!_this._currentKeyframe.hasOwnProperty(prop)) {
                    _this._currentKeyframe[prop] = _this._localTimelineStyles[prop];
                }
            });
        };
        /**
         * @return {?}
         */
        TimelineBuilder.prototype.snapshotCurrentStyles = function () {
            var _this = this;
            Object.keys(this._localTimelineStyles).forEach(function (prop) {
                var /** @type {?} */ val = _this._localTimelineStyles[prop];
                _this._pendingStyles[prop] = val;
                _this._updateStyle(prop, val);
            });
        };
        /**
         * @return {?}
         */
        TimelineBuilder.prototype.getFinalKeyframe = function () { return this._keyframes.get(this.duration); };
        Object.defineProperty(TimelineBuilder.prototype, "properties", {
            /**
             * @return {?}
             */
            get: function () {
                var /** @type {?} */ properties = [];
                for (var /** @type {?} */ prop in this._currentKeyframe) {
                    properties.push(prop);
                }
                return properties;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} timeline
         * @return {?}
         */
        TimelineBuilder.prototype.mergeTimelineCollectedStyles = function (timeline) {
            var _this = this;
            Object.keys(timeline._styleSummary).forEach(function (prop) {
                var /** @type {?} */ details0 = _this._styleSummary[prop];
                var /** @type {?} */ details1 = timeline._styleSummary[prop];
                if (!details0 || details1.time > details0.time) {
                    _this._updateStyle(prop, details1.value);
                }
            });
        };
        /**
         * @return {?}
         */
        TimelineBuilder.prototype.buildKeyframes = function () {
            var _this = this;
            this.applyStylesToKeyframe();
            var /** @type {?} */ preStyleProps = new Set();
            var /** @type {?} */ postStyleProps = new Set();
            var /** @type {?} */ isEmpty = this._keyframes.size === 1 && this.duration === 0;
            var /** @type {?} */ finalKeyframes = [];
            this._keyframes.forEach(function (keyframe, time) {
                var /** @type {?} */ finalKeyframe = copyStyles(keyframe, true);
                Object.keys(finalKeyframe).forEach(function (prop) {
                    var /** @type {?} */ value = finalKeyframe[prop];
                    if (value == ɵPRE_STYLE) {
                        preStyleProps.add(prop);
                    }
                    else if (value == AUTO_STYLE) {
                        postStyleProps.add(prop);
                    }
                });
                if (!isEmpty) {
                    finalKeyframe['offset'] = time / _this.duration;
                }
                finalKeyframes.push(finalKeyframe);
            });
            var /** @type {?} */ preProps = preStyleProps.size ? iteratorToArray(preStyleProps.values()) : [];
            var /** @type {?} */ postProps = postStyleProps.size ? iteratorToArray(postStyleProps.values()) : [];
            // special case for a 0-second animation (which is designed just to place styles onscreen)
            if (isEmpty) {
                var /** @type {?} */ kf0 = finalKeyframes[0];
                var /** @type {?} */ kf1 = copyObj(kf0);
                kf0['offset'] = 0;
                kf1['offset'] = 1;
                finalKeyframes = [kf0, kf1];
            }
            return createTimelineInstruction(this.element, finalKeyframes, preProps, postProps, this.duration, this.startTime, this.easing, false);
        };
        return TimelineBuilder;
    }());
    var SubTimelineBuilder = (function (_super) {
        __extends(SubTimelineBuilder, _super);
        /**
         * @param {?} element
         * @param {?} keyframes
         * @param {?} preStyleProps
         * @param {?} postStyleProps
         * @param {?} timings
         * @param {?=} _stretchStartingKeyframe
         */
        function SubTimelineBuilder(element, keyframes$$1, preStyleProps, postStyleProps, timings, _stretchStartingKeyframe) {
            if (_stretchStartingKeyframe === void 0) { _stretchStartingKeyframe = false; }
            var _this = _super.call(this, element, timings.delay) || this;
            _this.element = element;
            _this.keyframes = keyframes$$1;
            _this.preStyleProps = preStyleProps;
            _this.postStyleProps = postStyleProps;
            _this._stretchStartingKeyframe = _stretchStartingKeyframe;
            _this.timings = { duration: timings.duration, delay: timings.delay, easing: timings.easing };
            return _this;
        }
        /**
         * @return {?}
         */
        SubTimelineBuilder.prototype.containsAnimation = function () { return this.keyframes.length > 1; };
        /**
         * @return {?}
         */
        SubTimelineBuilder.prototype.buildKeyframes = function () {
            var /** @type {?} */ keyframes$$1 = this.keyframes;
            var _a = this.timings, delay = _a.delay, duration = _a.duration, easing = _a.easing;
            if (this._stretchStartingKeyframe && delay) {
                var /** @type {?} */ newKeyframes = [];
                var /** @type {?} */ totalTime = duration + delay;
                var /** @type {?} */ startingGap = delay / totalTime;
                // the original starting keyframe now starts once the delay is done
                var /** @type {?} */ newFirstKeyframe = copyStyles(keyframes$$1[0], false);
                newFirstKeyframe['offset'] = 0;
                newKeyframes.push(newFirstKeyframe);
                var /** @type {?} */ oldFirstKeyframe = copyStyles(keyframes$$1[0], false);
                oldFirstKeyframe['offset'] = roundOffset(startingGap);
                newKeyframes.push(oldFirstKeyframe);
                /*
                  When the keyframe is stretched then it means that the delay before the animation
                  starts is gone. Instead the first keyframe is placed at the start of the animation
                  and it is then copied to where it starts when the original delay is over. This basically
                  means nothing animates during that delay, but the styles are still renderered. For this
                  to work the original offset values that exist in the original keyframes must be "warped"
                  so that they can take the new keyframe + delay into account.
          
                  delay=1000, duration=1000, keyframes = 0 .5 1
          
                  turns into
          
                  delay=0, duration=2000, keyframes = 0 .33 .66 1
                 */
                // offsets between 1 ... n -1 are all warped by the keyframe stretch
                var /** @type {?} */ limit = keyframes$$1.length - 1;
                for (var /** @type {?} */ i = 1; i <= limit; i++) {
                    var /** @type {?} */ kf = copyStyles(keyframes$$1[i], false);
                    var /** @type {?} */ oldOffset = (kf['offset']);
                    var /** @type {?} */ timeAtKeyframe = delay + oldOffset * duration;
                    kf['offset'] = roundOffset(timeAtKeyframe / totalTime);
                    newKeyframes.push(kf);
                }
                // the new starting keyframe should be added at the start
                duration = totalTime;
                delay = 0;
                easing = '';
                keyframes$$1 = newKeyframes;
            }
            return createTimelineInstruction(this.element, keyframes$$1, this.preStyleProps, this.postStyleProps, duration, delay, easing, true);
        };
        return SubTimelineBuilder;
    }(TimelineBuilder));
    /**
     * @param {?} offset
     * @param {?=} decimalPoints
     * @return {?}
     */
    function roundOffset(offset, decimalPoints) {
        if (decimalPoints === void 0) { decimalPoints = 3; }
        var /** @type {?} */ mult = Math.pow(10, decimalPoints - 1);
        return Math.round(offset * mult) / mult;
    }
    /**
     * @param {?} input
     * @param {?} allStyles
     * @return {?}
     */
    function flattenStyles$1(input, allStyles) {
        var /** @type {?} */ styles = {};
        var /** @type {?} */ allProperties;
        input.forEach(function (token) {
            if (token === '*') {
                allProperties = allProperties || Object.keys(allStyles);
                allProperties.forEach(function (prop) { styles[prop] = AUTO_STYLE; });
            }
            else {
                copyStyles(/** @type {?} */ (token), false, styles);
            }
        });
        return styles;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @experimental Animation support is experimental.
     */
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */ var AnimationStyleNormalizer = (function () {
        function AnimationStyleNormalizer() {
        }
        return AnimationStyleNormalizer;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var WebAnimationsStyleNormalizer = (function (_super) {
        __extends(WebAnimationsStyleNormalizer, _super);
        function WebAnimationsStyleNormalizer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} propertyName
         * @param {?} errors
         * @return {?}
         */
        WebAnimationsStyleNormalizer.prototype.normalizePropertyName = function (propertyName, errors) {
            return dashCaseToCamelCase(propertyName);
        };
        /**
         * @param {?} userProvidedProperty
         * @param {?} normalizedProperty
         * @param {?} value
         * @param {?} errors
         * @return {?}
         */
        WebAnimationsStyleNormalizer.prototype.normalizeStyleValue = function (userProvidedProperty, normalizedProperty, value, errors) {
            var /** @type {?} */ unit = '';
            var /** @type {?} */ strVal = value.toString().trim();
            if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {
                if (typeof value === 'number') {
                    unit = 'px';
                }
                else {
                    var /** @type {?} */ valAndSuffixMatch = value.match(/^[+-]?[\d\.]+([a-z]*)$/);
                    if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
                        errors.push("Please provide a CSS unit value for " + userProvidedProperty + ":" + value);
                    }
                }
            }
            return strVal + unit;
        };
        return WebAnimationsStyleNormalizer;
    }(AnimationStyleNormalizer));
    var DIMENSIONAL_PROP_MAP = makeBooleanMap('width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent,perspective'
        .split(','));
    /**
     * @param {?} keys
     * @return {?}
     */
    function makeBooleanMap(keys) {
        var /** @type {?} */ map = {};
        keys.forEach(function (key) { return map[key] = true; });
        return map;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} element
     * @param {?} triggerName
     * @param {?} fromState
     * @param {?} toState
     * @param {?} isRemovalTransition
     * @param {?} fromStyles
     * @param {?} toStyles
     * @param {?} timelines
     * @param {?} queriedElements
     * @param {?} preStyleProps
     * @param {?} postStyleProps
     * @param {?=} errors
     * @return {?}
     */
    function createTransitionInstruction(element, triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines, queriedElements, preStyleProps, postStyleProps, errors) {
        return {
            type: 0 /* TransitionAnimation */,
            element: element,
            triggerName: triggerName,
            isRemovalTransition: isRemovalTransition,
            fromState: fromState,
            fromStyles: fromStyles,
            toState: toState,
            toStyles: toStyles,
            timelines: timelines,
            queriedElements: queriedElements,
            preStyleProps: preStyleProps,
            postStyleProps: postStyleProps,
            errors: errors
        };
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var EMPTY_OBJECT = {};
    var AnimationTransitionFactory = (function () {
        /**
         * @param {?} _triggerName
         * @param {?} ast
         * @param {?} _stateStyles
         */
        function AnimationTransitionFactory(_triggerName, ast, _stateStyles) {
            this._triggerName = _triggerName;
            this.ast = ast;
            this._stateStyles = _stateStyles;
        }
        /**
         * @param {?} currentState
         * @param {?} nextState
         * @return {?}
         */
        AnimationTransitionFactory.prototype.match = function (currentState, nextState) {
            return oneOrMoreTransitionsMatch(this.ast.matchers, currentState, nextState);
        };
        /**
         * @param {?} stateName
         * @param {?} params
         * @param {?} errors
         * @return {?}
         */
        AnimationTransitionFactory.prototype.buildStyles = function (stateName, params, errors) {
            var /** @type {?} */ backupStateStyler = this._stateStyles['*'];
            var /** @type {?} */ stateStyler = this._stateStyles[stateName];
            var /** @type {?} */ backupStyles = backupStateStyler ? backupStateStyler.buildStyles(params, errors) : {};
            return stateStyler ? stateStyler.buildStyles(params, errors) : backupStyles;
        };
        /**
         * @param {?} driver
         * @param {?} element
         * @param {?} currentState
         * @param {?} nextState
         * @param {?=} currentOptions
         * @param {?=} nextOptions
         * @param {?=} subInstructions
         * @return {?}
         */
        AnimationTransitionFactory.prototype.build = function (driver, element, currentState, nextState, currentOptions, nextOptions, subInstructions) {
            var /** @type {?} */ errors = [];
            var /** @type {?} */ transitionAnimationParams = this.ast.options && this.ast.options.params || EMPTY_OBJECT;
            var /** @type {?} */ currentAnimationParams = currentOptions && currentOptions.params || EMPTY_OBJECT;
            var /** @type {?} */ currentStateStyles = this.buildStyles(currentState, currentAnimationParams, errors);
            var /** @type {?} */ nextAnimationParams = nextOptions && nextOptions.params || EMPTY_OBJECT;
            var /** @type {?} */ nextStateStyles = this.buildStyles(nextState, nextAnimationParams, errors);
            var /** @type {?} */ queriedElements = new Set();
            var /** @type {?} */ preStyleMap = new Map();
            var /** @type {?} */ postStyleMap = new Map();
            var /** @type {?} */ isRemoval = nextState === 'void';
            var /** @type {?} */ animationOptions = { params: Object.assign({}, transitionAnimationParams, nextAnimationParams) };
            var /** @type {?} */ timelines = buildAnimationTimelines(driver, element, this.ast.animation, currentStateStyles, nextStateStyles, animationOptions, subInstructions, errors);
            if (errors.length) {
                return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, [], [], preStyleMap, postStyleMap, errors);
            }
            timelines.forEach(function (tl) {
                var /** @type {?} */ elm = tl.element;
                var /** @type {?} */ preProps = getOrSetAsInMap(preStyleMap, elm, {});
                tl.preStyleProps.forEach(function (prop) { return preProps[prop] = true; });
                var /** @type {?} */ postProps = getOrSetAsInMap(postStyleMap, elm, {});
                tl.postStyleProps.forEach(function (prop) { return postProps[prop] = true; });
                if (elm !== element) {
                    queriedElements.add(elm);
                }
            });
            var /** @type {?} */ queriedElementsList = iteratorToArray(queriedElements.values());
            return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, timelines, queriedElementsList, preStyleMap, postStyleMap);
        };
        return AnimationTransitionFactory;
    }());
    /**
     * @param {?} matchFns
     * @param {?} currentState
     * @param {?} nextState
     * @return {?}
     */
    function oneOrMoreTransitionsMatch(matchFns, currentState, nextState) {
        return matchFns.some(function (fn) { return fn(currentState, nextState); });
    }
    var AnimationStateStyles = (function () {
        /**
         * @param {?} styles
         * @param {?} defaultParams
         */
        function AnimationStateStyles(styles, defaultParams) {
            this.styles = styles;
            this.defaultParams = defaultParams;
        }
        /**
         * @param {?} params
         * @param {?} errors
         * @return {?}
         */
        AnimationStateStyles.prototype.buildStyles = function (params, errors) {
            var /** @type {?} */ finalStyles = {};
            var /** @type {?} */ combinedParams = copyObj(this.defaultParams);
            Object.keys(params).forEach(function (key) {
                var /** @type {?} */ value = params[key];
                if (value != null) {
                    combinedParams[key] = value;
                }
            });
            this.styles.styles.forEach(function (value) {
                if (typeof value !== 'string') {
                    var /** @type {?} */ styleObj_1 = (value);
                    Object.keys(styleObj_1).forEach(function (prop) {
                        var /** @type {?} */ val = styleObj_1[prop];
                        if (val.length > 1) {
                            val = interpolateParams(val, combinedParams, errors);
                        }
                        finalStyles[prop] = val;
                    });
                }
            });
            return finalStyles;
        };
        return AnimationStateStyles;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@experimental Animation support is experimental.
     * @param {?} name
     * @param {?} ast
     * @return {?}
     */
    function buildTrigger(name, ast) {
        return new AnimationTrigger(name, ast);
    }
    /**
     * \@experimental Animation support is experimental.
     */
    var AnimationTrigger = (function () {
        /**
         * @param {?} name
         * @param {?} ast
         */
        function AnimationTrigger(name, ast) {
            var _this = this;
            this.name = name;
            this.ast = ast;
            this.transitionFactories = [];
            this.states = {};
            ast.states.forEach(function (ast) {
                var defaultParams = (ast.options && ast.options.params) || {};
                _this.states[ast.name] = new AnimationStateStyles(ast.style, defaultParams);
            });
            balanceProperties(this.states, 'true', '1');
            balanceProperties(this.states, 'false', '0');
            ast.transitions.forEach(function (ast) {
                _this.transitionFactories.push(new AnimationTransitionFactory(name, ast, _this.states));
            });
            this.fallbackTransition = createFallbackTransition(name, this.states);
        }
        Object.defineProperty(AnimationTrigger.prototype, "containsQueries", {
            /**
             * @return {?}
             */
            get: function () { return this.ast.queryCount > 0; },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} currentState
         * @param {?} nextState
         * @return {?}
         */
        AnimationTrigger.prototype.matchTransition = function (currentState, nextState) {
            var /** @type {?} */ entry = this.transitionFactories.find(function (f) { return f.match(currentState, nextState); });
            return entry || null;
        };
        /**
         * @param {?} currentState
         * @param {?} params
         * @param {?} errors
         * @return {?}
         */
        AnimationTrigger.prototype.matchStyles = function (currentState, params, errors) {
            return this.fallbackTransition.buildStyles(currentState, params, errors);
        };
        return AnimationTrigger;
    }());
    /**
     * @param {?} triggerName
     * @param {?} states
     * @return {?}
     */
    function createFallbackTransition(triggerName, states) {
        var /** @type {?} */ matchers = [function (fromState, toState) { return true; }];
        var /** @type {?} */ animation$$1 = { type: 2 /* Sequence */, steps: [], options: null };
        var /** @type {?} */ transition$$1 = {
            type: 1 /* Transition */,
            animation: animation$$1,
            matchers: matchers,
            options: null,
            queryCount: 0,
            depCount: 0
        };
        return new AnimationTransitionFactory(triggerName, transition$$1, states);
    }
    /**
     * @param {?} obj
     * @param {?} key1
     * @param {?} key2
     * @return {?}
     */
    function balanceProperties(obj, key1, key2) {
        if (obj.hasOwnProperty(key1)) {
            if (!obj.hasOwnProperty(key2)) {
                obj[key2] = obj[key1];
            }
        }
        else if (obj.hasOwnProperty(key2)) {
            obj[key1] = obj[key2];
        }
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var EMPTY_INSTRUCTION_MAP = new ElementInstructionMap();
    var TimelineAnimationEngine = (function () {
        /**
         * @param {?} _driver
         * @param {?} _normalizer
         */
        function TimelineAnimationEngine(_driver, _normalizer) {
            this._driver = _driver;
            this._normalizer = _normalizer;
            this._animations = {};
            this._playersById = {};
            this.players = [];
        }
        /**
         * @param {?} id
         * @param {?} metadata
         * @return {?}
         */
        TimelineAnimationEngine.prototype.register = function (id, metadata) {
            var /** @type {?} */ errors = [];
            var /** @type {?} */ ast = buildAnimationAst(metadata, errors);
            if (errors.length) {
                throw new Error("Unable to build the animation due to the following errors: " + errors.join("\n"));
            }
            else {
                this._animations[id] = ast;
            }
        };
        /**
         * @param {?} i
         * @param {?} preStyles
         * @param {?=} postStyles
         * @return {?}
         */
        TimelineAnimationEngine.prototype._buildPlayer = function (i, preStyles, postStyles) {
            var /** @type {?} */ element = i.element;
            var /** @type {?} */ keyframes$$1 = normalizeKeyframes(this._driver, this._normalizer, element, i.keyframes, preStyles, postStyles);
            return this._driver.animate(element, keyframes$$1, i.duration, i.delay, i.easing, []);
        };
        /**
         * @param {?} id
         * @param {?} element
         * @param {?=} options
         * @return {?}
         */
        TimelineAnimationEngine.prototype.create = function (id, element, options) {
            var _this = this;
            if (options === void 0) { options = {}; }
            var /** @type {?} */ errors = [];
            var /** @type {?} */ ast = this._animations[id];
            var /** @type {?} */ instructions;
            var /** @type {?} */ autoStylesMap = new Map();
            if (ast) {
                instructions = buildAnimationTimelines(this._driver, element, ast, {}, {}, options, EMPTY_INSTRUCTION_MAP, errors);
                instructions.forEach(function (inst) {
                    var /** @type {?} */ styles = getOrSetAsInMap(autoStylesMap, inst.element, {});
                    inst.postStyleProps.forEach(function (prop) { return styles[prop] = null; });
                });
            }
            else {
                errors.push('The requested animation doesn\'t exist or has already been destroyed');
                instructions = [];
            }
            if (errors.length) {
                throw new Error("Unable to create the animation due to the following errors: " + errors.join("\n"));
            }
            autoStylesMap.forEach(function (styles, element) {
                Object.keys(styles).forEach(function (prop) { styles[prop] = _this._driver.computeStyle(element, prop, AUTO_STYLE); });
            });
            var /** @type {?} */ players = instructions.map(function (i) {
                var /** @type {?} */ styles = autoStylesMap.get(i.element);
                return _this._buildPlayer(i, {}, styles);
            });
            var /** @type {?} */ player = optimizeGroupPlayer(players);
            this._playersById[id] = player;
            player.onDestroy(function () { return _this.destroy(id); });
            this.players.push(player);
            return player;
        };
        /**
         * @param {?} id
         * @return {?}
         */
        TimelineAnimationEngine.prototype.destroy = function (id) {
            var /** @type {?} */ player = this._getPlayer(id);
            player.destroy();
            delete this._playersById[id];
            var /** @type {?} */ index = this.players.indexOf(player);
            if (index >= 0) {
                this.players.splice(index, 1);
            }
        };
        /**
         * @param {?} id
         * @return {?}
         */
        TimelineAnimationEngine.prototype._getPlayer = function (id) {
            var /** @type {?} */ player = this._playersById[id];
            if (!player) {
                throw new Error("Unable to find the timeline player referenced by " + id);
            }
            return player;
        };
        /**
         * @param {?} id
         * @param {?} element
         * @param {?} eventName
         * @param {?} callback
         * @return {?}
         */
        TimelineAnimationEngine.prototype.listen = function (id, element, eventName, callback) {
            // triggerName, fromState, toState are all ignored for timeline animations
            var /** @type {?} */ baseEvent = makeAnimationEvent(element, '', '', '');
            listenOnPlayer(this._getPlayer(id), eventName, baseEvent, callback);
            return function () { };
        };
        /**
         * @param {?} id
         * @param {?} element
         * @param {?} command
         * @param {?} args
         * @return {?}
         */
        TimelineAnimationEngine.prototype.command = function (id, element, command, args) {
            if (command == 'register') {
                this.register(id, /** @type {?} */ (args[0]));
                return;
            }
            if (command == 'create') {
                var /** @type {?} */ options = ((args[0] || {}));
                this.create(id, element, options);
                return;
            }
            var /** @type {?} */ player = this._getPlayer(id);
            switch (command) {
                case 'play':
                    player.play();
                    break;
                case 'pause':
                    player.pause();
                    break;
                case 'reset':
                    player.reset();
                    break;
                case 'restart':
                    player.restart();
                    break;
                case 'finish':
                    player.finish();
                    break;
                case 'init':
                    player.init();
                    break;
                case 'setPosition':
                    player.setPosition(parseFloat(/** @type {?} */ (args[0])));
                    break;
                case 'destroy':
                    this.destroy(id);
                    break;
            }
        };
        return TimelineAnimationEngine;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var QUEUED_CLASSNAME = 'ng-animate-queued';
    var QUEUED_SELECTOR = '.ng-animate-queued';
    var DISABLED_CLASSNAME = 'ng-animate-disabled';
    var DISABLED_SELECTOR = '.ng-animate-disabled';
    var EMPTY_PLAYER_ARRAY = [];
    var NULL_REMOVAL_STATE = {
        namespaceId: '',
        setForRemoval: null,
        hasAnimation: false,
        removedBeforeQueried: false
    };
    var NULL_REMOVED_QUERIED_STATE = {
        namespaceId: '',
        setForRemoval: null,
        hasAnimation: false,
        removedBeforeQueried: true
    };
    var REMOVAL_FLAG = '__ng_removed';
    var StateValue = (function () {
        /**
         * @param {?} input
         */
        function StateValue(input) {
            var isObj = input && input.hasOwnProperty('value');
            var value = isObj ? input['value'] : input;
            this.value = normalizeTriggerValue(value);
            if (isObj) {
                var options = copyObj(input);
                delete options['value'];
                this.options = options;
            }
            else {
                this.options = {};
            }
            if (!this.options.params) {
                this.options.params = {};
            }
        }
        Object.defineProperty(StateValue.prototype, "params", {
            /**
             * @return {?}
             */
            get: function () { return (this.options.params); },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} options
         * @return {?}
         */
        StateValue.prototype.absorbOptions = function (options) {
            var /** @type {?} */ newParams = options.params;
            if (newParams) {
                var /** @type {?} */ oldParams_2 = ((this.options.params));
                Object.keys(newParams).forEach(function (prop) {
                    if (oldParams_2[prop] == null) {
                        oldParams_2[prop] = newParams[prop];
                    }
                });
            }
        };
        return StateValue;
    }());
    var VOID_VALUE = 'void';
    var DEFAULT_STATE_VALUE = new StateValue(VOID_VALUE);
    var DELETED_STATE_VALUE = new StateValue('DELETED');
    var AnimationTransitionNamespace = (function () {
        /**
         * @param {?} id
         * @param {?} hostElement
         * @param {?} _engine
         */
        function AnimationTransitionNamespace(id, hostElement, _engine) {
            this.id = id;
            this.hostElement = hostElement;
            this._engine = _engine;
            this.players = [];
            this._triggers = {};
            this._queue = [];
            this._elementListeners = new Map();
            this._hostClassName = 'ng-tns-' + id;
            addClass(hostElement, this._hostClassName);
        }
        /**
         * @param {?} element
         * @param {?} name
         * @param {?} phase
         * @param {?} callback
         * @return {?}
         */
        AnimationTransitionNamespace.prototype.listen = function (element, name, phase, callback) {
            var _this = this;
            if (!this._triggers.hasOwnProperty(name)) {
                throw new Error("Unable to listen on the animation trigger event \"" + phase + "\" because the animation trigger \"" + name + "\" doesn't exist!");
            }
            if (phase == null || phase.length == 0) {
                throw new Error("Unable to listen on the animation trigger \"" + name + "\" because the provided event is undefined!");
            }
            if (!isTriggerEventValid(phase)) {
                throw new Error("The provided animation trigger event \"" + phase + "\" for the animation trigger \"" + name + "\" is not supported!");
            }
            var /** @type {?} */ listeners = getOrSetAsInMap(this._elementListeners, element, []);
            var /** @type {?} */ data = { name: name, phase: phase, callback: callback };
            listeners.push(data);
            var /** @type {?} */ triggersWithStates = getOrSetAsInMap(this._engine.statesByElement, element, {});
            if (!triggersWithStates.hasOwnProperty(name)) {
                addClass(element, NG_TRIGGER_CLASSNAME);
                addClass(element, NG_TRIGGER_CLASSNAME + '-' + name);
                triggersWithStates[name] = null;
            }
            return function () {
                // the event listener is removed AFTER the flush has occurred such
                // that leave animations callbacks can fire (otherwise if the node
                // is removed in between then the listeners would be deregistered)
                _this._engine.afterFlush(function () {
                    var /** @type {?} */ index = listeners.indexOf(data);
                    if (index >= 0) {
                        listeners.splice(index, 1);
                    }
                    if (!_this._triggers[name]) {
                        delete triggersWithStates[name];
                    }
                });
            };
        };
        /**
         * @param {?} name
         * @param {?} ast
         * @return {?}
         */
        AnimationTransitionNamespace.prototype.register = function (name, ast) {
            if (this._triggers[name]) {
                // throw
                return false;
            }
            else {
                this._triggers[name] = ast;
                return true;
            }
        };
        /**
         * @param {?} name
         * @return {?}
         */
        AnimationTransitionNamespace.prototype._getTrigger = function (name) {
            var /** @type {?} */ trigger$$1 = this._triggers[name];
            if (!trigger$$1) {
                throw new Error("The provided animation trigger \"" + name + "\" has not been registered!");
            }
            return trigger$$1;
        };
        /**
         * @param {?} element
         * @param {?} triggerName
         * @param {?} value
         * @param {?=} defaultToFallback
         * @return {?}
         */
        AnimationTransitionNamespace.prototype.trigger = function (element, triggerName, value, defaultToFallback) {
            var _this = this;
            if (defaultToFallback === void 0) { defaultToFallback = true; }
            var /** @type {?} */ trigger$$1 = this._getTrigger(triggerName);
            var /** @type {?} */ player = new TransitionAnimationPlayer(this.id, triggerName, element);
            var /** @type {?} */ triggersWithStates = this._engine.statesByElement.get(element);
            if (!triggersWithStates) {
                addClass(element, NG_TRIGGER_CLASSNAME);
                addClass(element, NG_TRIGGER_CLASSNAME + '-' + triggerName);
                this._engine.statesByElement.set(element, triggersWithStates = {});
            }
            var /** @type {?} */ fromState = triggersWithStates[triggerName];
            var /** @type {?} */ toState = new StateValue(value);
            var /** @type {?} */ isObj = value && value.hasOwnProperty('value');
            if (!isObj && fromState) {
                toState.absorbOptions(fromState.options);
            }
            triggersWithStates[triggerName] = toState;
            if (!fromState) {
                fromState = DEFAULT_STATE_VALUE;
            }
            else if (fromState === DELETED_STATE_VALUE) {
                return player;
            }
            var /** @type {?} */ isRemoval = toState.value === VOID_VALUE;
            // normally this isn't reached by here, however, if an object expression
            // is passed in then it may be a new object each time. Comparing the value
            // is important since that will stay the same despite there being a new object.
            // The removal arc here is special cased because the same element is triggered
            // twice in the event that it contains animations on the outer/inner portions
            // of the host container
            if (!isRemoval && fromState.value === toState.value) {
                // this means that despite the value not changing, some inner params
                // have changed which means that the animation final styles need to be applied
                if (!objEquals(fromState.params, toState.params)) {
                    var /** @type {?} */ errors = [];
                    var /** @type {?} */ fromStyles_1 = trigger$$1.matchStyles(fromState.value, fromState.params, errors);
                    var /** @type {?} */ toStyles_1 = trigger$$1.matchStyles(toState.value, toState.params, errors);
                    if (errors.length) {
                        this._engine.reportError(errors);
                    }
                    else {
                        this._engine.afterFlush(function () {
                            eraseStyles(element, fromStyles_1);
                            setStyles(element, toStyles_1);
                        });
                    }
                }
                return;
            }
            var /** @type {?} */ playersOnElement = getOrSetAsInMap(this._engine.playersByElement, element, []);
            playersOnElement.forEach(function (player) {
                // only remove the player if it is queued on the EXACT same trigger/namespace
                // we only also deal with queued players here because if the animation has
                // started then we want to keep the player alive until the flush happens
                // (which is where the previousPlayers are passed into the new palyer)
                if (player.namespaceId == _this.id && player.triggerName == triggerName && player.queued) {
                    player.destroy();
                }
            });
            var /** @type {?} */ transition$$1 = trigger$$1.matchTransition(fromState.value, toState.value);
            var /** @type {?} */ isFallbackTransition = false;
            if (!transition$$1) {
                if (!defaultToFallback)
                    return;
                transition$$1 = trigger$$1.fallbackTransition;
                isFallbackTransition = true;
            }
            this._engine.totalQueuedPlayers++;
            this._queue.push({ element: element, triggerName: triggerName, transition: transition$$1, fromState: fromState, toState: toState, player: player, isFallbackTransition: isFallbackTransition });
            if (!isFallbackTransition) {
                addClass(element, QUEUED_CLASSNAME);
                player.onStart(function () { removeClass(element, QUEUED_CLASSNAME); });
            }
            player.onDone(function () {
                var /** @type {?} */ index = _this.players.indexOf(player);
                if (index >= 0) {
                    _this.players.splice(index, 1);
                }
                var /** @type {?} */ players = _this._engine.playersByElement.get(element);
                if (players) {
                    var /** @type {?} */ index_1 = players.indexOf(player);
                    if (index_1 >= 0) {
                        players.splice(index_1, 1);
                    }
                }
            });
            this.players.push(player);
            playersOnElement.push(player);
            return player;
        };
        /**
         * @param {?} name
         * @return {?}
         */
        AnimationTransitionNamespace.prototype.deregister = function (name) {
            var _this = this;
            delete this._triggers[name];
            this._engine.statesByElement.forEach(function (stateMap, element) { delete stateMap[name]; });
            this._elementListeners.forEach(function (listeners, element) {
                _this._elementListeners.set(element, listeners.filter(function (entry) { return entry.name != name; }));
            });
        };
        /**
         * @param {?} element
         * @return {?}
         */
        AnimationTransitionNamespace.prototype.clearElementCache = function (element) {
            this._engine.statesByElement.delete(element);
            this._elementListeners.delete(element);
            var /** @type {?} */ elementPlayers = this._engine.playersByElement.get(element);
            if (elementPlayers) {
                elementPlayers.forEach(function (player) { return player.destroy(); });
                this._engine.playersByElement.delete(element);
            }
        };
        /**
         * @param {?} rootElement
         * @param {?} context
         * @param {?=} animate
         * @return {?}
         */
        AnimationTransitionNamespace.prototype._destroyInnerNodes = function (rootElement, context, animate$$1) {
            var _this = this;
            if (animate$$1 === void 0) { animate$$1 = false; }
            this._engine.driver.query(rootElement, NG_TRIGGER_SELECTOR, true).forEach(function (elm) {
                if (animate$$1 && containsClass(elm, _this._hostClassName)) {
                    var /** @type {?} */ innerNs = _this._engine.namespacesByHostElement.get(elm);
                    // special case for a host element with animations on the same element
                    if (innerNs) {
                        innerNs.removeNode(elm, context, true);
                    }
                    _this.removeNode(elm, context, true);
                }
                else {
                    _this.clearElementCache(elm);
                }
            });
        };
        /**
         * @param {?} element
         * @param {?} context
         * @param {?=} doNotRecurse
         * @return {?}
         */
        AnimationTransitionNamespace.prototype.removeNode = function (element, context, doNotRecurse) {
            var _this = this;
            var /** @type {?} */ engine = this._engine;
            if (!doNotRecurse && element.childElementCount) {
                this._destroyInnerNodes(element, context, true);
            }
            var /** @type {?} */ triggerStates = engine.statesByElement.get(element);
            if (triggerStates) {
                var /** @type {?} */ players_1 = [];
                Object.keys(triggerStates).forEach(function (triggerName) {
                    // this check is here in the event that an element is removed
                    // twice (both on the host level and the component level)
                    if (_this._triggers[triggerName]) {
                        var /** @type {?} */ player = _this.trigger(element, triggerName, VOID_VALUE, false);
                        if (player) {
                            players_1.push(player);
                        }
                    }
                });
                if (players_1.length) {
                    engine.markElementAsRemoved(this.id, element, true, context);
                    optimizeGroupPlayer(players_1).onDone(function () { return engine.processLeaveNode(element); });
                    return;
                }
            }
            // find the player that is animating and make sure that the
            // removal is delayed until that player has completed
            var /** @type {?} */ containsPotentialParentTransition = false;
            if (engine.totalAnimations) {
                var /** @type {?} */ currentPlayers = engine.players.length ? engine.playersByQueriedElement.get(element) : [];
                // when this `if statement` does not continue forward it means that
                // a previous animation query has selected the current element and
                // is animating it. In this situation want to continue fowards and
                // allow the element to be queued up for animation later.
                if (currentPlayers && currentPlayers.length) {
                    containsPotentialParentTransition = true;
                }
                else {
                    var /** @type {?} */ parent = element;
                    while (parent = parent.parentNode) {
                        var /** @type {?} */ triggers = engine.statesByElement.get(parent);
                        if (triggers) {
                            containsPotentialParentTransition = true;
                            break;
                        }
                    }
                }
            }
            // at this stage we know that the element will either get removed
            // during flush or will be picked up by a parent query. Either way
            // we need to fire the listeners for this element when it DOES get
            // removed (once the query parent animation is done or after flush)
            var /** @type {?} */ listeners = this._elementListeners.get(element);
            if (listeners) {
                var /** @type {?} */ visitedTriggers_1 = new Set();
                listeners.forEach(function (listener) {
                    var /** @type {?} */ triggerName = listener.name;
                    if (visitedTriggers_1.has(triggerName))
                        return;
                    visitedTriggers_1.add(triggerName);
                    var /** @type {?} */ trigger$$1 = _this._triggers[triggerName];
                    var /** @type {?} */ transition$$1 = trigger$$1.fallbackTransition;
                    var /** @type {?} */ elementStates = ((engine.statesByElement.get(element)));
                    var /** @type {?} */ fromState = elementStates[triggerName] || DEFAULT_STATE_VALUE;
                    var /** @type {?} */ toState = new StateValue(VOID_VALUE);
                    var /** @type {?} */ player = new TransitionAnimationPlayer(_this.id, triggerName, element);
                    _this._engine.totalQueuedPlayers++;
                    _this._queue.push({
                        element: element,
                        triggerName: triggerName,
                        transition: transition$$1,
                        fromState: fromState,
                        toState: toState,
                        player: player,
                        isFallbackTransition: true
                    });
                });
            }
            // whether or not a parent has an animation we need to delay the deferral of the leave
            // operation until we have more information (which we do after flush() has been called)
            if (containsPotentialParentTransition) {
                engine.markElementAsRemoved(this.id, element, false, context);
            }
            else {
                // we do this after the flush has occurred such
                // that the callbacks can be fired
                engine.afterFlush(function () { return _this.clearElementCache(element); });
                engine.destroyInnerAnimations(element);
                engine._onRemovalComplete(element, context);
            }
        };
        /**
         * @param {?} element
         * @param {?} parent
         * @return {?}
         */
        AnimationTransitionNamespace.prototype.insertNode = function (element, parent) { addClass(element, this._hostClassName); };
        /**
         * @param {?} microtaskId
         * @return {?}
         */
        AnimationTransitionNamespace.prototype.drainQueuedTransitions = function (microtaskId) {
            var _this = this;
            var /** @type {?} */ instructions = [];
            this._queue.forEach(function (entry) {
                var /** @type {?} */ player = entry.player;
                if (player.destroyed)
                    return;
                var /** @type {?} */ element = entry.element;
                var /** @type {?} */ listeners = _this._elementListeners.get(element);
                if (listeners) {
                    listeners.forEach(function (listener) {
                        if (listener.name == entry.triggerName) {
                            var /** @type {?} */ baseEvent = makeAnimationEvent(element, entry.triggerName, entry.fromState.value, entry.toState.value);
                            ((baseEvent))['_data'] = microtaskId;
                            listenOnPlayer(entry.player, listener.phase, baseEvent, listener.callback);
                        }
                    });
                }
                if (player.markedForDestroy) {
                    _this._engine.afterFlush(function () {
                        // now we can destroy the element properly since the event listeners have
                        // been bound to the player
                        player.destroy();
                    });
                }
                else {
                    instructions.push(entry);
                }
            });
            this._queue = [];
            return instructions.sort(function (a, b) {
                // if depCount == 0 them move to front
                // otherwise if a contains b then move back
                var /** @type {?} */ d0 = a.transition.ast.depCount;
                var /** @type {?} */ d1 = b.transition.ast.depCount;
                if (d0 == 0 || d1 == 0) {
                    return d0 - d1;
                }
                return _this._engine.driver.containsElement(a.element, b.element) ? 1 : -1;
            });
        };
        /**
         * @param {?} context
         * @return {?}
         */
        AnimationTransitionNamespace.prototype.destroy = function (context) {
            this.players.forEach(function (p) { return p.destroy(); });
            this._destroyInnerNodes(this.hostElement, context);
        };
        /**
         * @param {?} element
         * @return {?}
         */
        AnimationTransitionNamespace.prototype.elementContainsData = function (element) {
            var /** @type {?} */ containsData = false;
            if (this._elementListeners.has(element))
                containsData = true;
            containsData =
                (this._queue.find(function (entry) { return entry.element === element; }) ? true : false) || containsData;
            return containsData;
        };
        return AnimationTransitionNamespace;
    }());
    var TransitionAnimationEngine = (function () {
        /**
         * @param {?} driver
         * @param {?} _normalizer
         */
        function TransitionAnimationEngine(driver, _normalizer) {
            this.driver = driver;
            this._normalizer = _normalizer;
            this.players = [];
            this.newHostElements = new Map();
            this.playersByElement = new Map();
            this.playersByQueriedElement = new Map();
            this.statesByElement = new Map();
            this.disabledNodes = new Set();
            this.totalAnimations = 0;
            this.totalQueuedPlayers = 0;
            this._namespaceLookup = {};
            this._namespaceList = [];
            this._flushFns = [];
            this._whenQuietFns = [];
            this.namespacesByHostElement = new Map();
            this.collectedEnterElements = [];
            this.collectedLeaveElements = [];
            this.onRemovalComplete = function (element, context) { };
        }
        /**
         * @param {?} element
         * @param {?} context
         * @return {?}
         */
        TransitionAnimationEngine.prototype._onRemovalComplete = function (element, context) { this.onRemovalComplete(element, context); };
        Object.defineProperty(TransitionAnimationEngine.prototype, "queuedPlayers", {
            /**
             * @return {?}
             */
            get: function () {
                var /** @type {?} */ players = [];
                this._namespaceList.forEach(function (ns) {
                    ns.players.forEach(function (player) {
                        if (player.queued) {
                            players.push(player);
                        }
                    });
                });
                return players;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} namespaceId
         * @param {?} hostElement
         * @return {?}
         */
        TransitionAnimationEngine.prototype.createNamespace = function (namespaceId, hostElement) {
            var /** @type {?} */ ns = new AnimationTransitionNamespace(namespaceId, hostElement, this);
            if (hostElement.parentNode) {
                this._balanceNamespaceList(ns, hostElement);
            }
            else {
                // defer this later until flush during when the host element has
                // been inserted so that we know exactly where to place it in
                // the namespace list
                this.newHostElements.set(hostElement, ns);
                // given that this host element is apart of the animation code, it
                // may or may not be inserted by a parent node that is an of an
                // animation renderer type. If this happens then we can still have
                // access to this item when we query for :enter nodes. If the parent
                // is a renderer then the set data-structure will normalize the entry
                this.collectEnterElement(hostElement);
            }
            return this._namespaceLookup[namespaceId] = ns;
        };
        /**
         * @param {?} ns
         * @param {?} hostElement
         * @return {?}
         */
        TransitionAnimationEngine.prototype._balanceNamespaceList = function (ns, hostElement) {
            var /** @type {?} */ limit = this._namespaceList.length - 1;
            if (limit >= 0) {
                var /** @type {?} */ found = false;
                for (var /** @type {?} */ i = limit; i >= 0; i--) {
                    var /** @type {?} */ nextNamespace = this._namespaceList[i];
                    if (this.driver.containsElement(nextNamespace.hostElement, hostElement)) {
                        this._namespaceList.splice(i + 1, 0, ns);
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    this._namespaceList.splice(0, 0, ns);
                }
            }
            else {
                this._namespaceList.push(ns);
            }
            this.namespacesByHostElement.set(hostElement, ns);
            return ns;
        };
        /**
         * @param {?} namespaceId
         * @param {?} hostElement
         * @return {?}
         */
        TransitionAnimationEngine.prototype.register = function (namespaceId, hostElement) {
            var /** @type {?} */ ns = this._namespaceLookup[namespaceId];
            if (!ns) {
                ns = this.createNamespace(namespaceId, hostElement);
            }
            return ns;
        };
        /**
         * @param {?} namespaceId
         * @param {?} name
         * @param {?} trigger
         * @return {?}
         */
        TransitionAnimationEngine.prototype.registerTrigger = function (namespaceId, name, trigger$$1) {
            var /** @type {?} */ ns = this._namespaceLookup[namespaceId];
            if (ns && ns.register(name, trigger$$1)) {
                this.totalAnimations++;
            }
        };
        /**
         * @param {?} namespaceId
         * @param {?} context
         * @return {?}
         */
        TransitionAnimationEngine.prototype.destroy = function (namespaceId, context) {
            var _this = this;
            if (!namespaceId)
                return;
            var /** @type {?} */ ns = this._fetchNamespace(namespaceId);
            this.afterFlush(function () {
                _this.namespacesByHostElement.delete(ns.hostElement);
                delete _this._namespaceLookup[namespaceId];
                var /** @type {?} */ index = _this._namespaceList.indexOf(ns);
                if (index >= 0) {
                    _this._namespaceList.splice(index, 1);
                }
            });
            this.afterFlushAnimationsDone(function () { return ns.destroy(context); });
        };
        /**
         * @param {?} id
         * @return {?}
         */
        TransitionAnimationEngine.prototype._fetchNamespace = function (id) { return this._namespaceLookup[id]; };
        /**
         * @param {?} namespaceId
         * @param {?} element
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        TransitionAnimationEngine.prototype.trigger = function (namespaceId, element, name, value) {
            if (isElementNode(element)) {
                this._fetchNamespace(namespaceId).trigger(element, name, value);
                return true;
            }
            return false;
        };
        /**
         * @param {?} namespaceId
         * @param {?} element
         * @param {?} parent
         * @param {?} insertBefore
         * @return {?}
         */
        TransitionAnimationEngine.prototype.insertNode = function (namespaceId, element, parent, insertBefore) {
            if (!isElementNode(element))
                return;
            // special case for when an element is removed and reinserted (move operation)
            // when this occurs we do not want to use the element for deletion later
            var /** @type {?} */ details = (element[REMOVAL_FLAG]);
            if (details && details.setForRemoval) {
                details.setForRemoval = false;
            }
            // in the event that the namespaceId is blank then the caller
            // code does not contain any animation code in it, but it is
            // just being called so that the node is marked as being inserted
            if (namespaceId) {
                this._fetchNamespace(namespaceId).insertNode(element, parent);
            }
            // only *directives and host elements are inserted before
            if (insertBefore) {
                this.collectEnterElement(element);
            }
        };
        /**
         * @param {?} element
         * @return {?}
         */
        TransitionAnimationEngine.prototype.collectEnterElement = function (element) { this.collectedEnterElements.push(element); };
        /**
         * @param {?} element
         * @param {?} value
         * @return {?}
         */
        TransitionAnimationEngine.prototype.markElementAsDisabled = function (element, value) {
            if (value) {
                if (!this.disabledNodes.has(element)) {
                    this.disabledNodes.add(element);
                    addClass(element, DISABLED_CLASSNAME);
                }
            }
            else if (this.disabledNodes.has(element)) {
                this.disabledNodes.delete(element);
                removeClass(element, DISABLED_CLASSNAME);
            }
        };
        /**
         * @param {?} namespaceId
         * @param {?} element
         * @param {?} context
         * @param {?=} doNotRecurse
         * @return {?}
         */
        TransitionAnimationEngine.prototype.removeNode = function (namespaceId, element, context, doNotRecurse) {
            if (!isElementNode(element)) {
                this._onRemovalComplete(element, context);
                return;
            }
            var /** @type {?} */ ns = namespaceId ? this._fetchNamespace(namespaceId) : null;
            if (ns) {
                ns.removeNode(element, context, doNotRecurse);
            }
            else {
                this.markElementAsRemoved(namespaceId, element, false, context);
            }
        };
        /**
         * @param {?} namespaceId
         * @param {?} element
         * @param {?=} hasAnimation
         * @param {?=} context
         * @return {?}
         */
        TransitionAnimationEngine.prototype.markElementAsRemoved = function (namespaceId, element, hasAnimation, context) {
            this.collectedLeaveElements.push(element);
            element[REMOVAL_FLAG] = {
                namespaceId: namespaceId,
                setForRemoval: context, hasAnimation: hasAnimation,
                removedBeforeQueried: false
            };
        };
        /**
         * @param {?} namespaceId
         * @param {?} element
         * @param {?} name
         * @param {?} phase
         * @param {?} callback
         * @return {?}
         */
        TransitionAnimationEngine.prototype.listen = function (namespaceId, element, name, phase, callback) {
            if (isElementNode(element)) {
                return this._fetchNamespace(namespaceId).listen(element, name, phase, callback);
            }
            return function () { };
        };
        /**
         * @param {?} entry
         * @param {?} subTimelines
         * @return {?}
         */
        TransitionAnimationEngine.prototype._buildInstruction = function (entry, subTimelines) {
            return entry.transition.build(this.driver, entry.element, entry.fromState.value, entry.toState.value, entry.fromState.options, entry.toState.options, subTimelines);
        };
        /**
         * @param {?} containerElement
         * @return {?}
         */
        TransitionAnimationEngine.prototype.destroyInnerAnimations = function (containerElement) {
            var _this = this;
            var /** @type {?} */ elements = this.driver.query(containerElement, NG_TRIGGER_SELECTOR, true);
            elements.forEach(function (element) {
                var /** @type {?} */ players = _this.playersByElement.get(element);
                if (players) {
                    players.forEach(function (player) {
                        // special case for when an element is set for destruction, but hasn't started.
                        // in this situation we want to delay the destruction until the flush occurs
                        // so that any event listeners attached to the player are triggered.
                        if (player.queued) {
                            player.markedForDestroy = true;
                        }
                        else {
                            player.destroy();
                        }
                    });
                }
                var /** @type {?} */ stateMap = _this.statesByElement.get(element);
                if (stateMap) {
                    Object.keys(stateMap).forEach(function (triggerName) { return stateMap[triggerName] = DELETED_STATE_VALUE; });
                }
            });
            if (this.playersByQueriedElement.size == 0)
                return;
            elements = this.driver.query(containerElement, NG_ANIMATING_SELECTOR, true);
            if (elements.length) {
                elements.forEach(function (element) {
                    var /** @type {?} */ players = _this.playersByQueriedElement.get(element);
                    if (players) {
                        players.forEach(function (player) { return player.finish(); });
                    }
                });
            }
        };
        /**
         * @return {?}
         */
        TransitionAnimationEngine.prototype.whenRenderingDone = function () {
            var _this = this;
            return new Promise(function (resolve) {
                if (_this.players.length) {
                    return optimizeGroupPlayer(_this.players).onDone(function () { return resolve(); });
                }
                else {
                    resolve();
                }
            });
        };
        /**
         * @param {?} element
         * @return {?}
         */
        TransitionAnimationEngine.prototype.processLeaveNode = function (element) {
            var _this = this;
            var /** @type {?} */ details = (element[REMOVAL_FLAG]);
            if (details && details.setForRemoval) {
                // this will prevent it from removing it twice
                element[REMOVAL_FLAG] = NULL_REMOVAL_STATE;
                if (details.namespaceId) {
                    this.destroyInnerAnimations(element);
                    var /** @type {?} */ ns = this._fetchNamespace(details.namespaceId);
                    if (ns) {
                        ns.clearElementCache(element);
                    }
                }
                this._onRemovalComplete(element, details.setForRemoval);
            }
            if (this.driver.matchesElement(element, DISABLED_SELECTOR)) {
                this.markElementAsDisabled(element, false);
            }
            this.driver.query(element, DISABLED_SELECTOR, true).forEach(function (node) {
                _this.markElementAsDisabled(element, false);
            });
        };
        /**
         * @param {?=} microtaskId
         * @return {?}
         */
        TransitionAnimationEngine.prototype.flush = function (microtaskId) {
            var _this = this;
            if (microtaskId === void 0) { microtaskId = -1; }
            var /** @type {?} */ players = [];
            if (this.newHostElements.size) {
                this.newHostElements.forEach(function (ns, element) { return _this._balanceNamespaceList(ns, element); });
                this.newHostElements.clear();
            }
            if (this._namespaceList.length &&
                (this.totalQueuedPlayers || this.collectedLeaveElements.length)) {
                var /** @type {?} */ cleanupFns = [];
                try {
                    players = this._flushAnimations(cleanupFns, microtaskId);
                }
                finally {
                    for (var /** @type {?} */ i = 0; i < cleanupFns.length; i++) {
                        cleanupFns[i]();
                    }
                }
            }
            else {
                for (var /** @type {?} */ i = 0; i < this.collectedLeaveElements.length; i++) {
                    var /** @type {?} */ element = this.collectedLeaveElements[i];
                    this.processLeaveNode(element);
                }
            }
            this.totalQueuedPlayers = 0;
            this.collectedEnterElements.length = 0;
            this.collectedLeaveElements.length = 0;
            this._flushFns.forEach(function (fn) { return fn(); });
            this._flushFns = [];
            if (this._whenQuietFns.length) {
                // we move these over to a variable so that
                // if any new callbacks are registered in another
                // flush they do not populate the existing set
                var /** @type {?} */ quietFns_1 = this._whenQuietFns;
                this._whenQuietFns = [];
                if (players.length) {
                    optimizeGroupPlayer(players).onDone(function () { quietFns_1.forEach(function (fn) { return fn(); }); });
                }
                else {
                    quietFns_1.forEach(function (fn) { return fn(); });
                }
            }
        };
        /**
         * @param {?} errors
         * @return {?}
         */
        TransitionAnimationEngine.prototype.reportError = function (errors) {
            throw new Error("Unable to process animations due to the following failed trigger transitions\n " + errors.join('\n'));
        };
        /**
         * @param {?} cleanupFns
         * @param {?} microtaskId
         * @return {?}
         */
        TransitionAnimationEngine.prototype._flushAnimations = function (cleanupFns, microtaskId) {
            var _this = this;
            var /** @type {?} */ subTimelines = new ElementInstructionMap();
            var /** @type {?} */ skippedPlayers = [];
            var /** @type {?} */ skippedPlayersMap = new Map();
            var /** @type {?} */ queuedInstructions = [];
            var /** @type {?} */ queriedElements = new Map();
            var /** @type {?} */ allPreStyleElements = new Map();
            var /** @type {?} */ allPostStyleElements = new Map();
            var /** @type {?} */ disabledElementsSet = new Set();
            this.disabledNodes.forEach(function (node) {
                disabledElementsSet.add(node);
                var /** @type {?} */ nodesThatAreDisabled = _this.driver.query(node, QUEUED_SELECTOR, true);
                for (var /** @type {?} */ i = 0; i < nodesThatAreDisabled.length; i++) {
                    disabledElementsSet.add(nodesThatAreDisabled[i]);
                }
            });
            var /** @type {?} */ bodyNode = getBodyNode();
            var /** @type {?} */ allEnterNodes = this.collectedEnterElements.length ?
                this.collectedEnterElements.filter(createIsRootFilterFn(this.collectedEnterElements)) :
                [];
            // this must occur before the instructions are built below such that
            // the :enter queries match the elements (since the timeline queries
            // are fired during instruction building).
            for (var /** @type {?} */ i = 0; i < allEnterNodes.length; i++) {
                addClass(allEnterNodes[i], ENTER_CLASSNAME);
            }
            var /** @type {?} */ allLeaveNodes = [];
            var /** @type {?} */ leaveNodesWithoutAnimations = new Set();
            for (var /** @type {?} */ i = 0; i < this.collectedLeaveElements.length; i++) {
                var /** @type {?} */ element = this.collectedLeaveElements[i];
                var /** @type {?} */ details = (element[REMOVAL_FLAG]);
                if (details && details.setForRemoval) {
                    addClass(element, LEAVE_CLASSNAME);
                    allLeaveNodes.push(element);
                    if (!details.hasAnimation) {
                        leaveNodesWithoutAnimations.add(element);
                    }
                }
            }
            cleanupFns.push(function () {
                allEnterNodes.forEach(function (element) { return removeClass(element, ENTER_CLASSNAME); });
                allLeaveNodes.forEach(function (element) {
                    removeClass(element, LEAVE_CLASSNAME);
                    _this.processLeaveNode(element);
                });
            });
            var /** @type {?} */ allPlayers = [];
            var /** @type {?} */ erroneousTransitions = [];
            for (var /** @type {?} */ i = this._namespaceList.length - 1; i >= 0; i--) {
                var /** @type {?} */ ns = this._namespaceList[i];
                ns.drainQueuedTransitions(microtaskId).forEach(function (entry) {
                    var /** @type {?} */ player = entry.player;
                    allPlayers.push(player);
                    var /** @type {?} */ element = entry.element;
                    if (!bodyNode || !_this.driver.containsElement(bodyNode, element)) {
                        player.destroy();
                        return;
                    }
                    var /** @type {?} */ instruction = ((_this._buildInstruction(entry, subTimelines)));
                    if (instruction.errors && instruction.errors.length) {
                        erroneousTransitions.push(instruction);
                        return;
                    }
                    // if a unmatched transition is queued to go then it SHOULD NOT render
                    // an animation and cancel the previously running animations.
                    if (entry.isFallbackTransition) {
                        player.onStart(function () { return eraseStyles(element, instruction.fromStyles); });
                        player.onDestroy(function () { return setStyles(element, instruction.toStyles); });
                        skippedPlayers.push(player);
                        return;
                    }
                    // this means that if a parent animation uses this animation as a sub trigger
                    // then it will instruct the timeline builder to not add a player delay, but
                    // instead stretch the first keyframe gap up until the animation starts. The
                    // reason this is important is to prevent extra initialization styles from being
                    // required by the user in the animation.
                    instruction.timelines.forEach(function (tl) { return tl.stretchStartingKeyframe = true; });
                    subTimelines.append(element, instruction.timelines);
                    var /** @type {?} */ tuple = { instruction: instruction, player: player, element: element };
                    queuedInstructions.push(tuple);
                    instruction.queriedElements.forEach(function (element) { return getOrSetAsInMap(queriedElements, element, []).push(player); });
                    instruction.preStyleProps.forEach(function (stringMap, element) {
                        var /** @type {?} */ props = Object.keys(stringMap);
                        if (props.length) {
                            var /** @type {?} */ setVal_1 = ((allPreStyleElements.get(element)));
                            if (!setVal_1) {
                                allPreStyleElements.set(element, setVal_1 = new Set());
                            }
                            props.forEach(function (prop) { return setVal_1.add(prop); });
                        }
                    });
                    instruction.postStyleProps.forEach(function (stringMap, element) {
                        var /** @type {?} */ props = Object.keys(stringMap);
                        var /** @type {?} */ setVal = ((allPostStyleElements.get(element)));
                        if (!setVal) {
                            allPostStyleElements.set(element, setVal = new Set());
                        }
                        props.forEach(function (prop) { return setVal.add(prop); });
                    });
                });
            }
            if (erroneousTransitions.length) {
                var /** @type {?} */ errors_1 = [];
                erroneousTransitions.forEach(function (instruction) {
                    errors_1.push("@" + instruction.triggerName + " has failed due to:\n"); /** @type {?} */
                    ((instruction.errors)).forEach(function (error) { return errors_1.push("- " + error + "\n"); });
                });
                allPlayers.forEach(function (player) { return player.destroy(); });
                this.reportError(errors_1);
            }
            // these can only be detected here since we have a map of all the elements
            // that have animations attached to them... We use a set here in the event
            // multiple enter captures on the same element were caught in different
            // renderer namespaces (e.g. when a @trigger was on a host binding that had *ngIf)
            var /** @type {?} */ enterNodesWithoutAnimations = new Set();
            for (var /** @type {?} */ i = 0; i < allEnterNodes.length; i++) {
                var /** @type {?} */ element = allEnterNodes[i];
                if (!subTimelines.has(element)) {
                    enterNodesWithoutAnimations.add(element);
                }
            }
            var /** @type {?} */ allPreviousPlayersMap = new Map();
            var /** @type {?} */ sortedParentElements = [];
            queuedInstructions.forEach(function (entry) {
                var /** @type {?} */ element = entry.element;
                if (subTimelines.has(element)) {
                    sortedParentElements.unshift(element);
                    _this._beforeAnimationBuild(entry.player.namespaceId, entry.instruction, allPreviousPlayersMap);
                }
            });
            skippedPlayers.forEach(function (player) {
                var /** @type {?} */ element = player.element;
                var /** @type {?} */ previousPlayers = _this._getPreviousPlayers(element, false, player.namespaceId, player.triggerName, null);
                previousPlayers.forEach(function (prevPlayer) {
                    getOrSetAsInMap(allPreviousPlayersMap, element, []).push(prevPlayer);
                    prevPlayer.destroy();
                });
            });
            // this is a special case for nodes that will be removed (either by)
            // having their own leave animations or by being queried in a container
            // that will be removed once a parent animation is complete. The idea
            // here is that * styles must be identical to ! styles because of
            // backwards compatibility (* is also filled in by default in many places).
            // Otherwise * styles will return an empty value or auto since the element
            // that is being getComputedStyle'd will not be visible (since * = destination)
            var /** @type {?} */ replaceNodes = allLeaveNodes.filter(function (node) {
                return replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements);
            });
            // POST STAGE: fill the * styles
            var _a = cloakAndComputeStyles(this.driver, leaveNodesWithoutAnimations, allPostStyleElements, AUTO_STYLE), postStylesMap = _a[0], allLeaveQueriedNodes = _a[1];
            allLeaveQueriedNodes.forEach(function (node) {
                if (replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements)) {
                    replaceNodes.push(node);
                }
            });
            // PRE STAGE: fill the ! styles
            var preStylesMap = (allPreStyleElements.size ?
                cloakAndComputeStyles(this.driver, enterNodesWithoutAnimations, allPreStyleElements, ɵPRE_STYLE) :
                [new Map()])[0];
            replaceNodes.forEach(function (node) {
                var /** @type {?} */ post = postStylesMap.get(node);
                var /** @type {?} */ pre = preStylesMap.get(node);
                postStylesMap.set(node, /** @type {?} */ (Object.assign({}, post, pre)));
            });
            var /** @type {?} */ rootPlayers = [];
            var /** @type {?} */ subPlayers = [];
            queuedInstructions.forEach(function (entry) {
                var element = entry.element, player = entry.player, instruction = entry.instruction;
                // this means that it was never consumed by a parent animation which
                // means that it is independent and therefore should be set for animation
                if (subTimelines.has(element)) {
                    if (disabledElementsSet.has(element)) {
                        skippedPlayers.push(player);
                        return;
                    }
                    var /** @type {?} */ innerPlayer = _this._buildAnimation(player.namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap);
                    player.setRealPlayer(innerPlayer);
                    var /** @type {?} */ parentHasPriority = null;
                    for (var /** @type {?} */ i = 0; i < sortedParentElements.length; i++) {
                        var /** @type {?} */ parent = sortedParentElements[i];
                        if (parent === element)
                            break;
                        if (_this.driver.containsElement(parent, element)) {
                            parentHasPriority = parent;
                            break;
                        }
                    }
                    if (parentHasPriority) {
                        var /** @type {?} */ parentPlayers = _this.playersByElement.get(parentHasPriority);
                        if (parentPlayers && parentPlayers.length) {
                            player.parentPlayer = optimizeGroupPlayer(parentPlayers);
                        }
                        skippedPlayers.push(player);
                    }
                    else {
                        rootPlayers.push(player);
                    }
                }
                else {
                    eraseStyles(element, instruction.fromStyles);
                    player.onDestroy(function () { return setStyles(element, instruction.toStyles); });
                    // there still might be a ancestor player animating this
                    // element therefore we will still add it as a sub player
                    // even if its animation may be disabled
                    subPlayers.push(player);
                    if (disabledElementsSet.has(element)) {
                        skippedPlayers.push(player);
                    }
                }
            });
            // find all of the sub players' corresponding inner animation player
            subPlayers.forEach(function (player) {
                // even if any players are not found for a sub animation then it
                // will still complete itself after the next tick since it's Noop
                var /** @type {?} */ playersForElement = skippedPlayersMap.get(player.element);
                if (playersForElement && playersForElement.length) {
                    var /** @type {?} */ innerPlayer = optimizeGroupPlayer(playersForElement);
                    player.setRealPlayer(innerPlayer);
                }
            });
            // the reason why we don't actually play the animation is
            // because all that a skipped player is designed to do is to
            // fire the start/done transition callback events
            skippedPlayers.forEach(function (player) {
                if (player.parentPlayer) {
                    player.parentPlayer.onDestroy(function () { return player.destroy(); });
                }
                else {
                    player.destroy();
                }
            });
            // run through all of the queued removals and see if they
            // were picked up by a query. If not then perform the removal
            // operation right away unless a parent animation is ongoing.
            for (var /** @type {?} */ i = 0; i < allLeaveNodes.length; i++) {
                var /** @type {?} */ element = allLeaveNodes[i];
                var /** @type {?} */ details = (element[REMOVAL_FLAG]);
                removeClass(element, LEAVE_CLASSNAME);
                // this means the element has a removal animation that is being
                // taken care of and therefore the inner elements will hang around
                // until that animation is over (or the parent queried animation)
                if (details && details.hasAnimation)
                    continue;
                var /** @type {?} */ players = [];
                // if this element is queried or if it contains queried children
                // then we want for the element not to be removed from the page
                // until the queried animations have finished
                if (queriedElements.size) {
                    var /** @type {?} */ queriedPlayerResults = queriedElements.get(element);
                    if (queriedPlayerResults && queriedPlayerResults.length) {
                        players.push.apply(players, queriedPlayerResults);
                    }
                    var /** @type {?} */ queriedInnerElements = this.driver.query(element, NG_ANIMATING_SELECTOR, true);
                    for (var /** @type {?} */ j = 0; j < queriedInnerElements.length; j++) {
                        var /** @type {?} */ queriedPlayers = queriedElements.get(queriedInnerElements[j]);
                        if (queriedPlayers && queriedPlayers.length) {
                            players.push.apply(players, queriedPlayers);
                        }
                    }
                }
                var /** @type {?} */ activePlayers = players.filter(function (p) { return !p.destroyed; });
                if (activePlayers.length) {
                    removeNodesAfterAnimationDone(this, element, activePlayers);
                }
                else {
                    this.processLeaveNode(element);
                }
            }
            // this is required so the cleanup method doesn't remove them
            allLeaveNodes.length = 0;
            rootPlayers.forEach(function (player) {
                _this.players.push(player);
                player.onDone(function () {
                    player.destroy();
                    var /** @type {?} */ index = _this.players.indexOf(player);
                    _this.players.splice(index, 1);
                });
                player.play();
            });
            return rootPlayers;
        };
        /**
         * @param {?} namespaceId
         * @param {?} element
         * @return {?}
         */
        TransitionAnimationEngine.prototype.elementContainsData = function (namespaceId, element) {
            var /** @type {?} */ containsData = false;
            var /** @type {?} */ details = (element[REMOVAL_FLAG]);
            if (details && details.setForRemoval)
                containsData = true;
            if (this.playersByElement.has(element))
                containsData = true;
            if (this.playersByQueriedElement.has(element))
                containsData = true;
            if (this.statesByElement.has(element))
                containsData = true;
            return this._fetchNamespace(namespaceId).elementContainsData(element) || containsData;
        };
        /**
         * @param {?} callback
         * @return {?}
         */
        TransitionAnimationEngine.prototype.afterFlush = function (callback) { this._flushFns.push(callback); };
        /**
         * @param {?} callback
         * @return {?}
         */
        TransitionAnimationEngine.prototype.afterFlushAnimationsDone = function (callback) { this._whenQuietFns.push(callback); };
        /**
         * @param {?} element
         * @param {?} isQueriedElement
         * @param {?=} namespaceId
         * @param {?=} triggerName
         * @param {?=} toStateValue
         * @return {?}
         */
        TransitionAnimationEngine.prototype._getPreviousPlayers = function (element, isQueriedElement, namespaceId, triggerName, toStateValue) {
            var /** @type {?} */ players = [];
            if (isQueriedElement) {
                var /** @type {?} */ queriedElementPlayers = this.playersByQueriedElement.get(element);
                if (queriedElementPlayers) {
                    players = queriedElementPlayers;
                }
            }
            else {
                var /** @type {?} */ elementPlayers = this.playersByElement.get(element);
                if (elementPlayers) {
                    var /** @type {?} */ isRemovalAnimation_1 = !toStateValue || toStateValue == VOID_VALUE;
                    elementPlayers.forEach(function (player) {
                        if (player.queued)
                            return;
                        if (!isRemovalAnimation_1 && player.triggerName != triggerName)
                            return;
                        players.push(player);
                    });
                }
            }
            if (namespaceId || triggerName) {
                players = players.filter(function (player) {
                    if (namespaceId && namespaceId != player.namespaceId)
                        return false;
                    if (triggerName && triggerName != player.triggerName)
                        return false;
                    return true;
                });
            }
            return players;
        };
        /**
         * @param {?} namespaceId
         * @param {?} instruction
         * @param {?} allPreviousPlayersMap
         * @return {?}
         */
        TransitionAnimationEngine.prototype._beforeAnimationBuild = function (namespaceId, instruction, allPreviousPlayersMap) {
            var _this = this;
            var /** @type {?} */ triggerName = instruction.triggerName;
            var /** @type {?} */ rootElement = instruction.element;
            // when a removal animation occurs, ALL previous players are collected
            // and destroyed (even if they are outside of the current namespace)
            var /** @type {?} */ targetNameSpaceId = instruction.isRemovalTransition ? undefined : namespaceId;
            var /** @type {?} */ targetTriggerName = instruction.isRemovalTransition ? undefined : triggerName;
            instruction.timelines.map(function (timelineInstruction) {
                var /** @type {?} */ element = timelineInstruction.element;
                var /** @type {?} */ isQueriedElement = element !== rootElement;
                var /** @type {?} */ players = getOrSetAsInMap(allPreviousPlayersMap, element, []);
                var /** @type {?} */ previousPlayers = _this._getPreviousPlayers(element, isQueriedElement, targetNameSpaceId, targetTriggerName, instruction.toState);
                previousPlayers.forEach(function (player) {
                    var /** @type {?} */ realPlayer = (player.getRealPlayer());
                    if (realPlayer.beforeDestroy) {
                        realPlayer.beforeDestroy();
                    }
                    player.destroy();
                    players.push(player);
                });
            });
            // this needs to be done so that the PRE/POST styles can be
            // computed properly without interfering with the previous animation
            eraseStyles(rootElement, instruction.fromStyles);
        };
        /**
         * @param {?} namespaceId
         * @param {?} instruction
         * @param {?} allPreviousPlayersMap
         * @param {?} skippedPlayersMap
         * @param {?} preStylesMap
         * @param {?} postStylesMap
         * @return {?}
         */
        TransitionAnimationEngine.prototype._buildAnimation = function (namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap) {
            var _this = this;
            var /** @type {?} */ triggerName = instruction.triggerName;
            var /** @type {?} */ rootElement = instruction.element;
            // we first run this so that the previous animation player
            // data can be passed into the successive animation players
            var /** @type {?} */ allQueriedPlayers = [];
            var /** @type {?} */ allConsumedElements = new Set();
            var /** @type {?} */ allSubElements = new Set();
            var /** @type {?} */ allNewPlayers = instruction.timelines.map(function (timelineInstruction) {
                var /** @type {?} */ element = timelineInstruction.element;
                allConsumedElements.add(element);
                // FIXME (matsko): make sure to-be-removed animations are removed properly
                var /** @type {?} */ details = element[REMOVAL_FLAG];
                if (details && details.removedBeforeQueried)
                    return new NoopAnimationPlayer();
                var /** @type {?} */ isQueriedElement = element !== rootElement;
                var /** @type {?} */ previousPlayers = flattenGroupPlayers((allPreviousPlayersMap.get(element) || EMPTY_PLAYER_ARRAY)
                    .map(function (p) { return p.getRealPlayer(); }))
                    .filter(function (p) {
                    // the `element` is not apart of the AnimationPlayer definition, but
                    // Mock/WebAnimations
                    // use the element within their implementation. This will be added in Angular5 to
                    // AnimationPlayer
                    var /** @type {?} */ pp = (p);
                    return pp.element ? pp.element === element : false;
                });
                var /** @type {?} */ preStyles = preStylesMap.get(element);
                var /** @type {?} */ postStyles = postStylesMap.get(element);
                var /** @type {?} */ keyframes$$1 = normalizeKeyframes(_this.driver, _this._normalizer, element, timelineInstruction.keyframes, preStyles, postStyles);
                var /** @type {?} */ player = _this._buildPlayer(timelineInstruction, keyframes$$1, previousPlayers);
                // this means that this particular player belongs to a sub trigger. It is
                // important that we match this player up with the corresponding (@trigger.listener)
                if (timelineInstruction.subTimeline && skippedPlayersMap) {
                    allSubElements.add(element);
                }
                if (isQueriedElement) {
                    var /** @type {?} */ wrappedPlayer = new TransitionAnimationPlayer(namespaceId, triggerName, element);
                    wrappedPlayer.setRealPlayer(player);
                    allQueriedPlayers.push(wrappedPlayer);
                }
                return player;
            });
            allQueriedPlayers.forEach(function (player) {
                getOrSetAsInMap(_this.playersByQueriedElement, player.element, []).push(player);
                player.onDone(function () { return deleteOrUnsetInMap(_this.playersByQueriedElement, player.element, player); });
            });
            allConsumedElements.forEach(function (element) { return addClass(element, NG_ANIMATING_CLASSNAME); });
            var /** @type {?} */ player = optimizeGroupPlayer(allNewPlayers);
            player.onDestroy(function () {
                allConsumedElements.forEach(function (element) { return removeClass(element, NG_ANIMATING_CLASSNAME); });
                setStyles(rootElement, instruction.toStyles);
            });
            // this basically makes all of the callbacks for sub element animations
            // be dependent on the upper players for when they finish
            allSubElements.forEach(function (element) { getOrSetAsInMap(skippedPlayersMap, element, []).push(player); });
            return player;
        };
        /**
         * @param {?} instruction
         * @param {?} keyframes
         * @param {?} previousPlayers
         * @return {?}
         */
        TransitionAnimationEngine.prototype._buildPlayer = function (instruction, keyframes$$1, previousPlayers) {
            if (keyframes$$1.length > 0) {
                return this.driver.animate(instruction.element, keyframes$$1, instruction.duration, instruction.delay, instruction.easing, previousPlayers);
            }
            // special case for when an empty transition|definition is provided
            // ... there is no point in rendering an empty animation
            return new NoopAnimationPlayer();
        };
        return TransitionAnimationEngine;
    }());
    var TransitionAnimationPlayer = (function () {
        /**
         * @param {?} namespaceId
         * @param {?} triggerName
         * @param {?} element
         */
        function TransitionAnimationPlayer(namespaceId, triggerName, element) {
            this.namespaceId = namespaceId;
            this.triggerName = triggerName;
            this.element = element;
            this._player = new NoopAnimationPlayer();
            this._containsRealPlayer = false;
            this._queuedCallbacks = {};
            this._destroyed = false;
            this.markedForDestroy = false;
        }
        Object.defineProperty(TransitionAnimationPlayer.prototype, "queued", {
            /**
             * @return {?}
             */
            get: function () { return this._containsRealPlayer == false; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TransitionAnimationPlayer.prototype, "destroyed", {
            /**
             * @return {?}
             */
            get: function () { return this._destroyed; },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} player
         * @return {?}
         */
        TransitionAnimationPlayer.prototype.setRealPlayer = function (player) {
            var _this = this;
            if (this._containsRealPlayer)
                return;
            this._player = player;
            Object.keys(this._queuedCallbacks).forEach(function (phase) {
                _this._queuedCallbacks[phase].forEach(function (callback) { return listenOnPlayer(player, phase, undefined, callback); });
            });
            this._queuedCallbacks = {};
            this._containsRealPlayer = true;
        };
        /**
         * @return {?}
         */
        TransitionAnimationPlayer.prototype.getRealPlayer = function () { return this._player; };
        /**
         * @param {?} name
         * @param {?} callback
         * @return {?}
         */
        TransitionAnimationPlayer.prototype._queueEvent = function (name, callback) {
            getOrSetAsInMap(this._queuedCallbacks, name, []).push(callback);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        TransitionAnimationPlayer.prototype.onDone = function (fn) {
            if (this.queued) {
                this._queueEvent('done', fn);
            }
            this._player.onDone(fn);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        TransitionAnimationPlayer.prototype.onStart = function (fn) {
            if (this.queued) {
                this._queueEvent('start', fn);
            }
            this._player.onStart(fn);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        TransitionAnimationPlayer.prototype.onDestroy = function (fn) {
            if (this.queued) {
                this._queueEvent('destroy', fn);
            }
            this._player.onDestroy(fn);
        };
        /**
         * @return {?}
         */
        TransitionAnimationPlayer.prototype.init = function () { this._player.init(); };
        /**
         * @return {?}
         */
        TransitionAnimationPlayer.prototype.hasStarted = function () { return this.queued ? false : this._player.hasStarted(); };
        /**
         * @return {?}
         */
        TransitionAnimationPlayer.prototype.play = function () { !this.queued && this._player.play(); };
        /**
         * @return {?}
         */
        TransitionAnimationPlayer.prototype.pause = function () { !this.queued && this._player.pause(); };
        /**
         * @return {?}
         */
        TransitionAnimationPlayer.prototype.restart = function () { !this.queued && this._player.restart(); };
        /**
         * @return {?}
         */
        TransitionAnimationPlayer.prototype.finish = function () { this._player.finish(); };
        /**
         * @return {?}
         */
        TransitionAnimationPlayer.prototype.destroy = function () {
            this._destroyed = true;
            this._player.destroy();
        };
        /**
         * @return {?}
         */
        TransitionAnimationPlayer.prototype.reset = function () { !this.queued && this._player.reset(); };
        /**
         * @param {?} p
         * @return {?}
         */
        TransitionAnimationPlayer.prototype.setPosition = function (p) {
            if (!this.queued) {
                this._player.setPosition(p);
            }
        };
        /**
         * @return {?}
         */
        TransitionAnimationPlayer.prototype.getPosition = function () { return this.queued ? 0 : this._player.getPosition(); };
        Object.defineProperty(TransitionAnimationPlayer.prototype, "totalTime", {
            /**
             * @return {?}
             */
            get: function () { return this._player.totalTime; },
            enumerable: true,
            configurable: true
        });
        return TransitionAnimationPlayer;
    }());
    /**
     * @param {?} map
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function deleteOrUnsetInMap(map, key, value) {
        var /** @type {?} */ currentValues;
        if (map instanceof Map) {
            currentValues = map.get(key);
            if (currentValues) {
                if (currentValues.length) {
                    var /** @type {?} */ index = currentValues.indexOf(value);
                    currentValues.splice(index, 1);
                }
                if (currentValues.length == 0) {
                    map.delete(key);
                }
            }
        }
        else {
            currentValues = map[key];
            if (currentValues) {
                if (currentValues.length) {
                    var /** @type {?} */ index = currentValues.indexOf(value);
                    currentValues.splice(index, 1);
                }
                if (currentValues.length == 0) {
                    delete map[key];
                }
            }
        }
        return currentValues;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function normalizeTriggerValue(value) {
        // we use `!= null` here because it's the most simple
        // way to test against a "falsy" value without mixing
        // in empty strings or a zero value. DO NOT OPTIMIZE.
        return value != null ? value : null;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    function isElementNode(node) {
        return node && node['nodeType'] === 1;
    }
    /**
     * @param {?} eventName
     * @return {?}
     */
    function isTriggerEventValid(eventName) {
        return eventName == 'start' || eventName == 'done';
    }
    /**
     * @param {?} element
     * @param {?=} value
     * @return {?}
     */
    function cloakElement(element, value) {
        var /** @type {?} */ oldValue = element.style.display;
        element.style.display = value != null ? value : 'none';
        return oldValue;
    }
    /**
     * @param {?} driver
     * @param {?} elements
     * @param {?} elementPropsMap
     * @param {?} defaultStyle
     * @return {?}
     */
    function cloakAndComputeStyles(driver, elements, elementPropsMap, defaultStyle) {
        var /** @type {?} */ cloakVals = [];
        elements.forEach(function (element) { return cloakVals.push(cloakElement(element)); });
        var /** @type {?} */ valuesMap = new Map();
        var /** @type {?} */ failedElements = [];
        elementPropsMap.forEach(function (props, element) {
            var /** @type {?} */ styles = {};
            props.forEach(function (prop) {
                var /** @type {?} */ value = styles[prop] = driver.computeStyle(element, prop, defaultStyle);
                // there is no easy way to detect this because a sub element could be removed
                // by a parent animation element being detached.
                if (!value || value.length == 0) {
                    element[REMOVAL_FLAG] = NULL_REMOVED_QUERIED_STATE;
                    failedElements.push(element);
                }
            });
            valuesMap.set(element, styles);
        });
        // we use a index variable here since Set.forEach(a, i) does not return
        // an index value for the closure (but instead just the value)
        var /** @type {?} */ i = 0;
        elements.forEach(function (element) { return cloakElement(element, cloakVals[i++]); });
        return [valuesMap, failedElements];
    }
    /**
     * @param {?} nodes
     * @return {?}
     */
    function createIsRootFilterFn(nodes) {
        var /** @type {?} */ nodeSet = new Set(nodes);
        var /** @type {?} */ knownRootContainer = new Set();
        var /** @type {?} */ isRoot;
        isRoot = function (node) {
            if (!node)
                return true;
            if (nodeSet.has(node.parentNode))
                return false;
            if (knownRootContainer.has(node.parentNode))
                return true;
            if (isRoot(node.parentNode)) {
                knownRootContainer.add(node);
                return true;
            }
            return false;
        };
        return isRoot;
    }
    var CLASSES_CACHE_KEY = '$$classes';
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    function containsClass(element, className) {
        if (element.classList) {
            return element.classList.contains(className);
        }
        else {
            var /** @type {?} */ classes = element[CLASSES_CACHE_KEY];
            return classes && classes[className];
        }
    }
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    function addClass(element, className) {
        if (element.classList) {
            element.classList.add(className);
        }
        else {
            var /** @type {?} */ classes = element[CLASSES_CACHE_KEY];
            if (!classes) {
                classes = element[CLASSES_CACHE_KEY] = {};
            }
            classes[className] = true;
        }
    }
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    function removeClass(element, className) {
        if (element.classList) {
            element.classList.remove(className);
        }
        else {
            var /** @type {?} */ classes = element[CLASSES_CACHE_KEY];
            if (classes) {
                delete classes[className];
            }
        }
    }
    /**
     * @return {?}
     */
    function getBodyNode() {
        if (typeof document != 'undefined') {
            return document.body;
        }
        return null;
    }
    /**
     * @param {?} engine
     * @param {?} element
     * @param {?} players
     * @return {?}
     */
    function removeNodesAfterAnimationDone(engine, element, players) {
        optimizeGroupPlayer(players).onDone(function () { return engine.processLeaveNode(element); });
    }
    /**
     * @param {?} players
     * @return {?}
     */
    function flattenGroupPlayers(players) {
        var /** @type {?} */ finalPlayers = [];
        _flattenGroupPlayersRecur(players, finalPlayers);
        return finalPlayers;
    }
    /**
     * @param {?} players
     * @param {?} finalPlayers
     * @return {?}
     */
    function _flattenGroupPlayersRecur(players, finalPlayers) {
        for (var /** @type {?} */ i = 0; i < players.length; i++) {
            var /** @type {?} */ player = players[i];
            if (player instanceof AnimationGroupPlayer) {
                _flattenGroupPlayersRecur(player.players, finalPlayers);
            }
            else {
                finalPlayers.push(/** @type {?} */ (player));
            }
        }
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function objEquals(a, b) {
        var /** @type {?} */ k1 = Object.keys(a);
        var /** @type {?} */ k2 = Object.keys(b);
        if (k1.length != k2.length)
            return false;
        for (var /** @type {?} */ i = 0; i < k1.length; i++) {
            var /** @type {?} */ prop = k1[i];
            if (!b.hasOwnProperty(prop) || a[prop] !== b[prop])
                return false;
        }
        return true;
    }
    /**
     * @param {?} element
     * @param {?} allPreStyleElements
     * @param {?} allPostStyleElements
     * @return {?}
     */
    function replacePostStylesAsPre(element, allPreStyleElements, allPostStyleElements) {
        var /** @type {?} */ postEntry = allPostStyleElements.get(element);
        if (!postEntry)
            return false;
        var /** @type {?} */ preEntry = allPreStyleElements.get(element);
        if (preEntry) {
            postEntry.forEach(function (data) { return ((preEntry)).add(data); });
        }
        else {
            allPreStyleElements.set(element, postEntry);
        }
        allPostStyleElements.delete(element);
        return true;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var AnimationEngine = (function () {
        /**
         * @param {?} driver
         * @param {?} normalizer
         */
        function AnimationEngine(driver, normalizer) {
            var _this = this;
            this._triggerCache = {};
            this.onRemovalComplete = function (element, context) { };
            this._transitionEngine = new TransitionAnimationEngine(driver, normalizer);
            this._timelineEngine = new TimelineAnimationEngine(driver, normalizer);
            this._transitionEngine.onRemovalComplete = function (element, context) { return _this.onRemovalComplete(element, context); };
        }
        /**
         * @param {?} componentId
         * @param {?} namespaceId
         * @param {?} hostElement
         * @param {?} name
         * @param {?} metadata
         * @return {?}
         */
        AnimationEngine.prototype.registerTrigger = function (componentId, namespaceId, hostElement, name, metadata) {
            var /** @type {?} */ cacheKey = componentId + '-' + name;
            var /** @type {?} */ trigger$$1 = this._triggerCache[cacheKey];
            if (!trigger$$1) {
                var /** @type {?} */ errors = [];
                var /** @type {?} */ ast = (buildAnimationAst(/** @type {?} */ (metadata), errors));
                if (errors.length) {
                    throw new Error("The animation trigger \"" + name + "\" has failed to build due to the following errors:\n - " + errors.join("\n - "));
                }
                trigger$$1 = buildTrigger(name, ast);
                this._triggerCache[cacheKey] = trigger$$1;
            }
            this._transitionEngine.registerTrigger(namespaceId, name, trigger$$1);
        };
        /**
         * @param {?} namespaceId
         * @param {?} hostElement
         * @return {?}
         */
        AnimationEngine.prototype.register = function (namespaceId, hostElement) {
            this._transitionEngine.register(namespaceId, hostElement);
        };
        /**
         * @param {?} namespaceId
         * @param {?} context
         * @return {?}
         */
        AnimationEngine.prototype.destroy = function (namespaceId, context) {
            this._transitionEngine.destroy(namespaceId, context);
        };
        /**
         * @param {?} namespaceId
         * @param {?} element
         * @param {?} parent
         * @param {?} insertBefore
         * @return {?}
         */
        AnimationEngine.prototype.onInsert = function (namespaceId, element, parent, insertBefore) {
            this._transitionEngine.insertNode(namespaceId, element, parent, insertBefore);
        };
        /**
         * @param {?} namespaceId
         * @param {?} element
         * @param {?} context
         * @return {?}
         */
        AnimationEngine.prototype.onRemove = function (namespaceId, element, context) {
            this._transitionEngine.removeNode(namespaceId, element, context);
        };
        /**
         * @param {?} element
         * @param {?} disable
         * @return {?}
         */
        AnimationEngine.prototype.disableAnimations = function (element, disable) {
            this._transitionEngine.markElementAsDisabled(element, disable);
        };
        /**
         * @param {?} namespaceId
         * @param {?} element
         * @param {?} property
         * @param {?} value
         * @return {?}
         */
        AnimationEngine.prototype.process = function (namespaceId, element, property, value) {
            if (property.charAt(0) == '@') {
                var _a = parseTimelineCommand(property), id = _a[0], action = _a[1];
                var /** @type {?} */ args = (value);
                this._timelineEngine.command(id, element, action, args);
            }
            else {
                this._transitionEngine.trigger(namespaceId, element, property, value);
            }
        };
        /**
         * @param {?} namespaceId
         * @param {?} element
         * @param {?} eventName
         * @param {?} eventPhase
         * @param {?} callback
         * @return {?}
         */
        AnimationEngine.prototype.listen = function (namespaceId, element, eventName, eventPhase, callback) {
            // @@listen
            if (eventName.charAt(0) == '@') {
                var _a = parseTimelineCommand(eventName), id = _a[0], action = _a[1];
                return this._timelineEngine.listen(id, element, action, callback);
            }
            return this._transitionEngine.listen(namespaceId, element, eventName, eventPhase, callback);
        };
        /**
         * @param {?=} microtaskId
         * @return {?}
         */
        AnimationEngine.prototype.flush = function (microtaskId) {
            if (microtaskId === void 0) { microtaskId = -1; }
            this._transitionEngine.flush(microtaskId);
        };
        Object.defineProperty(AnimationEngine.prototype, "players", {
            /**
             * @return {?}
             */
            get: function () {
                return ((this._transitionEngine.players))
                    .concat(/** @type {?} */ (this._timelineEngine.players));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        AnimationEngine.prototype.whenRenderingDone = function () { return this._transitionEngine.whenRenderingDone(); };
        return AnimationEngine;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var WebAnimationsPlayer = (function () {
        /**
         * @param {?} element
         * @param {?} keyframes
         * @param {?} options
         * @param {?=} previousPlayers
         */
        function WebAnimationsPlayer(element, keyframes$$1, options, previousPlayers) {
            if (previousPlayers === void 0) { previousPlayers = []; }
            var _this = this;
            this.element = element;
            this.keyframes = keyframes$$1;
            this.options = options;
            this.previousPlayers = previousPlayers;
            this._onDoneFns = [];
            this._onStartFns = [];
            this._onDestroyFns = [];
            this._initialized = false;
            this._finished = false;
            this._started = false;
            this._destroyed = false;
            this.time = 0;
            this.parentPlayer = null;
            this.previousStyles = {};
            this.currentSnapshot = {};
            this._duration = options['duration'];
            this._delay = options['delay'] || 0;
            this.time = this._duration + this._delay;
            if (allowPreviousPlayerStylesMerge(this._duration, this._delay)) {
                previousPlayers.forEach(function (player) {
                    var styles = player.currentSnapshot;
                    Object.keys(styles).forEach(function (prop) { return _this.previousStyles[prop] = styles[prop]; });
                });
            }
        }
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype._onFinish = function () {
            if (!this._finished) {
                this._finished = true;
                this._onDoneFns.forEach(function (fn) { return fn(); });
                this._onDoneFns = [];
            }
        };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype.init = function () {
            this._buildPlayer();
            this._preparePlayerBeforeStart();
        };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype._buildPlayer = function () {
            var _this = this;
            if (this._initialized)
                return;
            this._initialized = true;
            var /** @type {?} */ keyframes$$1 = this.keyframes.map(function (styles) { return copyStyles(styles, false); });
            var /** @type {?} */ previousStyleProps = Object.keys(this.previousStyles);
            if (previousStyleProps.length) {
                var /** @type {?} */ startingKeyframe_1 = keyframes$$1[0];
                var /** @type {?} */ missingStyleProps_1 = [];
                previousStyleProps.forEach(function (prop) {
                    if (!startingKeyframe_1.hasOwnProperty(prop)) {
                        missingStyleProps_1.push(prop);
                    }
                    startingKeyframe_1[prop] = _this.previousStyles[prop];
                });
                if (missingStyleProps_1.length) {
                    var /** @type {?} */ self_1 = this;
                    var _loop_1 = function () {
                        var /** @type {?} */ kf = keyframes$$1[i];
                        missingStyleProps_1.forEach(function (prop) {
                            kf[prop] = _computeStyle(self_1.element, prop);
                        });
                    };
                    // tslint:disable-next-line
                    for (var /** @type {?} */ i = 1; i < keyframes$$1.length; i++) {
                        _loop_1();
                    }
                }
            }
            this._player = this._triggerWebAnimation(this.element, keyframes$$1, this.options);
            this._finalKeyframe = keyframes$$1.length ? keyframes$$1[keyframes$$1.length - 1] : {};
            this._player.addEventListener('finish', function () { return _this._onFinish(); });
        };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype._preparePlayerBeforeStart = function () {
            // this is required so that the player doesn't start to animate right away
            if (this._delay) {
                this._resetDomPlayerState();
            }
            else {
                this._player.pause();
            }
        };
        /**
         * \@internal
         * @param {?} element
         * @param {?} keyframes
         * @param {?} options
         * @return {?}
         */
        WebAnimationsPlayer.prototype._triggerWebAnimation = function (element, keyframes$$1, options) {
            // jscompiler doesn't seem to know animate is a native property because it's not fully
            // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]
            return (element['animate'](keyframes$$1, options));
        };
        Object.defineProperty(WebAnimationsPlayer.prototype, "domPlayer", {
            /**
             * @return {?}
             */
            get: function () { return this._player; },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} fn
         * @return {?}
         */
        WebAnimationsPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
        /**
         * @param {?} fn
         * @return {?}
         */
        WebAnimationsPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
        /**
         * @param {?} fn
         * @return {?}
         */
        WebAnimationsPlayer.prototype.onDestroy = function (fn) { this._onDestroyFns.push(fn); };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype.play = function () {
            this._buildPlayer();
            if (!this.hasStarted()) {
                this._onStartFns.forEach(function (fn) { return fn(); });
                this._onStartFns = [];
                this._started = true;
            }
            this._player.play();
        };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype.pause = function () {
            this.init();
            this._player.pause();
        };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype.finish = function () {
            this.init();
            this._onFinish();
            this._player.finish();
        };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype.reset = function () {
            this._resetDomPlayerState();
            this._destroyed = false;
            this._finished = false;
            this._started = false;
        };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype._resetDomPlayerState = function () {
            if (this._player) {
                this._player.cancel();
            }
        };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype.restart = function () {
            this.reset();
            this.play();
        };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype.hasStarted = function () { return this._started; };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype.destroy = function () {
            if (!this._destroyed) {
                this._destroyed = true;
                this._resetDomPlayerState();
                this._onFinish();
                this._onDestroyFns.forEach(function (fn) { return fn(); });
                this._onDestroyFns = [];
            }
        };
        /**
         * @param {?} p
         * @return {?}
         */
        WebAnimationsPlayer.prototype.setPosition = function (p) { this._player.currentTime = p * this.time; };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype.getPosition = function () { return this._player.currentTime / this.time; };
        Object.defineProperty(WebAnimationsPlayer.prototype, "totalTime", {
            /**
             * @return {?}
             */
            get: function () { return this._delay + this._duration; },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype.beforeDestroy = function () {
            var _this = this;
            var /** @type {?} */ styles = {};
            if (this.hasStarted()) {
                Object.keys(this._finalKeyframe).forEach(function (prop) {
                    if (prop != 'offset') {
                        styles[prop] =
                            _this._finished ? _this._finalKeyframe[prop] : _computeStyle(_this.element, prop);
                    }
                });
            }
            this.currentSnapshot = styles;
        };
        return WebAnimationsPlayer;
    }());
    /**
     * @param {?} element
     * @param {?} prop
     * @return {?}
     */
    function _computeStyle(element, prop) {
        return ((window.getComputedStyle(element)))[prop];
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var WebAnimationsDriver = (function () {
        function WebAnimationsDriver() {
        }
        /**
         * @param {?} element
         * @param {?} selector
         * @return {?}
         */
        WebAnimationsDriver.prototype.matchesElement = function (element, selector) {
            return matchesElement(element, selector);
        };
        /**
         * @param {?} elm1
         * @param {?} elm2
         * @return {?}
         */
        WebAnimationsDriver.prototype.containsElement = function (elm1, elm2) { return containsElement(elm1, elm2); };
        /**
         * @param {?} element
         * @param {?} selector
         * @param {?} multi
         * @return {?}
         */
        WebAnimationsDriver.prototype.query = function (element, selector, multi) {
            return invokeQuery(element, selector, multi);
        };
        /**
         * @param {?} element
         * @param {?} prop
         * @param {?=} defaultValue
         * @return {?}
         */
        WebAnimationsDriver.prototype.computeStyle = function (element, prop, defaultValue) {
            return (((window.getComputedStyle(element)))[prop]);
        };
        /**
         * @param {?} element
         * @param {?} keyframes
         * @param {?} duration
         * @param {?} delay
         * @param {?} easing
         * @param {?=} previousPlayers
         * @return {?}
         */
        WebAnimationsDriver.prototype.animate = function (element, keyframes$$1, duration, delay, easing, previousPlayers) {
            if (previousPlayers === void 0) { previousPlayers = []; }
            var /** @type {?} */ fill = delay == 0 ? 'both' : 'forwards';
            var /** @type {?} */ playerOptions = { duration: duration, delay: delay, fill: fill };
            // we check for this to avoid having a null|undefined value be present
            // for the easing (which results in an error for certain browsers #9752)
            if (easing) {
                playerOptions['easing'] = easing;
            }
            var /** @type {?} */ previousWebAnimationPlayers = (previousPlayers.filter(function (player) { return player instanceof WebAnimationsPlayer; }));
            return new WebAnimationsPlayer(element, keyframes$$1, playerOptions, previousWebAnimationPlayers);
        };
        return WebAnimationsDriver;
    }());
    /**
     * @return {?}
     */
    function supportsWebAnimations() {
        return typeof Element !== 'undefined' && typeof ((Element)).prototype['animate'] === 'function';
    }

    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var BrowserAnimationBuilder = (function (_super) {
        __extends(BrowserAnimationBuilder, _super);
        /**
         * @param {?} rootRenderer
         * @param {?} doc
         */
        function BrowserAnimationBuilder(rootRenderer, doc) {
            var _this = _super.call(this) || this;
            _this._nextAnimationId = 0;
            var typeData = {
                id: '0',
                encapsulation: ViewEncapsulation.None,
                styles: [],
                data: { animation: [] }
            };
            _this._renderer = rootRenderer.createRenderer(doc.body, typeData);
            return _this;
        }
        /**
         * @param {?} animation
         * @return {?}
         */
        BrowserAnimationBuilder.prototype.build = function (animation$$1) {
            var /** @type {?} */ id = this._nextAnimationId.toString();
            this._nextAnimationId++;
            var /** @type {?} */ entry = Array.isArray(animation$$1) ? sequence(animation$$1) : animation$$1;
            issueAnimationCommand(this._renderer, null, id, 'register', [entry]);
            return new BrowserAnimationFactory(id, this._renderer);
        };
        return BrowserAnimationBuilder;
    }(AnimationBuilder));
    BrowserAnimationBuilder.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    BrowserAnimationBuilder.ctorParameters = function () { return [
        { type: RendererFactory2, },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
    ]; };
    var BrowserAnimationFactory = (function (_super) {
        __extends(BrowserAnimationFactory, _super);
        /**
         * @param {?} _id
         * @param {?} _renderer
         */
        function BrowserAnimationFactory(_id, _renderer) {
            var _this = _super.call(this) || this;
            _this._id = _id;
            _this._renderer = _renderer;
            return _this;
        }
        /**
         * @param {?} element
         * @param {?=} options
         * @return {?}
         */
        BrowserAnimationFactory.prototype.create = function (element, options) {
            return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);
        };
        return BrowserAnimationFactory;
    }(AnimationFactory));
    var RendererAnimationPlayer = (function () {
        /**
         * @param {?} id
         * @param {?} element
         * @param {?} options
         * @param {?} _renderer
         */
        function RendererAnimationPlayer(id, element, options, _renderer) {
            this.id = id;
            this.element = element;
            this._renderer = _renderer;
            this.parentPlayer = null;
            this._started = false;
            this.totalTime = 0;
            this._command('create', options);
        }
        /**
         * @param {?} eventName
         * @param {?} callback
         * @return {?}
         */
        RendererAnimationPlayer.prototype._listen = function (eventName, callback) {
            return this._renderer.listen(this.element, "@@" + this.id + ":" + eventName, callback);
        };
        /**
         * @param {?} command
         * @param {...?} args
         * @return {?}
         */
        RendererAnimationPlayer.prototype._command = function (command) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return issueAnimationCommand(this._renderer, this.element, this.id, command, args);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        RendererAnimationPlayer.prototype.onDone = function (fn) { this._listen('done', fn); };
        /**
         * @param {?} fn
         * @return {?}
         */
        RendererAnimationPlayer.prototype.onStart = function (fn) { this._listen('start', fn); };
        /**
         * @param {?} fn
         * @return {?}
         */
        RendererAnimationPlayer.prototype.onDestroy = function (fn) { this._listen('destroy', fn); };
        /**
         * @return {?}
         */
        RendererAnimationPlayer.prototype.init = function () { this._command('init'); };
        /**
         * @return {?}
         */
        RendererAnimationPlayer.prototype.hasStarted = function () { return this._started; };
        /**
         * @return {?}
         */
        RendererAnimationPlayer.prototype.play = function () {
            this._command('play');
            this._started = true;
        };
        /**
         * @return {?}
         */
        RendererAnimationPlayer.prototype.pause = function () { this._command('pause'); };
        /**
         * @return {?}
         */
        RendererAnimationPlayer.prototype.restart = function () { this._command('restart'); };
        /**
         * @return {?}
         */
        RendererAnimationPlayer.prototype.finish = function () { this._command('finish'); };
        /**
         * @return {?}
         */
        RendererAnimationPlayer.prototype.destroy = function () { this._command('destroy'); };
        /**
         * @return {?}
         */
        RendererAnimationPlayer.prototype.reset = function () { this._command('reset'); };
        /**
         * @param {?} p
         * @return {?}
         */
        RendererAnimationPlayer.prototype.setPosition = function (p) { this._command('setPosition', p); };
        /**
         * @return {?}
         */
        RendererAnimationPlayer.prototype.getPosition = function () { return 0; };
        return RendererAnimationPlayer;
    }());
    /**
     * @param {?} renderer
     * @param {?} element
     * @param {?} id
     * @param {?} command
     * @param {?} args
     * @return {?}
     */
    function issueAnimationCommand(renderer, element, id, command, args) {
        return renderer.setProperty(element, "@@" + id + ":" + command, args);
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var ANIMATION_PREFIX = '@';
    var DISABLE_ANIMATIONS_FLAG = '@.disabled';
    var AnimationRendererFactory = (function () {
        /**
         * @param {?} delegate
         * @param {?} engine
         * @param {?} _zone
         */
        function AnimationRendererFactory(delegate, engine, _zone) {
            this.delegate = delegate;
            this.engine = engine;
            this._zone = _zone;
            this._currentId = 0;
            this._microtaskId = 1;
            this._animationCallbacksBuffer = [];
            this._rendererCache = new Map();
            this._cdRecurDepth = 0;
            engine.onRemovalComplete = function (element, delegate) {
                // Note: if an component element has a leave animation, and the component
                // a host leave animation, the view engine will call `removeChild` for the parent
                // component renderer as well as for the child component renderer.
                // Therefore, we need to check if we already removed the element.
                if (delegate && delegate.parentNode(element)) {
                    delegate.removeChild(element.parentNode, element);
                }
            };
        }
        /**
         * @param {?} hostElement
         * @param {?} type
         * @return {?}
         */
        AnimationRendererFactory.prototype.createRenderer = function (hostElement, type) {
            var _this = this;
            var /** @type {?} */ EMPTY_NAMESPACE_ID = '';
            // cache the delegates to find out which cached delegate can
            // be used by which cached renderer
            var /** @type {?} */ delegate = this.delegate.createRenderer(hostElement, type);
            if (!hostElement || !type || !type.data || !type.data['animation']) {
                var /** @type {?} */ renderer = this._rendererCache.get(delegate);
                if (!renderer) {
                    renderer = new BaseAnimationRenderer(EMPTY_NAMESPACE_ID, delegate, this.engine);
                    // only cache this result when the base renderer is used
                    this._rendererCache.set(delegate, renderer);
                }
                return renderer;
            }
            var /** @type {?} */ componentId = type.id;
            var /** @type {?} */ namespaceId = type.id + '-' + this._currentId;
            this._currentId++;
            this.engine.register(namespaceId, hostElement);
            var /** @type {?} */ animationTriggers = (type.data['animation']);
            animationTriggers.forEach(function (trigger$$2) { return _this.engine.registerTrigger(componentId, namespaceId, hostElement, trigger$$2.name, trigger$$2); });
            return new AnimationRenderer(this, namespaceId, delegate, this.engine);
        };
        /**
         * @return {?}
         */
        AnimationRendererFactory.prototype.begin = function () {
            this._cdRecurDepth++;
            if (this.delegate.begin) {
                this.delegate.begin();
            }
        };
        /**
         * @return {?}
         */
        AnimationRendererFactory.prototype._scheduleCountTask = function () {
            var _this = this;
            Zone.current.scheduleMicroTask('incremenet the animation microtask', function () { return _this._microtaskId++; });
        };
        /**
         * @param {?} count
         * @param {?} fn
         * @param {?} data
         * @return {?}
         */
        AnimationRendererFactory.prototype.scheduleListenerCallback = function (count, fn, data) {
            var _this = this;
            if (count >= 0 && count < this._microtaskId) {
                this._zone.run(function () { return fn(data); });
                return;
            }
            if (this._animationCallbacksBuffer.length == 0) {
                Promise.resolve(null).then(function () {
                    _this._zone.run(function () {
                        _this._animationCallbacksBuffer.forEach(function (tuple) {
                            var fn = tuple[0], data = tuple[1];
                            fn(data);
                        });
                        _this._animationCallbacksBuffer = [];
                    });
                });
            }
            this._animationCallbacksBuffer.push([fn, data]);
        };
        /**
         * @return {?}
         */
        AnimationRendererFactory.prototype.end = function () {
            var _this = this;
            this._cdRecurDepth--;
            // this is to prevent animations from running twice when an inner
            // component does CD when a parent component insted has inserted it
            if (this._cdRecurDepth == 0) {
                this._zone.runOutsideAngular(function () {
                    _this._scheduleCountTask();
                    _this.engine.flush(_this._microtaskId);
                });
            }
            if (this.delegate.end) {
                this.delegate.end();
            }
        };
        /**
         * @return {?}
         */
        AnimationRendererFactory.prototype.whenRenderingDone = function () { return this.engine.whenRenderingDone(); };
        return AnimationRendererFactory;
    }());
    AnimationRendererFactory.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    AnimationRendererFactory.ctorParameters = function () { return [
        { type: RendererFactory2, },
        { type: AnimationEngine, },
        { type: NgZone, },
    ]; };
    var BaseAnimationRenderer = (function () {
        /**
         * @param {?} namespaceId
         * @param {?} delegate
         * @param {?} engine
         */
        function BaseAnimationRenderer(namespaceId, delegate, engine) {
            this.namespaceId = namespaceId;
            this.delegate = delegate;
            this.engine = engine;
            this.destroyNode = this.delegate.destroyNode ? function (n) { return delegate.destroyNode(n); } : null;
        }
        Object.defineProperty(BaseAnimationRenderer.prototype, "data", {
            /**
             * @return {?}
             */
            get: function () { return this.delegate.data; },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        BaseAnimationRenderer.prototype.destroy = function () {
            this.engine.destroy(this.namespaceId, this.delegate);
            this.delegate.destroy();
        };
        /**
         * @param {?} name
         * @param {?=} namespace
         * @return {?}
         */
        BaseAnimationRenderer.prototype.createElement = function (name, namespace) {
            return this.delegate.createElement(name, namespace);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        BaseAnimationRenderer.prototype.createComment = function (value) { return this.delegate.createComment(value); };
        /**
         * @param {?} value
         * @return {?}
         */
        BaseAnimationRenderer.prototype.createText = function (value) { return this.delegate.createText(value); };
        /**
         * @param {?} parent
         * @param {?} newChild
         * @return {?}
         */
        BaseAnimationRenderer.prototype.appendChild = function (parent, newChild) {
            this.delegate.appendChild(parent, newChild);
            this.engine.onInsert(this.namespaceId, newChild, parent, false);
        };
        /**
         * @param {?} parent
         * @param {?} newChild
         * @param {?} refChild
         * @return {?}
         */
        BaseAnimationRenderer.prototype.insertBefore = function (parent, newChild, refChild) {
            this.delegate.insertBefore(parent, newChild, refChild);
            this.engine.onInsert(this.namespaceId, newChild, parent, true);
        };
        /**
         * @param {?} parent
         * @param {?} oldChild
         * @return {?}
         */
        BaseAnimationRenderer.prototype.removeChild = function (parent, oldChild) {
            this.engine.onRemove(this.namespaceId, oldChild, this.delegate);
        };
        /**
         * @param {?} selectorOrNode
         * @return {?}
         */
        BaseAnimationRenderer.prototype.selectRootElement = function (selectorOrNode) { return this.delegate.selectRootElement(selectorOrNode); };
        /**
         * @param {?} node
         * @return {?}
         */
        BaseAnimationRenderer.prototype.parentNode = function (node) { return this.delegate.parentNode(node); };
        /**
         * @param {?} node
         * @return {?}
         */
        BaseAnimationRenderer.prototype.nextSibling = function (node) { return this.delegate.nextSibling(node); };
        /**
         * @param {?} el
         * @param {?} name
         * @param {?} value
         * @param {?=} namespace
         * @return {?}
         */
        BaseAnimationRenderer.prototype.setAttribute = function (el, name, value, namespace) {
            this.delegate.setAttribute(el, name, value, namespace);
        };
        /**
         * @param {?} el
         * @param {?} name
         * @param {?=} namespace
         * @return {?}
         */
        BaseAnimationRenderer.prototype.removeAttribute = function (el, name, namespace) {
            this.delegate.removeAttribute(el, name, namespace);
        };
        /**
         * @param {?} el
         * @param {?} name
         * @return {?}
         */
        BaseAnimationRenderer.prototype.addClass = function (el, name) { this.delegate.addClass(el, name); };
        /**
         * @param {?} el
         * @param {?} name
         * @return {?}
         */
        BaseAnimationRenderer.prototype.removeClass = function (el, name) { this.delegate.removeClass(el, name); };
        /**
         * @param {?} el
         * @param {?} style
         * @param {?} value
         * @param {?=} flags
         * @return {?}
         */
        BaseAnimationRenderer.prototype.setStyle = function (el, style$$2, value, flags) {
            this.delegate.setStyle(el, style$$2, value, flags);
        };
        /**
         * @param {?} el
         * @param {?} style
         * @param {?=} flags
         * @return {?}
         */
        BaseAnimationRenderer.prototype.removeStyle = function (el, style$$2, flags) {
            this.delegate.removeStyle(el, style$$2, flags);
        };
        /**
         * @param {?} el
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        BaseAnimationRenderer.prototype.setProperty = function (el, name, value) {
            if (name.charAt(0) == ANIMATION_PREFIX && name == DISABLE_ANIMATIONS_FLAG) {
                this.disableAnimations(el, !!value);
            }
            else {
                this.delegate.setProperty(el, name, value);
            }
        };
        /**
         * @param {?} node
         * @param {?} value
         * @return {?}
         */
        BaseAnimationRenderer.prototype.setValue = function (node, value) { this.delegate.setValue(node, value); };
        /**
         * @param {?} target
         * @param {?} eventName
         * @param {?} callback
         * @return {?}
         */
        BaseAnimationRenderer.prototype.listen = function (target, eventName, callback) {
            return this.delegate.listen(target, eventName, callback);
        };
        /**
         * @param {?} element
         * @param {?} value
         * @return {?}
         */
        BaseAnimationRenderer.prototype.disableAnimations = function (element, value) {
            this.engine.disableAnimations(element, value);
        };
        return BaseAnimationRenderer;
    }());
    var AnimationRenderer = (function (_super) {
        __extends(AnimationRenderer, _super);
        /**
         * @param {?} factory
         * @param {?} namespaceId
         * @param {?} delegate
         * @param {?} engine
         */
        function AnimationRenderer(factory, namespaceId, delegate, engine) {
            var _this = _super.call(this, namespaceId, delegate, engine) || this;
            _this.factory = factory;
            _this.namespaceId = namespaceId;
            return _this;
        }
        /**
         * @param {?} el
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        AnimationRenderer.prototype.setProperty = function (el, name, value) {
            if (name.charAt(0) == ANIMATION_PREFIX) {
                if (name.charAt(1) == '.' && name == DISABLE_ANIMATIONS_FLAG) {
                    value = value === undefined ? true : !!value;
                    this.disableAnimations(el, /** @type {?} */ (value));
                }
                else {
                    this.engine.process(this.namespaceId, el, name.substr(1), value);
                }
            }
            else {
                this.delegate.setProperty(el, name, value);
            }
        };
        /**
         * @param {?} target
         * @param {?} eventName
         * @param {?} callback
         * @return {?}
         */
        AnimationRenderer.prototype.listen = function (target, eventName, callback) {
            var _this = this;
            if (eventName.charAt(0) == ANIMATION_PREFIX) {
                var /** @type {?} */ element = resolveElementFromTarget(target);
                var /** @type {?} */ name = eventName.substr(1);
                var /** @type {?} */ phase = '';
                // @listener.phase is for trigger animation callbacks
                // @@listener is for animation builder callbacks
                if (name.charAt(0) != ANIMATION_PREFIX) {
                    _a = parseTriggerCallbackName(name), name = _a[0], phase = _a[1];
                }
                return this.engine.listen(this.namespaceId, element, name, phase, function (event) {
                    var /** @type {?} */ countId = ((event))['_data'] || -1;
                    _this.factory.scheduleListenerCallback(countId, callback, event);
                });
            }
            return this.delegate.listen(target, eventName, callback);
            var _a;
        };
        return AnimationRenderer;
    }(BaseAnimationRenderer));
    /**
     * @param {?} target
     * @return {?}
     */
    function resolveElementFromTarget(target) {
        switch (target) {
            case 'body':
                return document.body;
            case 'document':
                return document;
            case 'window':
                return window;
            default:
                return target;
        }
    }
    /**
     * @param {?} triggerName
     * @return {?}
     */
    function parseTriggerCallbackName(triggerName) {
        var /** @type {?} */ dotIndex = triggerName.indexOf('.');
        var /** @type {?} */ trigger$$2 = triggerName.substring(0, dotIndex);
        var /** @type {?} */ phase = triggerName.substr(dotIndex + 1);
        return [trigger$$2, phase];
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var InjectableAnimationEngine = (function (_super) {
        __extends(InjectableAnimationEngine, _super);
        /**
         * @param {?} driver
         * @param {?} normalizer
         */
        function InjectableAnimationEngine(driver, normalizer) {
            return _super.call(this, driver, normalizer) || this;
        }
        return InjectableAnimationEngine;
    }(AnimationEngine));
    InjectableAnimationEngine.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    InjectableAnimationEngine.ctorParameters = function () { return [
        { type: AnimationDriver, },
        { type: AnimationStyleNormalizer, },
    ]; };
    /**
     * @return {?}
     */
    function instantiateSupportedAnimationDriver() {
        if (supportsWebAnimations()) {
            return new WebAnimationsDriver();
        }
        return new NoopAnimationDriver();
    }
    /**
     * @return {?}
     */
    function instantiateDefaultStyleNormalizer() {
        return new WebAnimationsStyleNormalizer();
    }
    /**
     * @param {?} renderer
     * @param {?} engine
     * @param {?} zone
     * @return {?}
     */
    function instantiateRendererFactory(renderer, engine, zone) {
        return new AnimationRendererFactory(renderer, engine, zone);
    }
    var SHARED_ANIMATION_PROVIDERS = [
        { provide: AnimationBuilder, useClass: BrowserAnimationBuilder },
        { provide: AnimationStyleNormalizer, useFactory: instantiateDefaultStyleNormalizer },
        { provide: AnimationEngine, useClass: InjectableAnimationEngine }, {
            provide: RendererFactory2,
            useFactory: instantiateRendererFactory,
            deps: [DomRendererFactory2, AnimationEngine, NgZone]
        }
    ];
    /**
     * Separate providers from the actual module so that we can do a local modification in Google3 to
     * include them in the BrowserModule.
     */
    var BROWSER_ANIMATIONS_PROVIDERS = [
        { provide: AnimationDriver, useFactory: instantiateSupportedAnimationDriver }
    ].concat(SHARED_ANIMATION_PROVIDERS);
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@experimental Animation support is experimental.
     */
    var BrowserAnimationsModule = (function () {
        function BrowserAnimationsModule() {
        }
        return BrowserAnimationsModule;
    }());
    BrowserAnimationsModule.decorators = [
        { type: NgModule, args: [{
                    exports: [BrowserModule],
                    providers: BROWSER_ANIMATIONS_PROVIDERS,
                },] },
    ];
    /**
     * @nocollapse
     */
    BrowserAnimationsModule.ctorParameters = function () { return []; };

    var __extends$1F = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };





    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ForkJoinObservable = (function (_super) {
        __extends$1F(ForkJoinObservable, _super);
        function ForkJoinObservable(sources, resultSelector) {
            _super.call(this);
            this.sources = sources;
            this.resultSelector = resultSelector;
        }
        /* tslint:enable:max-line-length */
        /**
         * Joins last values emitted by passed Observables.
         *
         * <span class="informal">Wait for Observables to complete and then combine last values they emitted.</span>
         *
         * <img src="./img/forkJoin.png" width="100%">
         *
         * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array
         * or directly as arguments. If no input Observables are provided, resulting stream will complete
         * immediately.
         *
         * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last
         * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting
         * array will have `n` values, where first value is the last thing emitted by the first Observable,
         * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will
         * not emit more than once and it will complete after that. If you need to emit combined values not only
         * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}
         * or {@link zip} instead.
         *
         * In order for resulting array to have the same length as the number of input Observables, whenever any of
         * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well
         * and it will not emit anything either, even if it already has some last values from other Observables.
         * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,
         * unless at any point some other Observable completes without emitting value, which brings us back to
         * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments
         * have to emit something at least once and complete.
         *
         * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables
         * will be immediately unsubscribed.
         *
         * Optionally `forkJoin` accepts project function, that will be called with values which normally
         * would land in emitted array. Whatever is returned by project function, will appear in output
         * Observable instead. This means that default project can be thought of as a function that takes
         * all its arguments and puts them into an array. Note that project function will be called only
         * when output Observable is supposed to emit a result.
         *
         * @example <caption>Use forkJoin with operator emitting immediately</caption>
         * const observable = Rx.Observable.forkJoin(
         *   Rx.Observable.of(1, 2, 3, 4),
         *   Rx.Observable.of(5, 6, 7, 8)
         * );
         * observable.subscribe(
         *   value => console.log(value),
         *   err => {},
         *   () => console.log('This is how it ends!')
         * );
         *
         * // Logs:
         * // [4, 8]
         * // "This is how it ends!"
         *
         *
         * @example <caption>Use forkJoin with operator emitting after some time</caption>
         * const observable = Rx.Observable.forkJoin(
         *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete
         *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete
         * );
         * observable.subscribe(
         *   value => console.log(value),
         *   err => {},
         *   () => console.log('This is how it ends!')
         * );
         *
         * // Logs:
         * // [2, 3] after 3 seconds
         * // "This is how it ends!" immediately after
         *
         *
         * @example <caption>Use forkJoin with project function</caption>
         * const observable = Rx.Observable.forkJoin(
         *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete
         *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete
         *   (n, m) => n + m
         * );
         * observable.subscribe(
         *   value => console.log(value),
         *   err => {},
         *   () => console.log('This is how it ends!')
         * );
         *
         * // Logs:
         * // 5 after 3 seconds
         * // "This is how it ends!" immediately after
         *
         * @see {@link combineLatest}
         * @see {@link zip}
         *
         * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments
         * passed directly to the operator.
         * @param {function} [project] Function that takes values emitted by input Observables and returns value
         * that will appear in resulting Observable instead of default array.
         * @return {Observable} Observable emitting either an array of last values emitted by passed Observables
         * or value from project function.
         * @static true
         * @name forkJoin
         * @owner Observable
         */
        ForkJoinObservable.create = function () {
            var sources = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                sources[_i - 0] = arguments[_i];
            }
            if (sources === null || arguments.length === 0) {
                return new EmptyObservable_1.EmptyObservable();
            }
            var resultSelector = null;
            if (typeof sources[sources.length - 1] === 'function') {
                resultSelector = sources.pop();
            }
            // if the first and only other argument besides the resultSelector is an array
            // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`
            if (sources.length === 1 && isArray.isArray(sources[0])) {
                sources = sources[0];
            }
            if (sources.length === 0) {
                return new EmptyObservable_1.EmptyObservable();
            }
            return new ForkJoinObservable(sources, resultSelector);
        };
        /** @deprecated internal use only */ ForkJoinObservable.prototype._subscribe = function (subscriber) {
            return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);
        };
        return ForkJoinObservable;
    }(Observable_1.Observable));
    var ForkJoinObservable_2 = ForkJoinObservable;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ForkJoinSubscriber = (function (_super) {
        __extends$1F(ForkJoinSubscriber, _super);
        function ForkJoinSubscriber(destination, sources, resultSelector) {
            _super.call(this, destination);
            this.sources = sources;
            this.resultSelector = resultSelector;
            this.completed = 0;
            this.haveValues = 0;
            var len = sources.length;
            this.total = len;
            this.values = new Array(len);
            for (var i = 0; i < len; i++) {
                var source = sources[i];
                var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);
                if (innerSubscription) {
                    innerSubscription.outerIndex = i;
                    this.add(innerSubscription);
                }
            }
        }
        ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.values[outerIndex] = innerValue;
            if (!innerSub._hasValue) {
                innerSub._hasValue = true;
                this.haveValues++;
            }
        };
        ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
            var destination = this.destination;
            var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;
            var len = values.length;
            if (!innerSub._hasValue) {
                destination.complete();
                return;
            }
            this.completed++;
            if (this.completed !== len) {
                return;
            }
            if (haveValues === len) {
                var value = resultSelector ? resultSelector.apply(this, values) : values;
                destination.next(value);
            }
            destination.complete();
        };
        return ForkJoinSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));


    var ForkJoinObservable_1 = {
    	ForkJoinObservable: ForkJoinObservable_2
    };

    var forkJoin_1 = ForkJoinObservable_1.ForkJoinObservable.create;

    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Base class for control directives.
     *
     * Only used internally in the forms module.
     *
     * \@stable
     * @abstract
     */
    var AbstractControlDirective = (function () {
        function AbstractControlDirective() {
        }
        /**
         * @abstract
         * @return {?}
         */
        AbstractControlDirective.prototype.control = function () { };
        Object.defineProperty(AbstractControlDirective.prototype, "value", {
            /**
             * @return {?}
             */
            get: function () { return this.control ? this.control.value : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "valid", {
            /**
             * @return {?}
             */
            get: function () { return this.control ? this.control.valid : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "invalid", {
            /**
             * @return {?}
             */
            get: function () { return this.control ? this.control.invalid : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "pending", {
            /**
             * @return {?}
             */
            get: function () { return this.control ? this.control.pending : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "errors", {
            /**
             * @return {?}
             */
            get: function () { return this.control ? this.control.errors : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
            /**
             * @return {?}
             */
            get: function () { return this.control ? this.control.pristine : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
            /**
             * @return {?}
             */
            get: function () { return this.control ? this.control.dirty : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "touched", {
            /**
             * @return {?}
             */
            get: function () { return this.control ? this.control.touched : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
            /**
             * @return {?}
             */
            get: function () { return this.control ? this.control.untouched : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "disabled", {
            /**
             * @return {?}
             */
            get: function () { return this.control ? this.control.disabled : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "enabled", {
            /**
             * @return {?}
             */
            get: function () { return this.control ? this.control.enabled : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "statusChanges", {
            /**
             * @return {?}
             */
            get: function () {
                return this.control ? this.control.statusChanges : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "valueChanges", {
            /**
             * @return {?}
             */
            get: function () {
                return this.control ? this.control.valueChanges : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "path", {
            /**
             * @return {?}
             */
            get: function () { return null; },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?=} value
         * @return {?}
         */
        AbstractControlDirective.prototype.reset = function (value) {
            if (value === void 0) { value = undefined; }
            if (this.control)
                this.control.reset(value);
        };
        /**
         * @param {?} errorCode
         * @param {?=} path
         * @return {?}
         */
        AbstractControlDirective.prototype.hasError = function (errorCode, path) {
            return this.control ? this.control.hasError(errorCode, path) : false;
        };
        /**
         * @param {?} errorCode
         * @param {?=} path
         * @return {?}
         */
        AbstractControlDirective.prototype.getError = function (errorCode, path) {
            return this.control ? this.control.getError(errorCode, path) : null;
        };
        return AbstractControlDirective;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * A directive that contains multiple {\@link NgControl}s.
     *
     * Only used by the forms module.
     *
     * \@stable
     * @abstract
     */
    var ControlContainer = (function (_super) {
        __extends(ControlContainer, _super);
        function ControlContainer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ControlContainer.prototype, "formDirective", {
            /**
             * Get the form to which this container belongs.
             * @return {?}
             */
            get: function () { return null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlContainer.prototype, "path", {
            /**
             * Get the path to this container.
             * @return {?}
             */
            get: function () { return null; },
            enumerable: true,
            configurable: true
        });
        return ControlContainer;
    }(AbstractControlDirective));
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} value
     * @return {?}
     */
    function isEmptyInputValue(value) {
        // we don't check for string here so it also works with arrays
        return value == null || value.length === 0;
    }
    /**
     * Providers for validators to be used for {\@link FormControl}s in a form.
     *
     * Provide this using `multi: true` to add validators.
     *
     * \@stable
     */
    var NG_VALIDATORS = new InjectionToken('NgValidators');
    /**
     * Providers for asynchronous validators to be used for {\@link FormControl}s
     * in a form.
     *
     * Provide this using `multi: true` to add validators.
     *
     * See {\@link NG_VALIDATORS} for more details.
     *
     * \@stable
     */
    var NG_ASYNC_VALIDATORS = new InjectionToken('NgAsyncValidators');
    var EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;
    /**
     * Provides a set of validators used by form controls.
     *
     * A validator is a function that processes a {\@link FormControl} or collection of
     * controls and returns a map of errors. A null map means that validation has passed.
     *
     * ### Example
     *
     * ```typescript
     * var loginControl = new FormControl("", Validators.required)
     * ```
     *
     * \@stable
     */
    var Validators = (function () {
        function Validators() {
        }
        /**
         * Validator that requires controls to have a value greater than a number.
         * @param {?} min
         * @return {?}
         */
        Validators.min = function (min) {
            return function (control) {
                if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {
                    return null; // don't validate empty values to allow optional controls
                }
                var /** @type {?} */ value = parseFloat(control.value);
                // Controls with NaN values after parsing should be treated as not having a
                // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min
                return !isNaN(value) && value < min ? { 'min': { 'min': min, 'actual': control.value } } : null;
            };
        };
        /**
         * Validator that requires controls to have a value less than a number.
         * @param {?} max
         * @return {?}
         */
        Validators.max = function (max) {
            return function (control) {
                if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {
                    return null; // don't validate empty values to allow optional controls
                }
                var /** @type {?} */ value = parseFloat(control.value);
                // Controls with NaN values after parsing should be treated as not having a
                // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max
                return !isNaN(value) && value > max ? { 'max': { 'max': max, 'actual': control.value } } : null;
            };
        };
        /**
         * Validator that requires controls to have a non-empty value.
         * @param {?} control
         * @return {?}
         */
        Validators.required = function (control) {
            return isEmptyInputValue(control.value) ? { 'required': true } : null;
        };
        /**
         * Validator that requires control value to be true.
         * @param {?} control
         * @return {?}
         */
        Validators.requiredTrue = function (control) {
            return control.value === true ? null : { 'required': true };
        };
        /**
         * Validator that performs email validation.
         * @param {?} control
         * @return {?}
         */
        Validators.email = function (control) {
            return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };
        };
        /**
         * Validator that requires controls to have a value of a minimum length.
         * @param {?} minLength
         * @return {?}
         */
        Validators.minLength = function (minLength) {
            return function (control) {
                if (isEmptyInputValue(control.value)) {
                    return null; // don't validate empty values to allow optional controls
                }
                var /** @type {?} */ length = control.value ? control.value.length : 0;
                return length < minLength ?
                    { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :
                    null;
            };
        };
        /**
         * Validator that requires controls to have a value of a maximum length.
         * @param {?} maxLength
         * @return {?}
         */
        Validators.maxLength = function (maxLength) {
            return function (control) {
                var /** @type {?} */ length = control.value ? control.value.length : 0;
                return length > maxLength ?
                    { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :
                    null;
            };
        };
        /**
         * Validator that requires a control to match a regex to its value.
         * @param {?} pattern
         * @return {?}
         */
        Validators.pattern = function (pattern) {
            if (!pattern)
                return Validators.nullValidator;
            var /** @type {?} */ regex;
            var /** @type {?} */ regexStr;
            if (typeof pattern === 'string') {
                regexStr = "^" + pattern + "$";
                regex = new RegExp(regexStr);
            }
            else {
                regexStr = pattern.toString();
                regex = pattern;
            }
            return function (control) {
                if (isEmptyInputValue(control.value)) {
                    return null; // don't validate empty values to allow optional controls
                }
                var /** @type {?} */ value = control.value;
                return regex.test(value) ? null :
                    { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };
            };
        };
        /**
         * No-op validator.
         * @param {?} c
         * @return {?}
         */
        Validators.nullValidator = function (c) { return null; };
        /**
         * @param {?} validators
         * @return {?}
         */
        Validators.compose = function (validators) {
            if (!validators)
                return null;
            var /** @type {?} */ presentValidators = (validators.filter(isPresent));
            if (presentValidators.length == 0)
                return null;
            return function (control) {
                return _mergeErrors(_executeValidators(control, presentValidators));
            };
        };
        /**
         * @param {?} validators
         * @return {?}
         */
        Validators.composeAsync = function (validators) {
            if (!validators)
                return null;
            var /** @type {?} */ presentValidators = (validators.filter(isPresent));
            if (presentValidators.length == 0)
                return null;
            return function (control) {
                var /** @type {?} */ observables = _executeAsyncValidators(control, presentValidators).map(toObservable);
                return map_3.call(forkJoin_1(observables), _mergeErrors);
            };
        };
        return Validators;
    }());
    /**
     * @param {?} o
     * @return {?}
     */
    function isPresent(o) {
        return o != null;
    }
    /**
     * @param {?} r
     * @return {?}
     */
    function toObservable(r) {
        var /** @type {?} */ obs = isPromise$1(r) ? fromPromise_1(r) : r;
        if (!(isObservable(obs))) {
            throw new Error("Expected validator to return Promise or Observable.");
        }
        return obs;
    }
    /**
     * @param {?} control
     * @param {?} validators
     * @return {?}
     */
    function _executeValidators(control, validators) {
        return validators.map(function (v) { return v(control); });
    }
    /**
     * @param {?} control
     * @param {?} validators
     * @return {?}
     */
    function _executeAsyncValidators(control, validators) {
        return validators.map(function (v) { return v(control); });
    }
    /**
     * @param {?} arrayOfErrors
     * @return {?}
     */
    function _mergeErrors(arrayOfErrors) {
        var /** @type {?} */ res = arrayOfErrors.reduce(function (res, errors) {
            return errors != null ? Object.assign({}, /** @type {?} */ ((res)), errors) : ((res));
        }, {});
        return Object.keys(res).length === 0 ? null : res;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Used to provide a {\@link ControlValueAccessor} for form controls.
     *
     * See {\@link DefaultValueAccessor} for how to implement one.
     * \@stable
     */
    var NG_VALUE_ACCESSOR = new InjectionToken('NgValueAccessor');
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var CHECKBOX_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return CheckboxControlValueAccessor; }),
        multi: true,
    };
    /**
     * The accessor for writing a value and listening to changes on a checkbox input element.
     *
     *  ### Example
     *  ```
     *  <input type="checkbox" name="rememberLogin" ngModel>
     *  ```
     *
     *  \@stable
     */
    var CheckboxControlValueAccessor = (function () {
        /**
         * @param {?} _renderer
         * @param {?} _elementRef
         */
        function CheckboxControlValueAccessor(_renderer, _elementRef) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this.onChange = function (_) { };
            this.onTouched = function () { };
        }
        /**
         * @param {?} value
         * @return {?}
         */
        CheckboxControlValueAccessor.prototype.writeValue = function (value) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
        /**
         * @param {?} fn
         * @return {?}
         */
        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        return CheckboxControlValueAccessor;
    }());
    CheckboxControlValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',
                    host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },
                    providers: [CHECKBOX_VALUE_ACCESSOR]
                },] },
    ];
    /**
     * @nocollapse
     */
    CheckboxControlValueAccessor.ctorParameters = function () { return [
        { type: Renderer2, },
        { type: ElementRef, },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var DEFAULT_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return DefaultValueAccessor; }),
        multi: true
    };
    /**
     * We must check whether the agent is Android because composition events
     * behave differently between iOS and Android.
     * @return {?}
     */
    function _isAndroid() {
        var /** @type {?} */ userAgent = getDOM() ? getDOM().getUserAgent() : '';
        return /android (\d+)/.test(userAgent.toLowerCase());
    }
    /**
     * Turn this mode on if you want form directives to buffer IME input until compositionend
     * \@experimental
     */
    var COMPOSITION_BUFFER_MODE = new InjectionToken('CompositionEventMode');
    /**
     * The default accessor for writing a value and listening to changes that is used by the
     * {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName} directives.
     *
     *  ### Example
     *  ```
     *  <input type="text" name="searchQuery" ngModel>
     *  ```
     *
     *  \@stable
     */
    var DefaultValueAccessor = (function () {
        /**
         * @param {?} _renderer
         * @param {?} _elementRef
         * @param {?} _compositionMode
         */
        function DefaultValueAccessor(_renderer, _elementRef, _compositionMode) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this._compositionMode = _compositionMode;
            this.onChange = function (_) { };
            this.onTouched = function () { };
            /**
             * Whether the user is creating a composition string (IME events).
             */
            this._composing = false;
            if (this._compositionMode == null) {
                this._compositionMode = !_isAndroid();
            }
        }
        /**
         * @param {?} value
         * @return {?}
         */
        DefaultValueAccessor.prototype.writeValue = function (value) {
            var /** @type {?} */ normalizedValue = value == null ? '' : value;
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
        /**
         * @param {?} fn
         * @return {?}
         */
        DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        DefaultValueAccessor.prototype._handleInput = function (value) {
            if (!this._compositionMode || (this._compositionMode && !this._composing)) {
                this.onChange(value);
            }
        };
        /**
         * @return {?}
         */
        DefaultValueAccessor.prototype._compositionStart = function () { this._composing = true; };
        /**
         * @param {?} value
         * @return {?}
         */
        DefaultValueAccessor.prototype._compositionEnd = function (value) {
            this._composing = false;
            this._compositionMode && this.onChange(value);
        };
        return DefaultValueAccessor;
    }());
    DefaultValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
                    // TODO: vsavkin replace the above selector with the one below it once
                    // https://github.com/angular/angular/issues/3011 is implemented
                    // selector: '[ngModel],[formControl],[formControlName]',
                    host: {
                        '(input)': '_handleInput($event.target.value)',
                        '(blur)': 'onTouched()',
                        '(compositionstart)': '_compositionStart()',
                        '(compositionend)': '_compositionEnd($event.target.value)'
                    },
                    providers: [DEFAULT_VALUE_ACCESSOR]
                },] },
    ];
    /**
     * @nocollapse
     */
    DefaultValueAccessor.ctorParameters = function () { return [
        { type: Renderer2, },
        { type: ElementRef, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] },] },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} validator
     * @return {?}
     */
    function normalizeValidator(validator) {
        if (((validator)).validate) {
            return function (c) { return ((validator)).validate(c); };
        }
        else {
            return (validator);
        }
    }
    /**
     * @param {?} validator
     * @return {?}
     */
    function normalizeAsyncValidator(validator) {
        if (((validator)).validate) {
            return function (c) { return ((validator)).validate(c); };
        }
        else {
            return (validator);
        }
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var NUMBER_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return NumberValueAccessor; }),
        multi: true
    };
    /**
     * The accessor for writing a number value and listening to changes that is used by the
     * {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName} directives.
     *
     *  ### Example
     *  ```
     *  <input type="number" [(ngModel)]="age">
     *  ```
     */
    var NumberValueAccessor = (function () {
        /**
         * @param {?} _renderer
         * @param {?} _elementRef
         */
        function NumberValueAccessor(_renderer, _elementRef) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this.onChange = function (_) { };
            this.onTouched = function () { };
        }
        /**
         * @param {?} value
         * @return {?}
         */
        NumberValueAccessor.prototype.writeValue = function (value) {
            // The value needs to be normalized for IE9, otherwise it is set to 'null' when null
            var /** @type {?} */ normalizedValue = value == null ? '' : value;
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        NumberValueAccessor.prototype.registerOnChange = function (fn) {
            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        return NumberValueAccessor;
    }());
    NumberValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',
                    host: {
                        '(change)': 'onChange($event.target.value)',
                        '(input)': 'onChange($event.target.value)',
                        '(blur)': 'onTouched()'
                    },
                    providers: [NUMBER_VALUE_ACCESSOR]
                },] },
    ];
    /**
     * @nocollapse
     */
    NumberValueAccessor.ctorParameters = function () { return [
        { type: Renderer2, },
        { type: ElementRef, },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @return {?}
     */
    function unimplemented() {
        throw new Error('unimplemented');
    }
    /**
     * A base class that all control directive extend.
     * It binds a {\@link FormControl} object to a DOM element.
     *
     * Used internally by Angular forms.
     *
     * \@stable
     * @abstract
     */
    var NgControl = (function (_super) {
        __extends(NgControl, _super);
        function NgControl() {
            var _this = _super.apply(this, arguments) || this;
            /**
             * \@internal
             */
            _this._parent = null;
            _this.name = null;
            _this.valueAccessor = null;
            /**
             * \@internal
             */
            _this._rawValidators = [];
            /**
             * \@internal
             */
            _this._rawAsyncValidators = [];
            return _this;
        }
        Object.defineProperty(NgControl.prototype, "validator", {
            /**
             * @return {?}
             */
            get: function () { return (unimplemented()); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgControl.prototype, "asyncValidator", {
            /**
             * @return {?}
             */
            get: function () { return (unimplemented()); },
            enumerable: true,
            configurable: true
        });
        /**
         * @abstract
         * @param {?} newValue
         * @return {?}
         */
        NgControl.prototype.viewToModelUpdate = function (newValue) { };
        return NgControl;
    }(AbstractControlDirective));
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var RADIO_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return RadioControlValueAccessor; }),
        multi: true
    };
    /**
     * Internal class used by Angular to uncheck radio buttons with the matching name.
     */
    var RadioControlRegistry = (function () {
        function RadioControlRegistry() {
            this._accessors = [];
        }
        /**
         * @param {?} control
         * @param {?} accessor
         * @return {?}
         */
        RadioControlRegistry.prototype.add = function (control, accessor) {
            this._accessors.push([control, accessor]);
        };
        /**
         * @param {?} accessor
         * @return {?}
         */
        RadioControlRegistry.prototype.remove = function (accessor) {
            for (var /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {
                if (this._accessors[i][1] === accessor) {
                    this._accessors.splice(i, 1);
                    return;
                }
            }
        };
        /**
         * @param {?} accessor
         * @return {?}
         */
        RadioControlRegistry.prototype.select = function (accessor) {
            var _this = this;
            this._accessors.forEach(function (c) {
                if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {
                    c[1].fireUncheck(accessor.value);
                }
            });
        };
        /**
         * @param {?} controlPair
         * @param {?} accessor
         * @return {?}
         */
        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {
            if (!controlPair[0].control)
                return false;
            return controlPair[0]._parent === accessor._control._parent &&
                controlPair[1].name === accessor.name;
        };
        return RadioControlRegistry;
    }());
    RadioControlRegistry.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    RadioControlRegistry.ctorParameters = function () { return []; };
    /**
     * \@whatItDoes Writes radio control values and listens to radio control changes.
     *
     * Used by {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName}
     * to keep the view synced with the {\@link FormControl} model.
     *
     * \@howToUse
     *
     * If you have imported the {\@link FormsModule} or the {\@link ReactiveFormsModule}, this
     * value accessor will be active on any radio control that has a form directive. You do
     * **not** need to add a special selector to activate it.
     *
     * ### How to use radio buttons with form directives
     *
     * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons
     * in the same group have the same `name` attribute.  Radio buttons with different `name`
     * attributes do not affect each other.
     *
     * {\@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}
     *
     * When using radio buttons in a reactive form, radio buttons in the same group should have the
     * same `formControlName`. You can also add a `name` attribute, but it's optional.
     *
     * {\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}
     *
     *  * **npm package**: `\@angular/forms`
     *
     *  \@stable
     */
    var RadioControlValueAccessor = (function () {
        /**
         * @param {?} _renderer
         * @param {?} _elementRef
         * @param {?} _registry
         * @param {?} _injector
         */
        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this._registry = _registry;
            this._injector = _injector;
            this.onChange = function () { };
            this.onTouched = function () { };
        }
        /**
         * @return {?}
         */
        RadioControlValueAccessor.prototype.ngOnInit = function () {
            this._control = this._injector.get(NgControl);
            this._checkName();
            this._registry.add(this._control, this);
        };
        /**
         * @return {?}
         */
        RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };
        /**
         * @param {?} value
         * @return {?}
         */
        RadioControlValueAccessor.prototype.writeValue = function (value) {
            this._state = value === this.value;
            this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {
            var _this = this;
            this._fn = fn;
            this.onChange = function () {
                fn(_this.value);
                _this._registry.select(_this);
            };
        };
        /**
         * @param {?} value
         * @return {?}
         */
        RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };
        /**
         * @param {?} fn
         * @return {?}
         */
        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        /**
         * @return {?}
         */
        RadioControlValueAccessor.prototype._checkName = function () {
            if (this.name && this.formControlName && this.name !== this.formControlName) {
                this._throwNameError();
            }
            if (!this.name && this.formControlName)
                this.name = this.formControlName;
        };
        /**
         * @return {?}
         */
        RadioControlValueAccessor.prototype._throwNameError = function () {
            throw new Error("\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    ");
        };
        return RadioControlValueAccessor;
    }());
    RadioControlValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',
                    host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },
                    providers: [RADIO_VALUE_ACCESSOR]
                },] },
    ];
    /**
     * @nocollapse
     */
    RadioControlValueAccessor.ctorParameters = function () { return [
        { type: Renderer2, },
        { type: ElementRef, },
        { type: RadioControlRegistry, },
        { type: Injector, },
    ]; };
    RadioControlValueAccessor.propDecorators = {
        'name': [{ type: Input },],
        'formControlName': [{ type: Input },],
        'value': [{ type: Input },],
    };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var RANGE_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return RangeValueAccessor; }),
        multi: true
    };
    /**
     * The accessor for writing a range value and listening to changes that is used by the
     * {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName} directives.
     *
     *  ### Example
     *  ```
     *  <input type="range" [(ngModel)]="age" >
     *  ```
     */
    var RangeValueAccessor = (function () {
        /**
         * @param {?} _renderer
         * @param {?} _elementRef
         */
        function RangeValueAccessor(_renderer, _elementRef) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this.onChange = function (_) { };
            this.onTouched = function () { };
        }
        /**
         * @param {?} value
         * @return {?}
         */
        RangeValueAccessor.prototype.writeValue = function (value) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        RangeValueAccessor.prototype.registerOnChange = function (fn) {
            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        RangeValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        RangeValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        return RangeValueAccessor;
    }());
    RangeValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',
                    host: {
                        '(change)': 'onChange($event.target.value)',
                        '(input)': 'onChange($event.target.value)',
                        '(blur)': 'onTouched()'
                    },
                    providers: [RANGE_VALUE_ACCESSOR]
                },] },
    ];
    /**
     * @nocollapse
     */
    RangeValueAccessor.ctorParameters = function () { return [
        { type: Renderer2, },
        { type: ElementRef, },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var SELECT_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return SelectControlValueAccessor; }),
        multi: true
    };
    /**
     * @param {?} id
     * @param {?} value
     * @return {?}
     */
    function _buildValueString(id, value) {
        if (id == null)
            return "" + value;
        if (value && typeof value === 'object')
            value = 'Object';
        return (id + ": " + value).slice(0, 50);
    }
    /**
     * @param {?} valueString
     * @return {?}
     */
    function _extractId(valueString) {
        return valueString.split(':')[0];
    }
    /**
     * \@whatItDoes Writes values and listens to changes on a select element.
     *
     * Used by {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName}
     * to keep the view synced with the {\@link FormControl} model.
     *
     * \@howToUse
     *
     * If you have imported the {\@link FormsModule} or the {\@link ReactiveFormsModule}, this
     * value accessor will be active on any select control that has a form directive. You do
     * **not** need to add a special selector to activate it.
     *
     * ### How to use select controls with form directives
     *
     * To use a select in a template-driven form, simply add an `ngModel` and a `name`
     * attribute to the main `<select>` tag.
     *
     * If your option values are simple strings, you can bind to the normal `value` property
     * on the option.  If your option values happen to be objects (and you'd like to save the
     * selection in your form as an object), use `ngValue` instead:
     *
     * {\@example forms/ts/selectControl/select_control_example.ts region='Component'}
     *
     * In reactive forms, you'll also want to add your form directive (`formControlName` or
     * `formControl`) on the main `<select>` tag. Like in the former example, you have the
     * choice of binding to the  `value` or `ngValue` property on the select's options.
     *
     * {\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}
     *
     * ### Caveat: Option selection
     *
     * Angular uses object identity to select option. It's possible for the identities of items
     * to change while the data does not. This can happen, for example, if the items are produced
     * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the
     * second response will produce objects with different identities.
     *
     * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.
     * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.
     * If `compareWith` is given, Angular selects option by the return value of the function.
     *
     * #### Syntax
     *
     * ```
     * <select [compareWith]="compareFn"  [(ngModel)]="selectedCountries">
     *     <option *ngFor="let country of countries" [ngValue]="country">
     *         {{country.name}}
     *     </option>
     * </select>
     *
     * compareFn(c1: Country, c2: Country): boolean {
     *     return c1 && c2 ? c1.id === c2.id : c1 === c2;
     * }
     * ```
     *
     * Note: We listen to the 'change' event because 'input' events aren't fired
     * for selects in Firefox and IE:
     * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350
     * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/
     *
     * * **npm package**: `\@angular/forms`
     *
     * \@stable
     */
    var SelectControlValueAccessor = (function () {
        /**
         * @param {?} _renderer
         * @param {?} _elementRef
         */
        function SelectControlValueAccessor(_renderer, _elementRef) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            /**
             * \@internal
             */
            this._optionMap = new Map();
            /**
             * \@internal
             */
            this._idCounter = 0;
            this.onChange = function (_) { };
            this.onTouched = function () { };
            this._compareWith = looseIdentical;
        }
        Object.defineProperty(SelectControlValueAccessor.prototype, "compareWith", {
            /**
             * @param {?} fn
             * @return {?}
             */
            set: function (fn) {
                if (typeof fn !== 'function') {
                    throw new Error("compareWith must be a function, but received " + JSON.stringify(fn));
                }
                this._compareWith = fn;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @return {?}
         */
        SelectControlValueAccessor.prototype.writeValue = function (value) {
            this.value = value;
            var /** @type {?} */ id = this._getOptionId(value);
            if (id == null) {
                this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);
            }
            var /** @type {?} */ valueString = _buildValueString(id, value);
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {
            var _this = this;
            this.onChange = function (valueString) {
                _this.value = valueString;
                fn(_this._getOptionValue(valueString));
            };
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        /**
         * \@internal
         * @return {?}
         */
        SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };
        /**
         * \@internal
         * @param {?} value
         * @return {?}
         */
        SelectControlValueAccessor.prototype._getOptionId = function (value) {
            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
                var id = _a[_i];
                if (this._compareWith(this._optionMap.get(id), value))
                    return id;
            }
            return null;
        };
        /**
         * \@internal
         * @param {?} valueString
         * @return {?}
         */
        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {
            var /** @type {?} */ id = _extractId(valueString);
            return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
        };
        return SelectControlValueAccessor;
    }());
    SelectControlValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',
                    host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },
                    providers: [SELECT_VALUE_ACCESSOR]
                },] },
    ];
    /**
     * @nocollapse
     */
    SelectControlValueAccessor.ctorParameters = function () { return [
        { type: Renderer2, },
        { type: ElementRef, },
    ]; };
    SelectControlValueAccessor.propDecorators = {
        'compareWith': [{ type: Input },],
    };
    /**
     * \@whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.
     *
     * \@howToUse
     *
     * See docs for {\@link SelectControlValueAccessor} for usage examples.
     *
     * \@stable
     */
    var NgSelectOption = (function () {
        /**
         * @param {?} _element
         * @param {?} _renderer
         * @param {?} _select
         */
        function NgSelectOption(_element, _renderer, _select) {
            this._element = _element;
            this._renderer = _renderer;
            this._select = _select;
            if (this._select)
                this.id = this._select._registerOption();
        }
        Object.defineProperty(NgSelectOption.prototype, "ngValue", {
            /**
             * @param {?} value
             * @return {?}
             */
            set: function (value) {
                if (this._select == null)
                    return;
                this._select._optionMap.set(this.id, value);
                this._setElementValue(_buildValueString(this.id, value));
                this._select.writeValue(this._select.value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgSelectOption.prototype, "value", {
            /**
             * @param {?} value
             * @return {?}
             */
            set: function (value) {
                this._setElementValue(value);
                if (this._select)
                    this._select.writeValue(this._select.value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * \@internal
         * @param {?} value
         * @return {?}
         */
        NgSelectOption.prototype._setElementValue = function (value) {
            this._renderer.setProperty(this._element.nativeElement, 'value', value);
        };
        /**
         * @return {?}
         */
        NgSelectOption.prototype.ngOnDestroy = function () {
            if (this._select) {
                this._select._optionMap.delete(this.id);
                this._select.writeValue(this._select.value);
            }
        };
        return NgSelectOption;
    }());
    NgSelectOption.decorators = [
        { type: Directive, args: [{ selector: 'option' },] },
    ];
    /**
     * @nocollapse
     */
    NgSelectOption.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: SelectControlValueAccessor, decorators: [{ type: Optional }, { type: Host },] },
    ]; };
    NgSelectOption.propDecorators = {
        'ngValue': [{ type: Input, args: ['ngValue',] },],
        'value': [{ type: Input, args: ['value',] },],
    };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var SELECT_MULTIPLE_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return SelectMultipleControlValueAccessor; }),
        multi: true
    };
    /**
     * @param {?} id
     * @param {?} value
     * @return {?}
     */
    function _buildValueString$1(id, value) {
        if (id == null)
            return "" + value;
        if (typeof value === 'string')
            value = "'" + value + "'";
        if (value && typeof value === 'object')
            value = 'Object';
        return (id + ": " + value).slice(0, 50);
    }
    /**
     * @param {?} valueString
     * @return {?}
     */
    function _extractId$1(valueString) {
        return valueString.split(':')[0];
    }
    /**
     * The accessor for writing a value and listening to changes on a select element.
     *
     *  ### Caveat: Options selection
     *
     * Angular uses object identity to select options. It's possible for the identities of items
     * to change while the data does not. This can happen, for example, if the items are produced
     * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the
     * second response will produce objects with different identities.
     *
     * To customize the default option comparison algorithm, `<select multiple>` supports `compareWith`
     * input. `compareWith` takes a **function** which has two arguments: `option1` and `option2`.
     * If `compareWith` is given, Angular selects options by the return value of the function.
     *
     * #### Syntax
     *
     * ```
     * <select multiple [compareWith]="compareFn"  [(ngModel)]="selectedCountries">
     *     <option *ngFor="let country of countries" [ngValue]="country">
     *         {{country.name}}
     *     </option>
     * </select>
     *
     * compareFn(c1: Country, c2: Country): boolean {
     *     return c1 && c2 ? c1.id === c2.id : c1 === c2;
     * }
     * ```
     *
     * \@stable
     */
    var SelectMultipleControlValueAccessor = (function () {
        /**
         * @param {?} _renderer
         * @param {?} _elementRef
         */
        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            /**
             * \@internal
             */
            this._optionMap = new Map();
            /**
             * \@internal
             */
            this._idCounter = 0;
            this.onChange = function (_) { };
            this.onTouched = function () { };
            this._compareWith = looseIdentical;
        }
        Object.defineProperty(SelectMultipleControlValueAccessor.prototype, "compareWith", {
            /**
             * @param {?} fn
             * @return {?}
             */
            set: function (fn) {
                if (typeof fn !== 'function') {
                    throw new Error("compareWith must be a function, but received " + JSON.stringify(fn));
                }
                this._compareWith = fn;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @return {?}
         */
        SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {
            var _this = this;
            this.value = value;
            var /** @type {?} */ optionSelectedStateSetter;
            if (Array.isArray(value)) {
                // convert values to ids
                var /** @type {?} */ ids_1 = value.map(function (v) { return _this._getOptionId(v); });
                optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); };
            }
            else {
                optionSelectedStateSetter = function (opt, o) { opt._setSelected(false); };
            }
            this._optionMap.forEach(optionSelectedStateSetter);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {
            var _this = this;
            this.onChange = function (_) {
                var /** @type {?} */ selected = [];
                if (_.hasOwnProperty('selectedOptions')) {
                    var /** @type {?} */ options = _.selectedOptions;
                    for (var /** @type {?} */ i = 0; i < options.length; i++) {
                        var /** @type {?} */ opt = options.item(i);
                        var /** @type {?} */ val = _this._getOptionValue(opt.value);
                        selected.push(val);
                    }
                }
                else {
                    var /** @type {?} */ options = (_.options);
                    for (var /** @type {?} */ i = 0; i < options.length; i++) {
                        var /** @type {?} */ opt = options.item(i);
                        if (opt.selected) {
                            var /** @type {?} */ val = _this._getOptionValue(opt.value);
                            selected.push(val);
                        }
                    }
                }
                _this.value = selected;
                fn(selected);
            };
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        /**
         * \@internal
         * @param {?} value
         * @return {?}
         */
        SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {
            var /** @type {?} */ id = (this._idCounter++).toString();
            this._optionMap.set(id, value);
            return id;
        };
        /**
         * \@internal
         * @param {?} value
         * @return {?}
         */
        SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {
            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
                var id = _a[_i];
                if (this._compareWith(/** @type {?} */ ((this._optionMap.get(id)))._value, value))
                    return id;
            }
            return null;
        };
        /**
         * \@internal
         * @param {?} valueString
         * @return {?}
         */
        SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {
            var /** @type {?} */ id = _extractId$1(valueString);
            return this._optionMap.has(id) ? ((this._optionMap.get(id)))._value : valueString;
        };
        return SelectMultipleControlValueAccessor;
    }());
    SelectMultipleControlValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',
                    host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },
                    providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
                },] },
    ];
    /**
     * @nocollapse
     */
    SelectMultipleControlValueAccessor.ctorParameters = function () { return [
        { type: Renderer2, },
        { type: ElementRef, },
    ]; };
    SelectMultipleControlValueAccessor.propDecorators = {
        'compareWith': [{ type: Input },],
    };
    /**
     * Marks `<option>` as dynamic, so Angular can be notified when options change.
     *
     * ### Example
     *
     * ```
     * <select multiple name="city" ngModel>
     *   <option *ngFor="let c of cities" [value]="c"></option>
     * </select>
     * ```
     */
    var NgSelectMultipleOption = (function () {
        /**
         * @param {?} _element
         * @param {?} _renderer
         * @param {?} _select
         */
        function NgSelectMultipleOption(_element, _renderer, _select) {
            this._element = _element;
            this._renderer = _renderer;
            this._select = _select;
            if (this._select) {
                this.id = this._select._registerOption(this);
            }
        }
        Object.defineProperty(NgSelectMultipleOption.prototype, "ngValue", {
            /**
             * @param {?} value
             * @return {?}
             */
            set: function (value) {
                if (this._select == null)
                    return;
                this._value = value;
                this._setElementValue(_buildValueString$1(this.id, value));
                this._select.writeValue(this._select.value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgSelectMultipleOption.prototype, "value", {
            /**
             * @param {?} value
             * @return {?}
             */
            set: function (value) {
                if (this._select) {
                    this._value = value;
                    this._setElementValue(_buildValueString$1(this.id, value));
                    this._select.writeValue(this._select.value);
                }
                else {
                    this._setElementValue(value);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * \@internal
         * @param {?} value
         * @return {?}
         */
        NgSelectMultipleOption.prototype._setElementValue = function (value) {
            this._renderer.setProperty(this._element.nativeElement, 'value', value);
        };
        /**
         * \@internal
         * @param {?} selected
         * @return {?}
         */
        NgSelectMultipleOption.prototype._setSelected = function (selected) {
            this._renderer.setProperty(this._element.nativeElement, 'selected', selected);
        };
        /**
         * @return {?}
         */
        NgSelectMultipleOption.prototype.ngOnDestroy = function () {
            if (this._select) {
                this._select._optionMap.delete(this.id);
                this._select.writeValue(this._select.value);
            }
        };
        return NgSelectMultipleOption;
    }());
    NgSelectMultipleOption.decorators = [
        { type: Directive, args: [{ selector: 'option' },] },
    ];
    /**
     * @nocollapse
     */
    NgSelectMultipleOption.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: SelectMultipleControlValueAccessor, decorators: [{ type: Optional }, { type: Host },] },
    ]; };
    NgSelectMultipleOption.propDecorators = {
        'ngValue': [{ type: Input, args: ['ngValue',] },],
        'value': [{ type: Input, args: ['value',] },],
    };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} name
     * @param {?} parent
     * @return {?}
     */
    function controlPath(name, parent) {
        return ((parent.path)).concat([name]);
    }
    /**
     * @param {?} control
     * @param {?} dir
     * @return {?}
     */
    function setUpControl(control, dir) {
        if (!control)
            _throwError$1(dir, 'Cannot find control with');
        if (!dir.valueAccessor)
            _throwError$1(dir, 'No value accessor for form control with');
        control.validator = Validators.compose([/** @type {?} */ ((control.validator)), dir.validator]);
        control.asyncValidator = Validators.composeAsync([/** @type {?} */ ((control.asyncValidator)), dir.asyncValidator]); /** @type {?} */
        ((dir.valueAccessor)).writeValue(control.value); /** @type {?} */
        ((
        // view -> model
        dir.valueAccessor)).registerOnChange(function (newValue) {
            dir.viewToModelUpdate(newValue);
            control.markAsDirty();
            control.setValue(newValue, { emitModelToViewChange: false });
        }); /** @type {?} */
        ((
        // touched
        dir.valueAccessor)).registerOnTouched(function () { return control.markAsTouched(); });
        control.registerOnChange(function (newValue, emitModelEvent) {
            ((
            // control -> view
            dir.valueAccessor)).writeValue(newValue);
            // control -> ngModel
            if (emitModelEvent)
                dir.viewToModelUpdate(newValue);
        });
        if (((dir.valueAccessor)).setDisabledState) {
            control.registerOnDisabledChange(function (isDisabled) { /** @type {?} */ ((((dir.valueAccessor)).setDisabledState))(isDisabled); });
        }
        // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4
        dir._rawValidators.forEach(function (validator) {
            if (((validator)).registerOnValidatorChange)
                ((((validator)).registerOnValidatorChange))(function () { return control.updateValueAndValidity(); });
        });
        dir._rawAsyncValidators.forEach(function (validator) {
            if (((validator)).registerOnValidatorChange)
                ((((validator)).registerOnValidatorChange))(function () { return control.updateValueAndValidity(); });
        });
    }
    /**
     * @param {?} control
     * @param {?} dir
     * @return {?}
     */
    function cleanUpControl(control, dir) {
        ((dir.valueAccessor)).registerOnChange(function () { return _noControlError(dir); }); /** @type {?} */
        ((dir.valueAccessor)).registerOnTouched(function () { return _noControlError(dir); });
        dir._rawValidators.forEach(function (validator) {
            if (validator.registerOnValidatorChange) {
                validator.registerOnValidatorChange(null);
            }
        });
        dir._rawAsyncValidators.forEach(function (validator) {
            if (validator.registerOnValidatorChange) {
                validator.registerOnValidatorChange(null);
            }
        });
        if (control)
            control._clearChangeFns();
    }
    /**
     * @param {?} control
     * @param {?} dir
     * @return {?}
     */
    function setUpFormContainer(control, dir) {
        if (control == null)
            _throwError$1(dir, 'Cannot find control with');
        control.validator = Validators.compose([control.validator, dir.validator]);
        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
    }
    /**
     * @param {?} dir
     * @return {?}
     */
    function _noControlError(dir) {
        return _throwError$1(dir, 'There is no FormControl instance attached to form control element with');
    }
    /**
     * @param {?} dir
     * @param {?} message
     * @return {?}
     */
    function _throwError$1(dir, message) {
        var /** @type {?} */ messageEnd;
        if (((dir.path)).length > 1) {
            messageEnd = "path: '" + ((dir.path)).join(' -> ') + "'";
        }
        else if (((dir.path))[0]) {
            messageEnd = "name: '" + dir.path + "'";
        }
        else {
            messageEnd = 'unspecified name attribute';
        }
        throw new Error(message + " " + messageEnd);
    }
    /**
     * @param {?} validators
     * @return {?}
     */
    function composeValidators(validators) {
        return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;
    }
    /**
     * @param {?} validators
     * @return {?}
     */
    function composeAsyncValidators(validators) {
        return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :
            null;
    }
    /**
     * @param {?} changes
     * @param {?} viewModel
     * @return {?}
     */
    function isPropertyUpdated(changes, viewModel) {
        if (!changes.hasOwnProperty('model'))
            return false;
        var /** @type {?} */ change = changes['model'];
        if (change.isFirstChange())
            return true;
        return !looseIdentical(viewModel, change.currentValue);
    }
    var BUILTIN_ACCESSORS = [
        CheckboxControlValueAccessor,
        RangeValueAccessor,
        NumberValueAccessor,
        SelectControlValueAccessor,
        SelectMultipleControlValueAccessor,
        RadioControlValueAccessor,
    ];
    /**
     * @param {?} valueAccessor
     * @return {?}
     */
    function isBuiltInAccessor(valueAccessor) {
        return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });
    }
    /**
     * @param {?} dir
     * @param {?} valueAccessors
     * @return {?}
     */
    function selectValueAccessor(dir, valueAccessors) {
        if (!valueAccessors)
            return null;
        var /** @type {?} */ defaultAccessor = undefined;
        var /** @type {?} */ builtinAccessor = undefined;
        var /** @type {?} */ customAccessor = undefined;
        valueAccessors.forEach(function (v) {
            if (v.constructor === DefaultValueAccessor) {
                defaultAccessor = v;
            }
            else if (isBuiltInAccessor(v)) {
                if (builtinAccessor)
                    _throwError$1(dir, 'More than one built-in value accessor matches form control with');
                builtinAccessor = v;
            }
            else {
                if (customAccessor)
                    _throwError$1(dir, 'More than one custom value accessor matches form control with');
                customAccessor = v;
            }
        });
        if (customAccessor)
            return customAccessor;
        if (builtinAccessor)
            return builtinAccessor;
        if (defaultAccessor)
            return defaultAccessor;
        _throwError$1(dir, 'No valid value accessor for form control with');
        return null;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * This is a base class for code shared between {\@link NgModelGroup} and {\@link FormGroupName}.
     *
     * \@stable
     */
    var AbstractFormGroupDirective = (function (_super) {
        __extends(AbstractFormGroupDirective, _super);
        function AbstractFormGroupDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        AbstractFormGroupDirective.prototype.ngOnInit = function () {
            this._checkParentType(); /** @type {?} */
            ((this.formDirective)).addFormGroup(this);
        };
        /**
         * @return {?}
         */
        AbstractFormGroupDirective.prototype.ngOnDestroy = function () {
            if (this.formDirective) {
                this.formDirective.removeFormGroup(this);
            }
        };
        Object.defineProperty(AbstractFormGroupDirective.prototype, "control", {
            /**
             * Get the {\@link FormGroup} backing this binding.
             * @return {?}
             */
            get: function () { return ((this.formDirective)).getFormGroup(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractFormGroupDirective.prototype, "path", {
            /**
             * Get the path to this control group.
             * @return {?}
             */
            get: function () { return controlPath(this.name, this._parent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractFormGroupDirective.prototype, "formDirective", {
            /**
             * Get the {\@link Form} to which this group belongs.
             * @return {?}
             */
            get: function () { return this._parent ? this._parent.formDirective : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractFormGroupDirective.prototype, "validator", {
            /**
             * @return {?}
             */
            get: function () { return composeValidators(this._validators); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractFormGroupDirective.prototype, "asyncValidator", {
            /**
             * @return {?}
             */
            get: function () {
                return composeAsyncValidators(this._asyncValidators);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * \@internal
         * @return {?}
         */
        AbstractFormGroupDirective.prototype._checkParentType = function () { };
        return AbstractFormGroupDirective;
    }(ControlContainer));
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var AbstractControlStatus = (function () {
        /**
         * @param {?} cd
         */
        function AbstractControlStatus(cd) {
            this._cd = cd;
        }
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassUntouched", {
            /**
             * @return {?}
             */
            get: function () { return this._cd.control ? this._cd.control.untouched : false; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassTouched", {
            /**
             * @return {?}
             */
            get: function () { return this._cd.control ? this._cd.control.touched : false; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassPristine", {
            /**
             * @return {?}
             */
            get: function () { return this._cd.control ? this._cd.control.pristine : false; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassDirty", {
            /**
             * @return {?}
             */
            get: function () { return this._cd.control ? this._cd.control.dirty : false; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassValid", {
            /**
             * @return {?}
             */
            get: function () { return this._cd.control ? this._cd.control.valid : false; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassInvalid", {
            /**
             * @return {?}
             */
            get: function () { return this._cd.control ? this._cd.control.invalid : false; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassPending", {
            /**
             * @return {?}
             */
            get: function () { return this._cd.control ? this._cd.control.pending : false; },
            enumerable: true,
            configurable: true
        });
        return AbstractControlStatus;
    }());
    var ngControlStatusHost = {
        '[class.ng-untouched]': 'ngClassUntouched',
        '[class.ng-touched]': 'ngClassTouched',
        '[class.ng-pristine]': 'ngClassPristine',
        '[class.ng-dirty]': 'ngClassDirty',
        '[class.ng-valid]': 'ngClassValid',
        '[class.ng-invalid]': 'ngClassInvalid',
        '[class.ng-pending]': 'ngClassPending',
    };
    /**
     * Directive automatically applied to Angular form controls that sets CSS classes
     * based on control status (valid/invalid/dirty/etc).
     *
     * \@stable
     */
    var NgControlStatus = (function (_super) {
        __extends(NgControlStatus, _super);
        /**
         * @param {?} cd
         */
        function NgControlStatus(cd) {
            return _super.call(this, cd) || this;
        }
        return NgControlStatus;
    }(AbstractControlStatus));
    NgControlStatus.decorators = [
        { type: Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },
    ];
    /**
     * @nocollapse
     */
    NgControlStatus.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Self },] },
    ]; };
    /**
     * Directive automatically applied to Angular form groups that sets CSS classes
     * based on control status (valid/invalid/dirty/etc).
     *
     * \@stable
     */
    var NgControlStatusGroup = (function (_super) {
        __extends(NgControlStatusGroup, _super);
        /**
         * @param {?} cd
         */
        function NgControlStatusGroup(cd) {
            return _super.call(this, cd) || this;
        }
        return NgControlStatusGroup;
    }(AbstractControlStatus));
    NgControlStatusGroup.decorators = [
        { type: Directive, args: [{
                    selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',
                    host: ngControlStatusHost
                },] },
    ];
    /**
     * @nocollapse
     */
    NgControlStatusGroup.ctorParameters = function () { return [
        { type: ControlContainer, decorators: [{ type: Self },] },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.
     */
    var VALID = 'VALID';
    /**
     * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.
     */
    var INVALID = 'INVALID';
    /**
     * Indicates that a FormControl is pending, i.e. that async validation is occurring and
     * errors are not yet available for the input value.
     */
    var PENDING = 'PENDING';
    /**
     * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor
     * calculations of validity or value.
     */
    var DISABLED = 'DISABLED';
    /**
     * @param {?} control
     * @param {?} path
     * @param {?} delimiter
     * @return {?}
     */
    function _find(control, path, delimiter) {
        if (path == null)
            return null;
        if (!(path instanceof Array)) {
            path = ((path)).split(delimiter);
        }
        if (path instanceof Array && (path.length === 0))
            return null;
        return ((path)).reduce(function (v, name) {
            if (v instanceof FormGroup) {
                return v.controls[name] || null;
            }
            if (v instanceof FormArray) {
                return v.at(/** @type {?} */ (name)) || null;
            }
            return null;
        }, control);
    }
    /**
     * @param {?=} validator
     * @return {?}
     */
    function coerceToValidator(validator) {
        return Array.isArray(validator) ? composeValidators(validator) : validator || null;
    }
    /**
     * @param {?=} asyncValidator
     * @return {?}
     */
    function coerceToAsyncValidator(asyncValidator) {
        return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) :
            asyncValidator || null;
    }
    /**
     * \@whatItDoes This is the base class for {\@link FormControl}, {\@link FormGroup}, and
     * {\@link FormArray}.
     *
     * It provides some of the shared behavior that all controls and groups of controls have, like
     * running validators, calculating status, and resetting state. It also defines the properties
     * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be
     * instantiated directly.
     *
     * \@stable
     * @abstract
     */
    var AbstractControl = (function () {
        /**
         * @param {?} validator
         * @param {?} asyncValidator
         */
        function AbstractControl(validator, asyncValidator) {
            this.validator = validator;
            this.asyncValidator = asyncValidator;
            /**
             * \@internal
             */
            this._onCollectionChange = function () { };
            this._pristine = true;
            this._touched = false;
            /**
             * \@internal
             */
            this._onDisabledChange = [];
        }
        Object.defineProperty(AbstractControl.prototype, "value", {
            /**
             * The value of the control.
             * @return {?}
             */
            get: function () { return this._value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "parent", {
            /**
             * The parent control.
             * @return {?}
             */
            get: function () { return this._parent; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "status", {
            /**
             * The validation status of the control. There are four possible
             * validation statuses:
             *
             * * **VALID**:  control has passed all validation checks
             * * **INVALID**: control has failed at least one validation check
             * * **PENDING**: control is in the midst of conducting a validation check
             * * **DISABLED**: control is exempt from validation checks
             *
             * These statuses are mutually exclusive, so a control cannot be
             * both valid AND invalid or invalid AND disabled.
             * @return {?}
             */
            get: function () { return this._status; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "valid", {
            /**
             * A control is `valid` when its `status === VALID`.
             *
             * In order to have this status, the control must have passed all its
             * validation checks.
             * @return {?}
             */
            get: function () { return this._status === VALID; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "invalid", {
            /**
             * A control is `invalid` when its `status === INVALID`.
             *
             * In order to have this status, the control must have failed
             * at least one of its validation checks.
             * @return {?}
             */
            get: function () { return this._status === INVALID; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "pending", {
            /**
             * A control is `pending` when its `status === PENDING`.
             *
             * In order to have this status, the control must be in the
             * middle of conducting a validation check.
             * @return {?}
             */
            get: function () { return this._status == PENDING; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "disabled", {
            /**
             * A control is `disabled` when its `status === DISABLED`.
             *
             * Disabled controls are exempt from validation checks and
             * are not included in the aggregate value of their ancestor
             * controls.
             * @return {?}
             */
            get: function () { return this._status === DISABLED; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "enabled", {
            /**
             * A control is `enabled` as long as its `status !== DISABLED`.
             *
             * In other words, it has a status of `VALID`, `INVALID`, or
             * `PENDING`.
             * @return {?}
             */
            get: function () { return this._status !== DISABLED; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "errors", {
            /**
             * Returns any errors generated by failing validation. If there
             * are no errors, it will return null.
             * @return {?}
             */
            get: function () { return this._errors; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "pristine", {
            /**
             * A control is `pristine` if the user has not yet changed
             * the value in the UI.
             *
             * Note that programmatic changes to a control's value will
             * *not* mark it dirty.
             * @return {?}
             */
            get: function () { return this._pristine; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "dirty", {
            /**
             * A control is `dirty` if the user has changed the value
             * in the UI.
             *
             * Note that programmatic changes to a control's value will
             * *not* mark it dirty.
             * @return {?}
             */
            get: function () { return !this.pristine; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "touched", {
            /**
             * A control is marked `touched` once the user has triggered
             * a `blur` event on it.
             * @return {?}
             */
            get: function () { return this._touched; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "untouched", {
            /**
             * A control is `untouched` if the user has not yet triggered
             * a `blur` event on it.
             * @return {?}
             */
            get: function () { return !this._touched; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "valueChanges", {
            /**
             * Emits an event every time the value of the control changes, in
             * the UI or programmatically.
             * @return {?}
             */
            get: function () { return this._valueChanges; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "statusChanges", {
            /**
             * Emits an event every time the validation status of the control
             * is re-calculated.
             * @return {?}
             */
            get: function () { return this._statusChanges; },
            enumerable: true,
            configurable: true
        });
        /**
         * Sets the synchronous validators that are active on this control.  Calling
         * this will overwrite any existing sync validators.
         * @param {?} newValidator
         * @return {?}
         */
        AbstractControl.prototype.setValidators = function (newValidator) {
            this.validator = coerceToValidator(newValidator);
        };
        /**
         * Sets the async validators that are active on this control. Calling this
         * will overwrite any existing async validators.
         * @param {?} newValidator
         * @return {?}
         */
        AbstractControl.prototype.setAsyncValidators = function (newValidator) {
            this.asyncValidator = coerceToAsyncValidator(newValidator);
        };
        /**
         * Empties out the sync validator list.
         * @return {?}
         */
        AbstractControl.prototype.clearValidators = function () { this.validator = null; };
        /**
         * Empties out the async validator list.
         * @return {?}
         */
        AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };
        /**
         * Marks the control as `touched`.
         *
         * This will also mark all direct ancestors as `touched` to maintain
         * the model.
         * @param {?=} opts
         * @return {?}
         */
        AbstractControl.prototype.markAsTouched = function (opts) {
            if (opts === void 0) { opts = {}; }
            this._touched = true;
            if (this._parent && !opts.onlySelf) {
                this._parent.markAsTouched(opts);
            }
        };
        /**
         * Marks the control as `untouched`.
         *
         * If the control has any children, it will also mark all children as `untouched`
         * to maintain the model, and re-calculate the `touched` status of all parent
         * controls.
         * @param {?=} opts
         * @return {?}
         */
        AbstractControl.prototype.markAsUntouched = function (opts) {
            if (opts === void 0) { opts = {}; }
            this._touched = false;
            this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });
            if (this._parent && !opts.onlySelf) {
                this._parent._updateTouched(opts);
            }
        };
        /**
         * Marks the control as `dirty`.
         *
         * This will also mark all direct ancestors as `dirty` to maintain
         * the model.
         * @param {?=} opts
         * @return {?}
         */
        AbstractControl.prototype.markAsDirty = function (opts) {
            if (opts === void 0) { opts = {}; }
            this._pristine = false;
            if (this._parent && !opts.onlySelf) {
                this._parent.markAsDirty(opts);
            }
        };
        /**
         * Marks the control as `pristine`.
         *
         * If the control has any children, it will also mark all children as `pristine`
         * to maintain the model, and re-calculate the `pristine` status of all parent
         * controls.
         * @param {?=} opts
         * @return {?}
         */
        AbstractControl.prototype.markAsPristine = function (opts) {
            if (opts === void 0) { opts = {}; }
            this._pristine = true;
            this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });
            if (this._parent && !opts.onlySelf) {
                this._parent._updatePristine(opts);
            }
        };
        /**
         * Marks the control as `pending`.
         * @param {?=} opts
         * @return {?}
         */
        AbstractControl.prototype.markAsPending = function (opts) {
            if (opts === void 0) { opts = {}; }
            this._status = PENDING;
            if (this._parent && !opts.onlySelf) {
                this._parent.markAsPending(opts);
            }
        };
        /**
         * Disables the control. This means the control will be exempt from validation checks and
         * excluded from the aggregate value of any parent. Its status is `DISABLED`.
         *
         * If the control has children, all children will be disabled to maintain the model.
         * @param {?=} opts
         * @return {?}
         */
        AbstractControl.prototype.disable = function (opts) {
            if (opts === void 0) { opts = {}; }
            this._status = DISABLED;
            this._errors = null;
            this._forEachChild(function (control) { control.disable({ onlySelf: true }); });
            this._updateValue();
            if (opts.emitEvent !== false) {
                this._valueChanges.emit(this._value);
                this._statusChanges.emit(this._status);
            }
            this._updateAncestors(!!opts.onlySelf);
            this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });
        };
        /**
         * Enables the control. This means the control will be included in validation checks and
         * the aggregate value of its parent. Its status is re-calculated based on its value and
         * its validators.
         *
         * If the control has children, all children will be enabled.
         * @param {?=} opts
         * @return {?}
         */
        AbstractControl.prototype.enable = function (opts) {
            if (opts === void 0) { opts = {}; }
            this._status = VALID;
            this._forEachChild(function (control) { control.enable({ onlySelf: true }); });
            this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });
            this._updateAncestors(!!opts.onlySelf);
            this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });
        };
        /**
         * @param {?} onlySelf
         * @return {?}
         */
        AbstractControl.prototype._updateAncestors = function (onlySelf) {
            if (this._parent && !onlySelf) {
                this._parent.updateValueAndValidity();
                this._parent._updatePristine();
                this._parent._updateTouched();
            }
        };
        /**
         * @param {?} parent
         * @return {?}
         */
        AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };
        /**
         * Sets the value of the control. Abstract method (implemented in sub-classes).
         * @abstract
         * @param {?} value
         * @param {?=} options
         * @return {?}
         */
        AbstractControl.prototype.setValue = function (value, options) { };
        /**
         * Patches the value of the control. Abstract method (implemented in sub-classes).
         * @abstract
         * @param {?} value
         * @param {?=} options
         * @return {?}
         */
        AbstractControl.prototype.patchValue = function (value, options) { };
        /**
         * Resets the control. Abstract method (implemented in sub-classes).
         * @abstract
         * @param {?=} value
         * @param {?=} options
         * @return {?}
         */
        AbstractControl.prototype.reset = function (value, options) { };
        /**
         * Re-calculates the value and validation status of the control.
         *
         * By default, it will also update the value and validity of its ancestors.
         * @param {?=} opts
         * @return {?}
         */
        AbstractControl.prototype.updateValueAndValidity = function (opts) {
            if (opts === void 0) { opts = {}; }
            this._setInitialStatus();
            this._updateValue();
            if (this.enabled) {
                this._cancelExistingSubscription();
                this._errors = this._runValidator();
                this._status = this._calculateStatus();
                if (this._status === VALID || this._status === PENDING) {
                    this._runAsyncValidator(opts.emitEvent);
                }
            }
            if (opts.emitEvent !== false) {
                this._valueChanges.emit(this._value);
                this._statusChanges.emit(this._status);
            }
            if (this._parent && !opts.onlySelf) {
                this._parent.updateValueAndValidity(opts);
            }
        };
        /**
         * \@internal
         * @param {?=} opts
         * @return {?}
         */
        AbstractControl.prototype._updateTreeValidity = function (opts) {
            if (opts === void 0) { opts = { emitEvent: true }; }
            this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity(opts); });
            this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });
        };
        /**
         * @return {?}
         */
        AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };
        /**
         * @return {?}
         */
        AbstractControl.prototype._runValidator = function () {
            return this.validator ? this.validator(this) : null;
        };
        /**
         * @param {?=} emitEvent
         * @return {?}
         */
        AbstractControl.prototype._runAsyncValidator = function (emitEvent) {
            var _this = this;
            if (this.asyncValidator) {
                this._status = PENDING;
                var /** @type {?} */ obs = toObservable(this.asyncValidator(this));
                this._asyncValidationSubscription =
                    obs.subscribe(function (errors) { return _this.setErrors(errors, { emitEvent: emitEvent }); });
            }
        };
        /**
         * @return {?}
         */
        AbstractControl.prototype._cancelExistingSubscription = function () {
            if (this._asyncValidationSubscription) {
                this._asyncValidationSubscription.unsubscribe();
            }
        };
        /**
         * Sets errors on a form control.
         *
         * This is used when validations are run manually by the user, rather than automatically.
         *
         * Calling `setErrors` will also update the validity of the parent control.
         *
         * ### Example
         *
         * ```
         * const login = new FormControl("someLogin");
         * login.setErrors({
         *   "notUnique": true
         * });
         *
         * expect(login.valid).toEqual(false);
         * expect(login.errors).toEqual({"notUnique": true});
         *
         * login.setValue("someOtherLogin");
         *
         * expect(login.valid).toEqual(true);
         * ```
         * @param {?} errors
         * @param {?=} opts
         * @return {?}
         */
        AbstractControl.prototype.setErrors = function (errors, opts) {
            if (opts === void 0) { opts = {}; }
            this._errors = errors;
            this._updateControlsErrors(opts.emitEvent !== false);
        };
        /**
         * Retrieves a child control given the control's name or path.
         *
         * Paths can be passed in as an array or a string delimited by a dot.
         *
         * To get a control nested within a `person` sub-group:
         *
         * * `this.form.get('person.name');`
         *
         * -OR-
         *
         * * `this.form.get(['person', 'name']);`
         * @param {?} path
         * @return {?}
         */
        AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };
        /**
         * Returns true if the control with the given path has the error specified. Otherwise
         * returns null or undefined.
         *
         * If no path is given, it checks for the error on the present control.
         * @param {?} errorCode
         * @param {?=} path
         * @return {?}
         */
        AbstractControl.prototype.getError = function (errorCode, path) {
            var /** @type {?} */ control = path ? this.get(path) : this;
            return control && control._errors ? control._errors[errorCode] : null;
        };
        /**
         * Returns true if the control with the given path has the error specified. Otherwise
         * returns false.
         *
         * If no path is given, it checks for the error on the present control.
         * @param {?} errorCode
         * @param {?=} path
         * @return {?}
         */
        AbstractControl.prototype.hasError = function (errorCode, path) { return !!this.getError(errorCode, path); };
        Object.defineProperty(AbstractControl.prototype, "root", {
            /**
             * Retrieves the top-level ancestor of this control.
             * @return {?}
             */
            get: function () {
                var /** @type {?} */ x = this;
                while (x._parent) {
                    x = x._parent;
                }
                return x;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * \@internal
         * @param {?} emitEvent
         * @return {?}
         */
        AbstractControl.prototype._updateControlsErrors = function (emitEvent) {
            this._status = this._calculateStatus();
            if (emitEvent) {
                this._statusChanges.emit(this._status);
            }
            if (this._parent) {
                this._parent._updateControlsErrors(emitEvent);
            }
        };
        /**
         * \@internal
         * @return {?}
         */
        AbstractControl.prototype._initObservables = function () {
            this._valueChanges = new EventEmitter();
            this._statusChanges = new EventEmitter();
        };
        /**
         * @return {?}
         */
        AbstractControl.prototype._calculateStatus = function () {
            if (this._allControlsDisabled())
                return DISABLED;
            if (this._errors)
                return INVALID;
            if (this._anyControlsHaveStatus(PENDING))
                return PENDING;
            if (this._anyControlsHaveStatus(INVALID))
                return INVALID;
            return VALID;
        };
        /**
         * \@internal
         * @abstract
         * @return {?}
         */
        AbstractControl.prototype._updateValue = function () { };
        /**
         * \@internal
         * @abstract
         * @param {?} cb
         * @return {?}
         */
        AbstractControl.prototype._forEachChild = function (cb) { };
        /**
         * \@internal
         * @abstract
         * @param {?} condition
         * @return {?}
         */
        AbstractControl.prototype._anyControls = function (condition) { };
        /**
         * \@internal
         * @abstract
         * @return {?}
         */
        AbstractControl.prototype._allControlsDisabled = function () { };
        /**
         * \@internal
         * @param {?} status
         * @return {?}
         */
        AbstractControl.prototype._anyControlsHaveStatus = function (status) {
            return this._anyControls(function (control) { return control.status === status; });
        };
        /**
         * \@internal
         * @return {?}
         */
        AbstractControl.prototype._anyControlsDirty = function () {
            return this._anyControls(function (control) { return control.dirty; });
        };
        /**
         * \@internal
         * @return {?}
         */
        AbstractControl.prototype._anyControlsTouched = function () {
            return this._anyControls(function (control) { return control.touched; });
        };
        /**
         * \@internal
         * @param {?=} opts
         * @return {?}
         */
        AbstractControl.prototype._updatePristine = function (opts) {
            if (opts === void 0) { opts = {}; }
            this._pristine = !this._anyControlsDirty();
            if (this._parent && !opts.onlySelf) {
                this._parent._updatePristine(opts);
            }
        };
        /**
         * \@internal
         * @param {?=} opts
         * @return {?}
         */
        AbstractControl.prototype._updateTouched = function (opts) {
            if (opts === void 0) { opts = {}; }
            this._touched = this._anyControlsTouched();
            if (this._parent && !opts.onlySelf) {
                this._parent._updateTouched(opts);
            }
        };
        /**
         * \@internal
         * @param {?} formState
         * @return {?}
         */
        AbstractControl.prototype._isBoxedValue = function (formState) {
            return typeof formState === 'object' && formState !== null &&
                Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;
        };
        /**
         * \@internal
         * @param {?} fn
         * @return {?}
         */
        AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };
        return AbstractControl;
    }());
    /**
     * \@whatItDoes Tracks the value and validation status of an individual form control.
     *
     * It is one of the three fundamental building blocks of Angular forms, along with
     * {\@link FormGroup} and {\@link FormArray}.
     *
     * \@howToUse
     *
     * When instantiating a {\@link FormControl}, you can pass in an initial value as the
     * first argument. Example:
     *
     * ```ts
     * const ctrl = new FormControl('some value');
     * console.log(ctrl.value);     // 'some value'
     * ```
     *
     * You can also initialize the control with a form state object on instantiation,
     * which includes both the value and whether or not the control is disabled.
     * You can't use the value key without the disabled key; both are required
     * to use this way of initialization.
     *
     * ```ts
     * const ctrl = new FormControl({value: 'n/a', disabled: true});
     * console.log(ctrl.value);     // 'n/a'
     * console.log(ctrl.status);   // 'DISABLED'
     * ```
     *
     * To include a sync validator (or an array of sync validators) with the control,
     * pass it in as the second argument. Async validators are also supported, but
     * have to be passed in separately as the third arg.
     *
     * ```ts
     * const ctrl = new FormControl('', Validators.required);
     * console.log(ctrl.value);     // ''
     * console.log(ctrl.status);   // 'INVALID'
     * ```
     *
     * See its superclass, {\@link AbstractControl}, for more properties and methods.
     *
     * * **npm package**: `\@angular/forms`
     *
     * \@stable
     */
    var FormControl = (function (_super) {
        __extends(FormControl, _super);
        /**
         * @param {?=} formState
         * @param {?=} validator
         * @param {?=} asyncValidator
         */
        function FormControl(formState, validator, asyncValidator) {
            if (formState === void 0) { formState = null; }
            var _this = _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator)) || this;
            /**
             * \@internal
             */
            _this._onChange = [];
            _this._applyFormState(formState);
            _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
            _this._initObservables();
            return _this;
        }
        /**
         * Set the value of the form control to `value`.
         *
         * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`
         * and not its parent component. This defaults to false.
         *
         * If `emitEvent` is `true`, this
         * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults
         * to true (as it falls through to `updateValueAndValidity`).
         *
         * If `emitModelToViewChange` is `true`, the view will be notified about the new value
         * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not
         * specified.
         *
         * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the
         * model.  This is the default behavior if `emitViewToModelChange` is not specified.
         * @param {?} value
         * @param {?=} options
         * @return {?}
         */
        FormControl.prototype.setValue = function (value, options) {
            var _this = this;
            if (options === void 0) { options = {}; }
            this._value = value;
            if (this._onChange.length && options.emitModelToViewChange !== false) {
                this._onChange.forEach(function (changeFn) { return changeFn(_this._value, options.emitViewToModelChange !== false); });
            }
            this.updateValueAndValidity(options);
        };
        /**
         * Patches the value of a control.
         *
         * This function is functionally the same as {\@link FormControl#setValue} at this level.
         * It exists for symmetry with {\@link FormGroup#patchValue} on `FormGroups` and `FormArrays`,
         * where it does behave differently.
         * @param {?} value
         * @param {?=} options
         * @return {?}
         */
        FormControl.prototype.patchValue = function (value, options) {
            if (options === void 0) { options = {}; }
            this.setValue(value, options);
        };
        /**
         * Resets the form control. This means by default:
         *
         * * it is marked as `pristine`
         * * it is marked as `untouched`
         * * value is set to null
         *
         * You can also reset to a specific form state by passing through a standalone
         * value or a form state object that contains both a value and a disabled state
         * (these are the only two properties that cannot be calculated).
         *
         * Ex:
         *
         * ```ts
         * this.control.reset('Nancy');
         *
         * console.log(this.control.value);  // 'Nancy'
         * ```
         *
         * OR
         *
         * ```
         * this.control.reset({value: 'Nancy', disabled: true});
         *
         * console.log(this.control.value);  // 'Nancy'
         * console.log(this.control.status);  // 'DISABLED'
         * ```
         * @param {?=} formState
         * @param {?=} options
         * @return {?}
         */
        FormControl.prototype.reset = function (formState, options) {
            if (formState === void 0) { formState = null; }
            if (options === void 0) { options = {}; }
            this._applyFormState(formState);
            this.markAsPristine(options);
            this.markAsUntouched(options);
            this.setValue(this._value, options);
        };
        /**
         * \@internal
         * @return {?}
         */
        FormControl.prototype._updateValue = function () { };
        /**
         * \@internal
         * @param {?} condition
         * @return {?}
         */
        FormControl.prototype._anyControls = function (condition) { return false; };
        /**
         * \@internal
         * @return {?}
         */
        FormControl.prototype._allControlsDisabled = function () { return this.disabled; };
        /**
         * Register a listener for change events.
         * @param {?} fn
         * @return {?}
         */
        FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };
        /**
         * \@internal
         * @return {?}
         */
        FormControl.prototype._clearChangeFns = function () {
            this._onChange = [];
            this._onDisabledChange = [];
            this._onCollectionChange = function () { };
        };
        /**
         * Register a listener for disabled events.
         * @param {?} fn
         * @return {?}
         */
        FormControl.prototype.registerOnDisabledChange = function (fn) {
            this._onDisabledChange.push(fn);
        };
        /**
         * \@internal
         * @param {?} cb
         * @return {?}
         */
        FormControl.prototype._forEachChild = function (cb) { };
        /**
         * @param {?} formState
         * @return {?}
         */
        FormControl.prototype._applyFormState = function (formState) {
            if (this._isBoxedValue(formState)) {
                this._value = formState.value;
                formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :
                    this.enable({ onlySelf: true, emitEvent: false });
            }
            else {
                this._value = formState;
            }
        };
        return FormControl;
    }(AbstractControl));
    /**
     * \@whatItDoes Tracks the value and validity state of a group of {\@link FormControl}
     * instances.
     *
     * A `FormGroup` aggregates the values of each child {\@link FormControl} into one object,
     * with each control name as the key.  It calculates its status by reducing the statuses
     * of its children. For example, if one of the controls in a group is invalid, the entire
     * group becomes invalid.
     *
     * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,
     * along with {\@link FormControl} and {\@link FormArray}.
     *
     * \@howToUse
     *
     * When instantiating a {\@link FormGroup}, pass in a collection of child controls as the first
     * argument. The key for each child will be the name under which it is registered.
     *
     * ### Example
     *
     * ```
     * const form = new FormGroup({
     *   first: new FormControl('Nancy', Validators.minLength(2)),
     *   last: new FormControl('Drew'),
     * });
     *
     * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}
     * console.log(form.status);  // 'VALID'
     * ```
     *
     * You can also include group-level validators as the second arg, or group-level async
     * validators as the third arg. These come in handy when you want to perform validation
     * that considers the value of more than one child control.
     *
     * ### Example
     *
     * ```
     * const form = new FormGroup({
     *   password: new FormControl('', Validators.minLength(2)),
     *   passwordConfirm: new FormControl('', Validators.minLength(2)),
     * }, passwordMatchValidator);
     *
     *
     * function passwordMatchValidator(g: FormGroup) {
     *    return g.get('password').value === g.get('passwordConfirm').value
     *       ? null : {'mismatch': true};
     * }
     * ```
     *
     * * **npm package**: `\@angular/forms`
     *
     * \@stable
     */
    var FormGroup = (function (_super) {
        __extends(FormGroup, _super);
        /**
         * @param {?} controls
         * @param {?=} validator
         * @param {?=} asyncValidator
         */
        function FormGroup(controls, validator, asyncValidator) {
            var _this = _super.call(this, validator || null, asyncValidator || null) || this;
            _this.controls = controls;
            _this._initObservables();
            _this._setUpControls();
            _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
            return _this;
        }
        /**
         * Registers a control with the group's list of controls.
         *
         * This method does not update value or validity of the control, so for
         * most cases you'll want to use {\@link FormGroup#addControl} instead.
         * @param {?} name
         * @param {?} control
         * @return {?}
         */
        FormGroup.prototype.registerControl = function (name, control) {
            if (this.controls[name])
                return this.controls[name];
            this.controls[name] = control;
            control.setParent(this);
            control._registerOnCollectionChange(this._onCollectionChange);
            return control;
        };
        /**
         * Add a control to this group.
         * @param {?} name
         * @param {?} control
         * @return {?}
         */
        FormGroup.prototype.addControl = function (name, control) {
            this.registerControl(name, control);
            this.updateValueAndValidity();
            this._onCollectionChange();
        };
        /**
         * Remove a control from this group.
         * @param {?} name
         * @return {?}
         */
        FormGroup.prototype.removeControl = function (name) {
            if (this.controls[name])
                this.controls[name]._registerOnCollectionChange(function () { });
            delete (this.controls[name]);
            this.updateValueAndValidity();
            this._onCollectionChange();
        };
        /**
         * Replace an existing control.
         * @param {?} name
         * @param {?} control
         * @return {?}
         */
        FormGroup.prototype.setControl = function (name, control) {
            if (this.controls[name])
                this.controls[name]._registerOnCollectionChange(function () { });
            delete (this.controls[name]);
            if (control)
                this.registerControl(name, control);
            this.updateValueAndValidity();
            this._onCollectionChange();
        };
        /**
         * Check whether there is an enabled control with the given name in the group.
         *
         * It will return false for disabled controls. If you'd like to check for
         * existence in the group only, use {\@link AbstractControl#get} instead.
         * @param {?} controlName
         * @return {?}
         */
        FormGroup.prototype.contains = function (controlName) {
            return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
        };
        /**
         *  Sets the value of the {\@link FormGroup}. It accepts an object that matches
         *  the structure of the group, with control names as keys.
         *
         * This method performs strict checks, so it will throw an error if you try
         * to set the value of a control that doesn't exist or if you exclude the
         * value of a control.
         *
         *  ### Example
         *
         *  ```
         *  const form = new FormGroup({
         *     first: new FormControl(),
         *     last: new FormControl()
         *  });
         *  console.log(form.value);   // {first: null, last: null}
         *
         *  form.setValue({first: 'Nancy', last: 'Drew'});
         *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}
         *
         *  ```
         * @param {?} value
         * @param {?=} options
         * @return {?}
         */
        FormGroup.prototype.setValue = function (value, options) {
            var _this = this;
            if (options === void 0) { options = {}; }
            this._checkAllValuesPresent(value);
            Object.keys(value).forEach(function (name) {
                _this._throwIfControlMissing(name);
                _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });
            });
            this.updateValueAndValidity(options);
        };
        /**
         *  Patches the value of the {\@link FormGroup}. It accepts an object with control
         *  names as keys, and will do its best to match the values to the correct controls
         *  in the group.
         *
         *  It accepts both super-sets and sub-sets of the group without throwing an error.
         *
         *  ### Example
         *
         *  ```
         *  const form = new FormGroup({
         *     first: new FormControl(),
         *     last: new FormControl()
         *  });
         *  console.log(form.value);   // {first: null, last: null}
         *
         *  form.patchValue({first: 'Nancy'});
         *  console.log(form.value);   // {first: 'Nancy', last: null}
         *
         *  ```
         * @param {?} value
         * @param {?=} options
         * @return {?}
         */
        FormGroup.prototype.patchValue = function (value, options) {
            var _this = this;
            if (options === void 0) { options = {}; }
            Object.keys(value).forEach(function (name) {
                if (_this.controls[name]) {
                    _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });
                }
            });
            this.updateValueAndValidity(options);
        };
        /**
         * Resets the {\@link FormGroup}. This means by default:
         *
         * * The group and all descendants are marked `pristine`
         * * The group and all descendants are marked `untouched`
         * * The value of all descendants will be null or null maps
         *
         * You can also reset to a specific form state by passing in a map of states
         * that matches the structure of your form, with control names as keys. The state
         * can be a standalone value or a form state object with both a value and a disabled
         * status.
         *
         * ### Example
         *
         * ```ts
         * this.form.reset({first: 'name', last: 'last name'});
         *
         * console.log(this.form.value);  // {first: 'name', last: 'last name'}
         * ```
         *
         * - OR -
         *
         * ```
         * this.form.reset({
         *   first: {value: 'name', disabled: true},
         *   last: 'last'
         * });
         *
         * console.log(this.form.value);  // {first: 'name', last: 'last name'}
         * console.log(this.form.get('first').status);  // 'DISABLED'
         * ```
         * @param {?=} value
         * @param {?=} options
         * @return {?}
         */
        FormGroup.prototype.reset = function (value, options) {
            if (value === void 0) { value = {}; }
            if (options === void 0) { options = {}; }
            this._forEachChild(function (control, name) {
                control.reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });
            });
            this.updateValueAndValidity(options);
            this._updatePristine(options);
            this._updateTouched(options);
        };
        /**
         * The aggregate value of the {\@link FormGroup}, including any disabled controls.
         *
         * If you'd like to include all values regardless of disabled status, use this method.
         * Otherwise, the `value` property is the best way to get the value of the group.
         * @return {?}
         */
        FormGroup.prototype.getRawValue = function () {
            return this._reduceChildren({}, function (acc, control, name) {
                acc[name] = control instanceof FormControl ? control.value : ((control)).getRawValue();
                return acc;
            });
        };
        /**
         * \@internal
         * @param {?} name
         * @return {?}
         */
        FormGroup.prototype._throwIfControlMissing = function (name) {
            if (!Object.keys(this.controls).length) {
                throw new Error("\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
            }
            if (!this.controls[name]) {
                throw new Error("Cannot find form control with name: " + name + ".");
            }
        };
        /**
         * \@internal
         * @param {?} cb
         * @return {?}
         */
        FormGroup.prototype._forEachChild = function (cb) {
            var _this = this;
            Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });
        };
        /**
         * \@internal
         * @return {?}
         */
        FormGroup.prototype._setUpControls = function () {
            var _this = this;
            this._forEachChild(function (control) {
                control.setParent(_this);
                control._registerOnCollectionChange(_this._onCollectionChange);
            });
        };
        /**
         * \@internal
         * @return {?}
         */
        FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };
        /**
         * \@internal
         * @param {?} condition
         * @return {?}
         */
        FormGroup.prototype._anyControls = function (condition) {
            var _this = this;
            var /** @type {?} */ res = false;
            this._forEachChild(function (control, name) {
                res = res || (_this.contains(name) && condition(control));
            });
            return res;
        };
        /**
         * \@internal
         * @return {?}
         */
        FormGroup.prototype._reduceValue = function () {
            var _this = this;
            return this._reduceChildren({}, function (acc, control, name) {
                if (control.enabled || _this.disabled) {
                    acc[name] = control.value;
                }
                return acc;
            });
        };
        /**
         * \@internal
         * @param {?} initValue
         * @param {?} fn
         * @return {?}
         */
        FormGroup.prototype._reduceChildren = function (initValue, fn) {
            var /** @type {?} */ res = initValue;
            this._forEachChild(function (control, name) { res = fn(res, control, name); });
            return res;
        };
        /**
         * \@internal
         * @return {?}
         */
        FormGroup.prototype._allControlsDisabled = function () {
            for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {
                var controlName = _a[_i];
                if (this.controls[controlName].enabled) {
                    return false;
                }
            }
            return Object.keys(this.controls).length > 0 || this.disabled;
        };
        /**
         * \@internal
         * @param {?} value
         * @return {?}
         */
        FormGroup.prototype._checkAllValuesPresent = function (value) {
            this._forEachChild(function (control, name) {
                if (value[name] === undefined) {
                    throw new Error("Must supply a value for form control with name: '" + name + "'.");
                }
            });
        };
        return FormGroup;
    }(AbstractControl));
    /**
     * \@whatItDoes Tracks the value and validity state of an array of {\@link FormControl},
     * {\@link FormGroup} or {\@link FormArray} instances.
     *
     * A `FormArray` aggregates the values of each child {\@link FormControl} into an array.
     * It calculates its status by reducing the statuses of its children. For example, if one of
     * the controls in a `FormArray` is invalid, the entire array becomes invalid.
     *
     * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,
     * along with {\@link FormControl} and {\@link FormGroup}.
     *
     * \@howToUse
     *
     * When instantiating a {\@link FormArray}, pass in an array of child controls as the first
     * argument.
     *
     * ### Example
     *
     * ```
     * const arr = new FormArray([
     *   new FormControl('Nancy', Validators.minLength(2)),
     *   new FormControl('Drew'),
     * ]);
     *
     * console.log(arr.value);   // ['Nancy', 'Drew']
     * console.log(arr.status);  // 'VALID'
     * ```
     *
     * You can also include array-level validators as the second arg, or array-level async
     * validators as the third arg. These come in handy when you want to perform validation
     * that considers the value of more than one child control.
     *
     * ### Adding or removing controls
     *
     * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods
     * in `FormArray` itself. These methods ensure the controls are properly tracked in the
     * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate
     * the `FormArray` directly, as that will result in strange and unexpected behavior such
     * as broken change detection.
     *
     * * **npm package**: `\@angular/forms`
     *
     * \@stable
     */
    var FormArray = (function (_super) {
        __extends(FormArray, _super);
        /**
         * @param {?} controls
         * @param {?=} validator
         * @param {?=} asyncValidator
         */
        function FormArray(controls, validator, asyncValidator) {
            var _this = _super.call(this, validator || null, asyncValidator || null) || this;
            _this.controls = controls;
            _this._initObservables();
            _this._setUpControls();
            _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
            return _this;
        }
        /**
         * Get the {\@link AbstractControl} at the given `index` in the array.
         * @param {?} index
         * @return {?}
         */
        FormArray.prototype.at = function (index) { return this.controls[index]; };
        /**
         * Insert a new {\@link AbstractControl} at the end of the array.
         * @param {?} control
         * @return {?}
         */
        FormArray.prototype.push = function (control) {
            this.controls.push(control);
            this._registerControl(control);
            this.updateValueAndValidity();
            this._onCollectionChange();
        };
        /**
         * Insert a new {\@link AbstractControl} at the given `index` in the array.
         * @param {?} index
         * @param {?} control
         * @return {?}
         */
        FormArray.prototype.insert = function (index, control) {
            this.controls.splice(index, 0, control);
            this._registerControl(control);
            this.updateValueAndValidity();
            this._onCollectionChange();
        };
        /**
         * Remove the control at the given `index` in the array.
         * @param {?} index
         * @return {?}
         */
        FormArray.prototype.removeAt = function (index) {
            if (this.controls[index])
                this.controls[index]._registerOnCollectionChange(function () { });
            this.controls.splice(index, 1);
            this.updateValueAndValidity();
            this._onCollectionChange();
        };
        /**
         * Replace an existing control.
         * @param {?} index
         * @param {?} control
         * @return {?}
         */
        FormArray.prototype.setControl = function (index, control) {
            if (this.controls[index])
                this.controls[index]._registerOnCollectionChange(function () { });
            this.controls.splice(index, 1);
            if (control) {
                this.controls.splice(index, 0, control);
                this._registerControl(control);
            }
            this.updateValueAndValidity();
            this._onCollectionChange();
        };
        Object.defineProperty(FormArray.prototype, "length", {
            /**
             * Length of the control array.
             * @return {?}
             */
            get: function () { return this.controls.length; },
            enumerable: true,
            configurable: true
        });
        /**
         *  Sets the value of the {\@link FormArray}. It accepts an array that matches
         *  the structure of the control.
         *
         * This method performs strict checks, so it will throw an error if you try
         * to set the value of a control that doesn't exist or if you exclude the
         * value of a control.
         *
         *  ### Example
         *
         *  ```
         *  const arr = new FormArray([
         *     new FormControl(),
         *     new FormControl()
         *  ]);
         *  console.log(arr.value);   // [null, null]
         *
         *  arr.setValue(['Nancy', 'Drew']);
         *  console.log(arr.value);   // ['Nancy', 'Drew']
         *  ```
         * @param {?} value
         * @param {?=} options
         * @return {?}
         */
        FormArray.prototype.setValue = function (value, options) {
            var _this = this;
            if (options === void 0) { options = {}; }
            this._checkAllValuesPresent(value);
            value.forEach(function (newValue, index) {
                _this._throwIfControlMissing(index);
                _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });
            });
            this.updateValueAndValidity(options);
        };
        /**
         *  Patches the value of the {\@link FormArray}. It accepts an array that matches the
         *  structure of the control, and will do its best to match the values to the correct
         *  controls in the group.
         *
         *  It accepts both super-sets and sub-sets of the array without throwing an error.
         *
         *  ### Example
         *
         *  ```
         *  const arr = new FormArray([
         *     new FormControl(),
         *     new FormControl()
         *  ]);
         *  console.log(arr.value);   // [null, null]
         *
         *  arr.patchValue(['Nancy']);
         *  console.log(arr.value);   // ['Nancy', null]
         *  ```
         * @param {?} value
         * @param {?=} options
         * @return {?}
         */
        FormArray.prototype.patchValue = function (value, options) {
            var _this = this;
            if (options === void 0) { options = {}; }
            value.forEach(function (newValue, index) {
                if (_this.at(index)) {
                    _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });
                }
            });
            this.updateValueAndValidity(options);
        };
        /**
         * Resets the {\@link FormArray}. This means by default:
         *
         * * The array and all descendants are marked `pristine`
         * * The array and all descendants are marked `untouched`
         * * The value of all descendants will be null or null maps
         *
         * You can also reset to a specific form state by passing in an array of states
         * that matches the structure of the control. The state can be a standalone value
         * or a form state object with both a value and a disabled status.
         *
         * ### Example
         *
         * ```ts
         * this.arr.reset(['name', 'last name']);
         *
         * console.log(this.arr.value);  // ['name', 'last name']
         * ```
         *
         * - OR -
         *
         * ```
         * this.arr.reset([
         *   {value: 'name', disabled: true},
         *   'last'
         * ]);
         *
         * console.log(this.arr.value);  // ['name', 'last name']
         * console.log(this.arr.get(0).status);  // 'DISABLED'
         * ```
         * @param {?=} value
         * @param {?=} options
         * @return {?}
         */
        FormArray.prototype.reset = function (value, options) {
            if (value === void 0) { value = []; }
            if (options === void 0) { options = {}; }
            this._forEachChild(function (control, index) {
                control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });
            });
            this.updateValueAndValidity(options);
            this._updatePristine(options);
            this._updateTouched(options);
        };
        /**
         * The aggregate value of the array, including any disabled controls.
         *
         * If you'd like to include all values regardless of disabled status, use this method.
         * Otherwise, the `value` property is the best way to get the value of the array.
         * @return {?}
         */
        FormArray.prototype.getRawValue = function () {
            return this.controls.map(function (control) {
                return control instanceof FormControl ? control.value : ((control)).getRawValue();
            });
        };
        /**
         * \@internal
         * @param {?} index
         * @return {?}
         */
        FormArray.prototype._throwIfControlMissing = function (index) {
            if (!this.controls.length) {
                throw new Error("\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
            }
            if (!this.at(index)) {
                throw new Error("Cannot find form control at index " + index);
            }
        };
        /**
         * \@internal
         * @param {?} cb
         * @return {?}
         */
        FormArray.prototype._forEachChild = function (cb) {
            this.controls.forEach(function (control, index) { cb(control, index); });
        };
        /**
         * \@internal
         * @return {?}
         */
        FormArray.prototype._updateValue = function () {
            var _this = this;
            this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })
                .map(function (control) { return control.value; });
        };
        /**
         * \@internal
         * @param {?} condition
         * @return {?}
         */
        FormArray.prototype._anyControls = function (condition) {
            return this.controls.some(function (control) { return control.enabled && condition(control); });
        };
        /**
         * \@internal
         * @return {?}
         */
        FormArray.prototype._setUpControls = function () {
            var _this = this;
            this._forEachChild(function (control) { return _this._registerControl(control); });
        };
        /**
         * \@internal
         * @param {?} value
         * @return {?}
         */
        FormArray.prototype._checkAllValuesPresent = function (value) {
            this._forEachChild(function (control, i) {
                if (value[i] === undefined) {
                    throw new Error("Must supply a value for form control at index: " + i + ".");
                }
            });
        };
        /**
         * \@internal
         * @return {?}
         */
        FormArray.prototype._allControlsDisabled = function () {
            for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {
                var control = _a[_i];
                if (control.enabled)
                    return false;
            }
            return this.controls.length > 0 || this.disabled;
        };
        /**
         * @param {?} control
         * @return {?}
         */
        FormArray.prototype._registerControl = function (control) {
            control.setParent(this);
            control._registerOnCollectionChange(this._onCollectionChange);
        };
        return FormArray;
    }(AbstractControl));
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var formDirectiveProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(function () { return NgForm; })
    };
    var resolvedPromise = Promise.resolve(null);
    /**
     * \@whatItDoes Creates a top-level {\@link FormGroup} instance and binds it to a form
     * to track aggregate form value and validation status.
     *
     * \@howToUse
     *
     * As soon as you import the `FormsModule`, this directive becomes active by default on
     * all `<form>` tags.  You don't need to add a special selector.
     *
     * You can export the directive into a local template variable using `ngForm` as the key
     * (ex: `#myForm="ngForm"`). This is optional, but useful.  Many properties from the underlying
     * {\@link FormGroup} instance are duplicated on the directive itself, so a reference to it
     * will give you access to the aggregate value and validity status of the form, as well as
     * user interaction properties like `dirty` and `touched`.
     *
     * To register child controls with the form, you'll want to use {\@link NgModel} with a
     * `name` attribute.  You can also use {\@link NgModelGroup} if you'd like to create
     * sub-groups within the form.
     *
     * You can listen to the directive's `ngSubmit` event to be notified when the user has
     * triggered a form submission. The `ngSubmit` event will be emitted with the original form
     * submission event.
     *
     * {\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
     *
     * * **npm package**: `\@angular/forms`
     *
     * * **NgModule**: `FormsModule`
     *
     *  \@stable
     */
    var NgForm = (function (_super) {
        __extends(NgForm, _super);
        /**
         * @param {?} validators
         * @param {?} asyncValidators
         */
        function NgForm(validators, asyncValidators) {
            var _this = _super.call(this) || this;
            _this._submitted = false;
            _this.ngSubmit = new EventEmitter();
            _this.form =
                new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
            return _this;
        }
        Object.defineProperty(NgForm.prototype, "submitted", {
            /**
             * @return {?}
             */
            get: function () { return this._submitted; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForm.prototype, "formDirective", {
            /**
             * @return {?}
             */
            get: function () { return this; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForm.prototype, "control", {
            /**
             * @return {?}
             */
            get: function () { return this.form; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForm.prototype, "path", {
            /**
             * @return {?}
             */
            get: function () { return []; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForm.prototype, "controls", {
            /**
             * @return {?}
             */
            get: function () { return this.form.controls; },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} dir
         * @return {?}
         */
        NgForm.prototype.addControl = function (dir) {
            var _this = this;
            resolvedPromise.then(function () {
                var /** @type {?} */ container = _this._findContainer(dir.path);
                dir._control = (container.registerControl(dir.name, dir.control));
                setUpControl(dir.control, dir);
                dir.control.updateValueAndValidity({ emitEvent: false });
            });
        };
        /**
         * @param {?} dir
         * @return {?}
         */
        NgForm.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };
        /**
         * @param {?} dir
         * @return {?}
         */
        NgForm.prototype.removeControl = function (dir) {
            var _this = this;
            resolvedPromise.then(function () {
                var /** @type {?} */ container = _this._findContainer(dir.path);
                if (container) {
                    container.removeControl(dir.name);
                }
            });
        };
        /**
         * @param {?} dir
         * @return {?}
         */
        NgForm.prototype.addFormGroup = function (dir) {
            var _this = this;
            resolvedPromise.then(function () {
                var /** @type {?} */ container = _this._findContainer(dir.path);
                var /** @type {?} */ group = new FormGroup({});
                setUpFormContainer(group, dir);
                container.registerControl(dir.name, group);
                group.updateValueAndValidity({ emitEvent: false });
            });
        };
        /**
         * @param {?} dir
         * @return {?}
         */
        NgForm.prototype.removeFormGroup = function (dir) {
            var _this = this;
            resolvedPromise.then(function () {
                var /** @type {?} */ container = _this._findContainer(dir.path);
                if (container) {
                    container.removeControl(dir.name);
                }
            });
        };
        /**
         * @param {?} dir
         * @return {?}
         */
        NgForm.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };
        /**
         * @param {?} dir
         * @param {?} value
         * @return {?}
         */
        NgForm.prototype.updateModel = function (dir, value) {
            var _this = this;
            resolvedPromise.then(function () {
                var /** @type {?} */ ctrl = (_this.form.get(/** @type {?} */ ((dir.path))));
                ctrl.setValue(value);
            });
        };
        /**
         * @param {?} value
         * @return {?}
         */
        NgForm.prototype.setValue = function (value) { this.control.setValue(value); };
        /**
         * @param {?} $event
         * @return {?}
         */
        NgForm.prototype.onSubmit = function ($event) {
            this._submitted = true;
            this.ngSubmit.emit($event);
            return false;
        };
        /**
         * @return {?}
         */
        NgForm.prototype.onReset = function () { this.resetForm(); };
        /**
         * @param {?=} value
         * @return {?}
         */
        NgForm.prototype.resetForm = function (value) {
            if (value === void 0) { value = undefined; }
            this.form.reset(value);
            this._submitted = false;
        };
        /**
         * \@internal
         * @param {?} path
         * @return {?}
         */
        NgForm.prototype._findContainer = function (path) {
            path.pop();
            return path.length ? (this.form.get(path)) : this.form;
        };
        return NgForm;
    }(ControlContainer));
    NgForm.decorators = [
        { type: Directive, args: [{
                    selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',
                    providers: [formDirectiveProvider],
                    host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },
                    outputs: ['ngSubmit'],
                    exportAs: 'ngForm'
                },] },
    ];
    /**
     * @nocollapse
     */
    NgForm.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
    ]; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var FormErrorExamples = {
        formControlName: "\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });",
        formGroupName: "\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });",
        formArrayName: "\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; index as i\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });",
        ngModelGroup: "\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>",
        ngModelWithFormGroup: "\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  "
    };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var TemplateDrivenErrors = (function () {
        function TemplateDrivenErrors() {
        }
        /**
         * @return {?}
         */
        TemplateDrivenErrors.modelParentException = function () {
            throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      " + FormErrorExamples.formControlName + "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      " + FormErrorExamples.ngModelWithFormGroup);
        };
        /**
         * @return {?}
         */
        TemplateDrivenErrors.formGroupNameException = function () {
            throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      " + FormErrorExamples.formGroupName + "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      " + FormErrorExamples.ngModelGroup);
        };
        /**
         * @return {?}
         */
        TemplateDrivenErrors.missingNameException = function () {
            throw new Error("If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">");
        };
        /**
         * @return {?}
         */
        TemplateDrivenErrors.modelGroupParentException = function () {
            throw new Error("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      " + FormErrorExamples.formGroupName + "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      " + FormErrorExamples.ngModelGroup);
        };
        return TemplateDrivenErrors;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var modelGroupProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(function () { return NgModelGroup; })
    };
    /**
     * \@whatItDoes Creates and binds a {\@link FormGroup} instance to a DOM element.
     *
     * \@howToUse
     *
     * This directive can only be used as a child of {\@link NgForm} (or in other words,
     * within `<form>` tags).
     *
     * Use this directive if you'd like to create a sub-group within a form. This can
     * come in handy if you want to validate a sub-group of your form separately from
     * the rest of your form, or if some values in your domain model make more sense to
     * consume together in a nested object.
     *
     * Pass in the name you'd like this sub-group to have and it will become the key
     * for the sub-group in the form's full value. You can also export the directive into
     * a local template variable using `ngModelGroup` (ex: `#myGroup="ngModelGroup"`).
     *
     * {\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}
     *
     * * **npm package**: `\@angular/forms`
     *
     * * **NgModule**: `FormsModule`
     *
     * \@stable
     */
    var NgModelGroup = (function (_super) {
        __extends(NgModelGroup, _super);
        /**
         * @param {?} parent
         * @param {?} validators
         * @param {?} asyncValidators
         */
        function NgModelGroup(parent, validators, asyncValidators) {
            var _this = _super.call(this) || this;
            _this._parent = parent;
            _this._validators = validators;
            _this._asyncValidators = asyncValidators;
            return _this;
        }
        /**
         * \@internal
         * @return {?}
         */
        NgModelGroup.prototype._checkParentType = function () {
            if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
                TemplateDrivenErrors.modelGroupParentException();
            }
        };
        return NgModelGroup;
    }(AbstractFormGroupDirective));
    NgModelGroup.decorators = [
        { type: Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },
    ];
    /**
     * @nocollapse
     */
    NgModelGroup.ctorParameters = function () { return [
        { type: ControlContainer, decorators: [{ type: Host }, { type: SkipSelf },] },
        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
    ]; };
    NgModelGroup.propDecorators = {
        'name': [{ type: Input, args: ['ngModelGroup',] },],
    };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var formControlBinding = {
        provide: NgControl,
        useExisting: forwardRef(function () { return NgModel; })
    };
    /**
     * `ngModel` forces an additional change detection run when its inputs change:
     * E.g.:
     * ```
     * <div>{{myModel.valid}}</div>
     * <input [(ngModel)]="myValue" #myModel="ngModel">
     * ```
     * I.e. `ngModel` can export itself on the element and then be used in the template.
     * Normally, this would result in expressions before the `input` that use the exported directive
     * to have and old value as they have been
     * dirty checked before. As this is a very common case for `ngModel`, we added this second change
     * detection run.
     *
     * Notes:
     * - this is just one extra run no matter how many `ngModel` have been changed.
     * - this is a general problem when using `exportAs` for directives!
     */
    var resolvedPromise$1 = Promise.resolve(null);
    /**
     * \@whatItDoes Creates a {\@link FormControl} instance from a domain model and binds it
     * to a form control element.
     *
     * The {\@link FormControl} instance will track the value, user interaction, and
     * validation status of the control and keep the view synced with the model. If used
     * within a parent form, the directive will also register itself with the form as a child
     * control.
     *
     * \@howToUse
     *
     * This directive can be used by itself or as part of a larger form. All you need is the
     * `ngModel` selector to activate it.
     *
     * It accepts a domain model as an optional {\@link Input}. If you have a one-way binding
     * to `ngModel` with `[]` syntax, changing the value of the domain model in the component
     * class will set the value in the view. If you have a two-way binding with `[()]` syntax
     * (also known as 'banana-box syntax'), the value in the UI will always be synced back to
     * the domain model in your class as well.
     *
     * If you wish to inspect the properties of the associated {\@link FormControl} (like
     * validity state), you can also export the directive into a local template variable using
     * `ngModel` as the key (ex: `#myVar="ngModel"`). You can then access the control using the
     * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)
     * will fall through to the control anyway, so you can access them directly. You can see a
     * full list of properties directly available in {\@link AbstractControlDirective}.
     *
     * The following is an example of a simple standalone control using `ngModel`:
     *
     * {\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}
     *
     * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute
     * so that the control can be registered with the parent form under that name.
     *
     * It's worth noting that in the context of a parent form, you often can skip one-way or
     * two-way binding because the parent form will sync the value for you. You can access
     * its properties by exporting it into a local template variable using `ngForm` (ex:
     * `#f="ngForm"`). Then you can pass it where it needs to go on submit.
     *
     * If you do need to populate initial values into your form, using a one-way binding for
     * `ngModel` tends to be sufficient as long as you use the exported form's value rather
     * than the domain model's value on submit.
     *
     * Take a look at an example of using `ngModel` within a form:
     *
     * {\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
     *
     * To see `ngModel` examples with different form control types, see:
     *
     * * Radio buttons: {\@link RadioControlValueAccessor}
     * * Selects: {\@link SelectControlValueAccessor}
     *
     * **npm package**: `\@angular/forms`
     *
     * **NgModule**: `FormsModule`
     *
     *  \@stable
     */
    var NgModel = (function (_super) {
        __extends(NgModel, _super);
        /**
         * @param {?} parent
         * @param {?} validators
         * @param {?} asyncValidators
         * @param {?} valueAccessors
         */
        function NgModel(parent, validators, asyncValidators, valueAccessors) {
            var _this = _super.call(this) || this;
            /**
             * \@internal
             */
            _this._control = new FormControl();
            /**
             * \@internal
             */
            _this._registered = false;
            _this.update = new EventEmitter();
            _this._parent = parent;
            _this._rawValidators = validators || [];
            _this._rawAsyncValidators = asyncValidators || [];
            _this.valueAccessor = selectValueAccessor(_this, valueAccessors);
            return _this;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        NgModel.prototype.ngOnChanges = function (changes) {
            this._checkForErrors();
            if (!this._registered)
                this._setUpControl();
            if ('isDisabled' in changes) {
                this._updateDisabled(changes);
            }
            if (isPropertyUpdated(changes, this.viewModel)) {
                this._updateValue(this.model);
                this.viewModel = this.model;
            }
        };
        /**
         * @return {?}
         */
        NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };
        Object.defineProperty(NgModel.prototype, "control", {
            /**
             * @return {?}
             */
            get: function () { return this._control; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgModel.prototype, "path", {
            /**
             * @return {?}
             */
            get: function () {
                return this._parent ? controlPath(this.name, this._parent) : [this.name];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgModel.prototype, "formDirective", {
            /**
             * @return {?}
             */
            get: function () { return this._parent ? this._parent.formDirective : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgModel.prototype, "validator", {
            /**
             * @return {?}
             */
            get: function () { return composeValidators(this._rawValidators); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgModel.prototype, "asyncValidator", {
            /**
             * @return {?}
             */
            get: function () {
                return composeAsyncValidators(this._rawAsyncValidators);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} newValue
         * @return {?}
         */
        NgModel.prototype.viewToModelUpdate = function (newValue) {
            this.viewModel = newValue;
            this.update.emit(newValue);
        };
        /**
         * @return {?}
         */
        NgModel.prototype._setUpControl = function () {
            this._isStandalone() ? this._setUpStandalone() :
                this.formDirective.addControl(this);
            this._registered = true;
        };
        /**
         * @return {?}
         */
        NgModel.prototype._isStandalone = function () {
            return !this._parent || !!(this.options && this.options.standalone);
        };
        /**
         * @return {?}
         */
        NgModel.prototype._setUpStandalone = function () {
            setUpControl(this._control, this);
            this._control.updateValueAndValidity({ emitEvent: false });
        };
        /**
         * @return {?}
         */
        NgModel.prototype._checkForErrors = function () {
            if (!this._isStandalone()) {
                this._checkParentType();
            }
            this._checkName();
        };
        /**
         * @return {?}
         */
        NgModel.prototype._checkParentType = function () {
            if (!(this._parent instanceof NgModelGroup) &&
                this._parent instanceof AbstractFormGroupDirective) {
                TemplateDrivenErrors.formGroupNameException();
            }
            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
                TemplateDrivenErrors.modelParentException();
            }
        };
        /**
         * @return {?}
         */
        NgModel.prototype._checkName = function () {
            if (this.options && this.options.name)
                this.name = this.options.name;
            if (!this._isStandalone() && !this.name) {
                TemplateDrivenErrors.missingNameException();
            }
        };
        /**
         * @param {?} value
         * @return {?}
         */
        NgModel.prototype._updateValue = function (value) {
            var _this = this;
            resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        NgModel.prototype._updateDisabled = function (changes) {
            var _this = this;
            var /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;
            var /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');
            resolvedPromise$1.then(function () {
                if (isDisabled && !_this.control.disabled) {
                    _this.control.disable();
                }
                else if (!isDisabled && _this.control.disabled) {
                    _this.control.enable();
                }
            });
        };
        return NgModel;
    }(NgControl));
    NgModel.decorators = [
        { type: Directive, args: [{
                    selector: '[ngModel]:not([formControlName]):not([formControl])',
                    providers: [formControlBinding],
                    exportAs: 'ngModel'
                },] },
    ];
    /**
     * @nocollapse
     */
    NgModel.ctorParameters = function () { return [
        { type: ControlContainer, decorators: [{ type: Optional }, { type: Host },] },
        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },
    ]; };
    NgModel.propDecorators = {
        'name': [{ type: Input },],
        'isDisabled': [{ type: Input, args: ['disabled',] },],
        'model': [{ type: Input, args: ['ngModel',] },],
        'options': [{ type: Input, args: ['ngModelOptions',] },],
        'update': [{ type: Output, args: ['ngModelChange',] },],
    };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var ReactiveErrors = (function () {
        function ReactiveErrors() {
        }
        /**
         * @return {?}
         */
        ReactiveErrors.controlParentException = function () {
            throw new Error("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + FormErrorExamples.formControlName);
        };
        /**
         * @return {?}
         */
        ReactiveErrors.ngModelGroupException = function () {
            throw new Error("formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        " + FormErrorExamples.formGroupName + "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        " + FormErrorExamples.ngModelGroup);
        };
        /**
         * @return {?}
         */
        ReactiveErrors.missingFormException = function () {
            throw new Error("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       " + FormErrorExamples.formControlName);
        };
        /**
         * @return {?}
         */
        ReactiveErrors.groupParentException = function () {
            throw new Error("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + FormErrorExamples.formGroupName);
        };
        /**
         * @return {?}
         */
        ReactiveErrors.arrayParentException = function () {
            throw new Error("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        " + FormErrorExamples.formArrayName);
        };
        /**
         * @return {?}
         */
        ReactiveErrors.disabledAttrWarning = function () {
            console.warn("\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    ");
        };
        return ReactiveErrors;
    }());
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var formControlBinding$1 = {
        provide: NgControl,
        useExisting: forwardRef(function () { return FormControlDirective; })
    };
    /**
     * \@whatItDoes Syncs a standalone {\@link FormControl} instance to a form control element.
     *
     * In other words, this directive ensures that any values written to the {\@link FormControl}
     * instance programmatically will be written to the DOM element (model -> view). Conversely,
     * any values written to the DOM element through user input will be reflected in the
     * {\@link FormControl} instance (view -> model).
     *
     * \@howToUse
     *
     * Use this directive if you'd like to create and manage a {\@link FormControl} instance directly.
     * Simply create a {\@link FormControl}, save it to your component class, and pass it into the
     * {\@link FormControlDirective}.
     *
     * This directive is designed to be used as a standalone control.  Unlike {\@link FormControlName},
     * it does not require that your {\@link FormControl} instance be part of any parent
     * {\@link FormGroup}, and it won't be registered to any {\@link FormGroupDirective} that
     * exists above it.
     *
     * **Get the value**: the `value` property is always synced and available on the
     * {\@link FormControl} instance. See a full list of available properties in
     * {\@link AbstractControl}.
     *
     * **Set the value**: You can pass in an initial value when instantiating the {\@link FormControl},
     * or you can set it programmatically later using {\@link AbstractControl#setValue} or
     * {\@link AbstractControl#patchValue}.
     *
     * **Listen to value**: If you want to listen to changes in the value of the control, you can
     * subscribe to the {\@link AbstractControl#valueChanges} event.  You can also listen to
     * {\@link AbstractControl#statusChanges} to be notified when the validation status is
     * re-calculated.
     *
     * ### Example
     *
     * {\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}
     *
     * * **npm package**: `\@angular/forms`
     *
     * * **NgModule**: `ReactiveFormsModule`
     *
     *  \@stable
     */
    var FormControlDirective = (function (_super) {
        __extends(FormControlDirective, _super);
        /**
         * @param {?} validators
         * @param {?} asyncValidators
         * @param {?} valueAccessors
         */
        function FormControlDirective(validators, asyncValidators, valueAccessors) {
            var _this = _super.call(this) || this;
            _this.update = new EventEmitter();
            _this._rawValidators = validators || [];
            _this._rawAsyncValidators = asyncValidators || [];
            _this.valueAccessor = selectValueAccessor(_this, valueAccessors);
            return _this;
        }
        Object.defineProperty(FormControlDirective.prototype, "isDisabled", {
            /**
             * @param {?} isDisabled
             * @return {?}
             */
            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        FormControlDirective.prototype.ngOnChanges = function (changes) {
            if (this._isControlChanged(changes)) {
                setUpControl(this.form, this);
                if (this.control.disabled && ((this.valueAccessor)).setDisabledState) {
                    ((((this.valueAccessor)).setDisabledState))(true);
                }
                this.form.updateValueAndValidity({ emitEvent: false });
            }
            if (isPropertyUpdated(changes, this.viewModel)) {
                this.form.setValue(this.model);
                this.viewModel = this.model;
            }
        };
        Object.defineProperty(FormControlDirective.prototype, "path", {
            /**
             * @return {?}
             */
            get: function () { return []; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlDirective.prototype, "validator", {
            /**
             * @return {?}
             */
            get: function () { return composeValidators(this._rawValidators); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlDirective.prototype, "asyncValidator", {
            /**
             * @return {?}
             */
            get: function () {
                return composeAsyncValidators(this._rawAsyncValidators);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlDirective.prototype, "control", {
            /**
             * @return {?}
             */
            get: function () { return this.form; },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} newValue
         * @return {?}
         */
        FormControlDirective.prototype.viewToModelUpdate = function (newValue) {
            this.viewModel = newValue;
            this.update.emit(newValue);
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        FormControlDirective.prototype._isControlChanged = function (changes) {
            return changes.hasOwnProperty('form');
        };
        return FormControlDirective;
    }(NgControl));
    FormControlDirective.decorators = [
        { type: Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },
    ];
    /**
     * @nocollapse
     */
    FormControlDirective.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },
    ]; };
    FormControlDirective.propDecorators = {
        'form': [{ type: Input, args: ['formControl',] },],
        'model': [{ type: Input, args: ['ngModel',] },],
        'update': [{ type: Output, args: ['ngModelChange',] },],
        'isDisabled': [{ type: Input, args: ['disabled',] },],
    };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var formDirectiveProvider$1 = {
        provide: ControlContainer,
        useExisting: forwardRef(function () { return FormGroupDirective; })
    };
    /**
     * \@whatItDoes Binds an existing {\@link FormGroup} to a DOM element.
     *
     * \@howToUse
     *
     * This directive accepts an existing {\@link FormGroup} instance. It will then use this
     * {\@link FormGroup} instance to match any child {\@link FormControl}, {\@link FormGroup},
     * and {\@link FormArray} instances to child {\@link FormControlName}, {\@link FormGroupName},
     * and {\@link FormArrayName} directives.
     *
     * **Set value**: You can set the form's initial value when instantiating the
     * {\@link FormGroup}, or you can set it programmatically later using the {\@link FormGroup}'s
     * {\@link AbstractControl#setValue} or {\@link AbstractControl#patchValue} methods.
     *
     * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe
     * to the {\@link FormGroup}'s {\@link AbstractControl#valueChanges} event.  You can also listen to
     * its {\@link AbstractControl#statusChanges} event to be notified when the validation status is
     * re-calculated.
     *
     * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has
     * triggered a form submission. The `ngSubmit` event will be emitted with the original form
     * submission event.
     *
     * ### Example
     *
     * In this example, we create form controls for first name and last name.
     *
     * {\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
     *
     * **npm package**: `\@angular/forms`
     *
     * **NgModule**: {\@link ReactiveFormsModule}
     *
     *  \@stable
     */
    var FormGroupDirective = (function (_super) {
        __extends(FormGroupDirective, _super);
        /**
         * @param {?} _validators
         * @param {?} _asyncValidators
         */
        function FormGroupDirective(_validators, _asyncValidators) {
            var _this = _super.call(this) || this;
            _this._validators = _validators;
            _this._asyncValidators = _asyncValidators;
            _this._submitted = false;
            _this.directives = [];
            _this.form = ((null));
            _this.ngSubmit = new EventEmitter();
            return _this;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        FormGroupDirective.prototype.ngOnChanges = function (changes) {
            this._checkFormPresent();
            if (changes.hasOwnProperty('form')) {
                this._updateValidators();
                this._updateDomValue();
                this._updateRegistrations();
            }
        };
        Object.defineProperty(FormGroupDirective.prototype, "submitted", {
            /**
             * @return {?}
             */
            get: function () { return this._submitted; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormGroupDirective.prototype, "formDirective", {
            /**
             * @return {?}
             */
            get: function () { return this; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormGroupDirective.prototype, "control", {
            /**
             * @return {?}
             */
            get: function () { return this.form; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormGroupDirective.prototype, "path", {
            /**
             * @return {?}
             */
            get: function () { return []; },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} dir
         * @return {?}
         */
        FormGroupDirective.prototype.addControl = function (dir) {
            var /** @type {?} */ ctrl = this.form.get(dir.path);
            setUpControl(ctrl, dir);
            ctrl.updateValueAndValidity({ emitEvent: false });
            this.directives.push(dir);
            return ctrl;
        };
        /**
         * @param {?} dir
         * @return {?}
         */
        FormGroupDirective.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };
        /**
         * @param {?} dir
         * @return {?}
         */
        FormGroupDirective.prototype.removeControl = function (dir) { remove$1(this.directives, dir); };
        /**
         * @param {?} dir
         * @return {?}
         */
        FormGroupDirective.prototype.addFormGroup = function (dir) {
            var /** @type {?} */ ctrl = this.form.get(dir.path);
            setUpFormContainer(ctrl, dir);
            ctrl.updateValueAndValidity({ emitEvent: false });
        };
        /**
         * @param {?} dir
         * @return {?}
         */
        FormGroupDirective.prototype.removeFormGroup = function (dir) { };
        /**
         * @param {?} dir
         * @return {?}
         */
        FormGroupDirective.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };
        /**
         * @param {?} dir
         * @return {?}
         */
        FormGroupDirective.prototype.addFormArray = function (dir) {
            var /** @type {?} */ ctrl = this.form.get(dir.path);
            setUpFormContainer(ctrl, dir);
            ctrl.updateValueAndValidity({ emitEvent: false });
        };
        /**
         * @param {?} dir
         * @return {?}
         */
        FormGroupDirective.prototype.removeFormArray = function (dir) { };
        /**
         * @param {?} dir
         * @return {?}
         */
        FormGroupDirective.prototype.getFormArray = function (dir) { return (this.form.get(dir.path)); };
        /**
         * @param {?} dir
         * @param {?} value
         * @return {?}
         */
        FormGroupDirective.prototype.updateModel = function (dir, value) {
            var /** @type {?} */ ctrl = (this.form.get(dir.path));
            ctrl.setValue(value);
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        FormGroupDirective.prototype.onSubmit = function ($event) {
            this._submitted = true;
            this.ngSubmit.emit($event);
            return false;
        };
        /**
         * @return {?}
         */
        FormGroupDirective.prototype.onReset = function () { this.resetForm(); };
        /**
         * @param {?=} value
         * @return {?}
         */
        FormGroupDirective.prototype.resetForm = function (value) {
            if (value === void 0) { value = undefined; }
            this.form.reset(value);
            this._submitted = false;
        };
        /**
         * \@internal
         * @return {?}
         */
        FormGroupDirective.prototype._updateDomValue = function () {
            var _this = this;
            this.directives.forEach(function (dir) {
                var /** @type {?} */ newCtrl = _this.form.get(dir.path);
                if (dir._control !== newCtrl) {
                    cleanUpControl(dir._control, dir);
                    if (newCtrl)
                        setUpControl(newCtrl, dir);
                    dir._control = newCtrl;
                }
            });
            this.form._updateTreeValidity({ emitEvent: false });
        };
        /**
         * @return {?}
         */
        FormGroupDirective.prototype._updateRegistrations = function () {
            var _this = this;
            this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });
            if (this._oldForm)
                this._oldForm._registerOnCollectionChange(function () { });
            this._oldForm = this.form;
        };
        /**
         * @return {?}
         */
        FormGroupDirective.prototype._updateValidators = function () {
            var /** @type {?} */ sync = composeValidators(this._validators);
            this.form.validator = Validators.compose([/** @type {?} */ ((this.form.validator)), /** @type {?} */ ((sync))]);
            var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);
            this.form.asyncValidator = Validators.composeAsync([/** @type {?} */ ((this.form.asyncValidator)), /** @type {?} */ ((async))]);
        };
        /**
         * @return {?}
         */
        FormGroupDirective.prototype._checkFormPresent = function () {
            if (!this.form) {
                ReactiveErrors.missingFormException();
            }
        };
        return FormGroupDirective;
    }(ControlContainer));
    FormGroupDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[formGroup]',
                    providers: [formDirectiveProvider$1],
                    host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },
                    exportAs: 'ngForm'
                },] },
    ];
    /**
     * @nocollapse
     */
    FormGroupDirective.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
    ]; };
    FormGroupDirective.propDecorators = {
        'form': [{ type: Input, args: ['formGroup',] },],
        'ngSubmit': [{ type: Output },],
    };
    /**
     * @template T
     * @param {?} list
     * @param {?} el
     * @return {?}
     */
    function remove$1(list, el) {
        var /** @type {?} */ index = list.indexOf(el);
        if (index > -1) {
            list.splice(index, 1);
        }
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var formGroupNameProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(function () { return FormGroupName; })
    };
    /**
     * \@whatItDoes Syncs a nested {\@link FormGroup} to a DOM element.
     *
     * \@howToUse
     *
     * This directive can only be used with a parent {\@link FormGroupDirective} (selector:
     * `[formGroup]`).
     *
     * It accepts the string name of the nested {\@link FormGroup} you want to link, and
     * will look for a {\@link FormGroup} registered with that name in the parent
     * {\@link FormGroup} instance you passed into {\@link FormGroupDirective}.
     *
     * Nested form groups can come in handy when you want to validate a sub-group of a
     * form separately from the rest or when you'd like to group the values of certain
     * controls into their own nested object.
     *
     * **Access the group**: You can access the associated {\@link FormGroup} using the
     * {\@link AbstractControl#get} method. Ex: `this.form.get('name')`.
     *
     * You can also access individual controls within the group using dot syntax.
     * Ex: `this.form.get('name.first')`
     *
     * **Get the value**: the `value` property is always synced and available on the
     * {\@link FormGroup}. See a full list of available properties in {\@link AbstractControl}.
     *
     * **Set the value**: You can set an initial value for each child control when instantiating
     * the {\@link FormGroup}, or you can set it programmatically later using
     * {\@link AbstractControl#setValue} or {\@link AbstractControl#patchValue}.
     *
     * **Listen to value**: If you want to listen to changes in the value of the group, you can
     * subscribe to the {\@link AbstractControl#valueChanges} event.  You can also listen to
     * {\@link AbstractControl#statusChanges} to be notified when the validation status is
     * re-calculated.
     *
     * ### Example
     *
     * {\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}
     *
     * * **npm package**: `\@angular/forms`
     *
     * * **NgModule**: `ReactiveFormsModule`
     *
     * \@stable
     */
    var FormGroupName = (function (_super) {
        __extends(FormGroupName, _super);
        /**
         * @param {?} parent
         * @param {?} validators
         * @param {?} asyncValidators
         */
        function FormGroupName(parent, validators, asyncValidators) {
            var _this = _super.call(this) || this;
            _this._parent = parent;
            _this._validators = validators;
            _this._asyncValidators = asyncValidators;
            return _this;
        }
        /**
         * \@internal
         * @return {?}
         */
        FormGroupName.prototype._checkParentType = function () {
            if (_hasInvalidParent(this._parent)) {
                ReactiveErrors.groupParentException();
            }
        };
        return FormGroupName;
    }(AbstractFormGroupDirective));
    FormGroupName.decorators = [
        { type: Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },
    ];
    /**
     * @nocollapse
     */
    FormGroupName.ctorParameters = function () { return [
        { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },
        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
    ]; };
    FormGroupName.propDecorators = {
        'name': [{ type: Input, args: ['formGroupName',] },],
    };
    var formArrayNameProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(function () { return FormArrayName; })
    };
    /**
     * \@whatItDoes Syncs a nested {\@link FormArray} to a DOM element.
     *
     * \@howToUse
     *
     * This directive is designed to be used with a parent {\@link FormGroupDirective} (selector:
     * `[formGroup]`).
     *
     * It accepts the string name of the nested {\@link FormArray} you want to link, and
     * will look for a {\@link FormArray} registered with that name in the parent
     * {\@link FormGroup} instance you passed into {\@link FormGroupDirective}.
     *
     * Nested form arrays can come in handy when you have a group of form controls but
     * you're not sure how many there will be. Form arrays allow you to create new
     * form controls dynamically.
     *
     * **Access the array**: You can access the associated {\@link FormArray} using the
     * {\@link AbstractControl#get} method on the parent {\@link FormGroup}.
     * Ex: `this.form.get('cities')`.
     *
     * **Get the value**: the `value` property is always synced and available on the
     * {\@link FormArray}. See a full list of available properties in {\@link AbstractControl}.
     *
     * **Set the value**: You can set an initial value for each child control when instantiating
     * the {\@link FormArray}, or you can set the value programmatically later using the
     * {\@link FormArray}'s {\@link AbstractControl#setValue} or {\@link AbstractControl#patchValue}
     * methods.
     *
     * **Listen to value**: If you want to listen to changes in the value of the array, you can
     * subscribe to the {\@link FormArray}'s {\@link AbstractControl#valueChanges} event.  You can also
     * listen to its {\@link AbstractControl#statusChanges} event to be notified when the validation
     * status is re-calculated.
     *
     * **Add new controls**: You can add new controls to the {\@link FormArray} dynamically by
     * calling its {\@link FormArray#push} method.
     *  Ex: `this.form.get('cities').push(new FormControl());`
     *
     * ### Example
     *
     * {\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}
     *
     * * **npm package**: `\@angular/forms`
     *
     * * **NgModule**: `ReactiveFormsModule`
     *
     * \@stable
     */
    var FormArrayName = (function (_super) {
        __extends(FormArrayName, _super);
        /**
         * @param {?} parent
         * @param {?} validators
         * @param {?} asyncValidators
         */
        function FormArrayName(parent, validators, asyncValidators) {
            var _this = _super.call(this) || this;
            _this._parent = parent;
            _this._validators = validators;
            _this._asyncValidators = asyncValidators;
            return _this;
        }
        /**
         * @return {?}
         */
        FormArrayName.prototype.ngOnInit = function () {
            this._checkParentType(); /** @type {?} */
            ((this.formDirective)).addFormArray(this);
        };
        /**
         * @return {?}
         */
        FormArrayName.prototype.ngOnDestroy = function () {
            if (this.formDirective) {
                this.formDirective.removeFormArray(this);
            }
        };
        Object.defineProperty(FormArrayName.prototype, "control", {
            /**
             * @return {?}
             */
            get: function () { return ((this.formDirective)).getFormArray(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormArrayName.prototype, "formDirective", {
            /**
             * @return {?}
             */
            get: function () {
                return this._parent ? (this._parent.formDirective) : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormArrayName.prototype, "path", {
            /**
             * @return {?}
             */
            get: function () { return controlPath(this.name, this._parent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormArrayName.prototype, "validator", {
            /**
             * @return {?}
             */
            get: function () { return composeValidators(this._validators); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormArrayName.prototype, "asyncValidator", {
            /**
             * @return {?}
             */
            get: function () {
                return composeAsyncValidators(this._asyncValidators);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FormArrayName.prototype._checkParentType = function () {
            if (_hasInvalidParent(this._parent)) {
                ReactiveErrors.arrayParentException();
            }
        };
        return FormArrayName;
    }(ControlContainer));
    FormArrayName.decorators = [
        { type: Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },
    ];
    /**
     * @nocollapse
     */
    FormArrayName.ctorParameters = function () { return [
        { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },
        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
    ]; };
    FormArrayName.propDecorators = {
        'name': [{ type: Input, args: ['formArrayName',] },],
    };
    /**
     * @param {?} parent
     * @return {?}
     */
    function _hasInvalidParent(parent) {
        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&
            !(parent instanceof FormArrayName);
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var controlNameBinding = {
        provide: NgControl,
        useExisting: forwardRef(function () { return FormControlName; })
    };
    /**
     * \@whatItDoes Syncs a {\@link FormControl} in an existing {\@link FormGroup} to a form control
     * element by name.
     *
     * In other words, this directive ensures that any values written to the {\@link FormControl}
     * instance programmatically will be written to the DOM element (model -> view). Conversely,
     * any values written to the DOM element through user input will be reflected in the
     * {\@link FormControl} instance (view -> model).
     *
     * \@howToUse
     *
     * This directive is designed to be used with a parent {\@link FormGroupDirective} (selector:
     * `[formGroup]`).
     *
     * It accepts the string name of the {\@link FormControl} instance you want to
     * link, and will look for a {\@link FormControl} registered with that name in the
     * closest {\@link FormGroup} or {\@link FormArray} above it.
     *
     * **Access the control**: You can access the {\@link FormControl} associated with
     * this directive by using the {\@link AbstractControl#get} method.
     * Ex: `this.form.get('first');`
     *
     * **Get value**: the `value` property is always synced and available on the {\@link FormControl}.
     * See a full list of available properties in {\@link AbstractControl}.
     *
     *  **Set value**: You can set an initial value for the control when instantiating the
     *  {\@link FormControl}, or you can set it programmatically later using
     *  {\@link AbstractControl#setValue} or {\@link AbstractControl#patchValue}.
     *
     * **Listen to value**: If you want to listen to changes in the value of the control, you can
     * subscribe to the {\@link AbstractControl#valueChanges} event.  You can also listen to
     * {\@link AbstractControl#statusChanges} to be notified when the validation status is
     * re-calculated.
     *
     * ### Example
     *
     * In this example, we create form controls for first name and last name.
     *
     * {\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
     *
     * To see `formControlName` examples with different form control types, see:
     *
     * * Radio buttons: {\@link RadioControlValueAccessor}
     * * Selects: {\@link SelectControlValueAccessor}
     *
     * **npm package**: `\@angular/forms`
     *
     * **NgModule**: {\@link ReactiveFormsModule}
     *
     *  \@stable
     */
    var FormControlName = (function (_super) {
        __extends(FormControlName, _super);
        /**
         * @param {?} parent
         * @param {?} validators
         * @param {?} asyncValidators
         * @param {?} valueAccessors
         */
        function FormControlName(parent, validators, asyncValidators, valueAccessors) {
            var _this = _super.call(this) || this;
            _this._added = false;
            _this.update = new EventEmitter();
            _this._parent = parent;
            _this._rawValidators = validators || [];
            _this._rawAsyncValidators = asyncValidators || [];
            _this.valueAccessor = selectValueAccessor(_this, valueAccessors);
            return _this;
        }
        Object.defineProperty(FormControlName.prototype, "isDisabled", {
            /**
             * @param {?} isDisabled
             * @return {?}
             */
            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        FormControlName.prototype.ngOnChanges = function (changes) {
            if (!this._added)
                this._setUpControl();
            if (isPropertyUpdated(changes, this.viewModel)) {
                this.viewModel = this.model;
                this.formDirective.updateModel(this, this.model);
            }
        };
        /**
         * @return {?}
         */
        FormControlName.prototype.ngOnDestroy = function () {
            if (this.formDirective) {
                this.formDirective.removeControl(this);
            }
        };
        /**
         * @param {?} newValue
         * @return {?}
         */
        FormControlName.prototype.viewToModelUpdate = function (newValue) {
            this.viewModel = newValue;
            this.update.emit(newValue);
        };
        Object.defineProperty(FormControlName.prototype, "path", {
            /**
             * @return {?}
             */
            get: function () { return controlPath(this.name, /** @type {?} */ ((this._parent))); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlName.prototype, "formDirective", {
            /**
             * @return {?}
             */
            get: function () { return this._parent ? this._parent.formDirective : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlName.prototype, "validator", {
            /**
             * @return {?}
             */
            get: function () { return composeValidators(this._rawValidators); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlName.prototype, "asyncValidator", {
            /**
             * @return {?}
             */
            get: function () {
                return ((composeAsyncValidators(this._rawAsyncValidators)));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlName.prototype, "control", {
            /**
             * @return {?}
             */
            get: function () { return this._control; },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FormControlName.prototype._checkParentType = function () {
            if (!(this._parent instanceof FormGroupName) &&
                this._parent instanceof AbstractFormGroupDirective) {
                ReactiveErrors.ngModelGroupException();
            }
            else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&
                !(this._parent instanceof FormArrayName)) {
                ReactiveErrors.controlParentException();
            }
        };
        /**
         * @return {?}
         */
        FormControlName.prototype._setUpControl = function () {
            this._checkParentType();
            this._control = this.formDirective.addControl(this);
            if (this.control.disabled && ((this.valueAccessor)).setDisabledState) {
                ((((this.valueAccessor)).setDisabledState))(true);
            }
            this._added = true;
        };
        return FormControlName;
    }(NgControl));
    FormControlName.decorators = [
        { type: Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },
    ];
    /**
     * @nocollapse
     */
    FormControlName.ctorParameters = function () { return [
        { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },
        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },
    ]; };
    FormControlName.propDecorators = {
        'name': [{ type: Input, args: ['formControlName',] },],
        'model': [{ type: Input, args: ['ngModel',] },],
        'update': [{ type: Output, args: ['ngModelChange',] },],
        'isDisabled': [{ type: Input, args: ['disabled',] },],
    };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var REQUIRED_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function () { return RequiredValidator; }),
        multi: true
    };
    var CHECKBOX_REQUIRED_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function () { return CheckboxRequiredValidator; }),
        multi: true
    };
    /**
     * A Directive that adds the `required` validator to any controls marked with the
     * `required` attribute, via the {\@link NG_VALIDATORS} binding.
     *
     * ### Example
     *
     * ```
     * <input name="fullName" ngModel required>
     * ```
     *
     * \@stable
     */
    var RequiredValidator = (function () {
        function RequiredValidator() {
        }
        Object.defineProperty(RequiredValidator.prototype, "required", {
            /**
             * @return {?}
             */
            get: function () { return this._required; },
            /**
             * @param {?} value
             * @return {?}
             */
            set: function (value) {
                this._required = value != null && value !== false && "" + value !== 'false';
                if (this._onChange)
                    this._onChange();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} c
         * @return {?}
         */
        RequiredValidator.prototype.validate = function (c) {
            return this.required ? Validators.required(c) : null;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
        return RequiredValidator;
    }());
    RequiredValidator.decorators = [
        { type: Directive, args: [{
                    selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',
                    providers: [REQUIRED_VALIDATOR],
                    host: { '[attr.required]': 'required ? "" : null' }
                },] },
    ];
    /**
     * @nocollapse
     */
    RequiredValidator.ctorParameters = function () { return []; };
    RequiredValidator.propDecorators = {
        'required': [{ type: Input },],
    };
    /**
     * A Directive that adds the `required` validator to checkbox controls marked with the
     * `required` attribute, via the {\@link NG_VALIDATORS} binding.
     *
     * ### Example
     *
     * ```
     * <input type="checkbox" name="active" ngModel required>
     * ```
     *
     * \@experimental
     */
    var CheckboxRequiredValidator = (function (_super) {
        __extends(CheckboxRequiredValidator, _super);
        function CheckboxRequiredValidator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} c
         * @return {?}
         */
        CheckboxRequiredValidator.prototype.validate = function (c) {
            return this.required ? Validators.requiredTrue(c) : null;
        };
        return CheckboxRequiredValidator;
    }(RequiredValidator));
    CheckboxRequiredValidator.decorators = [
        { type: Directive, args: [{
                    selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',
                    providers: [CHECKBOX_REQUIRED_VALIDATOR],
                    host: { '[attr.required]': 'required ? "" : null' }
                },] },
    ];
    /**
     * @nocollapse
     */
    CheckboxRequiredValidator.ctorParameters = function () { return []; };
    /**
     * Provider which adds {\@link EmailValidator} to {\@link NG_VALIDATORS}.
     */
    var EMAIL_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function () { return EmailValidator; }),
        multi: true
    };
    /**
     * A Directive that adds the `email` validator to controls marked with the
     * `email` attribute, via the {\@link NG_VALIDATORS} binding.
     *
     * ### Example
     *
     * ```
     * <input type="email" name="email" ngModel email>
     * <input type="email" name="email" ngModel email="true">
     * <input type="email" name="email" ngModel [email]="true">
     * ```
     *
     * \@experimental
     */
    var EmailValidator = (function () {
        function EmailValidator() {
        }
        Object.defineProperty(EmailValidator.prototype, "email", {
            /**
             * @param {?} value
             * @return {?}
             */
            set: function (value) {
                this._enabled = value === '' || value === true || value === 'true';
                if (this._onChange)
                    this._onChange();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} c
         * @return {?}
         */
        EmailValidator.prototype.validate = function (c) {
            return this._enabled ? Validators.email(c) : null;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        EmailValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
        return EmailValidator;
    }());
    EmailValidator.decorators = [
        { type: Directive, args: [{
                    selector: '[email][formControlName],[email][formControl],[email][ngModel]',
                    providers: [EMAIL_VALIDATOR]
                },] },
    ];
    /**
     * @nocollapse
     */
    EmailValidator.ctorParameters = function () { return []; };
    EmailValidator.propDecorators = {
        'email': [{ type: Input },],
    };
    /**
     * Provider which adds {\@link MinLengthValidator} to {\@link NG_VALIDATORS}.
     *
     * ## Example:
     *
     * {\@example common/forms/ts/validators/validators.ts region='min'}
     */
    var MIN_LENGTH_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function () { return MinLengthValidator; }),
        multi: true
    };
    /**
     * A directive which installs the {\@link MinLengthValidator} for any `formControlName`,
     * `formControl`, or control with `ngModel` that also has a `minlength` attribute.
     *
     * \@stable
     */
    var MinLengthValidator = (function () {
        function MinLengthValidator() {
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        MinLengthValidator.prototype.ngOnChanges = function (changes) {
            if ('minlength' in changes) {
                this._createValidator();
                if (this._onChange)
                    this._onChange();
            }
        };
        /**
         * @param {?} c
         * @return {?}
         */
        MinLengthValidator.prototype.validate = function (c) {
            return this.minlength == null ? null : this._validator(c);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
        /**
         * @return {?}
         */
        MinLengthValidator.prototype._createValidator = function () {
            this._validator = Validators.minLength(parseInt(this.minlength, 10));
        };
        return MinLengthValidator;
    }());
    MinLengthValidator.decorators = [
        { type: Directive, args: [{
                    selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',
                    providers: [MIN_LENGTH_VALIDATOR],
                    host: { '[attr.minlength]': 'minlength ? minlength : null' }
                },] },
    ];
    /**
     * @nocollapse
     */
    MinLengthValidator.ctorParameters = function () { return []; };
    MinLengthValidator.propDecorators = {
        'minlength': [{ type: Input },],
    };
    /**
     * Provider which adds {\@link MaxLengthValidator} to {\@link NG_VALIDATORS}.
     *
     * ## Example:
     *
     * {\@example common/forms/ts/validators/validators.ts region='max'}
     */
    var MAX_LENGTH_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function () { return MaxLengthValidator; }),
        multi: true
    };
    /**
     * A directive which installs the {\@link MaxLengthValidator} for any `formControlName,
     * `formControl`,
     * or control with `ngModel` that also has a `maxlength` attribute.
     *
     * \@stable
     */
    var MaxLengthValidator = (function () {
        function MaxLengthValidator() {
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        MaxLengthValidator.prototype.ngOnChanges = function (changes) {
            if ('maxlength' in changes) {
                this._createValidator();
                if (this._onChange)
                    this._onChange();
            }
        };
        /**
         * @param {?} c
         * @return {?}
         */
        MaxLengthValidator.prototype.validate = function (c) {
            return this.maxlength != null ? this._validator(c) : null;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
        /**
         * @return {?}
         */
        MaxLengthValidator.prototype._createValidator = function () {
            this._validator = Validators.maxLength(parseInt(this.maxlength, 10));
        };
        return MaxLengthValidator;
    }());
    MaxLengthValidator.decorators = [
        { type: Directive, args: [{
                    selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',
                    providers: [MAX_LENGTH_VALIDATOR],
                    host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }
                },] },
    ];
    /**
     * @nocollapse
     */
    MaxLengthValidator.ctorParameters = function () { return []; };
    MaxLengthValidator.propDecorators = {
        'maxlength': [{ type: Input },],
    };
    var PATTERN_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function () { return PatternValidator; }),
        multi: true
    };
    /**
     * A Directive that adds the `pattern` validator to any controls marked with the
     * `pattern` attribute, via the {\@link NG_VALIDATORS} binding. Uses attribute value
     * as the regex to validate Control value against.  Follows pattern attribute
     * semantics; i.e. regex must match entire Control value.
     *
     * ### Example
     *
     * ```
     * <input [name]="fullName" pattern="[a-zA-Z ]*" ngModel>
     * ```
     * \@stable
     */
    var PatternValidator = (function () {
        function PatternValidator() {
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        PatternValidator.prototype.ngOnChanges = function (changes) {
            if ('pattern' in changes) {
                this._createValidator();
                if (this._onChange)
                    this._onChange();
            }
        };
        /**
         * @param {?} c
         * @return {?}
         */
        PatternValidator.prototype.validate = function (c) { return this._validator(c); };
        /**
         * @param {?} fn
         * @return {?}
         */
        PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
        /**
         * @return {?}
         */
        PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };
        return PatternValidator;
    }());
    PatternValidator.decorators = [
        { type: Directive, args: [{
                    selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',
                    providers: [PATTERN_VALIDATOR],
                    host: { '[attr.pattern]': 'pattern ? pattern : null' }
                },] },
    ];
    /**
     * @nocollapse
     */
    PatternValidator.ctorParameters = function () { return []; };
    PatternValidator.propDecorators = {
        'pattern': [{ type: Input },],
    };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@whatItDoes Creates an {\@link AbstractControl} from a user-specified configuration.
     *
     * It is essentially syntactic sugar that shortens the `new FormGroup()`,
     * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger
     * forms.
     *
     * \@howToUse
     *
     * To use, inject `FormBuilder` into your component class. You can then call its methods
     * directly.
     *
     * {\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}
     *
     *  * **npm package**: `\@angular/forms`
     *
     *  * **NgModule**: {\@link ReactiveFormsModule}
     *
     * \@stable
     */
    var FormBuilder = (function () {
        function FormBuilder() {
        }
        /**
         * Construct a new {\@link FormGroup} with the given map of configuration.
         * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.
         *
         * See the {\@link FormGroup} constructor for more details.
         * @param {?} controlsConfig
         * @param {?=} extra
         * @return {?}
         */
        FormBuilder.prototype.group = function (controlsConfig, extra) {
            if (extra === void 0) { extra = null; }
            var /** @type {?} */ controls = this._reduceControls(controlsConfig);
            var /** @type {?} */ validator = extra != null ? extra['validator'] : null;
            var /** @type {?} */ asyncValidator = extra != null ? extra['asyncValidator'] : null;
            return new FormGroup(controls, validator, asyncValidator);
        };
        /**
         * Construct a new {\@link FormControl} with the given `formState`,`validator`, and
         * `asyncValidator`.
         *
         * `formState` can either be a standalone value for the form control or an object
         * that contains both a value and a disabled status.
         *
         * @param {?} formState
         * @param {?=} validator
         * @param {?=} asyncValidator
         * @return {?}
         */
        FormBuilder.prototype.control = function (formState, validator, asyncValidator) {
            return new FormControl(formState, validator, asyncValidator);
        };
        /**
         * Construct a {\@link FormArray} from the given `controlsConfig` array of
         * configuration, with the given optional `validator` and `asyncValidator`.
         * @param {?} controlsConfig
         * @param {?=} validator
         * @param {?=} asyncValidator
         * @return {?}
         */
        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {
            var _this = this;
            var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });
            return new FormArray(controls, validator, asyncValidator);
        };
        /**
         * \@internal
         * @param {?} controlsConfig
         * @return {?}
         */
        FormBuilder.prototype._reduceControls = function (controlsConfig) {
            var _this = this;
            var /** @type {?} */ controls = {};
            Object.keys(controlsConfig).forEach(function (controlName) {
                controls[controlName] = _this._createControl(controlsConfig[controlName]);
            });
            return controls;
        };
        /**
         * \@internal
         * @param {?} controlConfig
         * @return {?}
         */
        FormBuilder.prototype._createControl = function (controlConfig) {
            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||
                controlConfig instanceof FormArray) {
                return controlConfig;
            }
            else if (Array.isArray(controlConfig)) {
                var /** @type {?} */ value = controlConfig[0];
                var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;
                var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
                return this.control(value, validator, asyncValidator);
            }
            else {
                return this.control(controlConfig);
            }
        };
        return FormBuilder;
    }());
    FormBuilder.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    FormBuilder.ctorParameters = function () { return []; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @module
     * @description
     * Entry point for all public APIs of the common package.
     */
    /**
     * \@stable
     */
    var VERSION$4 = new Version('4.3.3');
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@whatItDoes Adds `novalidate` attribute to all forms by default.
     *
     * `novalidate` is used to disable browser's native form validation.
     *
     * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:
     *
     * ```
     * <form ngNativeValidate></form>
     * ```
     *
     * \@experimental
     */
    var NgNoValidate = (function () {
        function NgNoValidate() {
        }
        return NgNoValidate;
    }());
    NgNoValidate.decorators = [
        { type: Directive, args: [{
                    selector: 'form:not([ngNoForm]):not([ngNativeValidate])',
                    host: { 'novalidate': '' },
                },] },
    ];
    /**
     * @nocollapse
     */
    NgNoValidate.ctorParameters = function () { return []; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var SHARED_FORM_DIRECTIVES = [
        NgNoValidate,
        NgSelectOption,
        NgSelectMultipleOption,
        DefaultValueAccessor,
        NumberValueAccessor,
        RangeValueAccessor,
        CheckboxControlValueAccessor,
        SelectControlValueAccessor,
        SelectMultipleControlValueAccessor,
        RadioControlValueAccessor,
        NgControlStatus,
        NgControlStatusGroup,
        RequiredValidator,
        MinLengthValidator,
        MaxLengthValidator,
        PatternValidator,
        CheckboxRequiredValidator,
        EmailValidator,
    ];
    var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
    /**
     * Internal module used for sharing directives between FormsModule and ReactiveFormsModule
     */
    var InternalFormsSharedModule = (function () {
        function InternalFormsSharedModule() {
        }
        return InternalFormsSharedModule;
    }());
    InternalFormsSharedModule.decorators = [
        { type: NgModule, args: [{
                    declarations: SHARED_FORM_DIRECTIVES,
                    exports: SHARED_FORM_DIRECTIVES,
                },] },
    ];
    /**
     * @nocollapse
     */
    InternalFormsSharedModule.ctorParameters = function () { return []; };
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * The ng module for forms.
     * \@stable
     */
    var FormsModule = (function () {
        function FormsModule() {
        }
        return FormsModule;
    }());
    FormsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: TEMPLATE_DRIVEN_DIRECTIVES,
                    providers: [RadioControlRegistry],
                    exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
                },] },
    ];
    /**
     * @nocollapse
     */
    FormsModule.ctorParameters = function () { return []; };

    var __decorate$d = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$c = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var AccountsComponent = /** @class */ (function () {
        function AccountsComponent(fieldsService) {
            this.fieldsService = fieldsService;
        }
        AccountsComponent.prototype.ngOnInit = function () {
            //
        };
        AccountsComponent.prototype.trackByFn = function (index, item) {
            return item.id; // or index
        };
        __decorate$d([
            Input(),
            __metadata$c("design:type", Object)
        ], AccountsComponent.prototype, "accounts", void 0);
        AccountsComponent = __decorate$d([
            Component({
                selector: "mv-accounts",
                templateUrl: "./accounts.component.html",
                // do I still need to keep this ?
                viewProviders: [
                    {
                        provide: ControlContainer,
                        useExisting: NgForm,
                    },
                ],
            }),
            __metadata$c("design:paramtypes", [FieldsService])
        ], AccountsComponent);
        return AccountsComponent;
    }());

    var __decorate$e = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$d = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var CheckboxFieldComponent = /** @class */ (function () {
        function CheckboxFieldComponent() {
            this.clickEmitter = new EventEmitter();
        }
        CheckboxFieldComponent.prototype.boxClicked = function (e, id) {
            this.clickEmitter.emit({ e: e, id: id });
        };
        CheckboxFieldComponent.prototype.trackByFn = function (item, id) {
            return id;
        };
        __decorate$e([
            Input(),
            __metadata$d("design:type", Array)
        ], CheckboxFieldComponent.prototype, "checkboxes", void 0);
        __decorate$e([
            Output(),
            __metadata$d("design:type", Object)
        ], CheckboxFieldComponent.prototype, "clickEmitter", void 0);
        CheckboxFieldComponent = __decorate$e([
            Component({
                selector: "mv-checkbox-field",
                styleUrls: ["./checkbox-field.component.css"],
                templateUrl: "./checkbox-field.component.html",
                viewProviders: [{ provide: ControlContainer, useExisting: NgForm }],
            })
        ], CheckboxFieldComponent);
        return CheckboxFieldComponent;
    }());

    var __decorate$f = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$e = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var CredentialsComponent = /** @class */ (function () {
        function CredentialsComponent(fieldsService) {
            this.fieldsService = fieldsService;
            this.passwordExists = false;
            //
        }
        CredentialsComponent.prototype.ngOnInit = function () {
            this.prefillForm();
        };
        CredentialsComponent.prototype.prefillForm = function () {
            this.userFields[0].value = this.currentUser.firstName;
            this.userFields[1].value = this.currentUser.lastName;
            this.userFields[2].value = this.currentUser.userName;
            this.userFields[3].value = this.currentUser.email;
        };
        CredentialsComponent.prototype.credentialClick = function (e) {
            var _a = [this.userFields[0], this.userFields[1], this.userFields[2]], first = _a[0], last = _a[1], username = _a[2];
            this.usernameTaken = this.isUsernameTaken(username);
            this.usernameStatus = this.usernameTaken ? "Username already taken. Choose another one" : "Username available :)";
            if (!!first.value && !!last.value && !username.value) {
                this.setUsername(first, last, username);
                this.setPassword(first, last);
                this.setEmail(username);
            }
        };
        CredentialsComponent.prototype.setEmail = function (username) {
            var email = this.userFields[3];
            email.value = username.value + "@marcovasco.fr";
        };
        CredentialsComponent.prototype.setUsername = function (first, last, username) {
            username.value = "" + first.value[0].toLowerCase() + last.value.toLowerCase();
        };
        CredentialsComponent.prototype.isUsernameTaken = function (username) {
            return (this.usersFromSugar
                .find(function (user) { return user.userName === username.value; }) !== undefined);
        };
        CredentialsComponent.prototype.setPassword = function (first, last) {
            if (this.passwordExists) {
                return;
            }
            var pwd = this.userFields.find(function (field) { return field.name === "password"; });
            var rndStrg = Math.random()
                .toString()
                .substring(2, 7);
            pwd.value = "" + first.value[0].toLowerCase() + last.value[0].toLowerCase() + rndStrg + "!";
            this.passwordExists = true;
        };
        CredentialsComponent.prototype.trackByFn = function (index, item) {
            return item.id; // or index
        };
        __decorate$f([
            Input(),
            __metadata$e("design:type", Object)
        ], CredentialsComponent.prototype, "civilites", void 0);
        __decorate$f([
            Input(),
            __metadata$e("design:type", Object)
        ], CredentialsComponent.prototype, "userFields", void 0);
        __decorate$f([
            Input(),
            __metadata$e("design:type", User)
        ], CredentialsComponent.prototype, "currentUser", void 0);
        __decorate$f([
            Input(),
            __metadata$e("design:type", Array)
        ], CredentialsComponent.prototype, "usersFromSugar", void 0);
        CredentialsComponent = __decorate$f([
            Component({
                selector: "mv-credentials",
                styleUrls: ["./credentials.component.css"],
                templateUrl: "./credentials.component.html",
                viewProviders: [
                    {
                        provide: ControlContainer,
                        useExisting: NgForm,
                    },
                ],
            }),
            __metadata$e("design:paramtypes", [FieldsService])
        ], CredentialsComponent);
        return CredentialsComponent;
    }());

    var __decorate$g = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$f = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var DestinationsComponent = /** @class */ (function () {
        function DestinationsComponent(fieldsService) {
            this.fieldsService = fieldsService;
            //
        }
        DestinationsComponent.prototype.ngOnInit = function () {
            //
        };
        DestinationsComponent.prototype.trackByFn = function (index, item) {
            return item.id; // or index
        };
        __decorate$g([
            Input(),
            __metadata$f("design:type", Object)
        ], DestinationsComponent.prototype, "destinations", void 0);
        DestinationsComponent = __decorate$g([
            Component({
                selector: "mv-destinations",
                styleUrls: ["./destinations.component.css"],
                templateUrl: "./destinations.component.html",
                viewProviders: [
                    {
                        provide: ControlContainer,
                        useExisting: NgForm,
                    },
                ],
            }),
            __metadata$f("design:paramtypes", [FieldsService])
        ], DestinationsComponent);
        return DestinationsComponent;
    }());

    var __decorate$h = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$g = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var ExtraneousComponent = /** @class */ (function () {
        function ExtraneousComponent(fieldsService) {
            this.fieldsService = fieldsService;
            //
        }
        ExtraneousComponent.prototype.ngOnInit = function () {
            console.log("this.codeTourplan", this.codeTourplan);
            console.log("this.codeSON", this.codeSON);
            console.log("this.title", this.title);
            console.log("this.inactiveStatus", this.inactiveStatus);
            console.log("this.inactiveEmployee", this.inactiveEmployee);
            console.log("this.currentUser", this.currentUser);
            this.codeTourplan = this.currentUser.tourplanID;
            this.inactiveEmployee = this.currentUser.employeeStatus !== "Active";
            this.inactiveStatus = this.currentUser.status !== "Active";
        };
        ExtraneousComponent.prototype.trackByFn = function (index, item) {
            return item.id; // or index
        };
        __decorate$h([
            Input(),
            __metadata$g("design:type", Object)
        ], ExtraneousComponent.prototype, "codeTourplan", void 0);
        __decorate$h([
            Input(),
            __metadata$g("design:type", Object)
        ], ExtraneousComponent.prototype, "codeSON", void 0);
        __decorate$h([
            Input(),
            __metadata$g("design:type", Object)
        ], ExtraneousComponent.prototype, "title", void 0);
        __decorate$h([
            Input(),
            __metadata$g("design:type", Object)
        ], ExtraneousComponent.prototype, "inactiveStatus", void 0);
        __decorate$h([
            Input(),
            __metadata$g("design:type", Object)
        ], ExtraneousComponent.prototype, "inactiveEmployee", void 0);
        __decorate$h([
            Input(),
            __metadata$g("design:type", Object)
        ], ExtraneousComponent.prototype, "currentUser", void 0);
        ExtraneousComponent = __decorate$h([
            Component({
                selector: "mv-extraneous",
                templateUrl: "./extraneous.component.html",
                viewProviders: [
                    {
                        provide: ControlContainer,
                        useExisting: NgForm,
                    },
                ],
            }),
            __metadata$g("design:paramtypes", [FieldsService])
        ], ExtraneousComponent);
        return ExtraneousComponent;
    }());

    var __decorate$i = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$h = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var FunctionComponent = /** @class */ (function () {
        function FunctionComponent(fieldsService) {
            this.fieldsService = fieldsService;
            //
        }
        FunctionComponent.prototype.ngOnInit = function () {
            //
        };
        FunctionComponent.prototype.trackByFn = function (index, item) {
            return item.id; // or index
        };
        __decorate$i([
            Input(),
            __metadata$h("design:type", Object)
        ], FunctionComponent.prototype, "functions", void 0);
        __decorate$i([
            Input(),
            __metadata$h("design:type", Object)
        ], FunctionComponent.prototype, "selectedFunction", void 0);
        FunctionComponent = __decorate$i([
            Component({
                selector: "mv-function",
                templateUrl: "./function.component.html",
                viewProviders: [
                    {
                        provide: ControlContainer,
                        useExisting: NgForm,
                    },
                ],
            }),
            __metadata$h("design:paramtypes", [FieldsService])
        ], FunctionComponent);
        return FunctionComponent;
    }());

    var __decorate$j = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$i = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var GappsComponent = /** @class */ (function () {
        function GappsComponent(fieldsService) {
            this.fieldsService = fieldsService;
            //
        }
        GappsComponent.prototype.ngOnInit = function () {
            //
        };
        GappsComponent.prototype.trackByFn = function (index, item) {
            return item.id; // or index
        };
        __decorate$j([
            Input(),
            __metadata$i("design:type", Object)
        ], GappsComponent.prototype, "orgas", void 0);
        __decorate$j([
            Input(),
            __metadata$i("design:type", Object)
        ], GappsComponent.prototype, "selectedOrganisation", void 0);
        __decorate$j([
            Input(),
            __metadata$i("design:type", Object)
        ], GappsComponent.prototype, "groupes", void 0);
        GappsComponent = __decorate$j([
            Component({
                selector: "mv-gapps",
                templateUrl: "./gapps.component.html",
                viewProviders: [
                    {
                        provide: ControlContainer,
                        useExisting: NgForm,
                    },
                ],
            }),
            __metadata$i("design:paramtypes", [FieldsService])
        ], GappsComponent);
        return GappsComponent;
    }());

    var __decorate$k = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$j = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var ManagerComponent = /** @class */ (function () {
        function ManagerComponent(fieldsService) {
            this.fieldsService = fieldsService;
            //
        }
        ManagerComponent.prototype.ngOnInit = function () {
            //
        };
        ManagerComponent.prototype.trackByFn = function (index, item) {
            return item.id; // or index
        };
        __decorate$k([
            Input(),
            __metadata$j("design:type", Object)
        ], ManagerComponent.prototype, "managers", void 0);
        __decorate$k([
            Input(),
            __metadata$j("design:type", Object)
        ], ManagerComponent.prototype, "selectedManager", void 0);
        ManagerComponent = __decorate$k([
            Component({
                selector: "mv-manager",
                templateUrl: "./manager.component.html",
                viewProviders: [
                    {
                        provide: ControlContainer,
                        useExisting: NgForm,
                    },
                ],
            }),
            __metadata$j("design:paramtypes", [FieldsService])
        ], ManagerComponent);
        return ManagerComponent;
    }());

    var __decorate$l = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$k = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var OfficeComponent = /** @class */ (function () {
        function OfficeComponent(fieldsService) {
            this.fieldsService = fieldsService;
            //
        }
        OfficeComponent.prototype.ngOnInit = function () {
            //
        };
        OfficeComponent.prototype.trackByFn = function (index, item) {
            return item.id; // or index
        };
        __decorate$l([
            Input(),
            __metadata$k("design:type", Object)
        ], OfficeComponent.prototype, "offices", void 0);
        __decorate$l([
            Input(),
            __metadata$k("design:type", Object)
        ], OfficeComponent.prototype, "selectedOffice", void 0);
        OfficeComponent = __decorate$l([
            Component({
                selector: "mv-office",
                templateUrl: "./office.component.html",
                viewProviders: [
                    {
                        provide: ControlContainer,
                        useExisting: NgForm,
                    },
                ],
            }),
            __metadata$k("design:paramtypes", [FieldsService])
        ], OfficeComponent);
        return OfficeComponent;
    }());

    var __decorate$m = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$l = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var OthersComponent = /** @class */ (function () {
        function OthersComponent(fieldsService) {
            this.fieldsService = fieldsService;
            //
        }
        OthersComponent.prototype.ngOnInit = function () {
            //
        };
        OthersComponent.prototype.trackByFn = function (index, item) {
            return item.id; // or index
        };
        __decorate$m([
            Input(),
            __metadata$l("design:type", Object)
        ], OthersComponent.prototype, "others", void 0);
        OthersComponent = __decorate$m([
            Component({
                selector: "mv-others",
                styleUrls: ["./others.component.css"],
                templateUrl: "./others.component.html",
                viewProviders: [
                    {
                        provide: ControlContainer,
                        useExisting: NgForm,
                    },
                ],
            }),
            __metadata$l("design:paramtypes", [FieldsService])
        ], OthersComponent);
        return OthersComponent;
    }());

    var __decorate$n = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$m = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var ProfilesComponent = /** @class */ (function () {
        function ProfilesComponent(fieldsService, sugarService) {
            this.fieldsService = fieldsService;
            this.sugarService = sugarService;
            this.displayVentesLeads = false;
            this.allUsersFromSugar = [];
            //
        }
        ProfilesComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.fieldsService.getData()
                .then(function (res) { return _this.fields = new Fields(res[0]); });
            this.sugarService.getUsers()
                // populate usersFromSugar array
                .then(function (users) { return users.forEach(function (user) { return _this.allUsersFromSugar.push(new User(user)); }); })
                // filter active users
                .then(function (users) { return _this.activeUsersFromSugar = _this.allUsersFromSugar.filter(function (user) { return user.status === "Active"; }); })
                // create userTemplates from userlist
                .then(function (data) {
                return _this.activeUsersFromSugar.map(function (user) {
                    return {
                        label: user.userName,
                        selected: false,
                        value: user.userName
                    };
                });
            })
                // push them into fields
                .then(function (templates) {
                var _a;
                if (templates !== undefined && templates !== null) {
                    (_a = _this.userTemplates).push.apply(_a, templates);
                }
            })
                .catch(function (err) { return console.log(err); });
        };
        ProfilesComponent.prototype.handleClick = function (e, type) {
            var roles = this.roles;
            var services = this.services;
            var others = this.others;
            var orgas = this.orgas;
            this.resetSugar();
            switch (type) {
                case "conseiller":
                    {
                        this.userValue = "user_default";
                        this.checkStuff(roles, ["Sales"]);
                        this.checkStuff(services, ["Ventes"]);
                        this.checkStuff(others, ["Global", "Ventes", "Devis Cotation", "ROLE - Reservation"]);
                        break;
                    }
                case "jm":
                    {
                        this.userValue = "user_default_jm";
                        this.selectedFunction = "jm";
                        this.checkStuff(roles, ["Sales"]);
                        this.checkStuff(services, ["Ventes"]);
                        this.checkStuff(others, [
                            "Global",
                            "Ventes",
                            "Devis Cotation",
                            "ROLE - BI Validation",
                            "ROLE - ViewRCM",
                            "ROLE - View RM",
                            "Ventes",
                        ]);
                        break;
                    }
                case "manager":
                    {
                        this.selectedFunction = "mgr";
                        this.checkStuff(roles, ["Team Manager"]);
                        this.checkStuff(services, ["Ventes"]);
                        this.checkStuff(others, [
                            "Global",
                            "Devis Cotation", "Devis V3",
                            "ROLE - BI Validation",
                            "Ventes",
                        ]);
                        break;
                    }
                case "assistant":
                    {
                        this.selectedFunction = "av";
                        this.checkStuff(roles, ["Reservation"]);
                        this.checkStuff(services, ["Ventes"]);
                        this.checkStuff(others, [
                            "Devis V3",
                            "Devis Cotation",
                            "Global",
                            "Reservation",
                            "ROLE - Reservation",
                        ]);
                        break;
                    }
                case "qualite":
                    {
                        this.selectedFunction = "aq";
                        this.selectedOffice = "Bureau - Billetterie & Qualité";
                        this.selectedManager = "Manager du service qualité (Aminata)";
                        this.checkStuff(roles, ["Quality Control"]);
                        this.checkStuff(services, ["Service Qualité"]);
                        this.checkStuff(others, ["BackOffice", "Global", "SAV"]);
                        this.checkStuff(orgas, ["BackOffice"]);
                        break;
                    }
                case "compta":
                    {
                        this.selectedOffice = "1377";
                        this.checkStuff(roles, ["Accountant"]);
                        this.checkStuff(services, ["Comptabilité"]);
                        this.checkStuff(others, ["Global", "ROLE - Affaire Validation", "ROLE - Create Provider"]);
                        this.checkStuff(orgas, ["Compta"]);
                        break;
                    }
                case "inactif":
                    {
                        this.checkStuff(roles, ["Read-only"]);
                        this.inactiveStatus = true;
                        this.inactiveEmployee = true;
                        break;
                    }
                default:
                    // code...
                    break;
            }
        };
        ProfilesComponent.prototype.setVentesLeads = function () {
            this.leadsMin = 15;
            this.leadsMax = 45;
        };
        ProfilesComponent.prototype.eraseVentesLeads = function () {
            this.leadsMin = null;
            this.leadsMax = null;
        };
        ProfilesComponent.prototype.onServiceChecked = function (service, e) {
            if (service.id === "services-Ventes") {
                if (!service.checked) {
                    this.eraseVentesLeads();
                    this.displayVentesLeads = e;
                }
                else {
                    this.setVentesLeads();
                    // this.displayVentesLeads = false;
                }
            }
        };
        ProfilesComponent.prototype.checkStuff = function (where, arr) {
            var prefix;
            switch (where) {
                case this.roles:
                    prefix = "roles";
                    break;
                case this.orgas:
                    prefix = "orgas";
                    break;
                case this.services:
                    prefix = "services";
                    break;
                case this.others:
                    prefix = "others";
                    break;
                default:
                    console.error("Wrong input");
                    break;
            }
            arr.forEach(function (element) {
                var myOther = where.find(function (other) { return other.id === prefix + "-" + element; });
                if (!!myOther) {
                    myOther.checked = true;
                }
            });
        };
        ProfilesComponent.prototype.eraseFields = function (fields) {
            fields.forEach(function (field) { return field = ""; });
        };
        ProfilesComponent.prototype.unCheck = function (array) {
            array.forEach(function (x) { return x.checked = false; });
        };
        ProfilesComponent.prototype.trackByFn = function (index, item) {
            return item.id; // or index
        };
        ProfilesComponent.prototype.unCheckArrays = function (arrays) {
            var _this = this;
            arrays.forEach(function (array) { return _this.unCheck(array); });
        };
        ProfilesComponent.prototype.resetSugar = function () {
            this.inactiveStatus = false,
                this.inactiveEmployee = false,
                this.leadsMin = null;
            this.leadsMax = null;
            this.userValue = "user_default_xx";
            this.selectedManager = null,
                this.eraseFields([
                    this.codeSON,
                    this.codeTourplan,
                    this.codevad,
                    this.groupes,
                    this.inbound,
                    this.outbound,
                    this.phoneExtension,
                    this.phoneNumber,
                    this.selectedOffice,
                    this.selectedFunction,
                    this.selectedOrganisation,
                    this.title,
                ]);
            this.unCheckArrays([
                this.roles,
                this.services,
                this.others,
                this.teams,
                this.destinations,
                this.orgas,
            ]);
        };
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "roles", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "services", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "userTemplates", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "userValue", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "selectedFunction", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "selectedManager", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "selectedOffice", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "orgas", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "others", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "inactiveEmployee", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "inactiveStatus", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "leadsMin", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "leadsMax", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "destinations", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "teams", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "codeSON", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "codeTourplan", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "codevad", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "groupes", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "inbound", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "outbound", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "phoneExtension", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "phoneNumber", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "selectedOrganisation", void 0);
        __decorate$n([
            Input(),
            __metadata$m("design:type", Object)
        ], ProfilesComponent.prototype, "title", void 0);
        ProfilesComponent = __decorate$n([
            Component({
                selector: "mv-profiles",
                templateUrl: "./profiles.component.html",
                viewProviders: [
                    {
                        provide: ControlContainer,
                        useExisting: NgForm,
                    },
                ],
            }),
            __metadata$m("design:paramtypes", [FieldsService,
                SugarService])
        ], ProfilesComponent);
        return ProfilesComponent;
    }());

    var __decorate$o = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$n = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var SwitchvoxComponent = /** @class */ (function () {
        function SwitchvoxComponent(fieldsService) {
            this.fieldsService = fieldsService;
            //
        }
        SwitchvoxComponent.prototype.ngOnInit = function () {
            //
        };
        SwitchvoxComponent.prototype.trackByFn = function (index, item) {
            return item.id; // or index
        };
        __decorate$o([
            Input(),
            __metadata$n("design:type", Object)
        ], SwitchvoxComponent.prototype, "phoneNumber", void 0);
        __decorate$o([
            Input(),
            __metadata$n("design:type", Object)
        ], SwitchvoxComponent.prototype, "phoneExtension", void 0);
        __decorate$o([
            Input(),
            __metadata$n("design:type", Object)
        ], SwitchvoxComponent.prototype, "codevad", void 0);
        __decorate$o([
            Input(),
            __metadata$n("design:type", Object)
        ], SwitchvoxComponent.prototype, "outbound", void 0);
        __decorate$o([
            Input(),
            __metadata$n("design:type", Object)
        ], SwitchvoxComponent.prototype, "inbound", void 0);
        SwitchvoxComponent = __decorate$o([
            Component({
                selector: "mv-switchvox",
                templateUrl: "./switchvox.component.html",
                viewProviders: [
                    {
                        provide: ControlContainer,
                        useExisting: NgForm,
                    },
                ],
            }),
            __metadata$n("design:paramtypes", [FieldsService])
        ], SwitchvoxComponent);
        return SwitchvoxComponent;
    }());

    var __decorate$p = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$o = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var TeamsComponent = /** @class */ (function () {
        function TeamsComponent(fieldsService) {
            this.fieldsService = fieldsService;
            //
        }
        TeamsComponent.prototype.ngOnInit = function () {
            //
        };
        TeamsComponent.prototype.trackByFn = function (index, item) {
            return item.id; // or index
        };
        __decorate$p([
            Input(),
            __metadata$o("design:type", Object)
        ], TeamsComponent.prototype, "teams", void 0);
        TeamsComponent = __decorate$p([
            Component({
                selector: "mv-teams",
                styleUrls: ["./teams.component.css"],
                templateUrl: "./teams.component.html",
                viewProviders: [
                    {
                        provide: ControlContainer,
                        useExisting: NgForm,
                    },
                ],
            }),
            __metadata$o("design:paramtypes", [FieldsService])
        ], TeamsComponent);
        return TeamsComponent;
    }());

    var __decorate$q = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AppModule = /** @class */ (function () {
        function AppModule() {
        }
        AppModule = __decorate$q([
            NgModule({
                bootstrap: [
                    AppComponent,
                ],
                declarations: [
                    AppComponent,
                    AccountsComponent,
                    CheckboxFieldComponent,
                    CredentialsComponent,
                    CreateUserFormComponent,
                    DestinationsComponent,
                    DisableUserFormComponent,
                    ExtraneousComponent,
                    FunctionComponent,
                    GappsComponent,
                    ImportComponent,
                    ManagerComponent,
                    OfficeComponent,
                    OthersComponent,
                    ProfilesComponent,
                    RolesComponent,
                    SwitchvoxComponent,
                    TeamsComponent,
                    UserComponent,
                    UsersComponent,
                ],
                imports: [
                    BrowserModule,
                    BrowserAnimationsModule,
                    FormsModule,
                    HttpClientModule,
                    RouterModule.forRoot(AppRoutes),
                ],
                providers: [
                    FieldsService,
                    ParserService,
                    SugarService,
                    SugarResolverService,
                    SwitchVoxService,
                    HttpClient,
                    { provide: APP_BASE_HREF, useValue: "/" },
                    { provide: LOCALE_ID, useValue: "fr-FR" },
                ],
            })
        ], AppModule);
        return AppModule;
    }());

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    var styles_AccountsComponent = [];
    var RenderType_AccountsComponent = createRendererType2({ encapsulation: 2,
        styles: styles_AccountsComponent, data: {} });
    function View_AccountsComponent_2(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 11, 'div', [['class',
                    'accounts']], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(2, 0, null, null, 8, 'label', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n        '])),
            (_l()(), elementDef(4, 0, null, null, 5, 'input', [['type', 'checkbox']], [[2, 'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                    null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
                [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                    'ngModelChange'], [null, 'change'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                if (('change' === en)) {
                    var pd_0 = (nodeValue(_v, 5).onChange($event.target.checked) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 5).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_2 = ((_v.context.$implicit.checked = $event) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, null, null)), directiveDef(5, 16384, null, 0, CheckboxControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [CheckboxControlValueAccessor]), directiveDef(7, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(9, 16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(),
                textDef(10, null, ['', '\n      '])), (_l()(), textDef(-1, null, ['\n    ']))], function (_ck, _v) {
            var currVal_7 = _v.context.$implicit.id;
            var currVal_8 = _v.context.$implicit.checked;
            _ck(_v, 7, 0, currVal_7, currVal_8);
        }, function (_ck, _v) {
            var currVal_0 = nodeValue(_v, 9).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 9).ngClassTouched;
            var currVal_2 = nodeValue(_v, 9).ngClassPristine;
            var currVal_3 = nodeValue(_v, 9).ngClassDirty;
            var currVal_4 = nodeValue(_v, 9).ngClassValid;
            var currVal_5 = nodeValue(_v, 9).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 9).ngClassPending;
            _ck(_v, 4, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
            var currVal_9 = _v.context.$implicit.label;
            _ck(_v, 10, 0, currVal_9);
        });
    }
    function View_AccountsComponent_1(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 10, 'div', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n  '])), (_l()(), elementDef(2, 0, null, null, 7, 'fieldset', [['class', 'blue']], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(4, 0, null, null, 1, 'legend', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Accounts'])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_AccountsComponent_2)), directiveDef(8, 802816, null, 0, NgForOf, [ViewContainerRef, TemplateRef, IterableDiffers], { ngForOf: [0, 'ngForOf'], ngForTrackBy: [1, 'ngForTrackBy'] }, null), (_l()(),
                textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = _co.accounts;
            var currVal_1 = _co.trackByFn;
            _ck(_v, 8, 0, currVal_0, currVal_1);
        }, null);
    }
    function View_AccountsComponent_0(_l) {
        return viewDef(0, [(_l()(), anchorDef(16777216, null, null, 1, null, View_AccountsComponent_1)), directiveDef(1, 16384, null, 0, NgIf, [ViewContainerRef,
                TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = (_co.accounts != null);
            _ck(_v, 1, 0, currVal_0);
        }, null);
    }
    function View_AccountsComponent_Host_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 2, 'mv-accounts', [], null, null, null, View_AccountsComponent_0, RenderType_AccountsComponent)), providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(2, 114688, null, 0, AccountsComponent, [FieldsService], null, null)], function (_ck, _v) {
            _ck(_v, 2, 0);
        }, null);
    }
    var AccountsComponentNgFactory = createComponentFactory('mv-accounts', AccountsComponent, View_AccountsComponent_Host_0, { accounts: 'accounts' }, {}, []);

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    /* tslint:disable */
    var styles = ['input[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 110px;\n}\n\n.username-status[_ngcontent-%COMP%] {\n  position: relative;\n  left: 200px;\n}'];

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    var styles_CredentialsComponent = [styles];
    var RenderType_CredentialsComponent = createRendererType2({ encapsulation: 0,
        styles: styles_CredentialsComponent, data: {} });
    function View_CredentialsComponent_2(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 12, 'div', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n        '])), (_l()(), elementDef(2, 0, null, null, 9, 'label', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n          '])),
            (_l()(), elementDef(4, 0, null, null, 6, 'input', [['name', 'gender'],
                ['type', 'radio']], [[2, 'ng-untouched', null], [2, 'ng-touched', null],
                [2, 'ng-pristine', null], [2, 'ng-dirty', null], [2, 'ng-valid',
                    null], [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null, 'ngModelChange'], [null, 'input'], [null,
                    'blur'], [null, 'compositionstart'], [null, 'compositionend'],
                [null, 'change']], function (_v, en, $event) {
                var ad = true;
                if (('input' === en)) {
                    var pd_0 = (nodeValue(_v, 5)._handleInput($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 5).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('compositionstart' === en)) {
                    var pd_2 = (nodeValue(_v, 5)._compositionStart() !== false);
                    ad = (pd_2 && ad);
                }
                if (('compositionend' === en)) {
                    var pd_3 = (nodeValue(_v, 5)._compositionEnd($event.target.value) !== false);
                    ad = (pd_3 && ad);
                }
                if (('change' === en)) {
                    var pd_4 = (nodeValue(_v, 6).onChange() !== false);
                    ad = (pd_4 && ad);
                }
                if (('blur' === en)) {
                    var pd_5 = (nodeValue(_v, 6).onTouched() !== false);
                    ad = (pd_5 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_6 = ((_v.context.$implicit.label = $event) !== false);
                    ad = (pd_6 && ad);
                }
                return ad;
            }, null, null)), directiveDef(5, 16384, null, 0, DefaultValueAccessor, [Renderer2, ElementRef, [2, COMPOSITION_BUFFER_MODE]], null, null), directiveDef(6, 212992, null, 0, RadioControlValueAccessor, [Renderer2, ElementRef, RadioControlRegistry, Injector], { name: [0, 'name'], value: [1,
                    'value'] }, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0, p1_0) {
                return [p0_0, p1_0];
            }, [DefaultValueAccessor, RadioControlValueAccessor]), directiveDef(8, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8,
                    null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(10, 16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(11, null, ['\n          ',
                '\n        '])), (_l()(), textDef(-1, null, ['\n      ']))], function (_ck, _v) {
            var currVal_7 = 'gender';
            var currVal_8 = _v.context.$implicit.label;
            _ck(_v, 6, 0, currVal_7, currVal_8);
            var currVal_9 = 'gender';
            var currVal_10 = _v.context.$implicit.label;
            _ck(_v, 8, 0, currVal_9, currVal_10);
        }, function (_ck, _v) {
            var currVal_0 = nodeValue(_v, 10).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 10).ngClassTouched;
            var currVal_2 = nodeValue(_v, 10).ngClassPristine;
            var currVal_3 = nodeValue(_v, 10).ngClassDirty;
            var currVal_4 = nodeValue(_v, 10).ngClassValid;
            var currVal_5 = nodeValue(_v, 10).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 10).ngClassPending;
            _ck(_v, 4, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
            var currVal_11 = _v.context.$implicit.label;
            _ck(_v, 11, 0, currVal_11);
        });
    }
    function View_CredentialsComponent_4(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 1, 'span', [['class',
                    'username-status']], null, null, null, null, null)), (_l()(), textDef(1, null, [' ', ' ']))], null, function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = _co.usernameStatus;
            _ck(_v, 1, 0, currVal_0);
        });
    }
    function View_CredentialsComponent_3(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 14, 'div', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n          '])), (_l()(), elementDef(2, 0, null, null, 8, 'label', [], null, null, null, null, null)), (_l()(), textDef(3, null, ['\n            ',
                '\n            '])), (_l()(), elementDef(4, 0, null, null, 5, 'input', [['type', 'text']], [[2, 'ng-untouched', null], [2, 'ng-touched', null],
                [2, 'ng-pristine', null], [2, 'ng-dirty', null], [2, 'ng-valid',
                    null], [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null, 'blur'], [null, 'ngModelChange'], [null, 'input'],
                [null, 'compositionstart'], [null, 'compositionend']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('input' === en)) {
                    var pd_0 = (nodeValue(_v, 5)._handleInput($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 5).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('compositionstart' === en)) {
                    var pd_2 = (nodeValue(_v, 5)._compositionStart() !== false);
                    ad = (pd_2 && ad);
                }
                if (('compositionend' === en)) {
                    var pd_3 = (nodeValue(_v, 5)._compositionEnd($event.target.value) !== false);
                    ad = (pd_3 && ad);
                }
                if (('blur' === en)) {
                    var pd_4 = (_co.credentialClick(_co.userFields) !== false);
                    ad = (pd_4 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_5 = ((_v.context.$implicit.value = $event) !== false);
                    ad = (pd_5 && ad);
                }
                return ad;
            }, null, null)), directiveDef(5, 16384, null, 0, DefaultValueAccessor, [Renderer2, ElementRef, [2, COMPOSITION_BUFFER_MODE]], null, null),
            providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [DefaultValueAccessor]), directiveDef(7, 671744, [['field', 4]], 0, NgModel, [[2,
                    ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(9, 16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(),
                textDef(-1, null, ['\n          '])), (_l()(), textDef(-1, null, ['\n          '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_CredentialsComponent_4)), directiveDef(13, 16384, null, 0, NgIf, [ViewContainerRef, TemplateRef], { ngIf: [0, 'ngIf'] }, null),
            (_l()(), textDef(-1, null, ['\n        ']))], function (_ck, _v) {
            var currVal_8 = _v.context.$implicit.name;
            var currVal_9 = _v.context.$implicit.value;
            _ck(_v, 7, 0, currVal_8, currVal_9);
            var currVal_10 = ((_v.context.$implicit.name === 'username') && nodeValue(_v, 7).touched);
            _ck(_v, 13, 0, currVal_10);
        }, function (_ck, _v) {
            var currVal_0 = _v.context.$implicit.label;
            _ck(_v, 3, 0, currVal_0);
            var currVal_1 = nodeValue(_v, 9).ngClassUntouched;
            var currVal_2 = nodeValue(_v, 9).ngClassTouched;
            var currVal_3 = nodeValue(_v, 9).ngClassPristine;
            var currVal_4 = nodeValue(_v, 9).ngClassDirty;
            var currVal_5 = nodeValue(_v, 9).ngClassValid;
            var currVal_6 = nodeValue(_v, 9).ngClassInvalid;
            var currVal_7 = nodeValue(_v, 9).ngClassPending;
            _ck(_v, 4, 0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6, currVal_7);
        });
    }
    function View_CredentialsComponent_1(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 25, 'div', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n  '])), (_l()(), elementDef(2, 0, null, null, 22, 'fieldset', [['class', 'blue']], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(4, 0, null, null, 1, 'legend', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Credentials'])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(7, 0, null, null, 16, 'div', [['ngModelGroup', 'userInfo']], [[2, 'ng-untouched',
                    null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
                [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                    null], [2, 'ng-pending', null]], null, null, null, null)), directiveDef(8, 212992, null, 0, NgModelGroup, [[1, ControlContainer], [8, null], [8, null]], { name: [0, 'name'] }, null), providerDef(2048, null, ControlContainer, null, [NgModelGroup]), directiveDef(10, 16384, null, 0, NgControlStatusGroup, [ControlContainer], null, null), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_CredentialsComponent_2)), directiveDef(13, 802816, null, 0, NgForOf, [ViewContainerRef,
                TemplateRef, IterableDiffers], { ngForOf: [0, 'ngForOf'] }, null), (_l()(),
                textDef(-1, null, ['\n\n      '])), (_l()(), elementDef(15, 0, null, null, 7, 'div', [['ngModelGroup', 'credentials']], [[2, 'ng-untouched', null],
                [2, 'ng-touched', null], [2, 'ng-pristine', null], [2, 'ng-dirty',
                    null], [2, 'ng-valid', null], [2, 'ng-invalid', null],
                [2, 'ng-pending', null]], null, null, null, null)), directiveDef(16, 212992, null, 0, NgModelGroup, [[1, ControlContainer],
                [8, null], [8, null]], { name: [0, 'name'] }, null), providerDef(2048, null, ControlContainer, null, [NgModelGroup]), directiveDef(18, 16384, null, 0, NgControlStatusGroup, [ControlContainer], null, null), (_l()(), textDef(-1, null, ['\n        '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_CredentialsComponent_3)), directiveDef(21, 802816, null, 0, NgForOf, [ViewContainerRef, TemplateRef, IterableDiffers], { ngForOf: [0, 'ngForOf'], ngForTrackBy: [1, 'ngForTrackBy'] }, null), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), textDef(-1, null, ['\n    '])),
            (_l()(), textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_7 = 'userInfo';
            _ck(_v, 8, 0, currVal_7);
            var currVal_8 = _co.civilites;
            _ck(_v, 13, 0, currVal_8);
            var currVal_16 = 'credentials';
            _ck(_v, 16, 0, currVal_16);
            var currVal_17 = _co.userFields;
            var currVal_18 = _co.trackByFn;
            _ck(_v, 21, 0, currVal_17, currVal_18);
        }, function (_ck, _v) {
            var currVal_0 = nodeValue(_v, 10).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 10).ngClassTouched;
            var currVal_2 = nodeValue(_v, 10).ngClassPristine;
            var currVal_3 = nodeValue(_v, 10).ngClassDirty;
            var currVal_4 = nodeValue(_v, 10).ngClassValid;
            var currVal_5 = nodeValue(_v, 10).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 10).ngClassPending;
            _ck(_v, 7, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
            var currVal_9 = nodeValue(_v, 18).ngClassUntouched;
            var currVal_10 = nodeValue(_v, 18).ngClassTouched;
            var currVal_11 = nodeValue(_v, 18).ngClassPristine;
            var currVal_12 = nodeValue(_v, 18).ngClassDirty;
            var currVal_13 = nodeValue(_v, 18).ngClassValid;
            var currVal_14 = nodeValue(_v, 18).ngClassInvalid;
            var currVal_15 = nodeValue(_v, 18).ngClassPending;
            _ck(_v, 15, 0, currVal_9, currVal_10, currVal_11, currVal_12, currVal_13, currVal_14, currVal_15);
        });
    }
    function View_CredentialsComponent_0(_l) {
        return viewDef(0, [(_l()(), anchorDef(16777216, null, null, 1, null, View_CredentialsComponent_1)), directiveDef(1, 16384, null, 0, NgIf, [ViewContainerRef,
                TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = ((_co.civilites != null) && (_co.currentUser != null));
            _ck(_v, 1, 0, currVal_0);
        }, null);
    }
    function View_CredentialsComponent_Host_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 2, 'mv-credentials', [], null, null, null, View_CredentialsComponent_0, RenderType_CredentialsComponent)), providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(2, 114688, null, 0, CredentialsComponent, [FieldsService], null, null)], function (_ck, _v) {
            _ck(_v, 2, 0);
        }, null);
    }
    var CredentialsComponentNgFactory = createComponentFactory('mv-credentials', CredentialsComponent, View_CredentialsComponent_Host_0, { civilites: 'civilites',
        userFields: 'userFields', currentUser: 'currentUser', usersFromSugar: 'usersFromSugar' }, {}, []);

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    var styles_ProfilesComponent = [];
    var RenderType_ProfilesComponent = createRendererType2({ encapsulation: 2,
        styles: styles_ProfilesComponent, data: {} });
    function View_ProfilesComponent_2(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 4, 'option', [], null, null, null, null, null)), directiveDef(1, 147456, null, 0, NgSelectOption, [ElementRef, Renderer2, [2, SelectControlValueAccessor]], { value: [0, 'value'] }, null), directiveDef(2, 147456, null, 0, NgSelectMultipleOption, [ElementRef,
                Renderer2, [8, null]], { value: [0, 'value'] }, null), (_l()(), textDef(3, null, ['\n          ', '. ', '\n        '])), purePipeDef(4, 1)], function (_ck, _v) {
            var currVal_0 = _v.context.$implicit.value;
            _ck(_v, 1, 0, currVal_0);
            var currVal_1 = _v.context.$implicit.value;
            _ck(_v, 2, 0, currVal_1);
        }, function (_ck, _v) {
            var _co = _v.component;
            var currVal_2 = (_co.userTemplates.indexOf(_v.context.$implicit) + 1);
            var currVal_3 = unwrapValue(_v, 3, 1, _ck(_v, 4, 0, nodeValue(_v.parent.parent, 0), _v.context.$implicit.label));
            _ck(_v, 3, 0, currVal_2, currVal_3);
        });
    }
    function View_ProfilesComponent_3(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 9, 'span', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), elementDef(2, 0, null, null, 7, 'label', [], null, null, null, null, null)), (_l()(), elementDef(3, 0, null, null, 5, 'input', [['type',
                    'checkbox']], [[2, 'ng-untouched', null], [2, 'ng-touched', null],
                [2, 'ng-pristine', null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
                [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                    'ngModelChange'], [null, 'change'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                if (('change' === en)) {
                    var pd_0 = (nodeValue(_v, 4).onChange($event.target.checked) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 4).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_2 = ((_v.context.$implicit.checked = $event) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, null, null)), directiveDef(4, 16384, null, 0, CheckboxControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [CheckboxControlValueAccessor]), directiveDef(6, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(8, 16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(9, null, ['', '\n      ']))], function (_ck, _v) {
            var currVal_7 = _v.context.$implicit.id;
            var currVal_8 = _v.context.$implicit.checked;
            _ck(_v, 6, 0, currVal_7, currVal_8);
        }, function (_ck, _v) {
            var currVal_0 = nodeValue(_v, 8).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 8).ngClassTouched;
            var currVal_2 = nodeValue(_v, 8).ngClassPristine;
            var currVal_3 = nodeValue(_v, 8).ngClassDirty;
            var currVal_4 = nodeValue(_v, 8).ngClassValid;
            var currVal_5 = nodeValue(_v, 8).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 8).ngClassPending;
            _ck(_v, 3, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
            var currVal_9 = _v.context.$implicit.label;
            _ck(_v, 9, 0, currVal_9);
        });
    }
    function View_ProfilesComponent_4(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 11, 'span', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n        '])), (_l()(), elementDef(2, 0, null, null, 8, 'label', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n          '])),
            (_l()(), elementDef(4, 0, null, null, 5, 'input', [['type', 'checkbox']], [[8, 'id', 0], [2, 'ng-untouched', null], [2, 'ng-touched', null],
                [2, 'ng-pristine', null], [2, 'ng-dirty', null], [2, 'ng-valid',
                    null], [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null, 'ngModelChange'], [null, 'change'], [null,
                    'blur']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('change' === en)) {
                    var pd_0 = (nodeValue(_v, 5).onChange($event.target.checked) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 5).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_2 = (_co.onServiceChecked(_v.context.$implicit, $event) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, null, null)), directiveDef(5, 16384, null, 0, CheckboxControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [CheckboxControlValueAccessor]), directiveDef(7, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(9, 16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(),
                textDef(10, null, ['', '\n        '])), (_l()(), textDef(-1, null, ['\n      ']))], function (_ck, _v) {
            var currVal_8 = _v.context.$implicit.id;
            var currVal_9 = _v.context.$implicit.checked;
            _ck(_v, 7, 0, currVal_8, currVal_9);
        }, function (_ck, _v) {
            var currVal_0 = _v.context.$implicit.id;
            var currVal_1 = nodeValue(_v, 9).ngClassUntouched;
            var currVal_2 = nodeValue(_v, 9).ngClassTouched;
            var currVal_3 = nodeValue(_v, 9).ngClassPristine;
            var currVal_4 = nodeValue(_v, 9).ngClassDirty;
            var currVal_5 = nodeValue(_v, 9).ngClassValid;
            var currVal_6 = nodeValue(_v, 9).ngClassInvalid;
            var currVal_7 = nodeValue(_v, 9).ngClassPending;
            _ck(_v, 4, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6, currVal_7);
            var currVal_10 = _v.context.$implicit.name;
            _ck(_v, 10, 0, currVal_10);
        });
    }
    function View_ProfilesComponent_1(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 90, 'div', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n  '])), (_l()(), elementDef(2, 0, null, null, 87, 'fieldset', [['class', 'blue']], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(4, 0, null, null, 1, 'legend', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Profiles SugarCRM'])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(),
                elementDef(7, 0, null, null, 1, 'button', [], null, [[null, 'click']], function (_v, en, $event) {
                    var ad = true;
                    var _co = _v.component;
                    if (('click' === en)) {
                        var pd_0 = (_co.handleClick($event, 'conseiller') !== false);
                        ad = (pd_0 && ad);
                    }
                    return ad;
                }, null, null)), (_l()(), textDef(-1, null, ['Ventes - Conseiller'])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(10, 0, null, null, 1, 'button', [], null, [[null, 'click']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('click' === en)) {
                    var pd_0 = (_co.handleClick($event, 'jm') !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)), (_l()(), textDef(-1, null, ['Ventes – Junior Manager'])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(13, 0, null, null, 1, 'button', [], null, [[null, 'click']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('click' === en)) {
                    var pd_0 = (_co.handleClick($event, 'manager') !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)), (_l()(), textDef(-1, null, ['Ventes - Manager'])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(16, 0, null, null, 1, 'button', [], null, [[null, 'click']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('click' === en)) {
                    var pd_0 = (_co.handleClick($event, 'assistant') !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)), (_l()(), textDef(-1, null, ['Ventes – Assistant de ventes'])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(19, 0, null, null, 1, 'button', [], null, [[null, 'click']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('click' === en)) {
                    var pd_0 = (_co.handleClick($event, 'qualite') !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)), (_l()(), textDef(-1, null, ['Agent Qualité'])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(22, 0, null, null, 1, 'button', [], null, [[null, 'click']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('click' === en)) {
                    var pd_0 = (_co.handleClick($event, 'compta') !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)), (_l()(), textDef(-1, null, ['Compta'])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(25, 0, null, null, 1, 'button', [], null, [[null, 'click']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('click' === en)) {
                    var pd_0 = (_co.handleClick($event, 'inactif') !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)), (_l()(), textDef(-1, null, ['Inactif'])),
            (_l()(), textDef(-1, null, ['\n\n\n    '])), (_l()(), elementDef(28, 0, null, null, 12, 'div', [['class', 'select subtitle']], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Hérite les préférence de l\'utilisateur\n      '])), (_l()(), elementDef(30, 0, null, null, 9, 'select', [['name', 'userToCopyHPfrom']], [[2,
                    'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                    null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
                [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                    'ngModelChange'], [null, 'change'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('change' === en)) {
                    var pd_0 = (nodeValue(_v, 31).onChange($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 31).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_2 = ((_co.userValue = $event) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, null, null)), directiveDef(31, 16384, null, 0, SelectControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [SelectControlValueAccessor]), directiveDef(33, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(35, 16384, null, 0, NgControlStatus, [NgControl], null, null),
            (_l()(), textDef(-1, null, ['\n        '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_ProfilesComponent_2)), directiveDef(38, 802816, null, 0, NgForOf, [ViewContainerRef, TemplateRef, IterableDiffers], { ngForOf: [0, 'ngForOf'], ngForTrackBy: [1, 'ngForTrackBy'] }, null), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), textDef(-1, null, ['\n\n    '])), (_l()(), elementDef(42, 0, null, null, 7, 'div', [['class', 'checkbox-list subtitle'],
                ['id', 'sugar_role'], ['ngModelGroup', 'roles']], [[2, 'ng-untouched', null],
                [2, 'ng-touched', null], [2, 'ng-pristine', null], [2, 'ng-dirty',
                    null], [2, 'ng-valid', null], [2, 'ng-invalid', null],
                [2, 'ng-pending', null]], null, null, null, null)), directiveDef(43, 212992, null, 0, NgModelGroup, [[1, ControlContainer],
                [8, null], [8, null]], { name: [0, 'name'] }, null), providerDef(2048, null, ControlContainer, null, [NgModelGroup]), directiveDef(45, 16384, null, 0, NgControlStatusGroup, [ControlContainer], null, null), (_l()(), textDef(-1, null, ['ROLE:\n     '])), (_l()(),
                anchorDef(16777216, null, null, 1, null, View_ProfilesComponent_3)),
            directiveDef(48, 802816, null, 0, NgForOf, [ViewContainerRef, TemplateRef,
                IterableDiffers], { ngForOf: [0, 'ngForOf'], ngForTrackBy: [1, 'ngForTrackBy'] }, null), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), textDef(-1, null, ['\n\n    '])), (_l()(), elementDef(51, 0, null, null, 7, 'div', [['class', 'checkbox-list subtitle'], ['id', 'sugar_departement'], ['ngModelGroup',
                    'services']], [[2, 'ng-untouched', null], [2, 'ng-touched', null],
                [2, 'ng-pristine', null], [2, 'ng-dirty', null], [2, 'ng-valid',
                    null], [2, 'ng-invalid', null], [2, 'ng-pending', null]], null, null, null, null)), directiveDef(52, 212992, null, 0, NgModelGroup, [[1, ControlContainer], [8, null],
                [8, null]], { name: [0, 'name'] }, null), providerDef(2048, null, ControlContainer, null, [NgModelGroup]), directiveDef(54, 16384, null, 0, NgControlStatusGroup, [ControlContainer], null, null),
            (_l()(), textDef(-1, null, ['SERVICE:\n      '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_ProfilesComponent_4)), directiveDef(57, 802816, null, 0, NgForOf, [ViewContainerRef, TemplateRef, IterableDiffers], { ngForOf: [0, 'ngForOf'], ngForTrackBy: [1, 'ngForTrackBy'] }, null), (_l()(),
                textDef(-1, null, ['\n    '])), (_l()(), textDef(-1, null, ['\n\n    '])),
            (_l()(), elementDef(60, 0, null, null, 13, 'div', [], [[8,
                    'hidden', 0]], null, null, null, null)), (_l()(),
                textDef(61, null, ['', '\n      '])), pipeDef(0, JsonPipe, []),
            (_l()(), elementDef(63, 0, null, null, 9, 'label', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Leads min\n        '])), (_l()(), elementDef(65, 0, null, null, 6, 'input', [['name', 'leadsMin'], ['type', 'number']], [[2, 'ng-untouched',
                    null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
                [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                    null], [2, 'ng-pending', null]], [[null, 'ngModelChange'],
                [null, 'input'], [null, 'blur'], [null, 'compositionstart'],
                [null, 'compositionend'], [null, 'change']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('input' === en)) {
                    var pd_0 = (nodeValue(_v, 66)._handleInput($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 66).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('compositionstart' === en)) {
                    var pd_2 = (nodeValue(_v, 66)._compositionStart() !== false);
                    ad = (pd_2 && ad);
                }
                if (('compositionend' === en)) {
                    var pd_3 = (nodeValue(_v, 66)._compositionEnd($event.target.value) !== false);
                    ad = (pd_3 && ad);
                }
                if (('change' === en)) {
                    var pd_4 = (nodeValue(_v, 67).onChange($event.target.value) !== false);
                    ad = (pd_4 && ad);
                }
                if (('input' === en)) {
                    var pd_5 = (nodeValue(_v, 67).onChange($event.target.value) !== false);
                    ad = (pd_5 && ad);
                }
                if (('blur' === en)) {
                    var pd_6 = (nodeValue(_v, 67).onTouched() !== false);
                    ad = (pd_6 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_7 = ((_co.leadsMin = $event) !== false);
                    ad = (pd_7 && ad);
                }
                return ad;
            }, null, null)), directiveDef(66, 16384, null, 0, DefaultValueAccessor, [Renderer2, ElementRef, [2, COMPOSITION_BUFFER_MODE]], null, null), directiveDef(67, 16384, null, 0, NumberValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0, p1_0) {
                return [p0_0, p1_0];
            }, [DefaultValueAccessor, NumberValueAccessor]), directiveDef(69, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(71, 16384, null, 0, NgControlStatus, [NgControl], null, null),
            (_l()(), textDef(-1, null, ['\n      '])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), textDef(-1, null, ['\n\n    '])), (_l()(), elementDef(75, 0, null, null, 13, 'div', [], [[8, 'hidden', 0]], null, null, null, null)), (_l()(), textDef(76, null, ['', '\n      '])), pipeDef(0, JsonPipe, []), (_l()(), elementDef(78, 0, null, null, 9, 'label', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Leads max\n        '])), (_l()(), elementDef(80, 0, null, null, 6, 'input', [['name', 'leadsMax'], ['type', 'number']], [[2, 'ng-untouched', null],
                [2, 'ng-touched', null], [2, 'ng-pristine', null], [2, 'ng-dirty',
                    null], [2, 'ng-valid', null], [2, 'ng-invalid', null],
                [2, 'ng-pending', null]], [[null, 'ngModelChange'], [null,
                    'input'], [null, 'blur'], [null, 'compositionstart'], [null,
                    'compositionend'], [null, 'change']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('input' === en)) {
                    var pd_0 = (nodeValue(_v, 81)._handleInput($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 81).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('compositionstart' === en)) {
                    var pd_2 = (nodeValue(_v, 81)._compositionStart() !== false);
                    ad = (pd_2 && ad);
                }
                if (('compositionend' === en)) {
                    var pd_3 = (nodeValue(_v, 81)._compositionEnd($event.target.value) !== false);
                    ad = (pd_3 && ad);
                }
                if (('change' === en)) {
                    var pd_4 = (nodeValue(_v, 82).onChange($event.target.value) !== false);
                    ad = (pd_4 && ad);
                }
                if (('input' === en)) {
                    var pd_5 = (nodeValue(_v, 82).onChange($event.target.value) !== false);
                    ad = (pd_5 && ad);
                }
                if (('blur' === en)) {
                    var pd_6 = (nodeValue(_v, 82).onTouched() !== false);
                    ad = (pd_6 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_7 = ((_co.leadsMax = $event) !== false);
                    ad = (pd_7 && ad);
                }
                return ad;
            }, null, null)), directiveDef(81, 16384, null, 0, DefaultValueAccessor, [Renderer2, ElementRef, [2, COMPOSITION_BUFFER_MODE]], null, null), directiveDef(82, 16384, null, 0, NumberValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0, p1_0) {
                return [p0_0, p1_0];
            }, [DefaultValueAccessor, NumberValueAccessor]), directiveDef(84, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(86, 16384, null, 0, NgControlStatus, [NgControl], null, null),
            (_l()(), textDef(-1, null, ['\n      '])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_7 = 'userToCopyHPfrom';
            var currVal_8 = _co.userValue;
            _ck(_v, 33, 0, currVal_7, currVal_8);
            var currVal_9 = _co.userTemplates;
            var currVal_10 = _co.trackByFn;
            _ck(_v, 38, 0, currVal_9, currVal_10);
            var currVal_18 = 'roles';
            _ck(_v, 43, 0, currVal_18);
            var currVal_19 = _co.roles;
            var currVal_20 = _co.trackByFn;
            _ck(_v, 48, 0, currVal_19, currVal_20);
            var currVal_28 = 'services';
            _ck(_v, 52, 0, currVal_28);
            var currVal_29 = _co.services;
            var currVal_30 = _co.trackByFn;
            _ck(_v, 57, 0, currVal_29, currVal_30);
            var currVal_40 = 'leadsMin';
            var currVal_41 = _co.leadsMin;
            _ck(_v, 69, 0, currVal_40, currVal_41);
            var currVal_51 = 'leadsMax';
            var currVal_52 = _co.leadsMax;
            _ck(_v, 84, 0, currVal_51, currVal_52);
        }, function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = nodeValue(_v, 35).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 35).ngClassTouched;
            var currVal_2 = nodeValue(_v, 35).ngClassPristine;
            var currVal_3 = nodeValue(_v, 35).ngClassDirty;
            var currVal_4 = nodeValue(_v, 35).ngClassValid;
            var currVal_5 = nodeValue(_v, 35).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 35).ngClassPending;
            _ck(_v, 30, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
            var currVal_11 = nodeValue(_v, 45).ngClassUntouched;
            var currVal_12 = nodeValue(_v, 45).ngClassTouched;
            var currVal_13 = nodeValue(_v, 45).ngClassPristine;
            var currVal_14 = nodeValue(_v, 45).ngClassDirty;
            var currVal_15 = nodeValue(_v, 45).ngClassValid;
            var currVal_16 = nodeValue(_v, 45).ngClassInvalid;
            var currVal_17 = nodeValue(_v, 45).ngClassPending;
            _ck(_v, 42, 0, currVal_11, currVal_12, currVal_13, currVal_14, currVal_15, currVal_16, currVal_17);
            var currVal_21 = nodeValue(_v, 54).ngClassUntouched;
            var currVal_22 = nodeValue(_v, 54).ngClassTouched;
            var currVal_23 = nodeValue(_v, 54).ngClassPristine;
            var currVal_24 = nodeValue(_v, 54).ngClassDirty;
            var currVal_25 = nodeValue(_v, 54).ngClassValid;
            var currVal_26 = nodeValue(_v, 54).ngClassInvalid;
            var currVal_27 = nodeValue(_v, 54).ngClassPending;
            _ck(_v, 51, 0, currVal_21, currVal_22, currVal_23, currVal_24, currVal_25, currVal_26, currVal_27);
            var currVal_31 = !_co.displayVentesLeads;
            _ck(_v, 60, 0, currVal_31);
            var currVal_32 = unwrapValue(_v, 61, 0, nodeValue(_v, 62).transform(_co.leadsMin));
            _ck(_v, 61, 0, currVal_32);
            var currVal_33 = nodeValue(_v, 71).ngClassUntouched;
            var currVal_34 = nodeValue(_v, 71).ngClassTouched;
            var currVal_35 = nodeValue(_v, 71).ngClassPristine;
            var currVal_36 = nodeValue(_v, 71).ngClassDirty;
            var currVal_37 = nodeValue(_v, 71).ngClassValid;
            var currVal_38 = nodeValue(_v, 71).ngClassInvalid;
            var currVal_39 = nodeValue(_v, 71).ngClassPending;
            _ck(_v, 65, 0, currVal_33, currVal_34, currVal_35, currVal_36, currVal_37, currVal_38, currVal_39);
            var currVal_42 = !_co.displayVentesLeads;
            _ck(_v, 75, 0, currVal_42);
            var currVal_43 = unwrapValue(_v, 76, 0, nodeValue(_v, 77).transform(_co.leadsMax));
            _ck(_v, 76, 0, currVal_43);
            var currVal_44 = nodeValue(_v, 86).ngClassUntouched;
            var currVal_45 = nodeValue(_v, 86).ngClassTouched;
            var currVal_46 = nodeValue(_v, 86).ngClassPristine;
            var currVal_47 = nodeValue(_v, 86).ngClassDirty;
            var currVal_48 = nodeValue(_v, 86).ngClassValid;
            var currVal_49 = nodeValue(_v, 86).ngClassInvalid;
            var currVal_50 = nodeValue(_v, 86).ngClassPending;
            _ck(_v, 80, 0, currVal_44, currVal_45, currVal_46, currVal_47, currVal_48, currVal_49, currVal_50);
        });
    }
    function View_ProfilesComponent_0(_l) {
        return viewDef(0, [pipeDef(0, UpperCasePipe, []), (_l()(), anchorDef(16777216, null, null, 1, null, View_ProfilesComponent_1)), directiveDef(2, 16384, null, 0, NgIf, [ViewContainerRef, TemplateRef], { ngIf: [0,
                    'ngIf'] }, null), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = (((_co.userTemplates != null) && (_co.roles != null)) && (_co.services != null));
            _ck(_v, 2, 0, currVal_0);
        }, null);
    }
    function View_ProfilesComponent_Host_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 2, 'mv-profiles', [], null, null, null, View_ProfilesComponent_0, RenderType_ProfilesComponent)), providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(2, 114688, null, 0, ProfilesComponent, [FieldsService, SugarService], null, null)], function (_ck, _v) {
            _ck(_v, 2, 0);
        }, null);
    }
    var ProfilesComponentNgFactory = createComponentFactory('mv-profiles', ProfilesComponent, View_ProfilesComponent_Host_0, { roles: 'roles', services: 'services',
        userTemplates: 'userTemplates', userValue: 'userValue', selectedFunction: 'selectedFunction',
        selectedManager: 'selectedManager', selectedOffice: 'selectedOffice', orgas: 'orgas',
        others: 'others', inactiveEmployee: 'inactiveEmployee', inactiveStatus: 'inactiveStatus',
        leadsMin: 'leadsMin', leadsMax: 'leadsMax', destinations: 'destinations', teams: 'teams',
        codeSON: 'codeSON', codeTourplan: 'codeTourplan', codevad: 'codevad', groupes: 'groupes',
        inbound: 'inbound', outbound: 'outbound', phoneExtension: 'phoneExtension', phoneNumber: 'phoneNumber',
        selectedOrganisation: 'selectedOrganisation', title: 'title' }, {}, []);

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    var styles_OfficeComponent = [];
    var RenderType_OfficeComponent = createRendererType2({ encapsulation: 2,
        styles: styles_OfficeComponent, data: {} });
    function View_OfficeComponent_2(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 3, 'option', [], null, null, null, null, null)), directiveDef(1, 147456, null, 0, NgSelectOption, [ElementRef, Renderer2, [2, SelectControlValueAccessor]], { value: [0, 'value'] }, null), directiveDef(2, 147456, null, 0, NgSelectMultipleOption, [ElementRef,
                Renderer2, [8, null]], { value: [0, 'value'] }, null), (_l()(), textDef(3, null, ['\n      ', '\n    ']))], function (_ck, _v) {
            var currVal_0 = _v.context.$implicit.value;
            _ck(_v, 1, 0, currVal_0);
            var currVal_1 = _v.context.$implicit.value;
            _ck(_v, 2, 0, currVal_1);
        }, function (_ck, _v) {
            var currVal_2 = _v.context.$implicit.label;
            _ck(_v, 3, 0, currVal_2);
        });
    }
    function View_OfficeComponent_1(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 12, 'div', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['Office\n  '])), (_l()(), elementDef(2, 0, null, null, 9, 'select', [['name', 'office']], [[2, 'ng-untouched', null],
                [2, 'ng-touched', null], [2, 'ng-pristine', null], [2, 'ng-dirty',
                    null], [2, 'ng-valid', null], [2, 'ng-invalid', null],
                [2, 'ng-pending', null]], [[null, 'ngModelChange'], [null,
                    'change'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('change' === en)) {
                    var pd_0 = (nodeValue(_v, 3).onChange($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 3).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_2 = ((_co.selectedOffice = $event) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, null, null)), directiveDef(3, 16384, null, 0, SelectControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [SelectControlValueAccessor]), directiveDef(5, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(7, 16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_OfficeComponent_2)), directiveDef(10, 802816, null, 0, NgForOf, [ViewContainerRef,
                TemplateRef, IterableDiffers], { ngForOf: [0, 'ngForOf'], ngForTrackBy: [1, 'ngForTrackBy'] }, null), (_l()(), textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_7 = 'office';
            var currVal_8 = _co.selectedOffice;
            _ck(_v, 5, 0, currVal_7, currVal_8);
            var currVal_9 = _co.offices;
            var currVal_10 = _co.trackByFn;
            _ck(_v, 10, 0, currVal_9, currVal_10);
        }, function (_ck, _v) {
            var currVal_0 = nodeValue(_v, 7).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 7).ngClassTouched;
            var currVal_2 = nodeValue(_v, 7).ngClassPristine;
            var currVal_3 = nodeValue(_v, 7).ngClassDirty;
            var currVal_4 = nodeValue(_v, 7).ngClassValid;
            var currVal_5 = nodeValue(_v, 7).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 7).ngClassPending;
            _ck(_v, 2, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
        });
    }
    function View_OfficeComponent_0(_l) {
        return viewDef(0, [(_l()(), anchorDef(16777216, null, null, 1, null, View_OfficeComponent_1)), directiveDef(1, 16384, null, 0, NgIf, [ViewContainerRef,
                TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = (_co.offices != null);
            _ck(_v, 1, 0, currVal_0);
        }, null);
    }
    function View_OfficeComponent_Host_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 2, 'mv-office', [], null, null, null, View_OfficeComponent_0, RenderType_OfficeComponent)), providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(2, 114688, null, 0, OfficeComponent, [FieldsService], null, null)], function (_ck, _v) {
            _ck(_v, 2, 0);
        }, null);
    }
    var OfficeComponentNgFactory = createComponentFactory('mv-office', OfficeComponent, View_OfficeComponent_Host_0, { offices: 'offices', selectedOffice: 'selectedOffice' }, {}, []);

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    var styles_FunctionComponent = [];
    var RenderType_FunctionComponent = createRendererType2({ encapsulation: 2,
        styles: styles_FunctionComponent, data: {} });
    function View_FunctionComponent_2(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 3, 'option', [], null, null, null, null, null)), directiveDef(1, 147456, null, 0, NgSelectOption, [ElementRef, Renderer2, [2, SelectControlValueAccessor]], { value: [0, 'value'] }, null), directiveDef(2, 147456, null, 0, NgSelectMultipleOption, [ElementRef,
                Renderer2, [8, null]], { value: [0, 'value'] }, null), (_l()(), textDef(3, null, ['', '\n    ']))], function (_ck, _v) {
            var currVal_0 = _v.context.$implicit.value;
            _ck(_v, 1, 0, currVal_0);
            var currVal_1 = _v.context.$implicit.value;
            _ck(_v, 2, 0, currVal_1);
        }, function (_ck, _v) {
            var currVal_2 = _v.context.$implicit.label;
            _ck(_v, 3, 0, currVal_2);
        });
    }
    function View_FunctionComponent_1(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 15, 'div', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['Function\n  '])), (_l()(), elementDef(2, 0, null, null, 12, 'select', [['name', 'fonction']], [[2, 'ng-untouched', null],
                [2, 'ng-touched', null], [2, 'ng-pristine', null], [2, 'ng-dirty',
                    null], [2, 'ng-valid', null], [2, 'ng-invalid', null],
                [2, 'ng-pending', null]], [[null, 'ngModelChange'], [null,
                    'change'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('change' === en)) {
                    var pd_0 = (nodeValue(_v, 3).onChange($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 3).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_2 = ((_co.selectedFunction = $event) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, null, null)), directiveDef(3, 16384, null, 0, SelectControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [SelectControlValueAccessor]), directiveDef(5, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(7, 16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), elementDef(8, 0, null, null, 2, 'option', [], null, null, null, null, null)), directiveDef(9, 147456, null, 0, NgSelectOption, [ElementRef, Renderer2, [2, SelectControlValueAccessor]], { ngValue: [0, 'ngValue'] }, null), directiveDef(10, 147456, null, 0, NgSelectMultipleOption, [ElementRef, Renderer2,
                [8, null]], { ngValue: [0, 'ngValue'] }, null), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_FunctionComponent_2)), directiveDef(13, 802816, null, 0, NgForOf, [ViewContainerRef, TemplateRef, IterableDiffers], { ngForOf: [0,
                    'ngForOf'], ngForTrackBy: [1, 'ngForTrackBy'] }, null), (_l()(), textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_7 = 'fonction';
            var currVal_8 = _co.selectedFunction;
            _ck(_v, 5, 0, currVal_7, currVal_8);
            var currVal_9 = null;
            _ck(_v, 9, 0, currVal_9);
            var currVal_10 = null;
            _ck(_v, 10, 0, currVal_10);
            var currVal_11 = _co.functions;
            var currVal_12 = _co.trackByFn;
            _ck(_v, 13, 0, currVal_11, currVal_12);
        }, function (_ck, _v) {
            var currVal_0 = nodeValue(_v, 7).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 7).ngClassTouched;
            var currVal_2 = nodeValue(_v, 7).ngClassPristine;
            var currVal_3 = nodeValue(_v, 7).ngClassDirty;
            var currVal_4 = nodeValue(_v, 7).ngClassValid;
            var currVal_5 = nodeValue(_v, 7).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 7).ngClassPending;
            _ck(_v, 2, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
        });
    }
    function View_FunctionComponent_0(_l) {
        return viewDef(0, [(_l()(), anchorDef(16777216, null, null, 1, null, View_FunctionComponent_1)), directiveDef(1, 16384, null, 0, NgIf, [ViewContainerRef,
                TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = (_co.functions != null);
            _ck(_v, 1, 0, currVal_0);
        }, null);
    }
    function View_FunctionComponent_Host_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 2, 'mv-function', [], null, null, null, View_FunctionComponent_0, RenderType_FunctionComponent)), providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(2, 114688, null, 0, FunctionComponent, [FieldsService], null, null)], function (_ck, _v) {
            _ck(_v, 2, 0);
        }, null);
    }
    var FunctionComponentNgFactory = createComponentFactory('mv-function', FunctionComponent, View_FunctionComponent_Host_0, { functions: 'functions', selectedFunction: 'selectedFunction' }, {}, []);

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    var styles_ManagerComponent = [];
    var RenderType_ManagerComponent = createRendererType2({ encapsulation: 2,
        styles: styles_ManagerComponent, data: {} });
    function View_ManagerComponent_2(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 3, 'option', [], null, null, null, null, null)), directiveDef(1, 147456, null, 0, NgSelectOption, [ElementRef, Renderer2, [2, SelectControlValueAccessor]], { value: [0, 'value'] }, null), directiveDef(2, 147456, null, 0, NgSelectMultipleOption, [ElementRef,
                Renderer2, [8, null]], { value: [0, 'value'] }, null), (_l()(), textDef(3, null, ['', '\n    ']))], function (_ck, _v) {
            var currVal_0 = _v.context.$implicit.name;
            _ck(_v, 1, 0, currVal_0);
            var currVal_1 = _v.context.$implicit.name;
            _ck(_v, 2, 0, currVal_1);
        }, function (_ck, _v) {
            var currVal_2 = _v.context.$implicit.name;
            _ck(_v, 3, 0, currVal_2);
        });
    }
    function View_ManagerComponent_1(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 12, 'div', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['Manager\n  '])), (_l()(), elementDef(2, 0, null, null, 9, 'select', [['name', 'manager']], [[2, 'ng-untouched', null],
                [2, 'ng-touched', null], [2, 'ng-pristine', null], [2, 'ng-dirty',
                    null], [2, 'ng-valid', null], [2, 'ng-invalid', null],
                [2, 'ng-pending', null]], [[null, 'ngModelChange'], [null,
                    'change'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('change' === en)) {
                    var pd_0 = (nodeValue(_v, 3).onChange($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 3).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_2 = ((_co.selectedManager = $event) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, null, null)), directiveDef(3, 16384, null, 0, SelectControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [SelectControlValueAccessor]), directiveDef(5, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(7, 16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_ManagerComponent_2)), directiveDef(10, 802816, null, 0, NgForOf, [ViewContainerRef,
                TemplateRef, IterableDiffers], { ngForOf: [0, 'ngForOf'], ngForTrackBy: [1, 'ngForTrackBy'] }, null), (_l()(), textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_7 = 'manager';
            var currVal_8 = _co.selectedManager;
            _ck(_v, 5, 0, currVal_7, currVal_8);
            var currVal_9 = _co.managers;
            var currVal_10 = _co.trackByFn;
            _ck(_v, 10, 0, currVal_9, currVal_10);
        }, function (_ck, _v) {
            var currVal_0 = nodeValue(_v, 7).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 7).ngClassTouched;
            var currVal_2 = nodeValue(_v, 7).ngClassPristine;
            var currVal_3 = nodeValue(_v, 7).ngClassDirty;
            var currVal_4 = nodeValue(_v, 7).ngClassValid;
            var currVal_5 = nodeValue(_v, 7).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 7).ngClassPending;
            _ck(_v, 2, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
        });
    }
    function View_ManagerComponent_0(_l) {
        return viewDef(0, [(_l()(), anchorDef(16777216, null, null, 1, null, View_ManagerComponent_1)), directiveDef(1, 16384, null, 0, NgIf, [ViewContainerRef,
                TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = (_co.managers != null);
            _ck(_v, 1, 0, currVal_0);
        }, null);
    }
    function View_ManagerComponent_Host_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 2, 'mv-manager', [], null, null, null, View_ManagerComponent_0, RenderType_ManagerComponent)), providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(2, 114688, null, 0, ManagerComponent, [FieldsService], null, null)], function (_ck, _v) {
            _ck(_v, 2, 0);
        }, null);
    }
    var ManagerComponentNgFactory = createComponentFactory('mv-manager', ManagerComponent, View_ManagerComponent_Host_0, { managers: 'managers', selectedManager: 'selectedManager' }, {}, []);

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    /* tslint:disable */
    var styles$1 = ['.destinations[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  height: 50px;\n  flex-wrap: wrap;\n}'];

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    var styles_DestinationsComponent = [styles$1];
    var RenderType_DestinationsComponent = createRendererType2({ encapsulation: 0,
        styles: styles_DestinationsComponent, data: {} });
    function View_DestinationsComponent_2(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 11, 'div', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), elementDef(2, 0, null, null, 8, 'label', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n        '])), (_l()(), elementDef(4, 0, null, null, 5, 'input', [['type', 'checkbox']], [[2, 'ng-untouched',
                    null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
                [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                    null], [2, 'ng-pending', null]], [[null, 'ngModelChange'],
                [null, 'change'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                if (('change' === en)) {
                    var pd_0 = (nodeValue(_v, 5).onChange($event.target.checked) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 5).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_2 = ((_v.context.$implicit.checked = $event) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, null, null)), directiveDef(5, 16384, null, 0, CheckboxControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [CheckboxControlValueAccessor]), directiveDef(7, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(9, 16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(10, null, ['', '\n      '])), (_l()(), textDef(-1, null, ['\n    ']))], function (_ck, _v) {
            var currVal_7 = _v.context.$implicit.name;
            var currVal_8 = _v.context.$implicit.checked;
            _ck(_v, 7, 0, currVal_7, currVal_8);
        }, function (_ck, _v) {
            var currVal_0 = nodeValue(_v, 9).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 9).ngClassTouched;
            var currVal_2 = nodeValue(_v, 9).ngClassPristine;
            var currVal_3 = nodeValue(_v, 9).ngClassDirty;
            var currVal_4 = nodeValue(_v, 9).ngClassValid;
            var currVal_5 = nodeValue(_v, 9).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 9).ngClassPending;
            _ck(_v, 4, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
            var currVal_9 = _v.context.$implicit.name;
            _ck(_v, 10, 0, currVal_9);
        });
    }
    function View_DestinationsComponent_1(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 13, 'fieldset', [['class', 'blue']], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['\n  '])), (_l()(), elementDef(2, 0, null, null, 1, 'legend', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Destinations'])),
            (_l()(), textDef(-1, null, ['\n  '])), (_l()(), elementDef(5, 0, null, null, 7, 'div', [['class', 'destinations'], ['ngModelGroup', 'destinations']], [[2, 'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                    null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
                [2, 'ng-invalid', null], [2, 'ng-pending', null]], null, null, null, null)), directiveDef(6, 212992, null, 0, NgModelGroup, [[1, ControlContainer], [8, null], [8, null]], { name: [0, 'name'] }, null), providerDef(2048, null, ControlContainer, null, [NgModelGroup]), directiveDef(8, 16384, null, 0, NgControlStatusGroup, [ControlContainer], null, null), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_DestinationsComponent_2)), directiveDef(11, 802816, null, 0, NgForOf, [ViewContainerRef, TemplateRef, IterableDiffers], { ngForOf: [0, 'ngForOf'],
                ngForTrackBy: [1, 'ngForTrackBy'] }, null), (_l()(), textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_7 = 'destinations';
            _ck(_v, 6, 0, currVal_7);
            var currVal_8 = _co.destinations;
            var currVal_9 = _co.trackByFn;
            _ck(_v, 11, 0, currVal_8, currVal_9);
        }, function (_ck, _v) {
            var currVal_0 = nodeValue(_v, 8).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 8).ngClassTouched;
            var currVal_2 = nodeValue(_v, 8).ngClassPristine;
            var currVal_3 = nodeValue(_v, 8).ngClassDirty;
            var currVal_4 = nodeValue(_v, 8).ngClassValid;
            var currVal_5 = nodeValue(_v, 8).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 8).ngClassPending;
            _ck(_v, 5, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
        });
    }
    function View_DestinationsComponent_0(_l) {
        return viewDef(0, [(_l()(), anchorDef(16777216, null, null, 1, null, View_DestinationsComponent_1)), directiveDef(1, 16384, null, 0, NgIf, [ViewContainerRef,
                TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = (_co.destinations != null);
            _ck(_v, 1, 0, currVal_0);
        }, null);
    }
    function View_DestinationsComponent_Host_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 2, 'mv-destinations', [], null, null, null, View_DestinationsComponent_0, RenderType_DestinationsComponent)), providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(2, 114688, null, 0, DestinationsComponent, [FieldsService], null, null)], function (_ck, _v) {
            _ck(_v, 2, 0);
        }, null);
    }
    var DestinationsComponentNgFactory = createComponentFactory('mv-destinations', DestinationsComponent, View_DestinationsComponent_Host_0, { destinations: 'destinations' }, {}, []);

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    /* tslint:disable */
    var styles$2 = ['.teams[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  height: 50px;\n  flex-wrap: wrap;\n}'];

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    var styles_TeamsComponent = [styles$2];
    var RenderType_TeamsComponent = createRendererType2({ encapsulation: 0,
        styles: styles_TeamsComponent, data: {} });
    function View_TeamsComponent_2(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 11, 'div', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), elementDef(2, 0, null, null, 8, 'label', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n        '])), (_l()(), elementDef(4, 0, null, null, 5, 'input', [['type', 'checkbox']], [[2, 'ng-untouched',
                    null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
                [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                    null], [2, 'ng-pending', null]], [[null, 'ngModelChange'],
                [null, 'change'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                if (('change' === en)) {
                    var pd_0 = (nodeValue(_v, 5).onChange($event.target.checked) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 5).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_2 = ((_v.context.$implicit.checked = $event) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, null, null)), directiveDef(5, 16384, null, 0, CheckboxControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [CheckboxControlValueAccessor]), directiveDef(7, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(9, 16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(10, null, ['', '\n      '])), (_l()(), textDef(-1, null, ['\n    ']))], function (_ck, _v) {
            var currVal_7 = _v.context.$implicit.label;
            var currVal_8 = _v.context.$implicit.checked;
            _ck(_v, 7, 0, currVal_7, currVal_8);
        }, function (_ck, _v) {
            var currVal_0 = nodeValue(_v, 9).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 9).ngClassTouched;
            var currVal_2 = nodeValue(_v, 9).ngClassPristine;
            var currVal_3 = nodeValue(_v, 9).ngClassDirty;
            var currVal_4 = nodeValue(_v, 9).ngClassValid;
            var currVal_5 = nodeValue(_v, 9).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 9).ngClassPending;
            _ck(_v, 4, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
            var currVal_9 = _v.context.$implicit.label;
            _ck(_v, 10, 0, currVal_9);
        });
    }
    function View_TeamsComponent_1(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 13, 'fieldset', [['class', 'blue']], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['\n  '])), (_l()(), elementDef(2, 0, null, null, 1, 'legend', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Teams'])),
            (_l()(), textDef(-1, null, ['\n  '])), (_l()(), elementDef(5, 0, null, null, 7, 'div', [['class', 'teams'], ['ngModelGroup', 'teams']], [[2, 'ng-untouched',
                    null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
                [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                    null], [2, 'ng-pending', null]], null, null, null, null)), directiveDef(6, 212992, null, 0, NgModelGroup, [[1, ControlContainer], [8, null], [8, null]], { name: [0, 'name'] }, null), providerDef(2048, null, ControlContainer, null, [NgModelGroup]), directiveDef(8, 16384, null, 0, NgControlStatusGroup, [ControlContainer], null, null), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_TeamsComponent_2)), directiveDef(11, 802816, null, 0, NgForOf, [ViewContainerRef,
                TemplateRef, IterableDiffers], { ngForOf: [0, 'ngForOf'], ngForTrackBy: [1,
                    'ngForTrackBy'] }, null), (_l()(), textDef(-1, null, ['\n  '])),
            (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_7 = 'teams';
            _ck(_v, 6, 0, currVal_7);
            var currVal_8 = _co.teams;
            var currVal_9 = _co.trackByFn;
            _ck(_v, 11, 0, currVal_8, currVal_9);
        }, function (_ck, _v) {
            var currVal_0 = nodeValue(_v, 8).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 8).ngClassTouched;
            var currVal_2 = nodeValue(_v, 8).ngClassPristine;
            var currVal_3 = nodeValue(_v, 8).ngClassDirty;
            var currVal_4 = nodeValue(_v, 8).ngClassValid;
            var currVal_5 = nodeValue(_v, 8).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 8).ngClassPending;
            _ck(_v, 5, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
        });
    }
    function View_TeamsComponent_0(_l) {
        return viewDef(0, [(_l()(), anchorDef(16777216, null, null, 1, null, View_TeamsComponent_1)), directiveDef(1, 16384, null, 0, NgIf, [ViewContainerRef,
                TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = (_co.teams != null);
            _ck(_v, 1, 0, currVal_0);
        }, null);
    }
    function View_TeamsComponent_Host_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 2, 'mv-teams', [], null, null, null, View_TeamsComponent_0, RenderType_TeamsComponent)),
            providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(2, 114688, null, 0, TeamsComponent, [FieldsService], null, null)], function (_ck, _v) {
            _ck(_v, 2, 0);
        }, null);
    }
    var TeamsComponentNgFactory = createComponentFactory('mv-teams', TeamsComponent, View_TeamsComponent_Host_0, { teams: 'teams' }, {}, []);

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    /* tslint:disable */
    var styles$3 = ['.others[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  height: 300px;\n  flex-wrap: wrap;\n}'];

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    var styles_OthersComponent = [styles$3];
    var RenderType_OthersComponent = createRendererType2({ encapsulation: 0,
        styles: styles_OthersComponent, data: {} });
    function View_OthersComponent_2(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 11, 'div', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), elementDef(2, 0, null, null, 8, 'label', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n        '])), (_l()(), elementDef(4, 0, null, null, 5, 'input', [['type', 'checkbox']], [[2, 'ng-untouched',
                    null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
                [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                    null], [2, 'ng-pending', null]], [[null, 'ngModelChange'],
                [null, 'change'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                if (('change' === en)) {
                    var pd_0 = (nodeValue(_v, 5).onChange($event.target.checked) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 5).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_2 = ((_v.context.$implicit.checked = $event) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, null, null)), directiveDef(5, 16384, null, 0, CheckboxControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [CheckboxControlValueAccessor]), directiveDef(7, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(9, 16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(10, null, ['', '\n      '])), (_l()(), textDef(-1, null, ['\n    ']))], function (_ck, _v) {
            var currVal_7 = _v.context.$implicit.id;
            var currVal_8 = _v.context.$implicit.checked;
            _ck(_v, 7, 0, currVal_7, currVal_8);
        }, function (_ck, _v) {
            var currVal_0 = nodeValue(_v, 9).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 9).ngClassTouched;
            var currVal_2 = nodeValue(_v, 9).ngClassPristine;
            var currVal_3 = nodeValue(_v, 9).ngClassDirty;
            var currVal_4 = nodeValue(_v, 9).ngClassValid;
            var currVal_5 = nodeValue(_v, 9).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 9).ngClassPending;
            _ck(_v, 4, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
            var currVal_9 = _v.context.$implicit.label;
            _ck(_v, 10, 0, currVal_9);
        });
    }
    function View_OthersComponent_1(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 13, 'fieldset', [['class', 'blue']], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['\n  '])), (_l()(), elementDef(2, 0, null, null, 1, 'legend', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Others'])),
            (_l()(), textDef(-1, null, ['\n  '])), (_l()(), elementDef(5, 0, null, null, 7, 'div', [['class', 'others'], ['ngModelGroup', 'others']], [[2,
                    'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                    null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
                [2, 'ng-invalid', null], [2, 'ng-pending', null]], null, null, null, null)), directiveDef(6, 212992, null, 0, NgModelGroup, [[1, ControlContainer], [8, null], [8, null]], { name: [0, 'name'] }, null), providerDef(2048, null, ControlContainer, null, [NgModelGroup]), directiveDef(8, 16384, null, 0, NgControlStatusGroup, [ControlContainer], null, null), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_OthersComponent_2)), directiveDef(11, 802816, null, 0, NgForOf, [ViewContainerRef,
                TemplateRef, IterableDiffers], { ngForOf: [0, 'ngForOf'], ngForTrackBy: [1,
                    'ngForTrackBy'] }, null), (_l()(), textDef(-1, null, ['\n  '])),
            (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_7 = 'others';
            _ck(_v, 6, 0, currVal_7);
            var currVal_8 = _co.others;
            var currVal_9 = _co.trackByFn;
            _ck(_v, 11, 0, currVal_8, currVal_9);
        }, function (_ck, _v) {
            var currVal_0 = nodeValue(_v, 8).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 8).ngClassTouched;
            var currVal_2 = nodeValue(_v, 8).ngClassPristine;
            var currVal_3 = nodeValue(_v, 8).ngClassDirty;
            var currVal_4 = nodeValue(_v, 8).ngClassValid;
            var currVal_5 = nodeValue(_v, 8).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 8).ngClassPending;
            _ck(_v, 5, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
        });
    }
    function View_OthersComponent_0(_l) {
        return viewDef(0, [(_l()(), anchorDef(16777216, null, null, 1, null, View_OthersComponent_1)), directiveDef(1, 16384, null, 0, NgIf, [ViewContainerRef,
                TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = (_co.others != null);
            _ck(_v, 1, 0, currVal_0);
        }, null);
    }
    function View_OthersComponent_Host_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 2, 'mv-others', [], null, null, null, View_OthersComponent_0, RenderType_OthersComponent)), providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(2, 114688, null, 0, OthersComponent, [FieldsService], null, null)], function (_ck, _v) {
            _ck(_v, 2, 0);
        }, null);
    }
    var OthersComponentNgFactory = createComponentFactory('mv-others', OthersComponent, View_OthersComponent_Host_0, { others: 'others' }, {}, []);

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    var styles_ExtraneousComponent = [];
    var RenderType_ExtraneousComponent = createRendererType2({ encapsulation: 2,
        styles: styles_ExtraneousComponent, data: {} });
    function View_ExtraneousComponent_1(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 66, 'fieldset', [['class', 'blue']], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['\n  '])), (_l()(), elementDef(2, 0, null, null, 1, 'legend', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Extraneous'])),
            (_l()(), textDef(-1, null, ['\n  '])), (_l()(), elementDef(5, 0, null, null, 11, 'div', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n    '])),
            (_l()(), elementDef(7, 0, null, null, 8, 'label', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Code User Tourplan\n      '])), (_l()(), elementDef(9, 0, null, null, 5, 'input', [['name', 'sugar_tourplan'], ['type', 'text']], [[2,
                    'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                    null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
                [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                    'ngModelChange'], [null, 'input'], [null, 'blur'], [null,
                    'compositionstart'], [null, 'compositionend']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('input' === en)) {
                    var pd_0 = (nodeValue(_v, 10)._handleInput($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 10).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('compositionstart' === en)) {
                    var pd_2 = (nodeValue(_v, 10)._compositionStart() !== false);
                    ad = (pd_2 && ad);
                }
                if (('compositionend' === en)) {
                    var pd_3 = (nodeValue(_v, 10)._compositionEnd($event.target.value) !== false);
                    ad = (pd_3 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_4 = ((_co.codeTourplan = $event) !== false);
                    ad = (pd_4 && ad);
                }
                return ad;
            }, null, null)), directiveDef(10, 16384, null, 0, DefaultValueAccessor, [Renderer2, ElementRef, [2, COMPOSITION_BUFFER_MODE]], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [DefaultValueAccessor]), directiveDef(12, 671744, null, 0, NgModel, [[2,
                    ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(14, 16384, null, 0, NgControlStatus, [NgControl], null, null),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n\n  '])), (_l()(), elementDef(18, 0, null, null, 11, 'div', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(20, 0, null, null, 8, 'label', [], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['Code SON Galileo\n      '])), (_l()(), elementDef(22, 0, null, null, 5, 'input', [['name', 'codeSON'], ['type', 'text']], [[2, 'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                    null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
                [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                    'ngModelChange'], [null, 'input'], [null, 'blur'], [null,
                    'compositionstart'], [null, 'compositionend']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('input' === en)) {
                    var pd_0 = (nodeValue(_v, 23)._handleInput($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 23).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('compositionstart' === en)) {
                    var pd_2 = (nodeValue(_v, 23)._compositionStart() !== false);
                    ad = (pd_2 && ad);
                }
                if (('compositionend' === en)) {
                    var pd_3 = (nodeValue(_v, 23)._compositionEnd($event.target.value) !== false);
                    ad = (pd_3 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_4 = ((_co.codeSON = $event) !== false);
                    ad = (pd_4 && ad);
                }
                return ad;
            }, null, null)), directiveDef(23, 16384, null, 0, DefaultValueAccessor, [Renderer2, ElementRef, [2, COMPOSITION_BUFFER_MODE]], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [DefaultValueAccessor]), directiveDef(25, 671744, null, 0, NgModel, [[2,
                    ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(27, 16384, null, 0, NgControlStatus, [NgControl], null, null),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n\n  '])), (_l()(), elementDef(31, 0, null, null, 11, 'div', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(33, 0, null, null, 8, 'label', [], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['Title\n      '])), (_l()(), elementDef(35, 0, null, null, 5, 'input', [['name', 'title'], ['type', 'text']], [[2, 'ng-untouched',
                    null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
                [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                    null], [2, 'ng-pending', null]], [[null, 'ngModelChange'],
                [null, 'input'], [null, 'blur'], [null, 'compositionstart'],
                [null, 'compositionend']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('input' === en)) {
                    var pd_0 = (nodeValue(_v, 36)._handleInput($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 36).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('compositionstart' === en)) {
                    var pd_2 = (nodeValue(_v, 36)._compositionStart() !== false);
                    ad = (pd_2 && ad);
                }
                if (('compositionend' === en)) {
                    var pd_3 = (nodeValue(_v, 36)._compositionEnd($event.target.value) !== false);
                    ad = (pd_3 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_4 = ((_co.title = $event) !== false);
                    ad = (pd_4 && ad);
                }
                return ad;
            }, null, null)), directiveDef(36, 16384, null, 0, DefaultValueAccessor, [Renderer2, ElementRef, [2, COMPOSITION_BUFFER_MODE]], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [DefaultValueAccessor]), directiveDef(38, 671744, null, 0, NgModel, [[2,
                    ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(40, 16384, null, 0, NgControlStatus, [NgControl], null, null),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n\n  '])), (_l()(), elementDef(44, 0, null, null, 21, 'div', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(46, 0, null, null, 8, 'label', [], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(48, 0, null, null, 5, 'input', [['name', 'inactiveStatus'], ['type', 'checkbox']], [[2, 'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                    null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
                [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                    'ngModelChange'], [null, 'change'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('change' === en)) {
                    var pd_0 = (nodeValue(_v, 49).onChange($event.target.checked) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 49).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_2 = ((_co.inactiveStatus = $event) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, null, null)), directiveDef(49, 16384, null, 0, CheckboxControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [CheckboxControlValueAccessor]), directiveDef(51, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(53, 16384, null, 0, NgControlStatus, [NgControl], null, null),
            (_l()(), textDef(-1, null, ['Statut inactif\n    '])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(56, 0, null, null, 8, 'label', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n      '])), (_l()(),
                elementDef(58, 0, null, null, 5, 'input', [['name', 'inactiveEmployee'],
                    ['type', 'checkbox']], [[2, 'ng-untouched', null], [2, 'ng-touched',
                        null], [2, 'ng-pristine', null], [2, 'ng-dirty', null],
                    [2, 'ng-valid', null], [2, 'ng-invalid', null], [2, 'ng-pending',
                        null]], [[null, 'ngModelChange'], [null,
                        'change'], [null, 'blur']], function (_v, en, $event) {
                    var ad = true;
                    var _co = _v.component;
                    if (('change' === en)) {
                        var pd_0 = (nodeValue(_v, 59).onChange($event.target.checked) !== false);
                        ad = (pd_0 && ad);
                    }
                    if (('blur' === en)) {
                        var pd_1 = (nodeValue(_v, 59).onTouched() !== false);
                        ad = (pd_1 && ad);
                    }
                    if (('ngModelChange' === en)) {
                        var pd_2 = ((_co.inactiveEmployee = $event) !== false);
                        ad = (pd_2 && ad);
                    }
                    return ad;
                }, null, null)), directiveDef(59, 16384, null, 0, CheckboxControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [CheckboxControlValueAccessor]), directiveDef(61, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(63, 16384, null, 0, NgControlStatus, [NgControl], null, null),
            (_l()(), textDef(-1, null, ['Statut Employe inactif\n    '])), (_l()(),
                textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_7 = 'sugar_tourplan';
            var currVal_8 = _co.codeTourplan;
            _ck(_v, 12, 0, currVal_7, currVal_8);
            var currVal_16 = 'codeSON';
            var currVal_17 = _co.codeSON;
            _ck(_v, 25, 0, currVal_16, currVal_17);
            var currVal_25 = 'title';
            var currVal_26 = _co.title;
            _ck(_v, 38, 0, currVal_25, currVal_26);
            var currVal_34 = 'inactiveStatus';
            var currVal_35 = _co.inactiveStatus;
            _ck(_v, 51, 0, currVal_34, currVal_35);
            var currVal_43 = 'inactiveEmployee';
            var currVal_44 = _co.inactiveEmployee;
            _ck(_v, 61, 0, currVal_43, currVal_44);
        }, function (_ck, _v) {
            var currVal_0 = nodeValue(_v, 14).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 14).ngClassTouched;
            var currVal_2 = nodeValue(_v, 14).ngClassPristine;
            var currVal_3 = nodeValue(_v, 14).ngClassDirty;
            var currVal_4 = nodeValue(_v, 14).ngClassValid;
            var currVal_5 = nodeValue(_v, 14).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 14).ngClassPending;
            _ck(_v, 9, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
            var currVal_9 = nodeValue(_v, 27).ngClassUntouched;
            var currVal_10 = nodeValue(_v, 27).ngClassTouched;
            var currVal_11 = nodeValue(_v, 27).ngClassPristine;
            var currVal_12 = nodeValue(_v, 27).ngClassDirty;
            var currVal_13 = nodeValue(_v, 27).ngClassValid;
            var currVal_14 = nodeValue(_v, 27).ngClassInvalid;
            var currVal_15 = nodeValue(_v, 27).ngClassPending;
            _ck(_v, 22, 0, currVal_9, currVal_10, currVal_11, currVal_12, currVal_13, currVal_14, currVal_15);
            var currVal_18 = nodeValue(_v, 40).ngClassUntouched;
            var currVal_19 = nodeValue(_v, 40).ngClassTouched;
            var currVal_20 = nodeValue(_v, 40).ngClassPristine;
            var currVal_21 = nodeValue(_v, 40).ngClassDirty;
            var currVal_22 = nodeValue(_v, 40).ngClassValid;
            var currVal_23 = nodeValue(_v, 40).ngClassInvalid;
            var currVal_24 = nodeValue(_v, 40).ngClassPending;
            _ck(_v, 35, 0, currVal_18, currVal_19, currVal_20, currVal_21, currVal_22, currVal_23, currVal_24);
            var currVal_27 = nodeValue(_v, 53).ngClassUntouched;
            var currVal_28 = nodeValue(_v, 53).ngClassTouched;
            var currVal_29 = nodeValue(_v, 53).ngClassPristine;
            var currVal_30 = nodeValue(_v, 53).ngClassDirty;
            var currVal_31 = nodeValue(_v, 53).ngClassValid;
            var currVal_32 = nodeValue(_v, 53).ngClassInvalid;
            var currVal_33 = nodeValue(_v, 53).ngClassPending;
            _ck(_v, 48, 0, currVal_27, currVal_28, currVal_29, currVal_30, currVal_31, currVal_32, currVal_33);
            var currVal_36 = nodeValue(_v, 63).ngClassUntouched;
            var currVal_37 = nodeValue(_v, 63).ngClassTouched;
            var currVal_38 = nodeValue(_v, 63).ngClassPristine;
            var currVal_39 = nodeValue(_v, 63).ngClassDirty;
            var currVal_40 = nodeValue(_v, 63).ngClassValid;
            var currVal_41 = nodeValue(_v, 63).ngClassInvalid;
            var currVal_42 = nodeValue(_v, 63).ngClassPending;
            _ck(_v, 58, 0, currVal_36, currVal_37, currVal_38, currVal_39, currVal_40, currVal_41, currVal_42);
        });
    }
    function View_ExtraneousComponent_0(_l) {
        return viewDef(0, [(_l()(), anchorDef(16777216, null, null, 1, null, View_ExtraneousComponent_1)), directiveDef(1, 16384, null, 0, NgIf, [ViewContainerRef,
                TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var currVal_0 = (1 != null);
            _ck(_v, 1, 0, currVal_0);
        }, null);
    }
    function View_ExtraneousComponent_Host_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 2, 'mv-extraneous', [], null, null, null, View_ExtraneousComponent_0, RenderType_ExtraneousComponent)), providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(2, 114688, null, 0, ExtraneousComponent, [FieldsService], null, null)], function (_ck, _v) {
            _ck(_v, 2, 0);
        }, null);
    }
    var ExtraneousComponentNgFactory = createComponentFactory('mv-extraneous', ExtraneousComponent, View_ExtraneousComponent_Host_0, { codeTourplan: 'codeTourplan',
        codeSON: 'codeSON', title: 'title', inactiveStatus: 'inactiveStatus', inactiveEmployee: 'inactiveEmployee',
        currentUser: 'currentUser' }, {}, []);

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    var styles_SwitchvoxComponent = [];
    var RenderType_SwitchvoxComponent = createRendererType2({ encapsulation: 2,
        styles: styles_SwitchvoxComponent, data: {} });
    function View_SwitchvoxComponent_1(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 69, 'fieldset', [['class', 'blue']], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['\n  '])), (_l()(), elementDef(2, 0, null, null, 1, 'legend', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Switchvox'])),
            (_l()(), textDef(-1, null, ['\n\n  '])), (_l()(), elementDef(5, 0, null, null, 11, 'div', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n    '])),
            (_l()(), elementDef(7, 0, null, null, 8, 'label', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Phone Number\n      '])), (_l()(), elementDef(9, 0, null, null, 5, 'input', [['name', 'phone_number'], ['type', 'tel']], [[2, 'ng-untouched',
                    null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
                [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                    null], [2, 'ng-pending', null]], [[null, 'ngModelChange'],
                [null, 'input'], [null, 'blur'], [null, 'compositionstart'],
                [null, 'compositionend']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('input' === en)) {
                    var pd_0 = (nodeValue(_v, 10)._handleInput($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 10).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('compositionstart' === en)) {
                    var pd_2 = (nodeValue(_v, 10)._compositionStart() !== false);
                    ad = (pd_2 && ad);
                }
                if (('compositionend' === en)) {
                    var pd_3 = (nodeValue(_v, 10)._compositionEnd($event.target.value) !== false);
                    ad = (pd_3 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_4 = ((_co.phoneNumber = $event) !== false);
                    ad = (pd_4 && ad);
                }
                return ad;
            }, null, null)), directiveDef(10, 16384, null, 0, DefaultValueAccessor, [Renderer2, ElementRef, [2, COMPOSITION_BUFFER_MODE]], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [DefaultValueAccessor]), directiveDef(12, 671744, null, 0, NgModel, [[2,
                    ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(14, 16384, null, 0, NgControlStatus, [NgControl], null, null),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n\n  '])), (_l()(), elementDef(18, 0, null, null, 11, 'div', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(20, 0, null, null, 8, 'label', [], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['Extension\n      '])), (_l()(), elementDef(22, 0, null, null, 5, 'input', [['name', 'extension'], ['type', 'tel']], [[2, 'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                    null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
                [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                    'ngModelChange'], [null, 'input'], [null, 'blur'], [null,
                    'compositionstart'], [null, 'compositionend']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('input' === en)) {
                    var pd_0 = (nodeValue(_v, 23)._handleInput($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 23).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('compositionstart' === en)) {
                    var pd_2 = (nodeValue(_v, 23)._compositionStart() !== false);
                    ad = (pd_2 && ad);
                }
                if (('compositionend' === en)) {
                    var pd_3 = (nodeValue(_v, 23)._compositionEnd($event.target.value) !== false);
                    ad = (pd_3 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_4 = ((_co.phoneExtension = $event) !== false);
                    ad = (pd_4 && ad);
                }
                return ad;
            }, null, null)), directiveDef(23, 16384, null, 0, DefaultValueAccessor, [Renderer2, ElementRef, [2, COMPOSITION_BUFFER_MODE]], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [DefaultValueAccessor]), directiveDef(25, 671744, null, 0, NgModel, [[2,
                    ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(27, 16384, null, 0, NgControlStatus, [NgControl], null, null),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n\n  '])), (_l()(), elementDef(31, 0, null, null, 11, 'div', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(33, 0, null, null, 8, 'label', [], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(35, 0, null, null, 5, 'input', [['name', 'codevad'], ['type', 'checkbox']], [[2, 'ng-untouched',
                    null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
                [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                    null], [2, 'ng-pending', null]], [[null, 'ngModelChange'],
                [null, 'change'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('change' === en)) {
                    var pd_0 = (nodeValue(_v, 36).onChange($event.target.checked) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 36).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_2 = ((_co.codevad = $event) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, null, null)), directiveDef(36, 16384, null, 0, CheckboxControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [CheckboxControlValueAccessor]), directiveDef(38, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(40, 16384, null, 0, NgControlStatus, [NgControl], null, null),
            (_l()(), textDef(-1, null, ['Téléphonie a distance\n    '])), (_l()(), textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n\n  '])), (_l()(),
                elementDef(44, 0, null, null, 11, 'div', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(46, 0, null, null, 8, 'label', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n      '])), (_l()(),
                elementDef(48, 0, null, null, 5, 'input', [['name', 'outbound'],
                    ['type', 'checkbox']], [[2, 'ng-untouched', null], [2, 'ng-touched',
                        null], [2, 'ng-pristine', null], [2, 'ng-dirty', null],
                    [2, 'ng-valid', null], [2, 'ng-invalid', null], [2, 'ng-pending',
                        null]], [[null, 'ngModelChange'], [null,
                        'change'], [null, 'blur']], function (_v, en, $event) {
                    var ad = true;
                    var _co = _v.component;
                    if (('change' === en)) {
                        var pd_0 = (nodeValue(_v, 49).onChange($event.target.checked) !== false);
                        ad = (pd_0 && ad);
                    }
                    if (('blur' === en)) {
                        var pd_1 = (nodeValue(_v, 49).onTouched() !== false);
                        ad = (pd_1 && ad);
                    }
                    if (('ngModelChange' === en)) {
                        var pd_2 = ((_co.outbound = $event) !== false);
                        ad = (pd_2 && ad);
                    }
                    return ad;
                }, null, null)), directiveDef(49, 16384, null, 0, CheckboxControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [CheckboxControlValueAccessor]), directiveDef(51, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(53, 16384, null, 0, NgControlStatus, [NgControl], null, null),
            (_l()(), textDef(-1, null, ['Click to call\n    '])), (_l()(), textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n\n  '])), (_l()(),
                elementDef(57, 0, null, null, 11, 'div', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(59, 0, null, null, 8, 'label', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n      '])), (_l()(),
                elementDef(61, 0, null, null, 5, 'input', [['name', 'inbound'], ['type',
                        'checkbox']], [[2, 'ng-untouched', null], [2, 'ng-touched', null],
                    [2, 'ng-pristine', null], [2, 'ng-dirty', null], [2, 'ng-valid',
                        null], [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null, 'ngModelChange'], [null, 'change'], [null,
                        'blur']], function (_v, en, $event) {
                    var ad = true;
                    var _co = _v.component;
                    if (('change' === en)) {
                        var pd_0 = (nodeValue(_v, 62).onChange($event.target.checked) !== false);
                        ad = (pd_0 && ad);
                    }
                    if (('blur' === en)) {
                        var pd_1 = (nodeValue(_v, 62).onTouched() !== false);
                        ad = (pd_1 && ad);
                    }
                    if (('ngModelChange' === en)) {
                        var pd_2 = ((_co.inbound = $event) !== false);
                        ad = (pd_2 && ad);
                    }
                    return ad;
                }, null, null)), directiveDef(62, 16384, null, 0, CheckboxControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [CheckboxControlValueAccessor]), directiveDef(64, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(66, 16384, null, 0, NgControlStatus, [NgControl], null, null),
            (_l()(), textDef(-1, null, ['Notifications appels entrants\n    '])), (_l()(),
                textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_7 = 'phone_number';
            var currVal_8 = _co.phoneNumber;
            _ck(_v, 12, 0, currVal_7, currVal_8);
            var currVal_16 = 'extension';
            var currVal_17 = _co.phoneExtension;
            _ck(_v, 25, 0, currVal_16, currVal_17);
            var currVal_25 = 'codevad';
            var currVal_26 = _co.codevad;
            _ck(_v, 38, 0, currVal_25, currVal_26);
            var currVal_34 = 'outbound';
            var currVal_35 = _co.outbound;
            _ck(_v, 51, 0, currVal_34, currVal_35);
            var currVal_43 = 'inbound';
            var currVal_44 = _co.inbound;
            _ck(_v, 64, 0, currVal_43, currVal_44);
        }, function (_ck, _v) {
            var currVal_0 = nodeValue(_v, 14).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 14).ngClassTouched;
            var currVal_2 = nodeValue(_v, 14).ngClassPristine;
            var currVal_3 = nodeValue(_v, 14).ngClassDirty;
            var currVal_4 = nodeValue(_v, 14).ngClassValid;
            var currVal_5 = nodeValue(_v, 14).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 14).ngClassPending;
            _ck(_v, 9, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
            var currVal_9 = nodeValue(_v, 27).ngClassUntouched;
            var currVal_10 = nodeValue(_v, 27).ngClassTouched;
            var currVal_11 = nodeValue(_v, 27).ngClassPristine;
            var currVal_12 = nodeValue(_v, 27).ngClassDirty;
            var currVal_13 = nodeValue(_v, 27).ngClassValid;
            var currVal_14 = nodeValue(_v, 27).ngClassInvalid;
            var currVal_15 = nodeValue(_v, 27).ngClassPending;
            _ck(_v, 22, 0, currVal_9, currVal_10, currVal_11, currVal_12, currVal_13, currVal_14, currVal_15);
            var currVal_18 = nodeValue(_v, 40).ngClassUntouched;
            var currVal_19 = nodeValue(_v, 40).ngClassTouched;
            var currVal_20 = nodeValue(_v, 40).ngClassPristine;
            var currVal_21 = nodeValue(_v, 40).ngClassDirty;
            var currVal_22 = nodeValue(_v, 40).ngClassValid;
            var currVal_23 = nodeValue(_v, 40).ngClassInvalid;
            var currVal_24 = nodeValue(_v, 40).ngClassPending;
            _ck(_v, 35, 0, currVal_18, currVal_19, currVal_20, currVal_21, currVal_22, currVal_23, currVal_24);
            var currVal_27 = nodeValue(_v, 53).ngClassUntouched;
            var currVal_28 = nodeValue(_v, 53).ngClassTouched;
            var currVal_29 = nodeValue(_v, 53).ngClassPristine;
            var currVal_30 = nodeValue(_v, 53).ngClassDirty;
            var currVal_31 = nodeValue(_v, 53).ngClassValid;
            var currVal_32 = nodeValue(_v, 53).ngClassInvalid;
            var currVal_33 = nodeValue(_v, 53).ngClassPending;
            _ck(_v, 48, 0, currVal_27, currVal_28, currVal_29, currVal_30, currVal_31, currVal_32, currVal_33);
            var currVal_36 = nodeValue(_v, 66).ngClassUntouched;
            var currVal_37 = nodeValue(_v, 66).ngClassTouched;
            var currVal_38 = nodeValue(_v, 66).ngClassPristine;
            var currVal_39 = nodeValue(_v, 66).ngClassDirty;
            var currVal_40 = nodeValue(_v, 66).ngClassValid;
            var currVal_41 = nodeValue(_v, 66).ngClassInvalid;
            var currVal_42 = nodeValue(_v, 66).ngClassPending;
            _ck(_v, 61, 0, currVal_36, currVal_37, currVal_38, currVal_39, currVal_40, currVal_41, currVal_42);
        });
    }
    function View_SwitchvoxComponent_0(_l) {
        return viewDef(0, [(_l()(), anchorDef(16777216, null, null, 1, null, View_SwitchvoxComponent_1)), directiveDef(1, 16384, null, 0, NgIf, [ViewContainerRef,
                TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var currVal_0 = (1 != null);
            _ck(_v, 1, 0, currVal_0);
        }, null);
    }
    function View_SwitchvoxComponent_Host_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 2, 'mv-switchvox', [], null, null, null, View_SwitchvoxComponent_0, RenderType_SwitchvoxComponent)), providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(2, 114688, null, 0, SwitchvoxComponent, [FieldsService], null, null)], function (_ck, _v) {
            _ck(_v, 2, 0);
        }, null);
    }
    var SwitchvoxComponentNgFactory = createComponentFactory('mv-switchvox', SwitchvoxComponent, View_SwitchvoxComponent_Host_0, { phoneNumber: 'phoneNumber',
        phoneExtension: 'phoneExtension', codevad: 'codevad', outbound: 'outbound', inbound: 'inbound' }, {}, []);

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    var styles_GappsComponent = [];
    var RenderType_GappsComponent = createRendererType2({ encapsulation: 2,
        styles: styles_GappsComponent, data: {} });
    function View_GappsComponent_2(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 3, 'option', [], null, null, null, null, null)), directiveDef(1, 147456, null, 0, NgSelectOption, [ElementRef, Renderer2, [2, SelectControlValueAccessor]], { value: [0, 'value'] }, null), directiveDef(2, 147456, null, 0, NgSelectMultipleOption, [ElementRef,
                Renderer2, [8, null]], { value: [0, 'value'] }, null), (_l()(), textDef(3, null, ['', '\n      ']))], function (_ck, _v) {
            var currVal_0 = _v.context.$implicit.value;
            _ck(_v, 1, 0, currVal_0);
            var currVal_1 = _v.context.$implicit.value;
            _ck(_v, 2, 0, currVal_1);
        }, function (_ck, _v) {
            var currVal_2 = _v.context.$implicit.label;
            _ck(_v, 3, 0, currVal_2);
        });
    }
    function View_GappsComponent_1(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 27, 'fieldset', [['class', 'blue']], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['\n  '])), (_l()(), elementDef(2, 0, null, null, 1, 'legend', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Google Apps'])),
            (_l()(), textDef(-1, null, ['\n  '])), (_l()(), elementDef(5, 0, null, null, 11, 'div', [['class', 'select subtitle']], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Organisation\n    '])), (_l()(), elementDef(7, 0, null, null, 8, 'select', [['name', 'organisation']], [[2, 'ng-untouched', null], [2,
                    'ng-touched', null], [2, 'ng-pristine', null], [2, 'ng-dirty',
                    null], [2, 'ng-valid', null], [2, 'ng-invalid', null],
                [2, 'ng-pending', null]], [[null, 'ngModelChange'], [null,
                    'change'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('change' === en)) {
                    var pd_0 = (nodeValue(_v, 8).onChange($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 8).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_2 = ((_co.selectedOrganisation = $event) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, null, null)), directiveDef(8, 16384, null, 0, SelectControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [SelectControlValueAccessor]), directiveDef(10, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(12, 16384, null, 0, NgControlStatus, [NgControl], null, null),
            (_l()(), textDef(-1, null, ['\n      '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_GappsComponent_2)), directiveDef(15, 802816, null, 0, NgForOf, [ViewContainerRef, TemplateRef, IterableDiffers], { ngForOf: [0, 'ngForOf'], ngForTrackBy: [1, 'ngForTrackBy'] }, null), (_l()(),
                textDef(-1, null, ['\n    '])), (_l()(), textDef(-1, null, ['\n\n    '])),
            (_l()(), elementDef(18, 0, null, null, 8, 'label', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(20, 0, null, null, 5, 'input', [['name', 'groupes'], ['type', 'text']], [[2, 'ng-untouched', null],
                [2, 'ng-touched', null], [2, 'ng-pristine', null], [2, 'ng-dirty',
                    null], [2, 'ng-valid', null], [2, 'ng-invalid', null],
                [2, 'ng-pending', null]], [[null, 'ngModelChange'], [null,
                    'input'], [null, 'blur'], [null, 'compositionstart'], [null,
                    'compositionend']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('input' === en)) {
                    var pd_0 = (nodeValue(_v, 21)._handleInput($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 21).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('compositionstart' === en)) {
                    var pd_2 = (nodeValue(_v, 21)._compositionStart() !== false);
                    ad = (pd_2 && ad);
                }
                if (('compositionend' === en)) {
                    var pd_3 = (nodeValue(_v, 21)._compositionEnd($event.target.value) !== false);
                    ad = (pd_3 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_4 = ((_co.groupes = $event) !== false);
                    ad = (pd_4 && ad);
                }
                return ad;
            }, null, null)), directiveDef(21, 16384, null, 0, DefaultValueAccessor, [Renderer2, ElementRef, [2, COMPOSITION_BUFFER_MODE]], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [DefaultValueAccessor]), directiveDef(23, 671744, null, 0, NgModel, [[2,
                    ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(25, 16384, null, 0, NgControlStatus, [NgControl], null, null),
            (_l()(), textDef(-1, null, ['\n      Groupes - Séparer les noms de groupes par des ";" et ne pas mettre @planetveo.com\n    '])),
            (_l()(), textDef(-1, null, ['\n  ']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_7 = 'organisation';
            var currVal_8 = _co.selectedOrganisation;
            _ck(_v, 10, 0, currVal_7, currVal_8);
            var currVal_9 = _co.orgas;
            var currVal_10 = _co.trackByFn;
            _ck(_v, 15, 0, currVal_9, currVal_10);
            var currVal_18 = 'groupes';
            var currVal_19 = _co.groupes;
            _ck(_v, 23, 0, currVal_18, currVal_19);
        }, function (_ck, _v) {
            var currVal_0 = nodeValue(_v, 12).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 12).ngClassTouched;
            var currVal_2 = nodeValue(_v, 12).ngClassPristine;
            var currVal_3 = nodeValue(_v, 12).ngClassDirty;
            var currVal_4 = nodeValue(_v, 12).ngClassValid;
            var currVal_5 = nodeValue(_v, 12).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 12).ngClassPending;
            _ck(_v, 7, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
            var currVal_11 = nodeValue(_v, 25).ngClassUntouched;
            var currVal_12 = nodeValue(_v, 25).ngClassTouched;
            var currVal_13 = nodeValue(_v, 25).ngClassPristine;
            var currVal_14 = nodeValue(_v, 25).ngClassDirty;
            var currVal_15 = nodeValue(_v, 25).ngClassValid;
            var currVal_16 = nodeValue(_v, 25).ngClassInvalid;
            var currVal_17 = nodeValue(_v, 25).ngClassPending;
            _ck(_v, 20, 0, currVal_11, currVal_12, currVal_13, currVal_14, currVal_15, currVal_16, currVal_17);
        });
    }
    function View_GappsComponent_0(_l) {
        return viewDef(0, [(_l()(), anchorDef(16777216, null, null, 1, null, View_GappsComponent_1)), directiveDef(1, 16384, null, 0, NgIf, [ViewContainerRef,
                TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = ((_co.orgas != null) && (_co.selectedOrganisation != null));
            _ck(_v, 1, 0, currVal_0);
        }, null);
    }
    function View_GappsComponent_Host_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 2, 'mv-gapps', [], null, null, null, View_GappsComponent_0, RenderType_GappsComponent)),
            providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(2, 114688, null, 0, GappsComponent, [FieldsService], null, null)], function (_ck, _v) {
            _ck(_v, 2, 0);
        }, null);
    }
    var GappsComponentNgFactory = createComponentFactory('mv-gapps', GappsComponent, View_GappsComponent_Host_0, { orgas: 'orgas', selectedOrganisation: 'selectedOrganisation',
        groupes: 'groupes' }, {}, []);

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    var styles_CreateUserFormComponent = [];
    var RenderType_CreateUserFormComponent = createRendererType2({ encapsulation: 2,
        styles: styles_CreateUserFormComponent, data: {} });
    function View_CreateUserFormComponent_2(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 1, 'div', [], null, null, null, null, null)), (_l()(),
                textDef(1, null, ['ERROR: ', '']))], null, function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = _co.errorMsg;
            _ck(_v, 1, 0, currVal_0);
        });
    }
    function View_CreateUserFormComponent_1(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 55, null, null, null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(2, 0, null, null, 2, 'mv-accounts', [], null, null, null, View_AccountsComponent_0, RenderType_AccountsComponent)),
            providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(4, 114688, null, 0, AccountsComponent, [FieldsService], { accounts: [0,
                    'accounts'] }, null), (_l()(), textDef(-1, null, ['\n    '])),
            (_l()(), elementDef(6, 0, null, null, 2, 'mv-credentials', [], null, null, null, View_CredentialsComponent_0, RenderType_CredentialsComponent)), providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(8, 114688, null, 0, CredentialsComponent, [FieldsService], { civilites: [0, 'civilites'], userFields: [1, 'userFields'],
                currentUser: [2, 'currentUser'], usersFromSugar: [3, 'usersFromSugar'] }, null),
            (_l()(), textDef(-1, null, ['\n\n    '])), (_l()(), elementDef(10, 0, null, null, 2, 'mv-profiles', [], null, null, null, View_ProfilesComponent_0, RenderType_ProfilesComponent)),
            providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(12, 114688, null, 0, ProfilesComponent, [FieldsService, SugarService], { roles: [0, 'roles'], services: [1, 'services'], userTemplates: [2, 'userTemplates'],
                userValue: [3, 'userValue'], selectedFunction: [4, 'selectedFunction'], selectedManager: [5,
                    'selectedManager'], selectedOffice: [6, 'selectedOffice'], orgas: [7,
                    'orgas'], others: [8, 'others'], inactiveEmployee: [9, 'inactiveEmployee'],
                inactiveStatus: [10, 'inactiveStatus'], leadsMin: [11, 'leadsMin'], leadsMax: [12,
                    'leadsMax'], destinations: [13, 'destinations'], teams: [14, 'teams'],
                codeSON: [15, 'codeSON'], codeTourplan: [16, 'codeTourplan'], codevad: [17,
                    'codevad'], groupes: [18, 'groupes'], inbound: [19, 'inbound'], outbound: [20,
                    'outbound'], phoneExtension: [21, 'phoneExtension'], phoneNumber: [22,
                    'phoneNumber'], selectedOrganisation: [23, 'selectedOrganisation'],
                title: [24, 'title'] }, null), (_l()(), textDef(-1, null, ['\n\n    '])), (_l()(), elementDef(14, 0, null, null, 2, 'mv-office', [], null, null, null, View_OfficeComponent_0, RenderType_OfficeComponent)), providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(16, 114688, null, 0, OfficeComponent, [FieldsService], { offices: [0, 'offices'], selectedOffice: [1, 'selectedOffice'] }, null), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(18, 0, null, null, 2, 'mv-function', [], null, null, null, View_FunctionComponent_0, RenderType_FunctionComponent)),
            providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(20, 114688, null, 0, FunctionComponent, [FieldsService], { functions: [0,
                    'functions'], selectedFunction: [1, 'selectedFunction'] }, null),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(22, 0, null, null, 2, 'mv-manager', [], null, null, null, View_ManagerComponent_0, RenderType_ManagerComponent)), providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(24, 114688, null, 0, ManagerComponent, [FieldsService], { managers: [0,
                    'managers'], selectedManager: [1, 'selectedManager'] }, null), (_l()(),
                textDef(-1, null, ['\n\n    '])), (_l()(), elementDef(26, 0, null, null, 2, 'mv-destinations', [], null, null, null, View_DestinationsComponent_0, RenderType_DestinationsComponent)),
            providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(28, 114688, null, 0, DestinationsComponent, [FieldsService], { destinations: [0,
                    'destinations'] }, null), (_l()(), textDef(-1, null, ['\n    '])),
            (_l()(), elementDef(30, 0, null, null, 2, 'mv-teams', [], null, null, null, View_TeamsComponent_0, RenderType_TeamsComponent)),
            providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(32, 114688, null, 0, TeamsComponent, [FieldsService], { teams: [0, 'teams'] }, null), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(34, 0, null, null, 2, 'mv-others', [], null, null, null, View_OthersComponent_0, RenderType_OthersComponent)),
            providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(36, 114688, null, 0, OthersComponent, [FieldsService], { others: [0,
                    'others'] }, null), (_l()(), textDef(-1, null, ['\n    '])),
            (_l()(), elementDef(38, 0, null, null, 2, 'mv-extraneous', [], null, null, null, View_ExtraneousComponent_0, RenderType_ExtraneousComponent)), providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(40, 114688, null, 0, ExtraneousComponent, [FieldsService], { codeTourplan: [0, 'codeTourplan'], codeSON: [1, 'codeSON'],
                title: [2, 'title'], inactiveStatus: [3, 'inactiveStatus'], inactiveEmployee: [4,
                    'inactiveEmployee'], currentUser: [5, 'currentUser'] }, null),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(42, 0, null, null, 2, 'mv-switchvox', [], null, null, null, View_SwitchvoxComponent_0, RenderType_SwitchvoxComponent)),
            providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(44, 114688, null, 0, SwitchvoxComponent, [FieldsService], { phoneNumber: [0,
                    'phoneNumber'], phoneExtension: [1, 'phoneExtension'], codevad: [2, 'codevad'],
                outbound: [3, 'outbound'], inbound: [4, 'inbound'] }, null), (_l()(),
                textDef(-1, null, ['\n    '])), (_l()(), elementDef(46, 0, null, null, 2, 'mv-gapps', [], null, null, null, View_GappsComponent_0, RenderType_GappsComponent)), providerDef(14336, null, ControlContainer, null, [NgForm]), directiveDef(48, 114688, null, 0, GappsComponent, [FieldsService], { orgas: [0, 'orgas'],
                selectedOrganisation: [1, 'selectedOrganisation'], groupes: [2, 'groupes'] }, null), (_l()(), textDef(-1, null, ['\n\n    '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_CreateUserFormComponent_2)),
            directiveDef(51, 16384, null, 0, NgIf, [ViewContainerRef, TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), textDef(-1, null, ['\n    '])),
            (_l()(), elementDef(53, 0, null, null, 1, 'button', [['type', 'submit']], [[8, 'disabled', 0]], null, null, null, null)),
            (_l()(), textDef(-1, null, ['Créer l\'utilisateur'])), (_l()(), textDef(-1, null, ['\n  ']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = _co.fields.accounts;
            _ck(_v, 4, 0, currVal_0);
            var currVal_1 = _co.fields.civilites;
            var currVal_2 = _co.fields.userFields;
            var currVal_3 = _co.currentUser;
            var currVal_4 = _co.usersFromSugar;
            _ck(_v, 8, 0, currVal_1, currVal_2, currVal_3, currVal_4);
            var currVal_5 = _co.fields.roles;
            var currVal_6 = _co.fields.services;
            var currVal_7 = _co.fields.userTemplates;
            var currVal_8 = _co.fields.userValue;
            var currVal_9 = _co.fields.selectedFunction;
            var currVal_10 = _co.fields.selectedManager;
            var currVal_11 = _co.fields.selectedOffice;
            var currVal_12 = _co.fields.orgas;
            var currVal_13 = _co.fields.others;
            var currVal_14 = _co.fields.inactiveEmployee;
            var currVal_15 = _co.fields.inactiveStatus;
            var currVal_16 = _co.fields.leadsMin;
            var currVal_17 = _co.fields.leadsMax;
            var currVal_18 = _co.fields.destinations;
            var currVal_19 = _co.fields.teams;
            var currVal_20 = _co.fields.codeSON;
            var currVal_21 = _co.fields.codeTourplan;
            var currVal_22 = _co.fields.codevad;
            var currVal_23 = _co.fields.groupes;
            var currVal_24 = _co.fields.inbound;
            var currVal_25 = _co.fields.outbound;
            var currVal_26 = _co.fields.phoneExtension;
            var currVal_27 = _co.fields.phoneNumber;
            var currVal_28 = _co.fields.selectedOrganisation;
            var currVal_29 = _co.fields.title;
            _ck(_v, 12, 1, [currVal_5, currVal_6, currVal_7, currVal_8, currVal_9, currVal_10, currVal_11,
                currVal_12, currVal_13, currVal_14, currVal_15, currVal_16, currVal_17, currVal_18,
                currVal_19, currVal_20, currVal_21, currVal_22, currVal_23, currVal_24, currVal_25,
                currVal_26, currVal_27, currVal_28, currVal_29]);
            var currVal_30 = _co.fields.offices;
            var currVal_31 = _co.fields.selectedOffice;
            _ck(_v, 16, 0, currVal_30, currVal_31);
            var currVal_32 = _co.fields.functions;
            var currVal_33 = _co.fields.selectedFunction;
            _ck(_v, 20, 0, currVal_32, currVal_33);
            var currVal_34 = _co.fields.managers;
            var currVal_35 = _co.fields.selectedManager;
            _ck(_v, 24, 0, currVal_34, currVal_35);
            var currVal_36 = _co.fields.destinations;
            _ck(_v, 28, 0, currVal_36);
            var currVal_37 = _co.fields.teams;
            _ck(_v, 32, 0, currVal_37);
            var currVal_38 = _co.fields.others;
            _ck(_v, 36, 0, currVal_38);
            var currVal_39 = _co.fields.codeTourplan;
            var currVal_40 = _co.fields.codeSON;
            var currVal_41 = _co.fields.title;
            var currVal_42 = _co.fields.inactiveStatus;
            var currVal_43 = _co.fields.inactiveEmployee;
            var currVal_44 = _co.currentUser;
            _ck(_v, 40, 0, currVal_39, currVal_40, currVal_41, currVal_42, currVal_43, currVal_44);
            var currVal_45 = _co.fields.phoneNumber;
            var currVal_46 = _co.fields.phoneExtension;
            var currVal_47 = _co.fields.codevad;
            var currVal_48 = _co.fields.outbound;
            var currVal_49 = _co.fields.inbound;
            _ck(_v, 44, 0, currVal_45, currVal_46, currVal_47, currVal_48, currVal_49);
            var currVal_50 = _co.fields.orgas;
            var currVal_51 = _co.fields.selectedOrganisation;
            var currVal_52 = _co.fields.groupes;
            _ck(_v, 48, 0, currVal_50, currVal_51, currVal_52);
            var currVal_53 = _co.errorMsg;
            _ck(_v, 51, 0, currVal_53);
        }, function (_ck, _v) {
            var currVal_54 = !nodeValue(_v.parent, 5).form.valid;
            _ck(_v, 53, 0, currVal_54);
        });
    }
    function View_CreateUserFormComponent_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 1, 'h2', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, [' Create User Form '])), (_l()(), textDef(-1, null, ['\n\n'])), (_l()(), elementDef(3, 0, null, null, 8, 'form', [['novalidate',
                    '']], [[2, 'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                    null], [2, 'ng-dirty', null], [2, 'ng-valid', null], [2,
                    'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                    'ngSubmit'], [null, 'submit'], [null, 'reset']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('submit' === en)) {
                    var pd_0 = (nodeValue(_v, 5).onSubmit($event) !== false);
                    ad = (pd_0 && ad);
                }
                if (('reset' === en)) {
                    var pd_1 = (nodeValue(_v, 5).onReset() !== false);
                    ad = (pd_1 && ad);
                }
                if (('ngSubmit' === en)) {
                    var pd_2 = (_co.onSubmit(nodeValue(_v, 5).value) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, null, null)), directiveDef(4, 16384, null, 0, NgNoValidate, [], null, null), directiveDef(5, 16384, [['createForm', 4]], 0, NgForm, [[8, null], [8, null]], null, { ngSubmit: 'ngSubmit' }), providerDef(2048, null, ControlContainer, null, [NgForm]), directiveDef(7, 16384, null, 0, NgControlStatusGroup, [ControlContainer], null, null), (_l()(), textDef(-1, null, ['\n\n  '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_CreateUserFormComponent_1)),
            directiveDef(10, 16384, null, 0, NgIf, [ViewContainerRef, TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), textDef(-1, null, ['\n'])),
            (_l()(), textDef(-1, null, ['\nFORM VALUE\n'])), (_l()(), elementDef(13, 0, null, null, 2, 'pre', [], null, null, null, null, null)), (_l()(), textDef(14, null, [' ', ' '])),
            pipeDef(0, JsonPipe, []), (_l()(), textDef(-1, null, ['\n\nFIELDS\n'])),
            (_l()(), elementDef(17, 0, null, null, 2, 'pre', [], null, null, null, null, null)), (_l()(), textDef(18, null, ['', ''])), pipeDef(0, JsonPipe, []), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_7 = (_co.fields != null);
            _ck(_v, 10, 0, currVal_7);
        }, function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = nodeValue(_v, 7).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 7).ngClassTouched;
            var currVal_2 = nodeValue(_v, 7).ngClassPristine;
            var currVal_3 = nodeValue(_v, 7).ngClassDirty;
            var currVal_4 = nodeValue(_v, 7).ngClassValid;
            var currVal_5 = nodeValue(_v, 7).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 7).ngClassPending;
            _ck(_v, 3, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
            var currVal_8 = unwrapValue(_v, 14, 0, nodeValue(_v, 15).transform(nodeValue(_v, 5).value));
            _ck(_v, 14, 0, currVal_8);
            var currVal_9 = unwrapValue(_v, 18, 0, nodeValue(_v, 19).transform(_co.fields));
            _ck(_v, 18, 0, currVal_9);
        });
    }
    function View_CreateUserFormComponent_Host_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 1, 'mv-app-create-user-form', [], null, null, null, View_CreateUserFormComponent_0, RenderType_CreateUserFormComponent)), directiveDef(1, 114688, null, 0, CreateUserFormComponent, [FieldsService, SwitchVoxService, SugarService, ParserService, ActivatedRoute], null, null)], function (_ck, _v) {
            _ck(_v, 1, 0);
        }, null);
    }
    var CreateUserFormComponentNgFactory = createComponentFactory('mv-app-create-user-form', CreateUserFormComponent, View_CreateUserFormComponent_Host_0, {}, {}, []);

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    /* tslint:disable */
    var styles$4 = ['table[_ngcontent-%COMP%] {\n  border-collapse: collapse;\n  width: 100%;\n}\n\nthead[_ngcontent-%COMP%]    > td[_ngcontent-%COMP%], th[_ngcontent-%COMP%] {\n  border: 1px solid #dddddd;\n  text-align: left;\n  padding: 8px;\n  background-color: #dddddd;\n}\n\ntbody[_ngcontent-%COMP%]    > tr[_ngcontent-%COMP%]:nth-child(even) {\n  background-color: #dddddd;\n}'];

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    var styles_UsersComponent = [styles$4];
    var RenderType_UsersComponent = createRendererType2({ encapsulation: 0,
        styles: styles_UsersComponent, data: {} });
    function View_UsersComponent_2(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 86, 'tr', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), elementDef(2, 0, null, null, 14, 'td', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n        '])), (_l()(), elementDef(4, 0, null, null, 1, 'p', [], null, null, null, null, null)), (_l()(), textDef(5, null, ['# ', ''])), (_l()(), textDef(-1, null, ['\n        '])), (_l()(), elementDef(7, 0, null, null, 3, 'button', [], null, [[null,
                    'click']], function (_v, en, $event) {
                var ad = true;
                if (('click' === en)) {
                    var pd_0 = (nodeValue(_v, 8).onClick() !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)), directiveDef(8, 16384, null, 0, RouterLink, [Router, ActivatedRoute, [8, null], Renderer2, ElementRef], { routerLink: [0,
                    'routerLink'] }, null), pureArrayDef(9, 2), (_l()(), textDef(-1, null, ['Edit'])), (_l()(), textDef(-1, null, ['\n        '])), (_l()(), elementDef(12, 0, null, null, 3, 'button', [], null, [[null,
                    'click']], function (_v, en, $event) {
                var ad = true;
                if (('click' === en)) {
                    var pd_0 = (nodeValue(_v, 13).onClick() !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)), directiveDef(13, 16384, null, 0, RouterLink, [Router, ActivatedRoute, [8, null], Renderer2, ElementRef], { routerLink: [0,
                    'routerLink'] }, null), pureArrayDef(14, 2), (_l()(), textDef(-1, null, ['Delete'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(18, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(19, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(21, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(22, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(24, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(25, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(27, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(28, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(30, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(31, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(33, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(34, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(36, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(37, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(39, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(40, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(42, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(43, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(45, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(46, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(48, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(49, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(51, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(52, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(54, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(55, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(57, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(58, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(60, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(61, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(63, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(64, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(66, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(67, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(69, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(70, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(72, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(73, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(75, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(76, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(78, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(79, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(81, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(82, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(84, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(85, null, ['', ''])), (_l()(), textDef(-1, null, ['\n    ']))], function (_ck, _v) {
            var currVal_1 = _ck(_v, 9, 0, '/users', _v.context.$implicit.id);
            _ck(_v, 8, 0, currVal_1);
            var currVal_2 = _ck(_v, 14, 0, '/disable', _v.context.$implicit.id);
            _ck(_v, 13, 0, currVal_2);
        }, function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = (_co.filteredUsers.indexOf(_v.context.$implicit) + 1);
            _ck(_v, 5, 0, currVal_0);
            var currVal_3 = _v.context.$implicit.salutation;
            _ck(_v, 19, 0, currVal_3);
            var currVal_4 = _v.context.$implicit.firstName;
            _ck(_v, 22, 0, currVal_4);
            var currVal_5 = _v.context.$implicit.lastName;
            _ck(_v, 25, 0, currVal_5);
            var currVal_6 = _v.context.$implicit.userName;
            _ck(_v, 28, 0, currVal_6);
            var currVal_7 = _v.context.$implicit.email;
            _ck(_v, 31, 0, currVal_7);
            var currVal_8 = _v.context.$implicit.department;
            _ck(_v, 34, 0, currVal_8);
            var currVal_9 = _v.context.$implicit.officeId;
            _ck(_v, 37, 0, currVal_9);
            var currVal_10 = _v.context.$implicit.teamId;
            _ck(_v, 40, 0, currVal_10);
            var currVal_11 = _v.context.$implicit.tourplanID;
            _ck(_v, 43, 0, currVal_11);
            var currVal_12 = _v.context.$implicit.swClickToCall;
            _ck(_v, 46, 0, currVal_12);
            var currVal_13 = _v.context.$implicit.swCallNotification;
            _ck(_v, 49, 0, currVal_13);
            var currVal_14 = _v.context.$implicit.codeSonGalileo;
            _ck(_v, 52, 0, currVal_14);
            var currVal_15 = _v.context.$implicit.id;
            _ck(_v, 55, 0, currVal_15);
            var currVal_16 = _v.context.$implicit.type;
            _ck(_v, 58, 0, currVal_16);
            var currVal_17 = _v.context.$implicit.phoneHome;
            _ck(_v, 61, 0, currVal_17);
            var currVal_18 = _v.context.$implicit.phoneMobile;
            _ck(_v, 64, 0, currVal_18);
            var currVal_19 = _v.context.$implicit.phoneWork;
            _ck(_v, 67, 0, currVal_19);
            var currVal_20 = _v.context.$implicit.phoneOther;
            _ck(_v, 70, 0, currVal_20);
            var currVal_21 = _v.context.$implicit.phoneFax;
            _ck(_v, 73, 0, currVal_21);
            var currVal_22 = _v.context.$implicit.phoneAsterisk;
            _ck(_v, 76, 0, currVal_22);
            var currVal_23 = _v.context.$implicit.status;
            _ck(_v, 79, 0, currVal_23);
            var currVal_24 = _v.context.$implicit.employeeStatus;
            _ck(_v, 82, 0, currVal_24);
            var currVal_25 = _v.context.$implicit.managerId;
            _ck(_v, 85, 0, currVal_25);
        });
    }
    function View_UsersComponent_1(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 84, 'table', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n  '])), (_l()(), elementDef(2, 0, null, null, 75, 'thead', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(4, 0, null, null, 72, 'tr', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(6, 0, null, null, 0, 'th', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), elementDef(8, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Mr/Mme'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(11, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['First name'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(14, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Last name'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(17, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Username'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(20, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Email'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(23, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Dept'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(26, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Office Id'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(29, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Team Id'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(32, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Tourplan Id'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(35, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['SW ClickToCall'])), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), elementDef(38, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['SW CallNotification'])), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), elementDef(41, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Code SON Galileo'])), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), elementDef(44, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['ID'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(47, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Type'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(50, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Phone Home'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(53, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Phone Mobile'])), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), elementDef(56, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Phone Work'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(59, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Phone Other'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(62, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Phone Fax'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(65, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Phone Asterisk'])), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), elementDef(68, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Status'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(71, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Employee Status'])), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), elementDef(74, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Manager ID'])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), textDef(-1, null, ['\n  '])), (_l()(),
                textDef(-1, null, ['\n  '])), (_l()(), elementDef(79, 0, null, null, 4, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_UsersComponent_2)), directiveDef(82, 802816, null, 0, NgForOf, [ViewContainerRef, TemplateRef, IterableDiffers], { ngForOf: [0, 'ngForOf'], ngForTrackBy: [1, 'ngForTrackBy'] }, null), (_l()(),
                textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = _co.filteredUsers;
            var currVal_1 = _co.trackByFn;
            _ck(_v, 82, 0, currVal_0, currVal_1);
        }, null);
    }
    function View_UsersComponent_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 1, 'h1', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['Sugar Users'])), (_l()(), textDef(-1, null, ['\n'])), (_l()(), elementDef(3, 0, null, null, 1, 'h2', [], null, null, null, null, null)), (_l()(),
                textDef(4, null, ['', ' users: ', ''])), (_l()(), textDef(-1, null, ['\n\n'])), (_l()(), elementDef(6, 0, null, null, 1, 'button', [], null, [[null, 'click']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('click' === en)) {
                    var pd_0 = (_co.filterUsers('active') !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)), (_l()(), textDef(-1, null, ['Actifs'])),
            (_l()(), textDef(-1, null, ['\n'])), (_l()(), elementDef(9, 0, null, null, 1, 'button', [], null, [[null, 'click']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('click' === en)) {
                    var pd_0 = (_co.filterUsers('inactive') !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)), (_l()(), textDef(-1, null, ['Inactifs'])),
            (_l()(), textDef(-1, null, ['\n'])), (_l()(), elementDef(12, 0, null, null, 1, 'button', [], null, [[null, 'click']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('click' === en)) {
                    var pd_0 = (_co.filterUsers('all') !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)), (_l()(), textDef(-1, null, ['Tous'])),
            (_l()(), textDef(-1, null, ['\n'])), (_l()(), elementDef(15, 0, null, null, 0, 'br', [], null, null, null, null, null)), (_l()(), elementDef(16, 0, null, null, 0, 'br', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n'])), (_l()(), elementDef(18, 0, null, null, 2, 'button', [['routerLink', '/create']], null, [[null, 'click']], function (_v, en, $event) {
                var ad = true;
                if (('click' === en)) {
                    var pd_0 = (nodeValue(_v, 19).onClick() !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)), directiveDef(19, 16384, null, 0, RouterLink, [Router, ActivatedRoute, [8, null], Renderer2, ElementRef], { routerLink: [0, 'routerLink'] }, null), (_l()(), textDef(-1, null, ['Nouvel utilisateur'])), (_l()(), textDef(-1, null, ['\n\n'])), (_l()(),
                anchorDef(16777216, null, null, 1, null, View_UsersComponent_1)),
            directiveDef(23, 16384, null, 0, NgIf, [ViewContainerRef, TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_2 = '/create';
            _ck(_v, 19, 0, currVal_2);
            var currVal_3 = (_co.filteredUsers && (_co.filteredUsers != undefined));
            _ck(_v, 23, 0, currVal_3);
        }, function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = _co.filter;
            var currVal_1 = _co.filteredUsers.length;
            _ck(_v, 4, 0, currVal_0, currVal_1);
        });
    }
    function View_UsersComponent_Host_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 1, 'mv-app-users', [], null, null, null, View_UsersComponent_0, RenderType_UsersComponent)), directiveDef(1, 114688, null, 0, UsersComponent, [SugarService], null, null)], function (_ck, _v) {
            _ck(_v, 1, 0);
        }, null);
    }
    var UsersComponentNgFactory = createComponentFactory('mv-app-users', UsersComponent, View_UsersComponent_Host_0, {}, {}, []);

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    /* tslint:disable */
    var styles$5 = ['table[_ngcontent-%COMP%] {\n  border-collapse: collapse;\n  width: 100%;\n}\n\ntd[_ngcontent-%COMP%], th[_ngcontent-%COMP%] {\n  border: 1px solid #dddddd;\n  text-align: left;\n  padding: 8px;\n}'];

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    var styles_UserComponent = [styles$5];
    var RenderType_UserComponent = createRendererType2({ encapsulation: 0,
        styles: styles_UserComponent, data: {} });
    function View_UserComponent_1(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 146, 'table', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n\n  '])), (_l()(), elementDef(2, 0, null, null, 144, 'tbody', [], null, null, null, null, null)), (_l()(), elementDef(3, 0, null, null, 70, 'tr', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n    '])), (_l()(), elementDef(5, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Mr/Mme'])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(8, 0, null, null, 1, 'th', [], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['First name'])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(11, 0, null, null, 1, 'th', [], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['Last name'])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(14, 0, null, null, 1, 'th', [], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['Username'])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(17, 0, null, null, 1, 'th', [], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['Email'])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(20, 0, null, null, 1, 'th', [], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['Dept'])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(23, 0, null, null, 1, 'th', [], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['Office Id'])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(26, 0, null, null, 1, 'th', [], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['Team Id'])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(29, 0, null, null, 1, 'th', [], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['Tourplan Id'])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(32, 0, null, null, 1, 'th', [], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['SW ClickToCall'])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(35, 0, null, null, 1, 'th', [], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['SW CallNotification'])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(38, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Code SON Galileo'])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(41, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['ID'])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(44, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Type'])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(47, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Phone Home'])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(50, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Phone Mobile'])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(53, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Phone Work'])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(56, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Phone Other'])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(59, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Phone Fax'])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(62, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Phone Asterisk'])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(65, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Status'])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(68, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Employee Status'])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(71, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Manager ID'])),
            (_l()(), textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n\n  '])), (_l()(), elementDef(75, 0, null, null, 70, 'tr', [], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(77, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(78, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(80, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(81, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(83, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(84, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(86, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(87, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(89, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(90, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(92, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(93, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(95, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(96, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(98, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(99, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(101, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(102, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(104, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(105, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(107, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(108, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(110, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(111, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(113, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(114, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(116, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(117, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(119, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(120, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(122, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(123, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(125, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(126, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(128, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(129, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(131, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(132, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(134, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(135, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(137, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(138, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(140, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(141, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(143, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(144, null, ['', ''])),
            (_l()(), textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n']))], null, function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = _co.user.salutation;
            _ck(_v, 78, 0, currVal_0);
            var currVal_1 = _co.user.firstName;
            _ck(_v, 81, 0, currVal_1);
            var currVal_2 = _co.user.lastName;
            _ck(_v, 84, 0, currVal_2);
            var currVal_3 = _co.user.userName;
            _ck(_v, 87, 0, currVal_3);
            var currVal_4 = _co.user.email;
            _ck(_v, 90, 0, currVal_4);
            var currVal_5 = _co.user.department;
            _ck(_v, 93, 0, currVal_5);
            var currVal_6 = _co.user.officeId;
            _ck(_v, 96, 0, currVal_6);
            var currVal_7 = _co.user.teamId;
            _ck(_v, 99, 0, currVal_7);
            var currVal_8 = _co.user.tourplanID;
            _ck(_v, 102, 0, currVal_8);
            var currVal_9 = _co.user.swClickToCall;
            _ck(_v, 105, 0, currVal_9);
            var currVal_10 = _co.user.swCallNotification;
            _ck(_v, 108, 0, currVal_10);
            var currVal_11 = _co.user.codeSonGalileo;
            _ck(_v, 111, 0, currVal_11);
            var currVal_12 = _co.user.id;
            _ck(_v, 114, 0, currVal_12);
            var currVal_13 = _co.user.type;
            _ck(_v, 117, 0, currVal_13);
            var currVal_14 = _co.user.phoneHome;
            _ck(_v, 120, 0, currVal_14);
            var currVal_15 = _co.user.phoneMobile;
            _ck(_v, 123, 0, currVal_15);
            var currVal_16 = _co.user.phoneWork;
            _ck(_v, 126, 0, currVal_16);
            var currVal_17 = _co.user.phoneOther;
            _ck(_v, 129, 0, currVal_17);
            var currVal_18 = _co.user.phoneFax;
            _ck(_v, 132, 0, currVal_18);
            var currVal_19 = _co.user.phoneAsterisk;
            _ck(_v, 135, 0, currVal_19);
            var currVal_20 = _co.user.status;
            _ck(_v, 138, 0, currVal_20);
            var currVal_21 = _co.user.employeeStatus;
            _ck(_v, 141, 0, currVal_21);
            var currVal_22 = _co.user.managerId;
            _ck(_v, 144, 0, currVal_22);
        });
    }
    function View_UserComponent_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 1, 'h2', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['User component'])), (_l()(), textDef(-1, null, ['\n\n'])), (_l()(), elementDef(3, 0, null, null, 1, 'h3', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['Sugar User'])), (_l()(), textDef(-1, null, ['\n\n'])),
            (_l()(), anchorDef(16777216, null, null, 1, null, View_UserComponent_1)),
            directiveDef(7, 16384, null, 0, NgIf, [ViewContainerRef, TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = (_co.user && (_co.user != undefined));
            _ck(_v, 7, 0, currVal_0);
        }, null);
    }
    function View_UserComponent_Host_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 1, 'mv-app-user', [], null, null, null, View_UserComponent_0, RenderType_UserComponent)), directiveDef(1, 114688, null, 0, UserComponent, [SugarService], null, null)], function (_ck, _v) {
            _ck(_v, 1, 0);
        }, null);
    }
    var UserComponentNgFactory = createComponentFactory('mv-app-user', UserComponent, View_UserComponent_Host_0, {}, {}, []);

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    /* tslint:disable */
    var styles$6 = ['.users[_ngcontent-%COMP%] {\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n  height: 2000px;\n}'];

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    var styles_DisableUserFormComponent = [styles$6];
    var RenderType_DisableUserFormComponent = createRendererType2({ encapsulation: 0,
        styles: styles_DisableUserFormComponent, data: {} });
    function View_DisableUserFormComponent_2(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 8, 'div', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n        '])), (_l()(), elementDef(2, 0, null, null, 5, 'input', [['type', 'checkbox']], [[2, 'ng-untouched', null],
                [2, 'ng-touched', null], [2, 'ng-pristine', null], [2, 'ng-dirty',
                    null], [2, 'ng-valid', null], [2, 'ng-invalid', null],
                [2, 'ng-pending', null]], [[null, 'ngModelChange'], [null,
                    'change'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                if (('change' === en)) {
                    var pd_0 = (nodeValue(_v, 3).onChange($event.target.checked) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 3).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_2 = ((_v.context.$implicit.checked = $event) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, null, null)), directiveDef(3, 16384, null, 0, CheckboxControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [CheckboxControlValueAccessor]), directiveDef(5, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(7, 16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(8, null, ['', '\n      ']))], function (_ck, _v) {
            var currVal_7 = _v.context.$implicit.id;
            var currVal_8 = _v.context.$implicit.checked;
            _ck(_v, 5, 0, currVal_7, currVal_8);
        }, function (_ck, _v) {
            var currVal_0 = nodeValue(_v, 7).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 7).ngClassTouched;
            var currVal_2 = nodeValue(_v, 7).ngClassPristine;
            var currVal_3 = nodeValue(_v, 7).ngClassDirty;
            var currVal_4 = nodeValue(_v, 7).ngClassValid;
            var currVal_5 = nodeValue(_v, 7).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 7).ngClassPending;
            _ck(_v, 2, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
            var currVal_9 = _v.context.$implicit.label;
            _ck(_v, 8, 0, currVal_9);
        });
    }
    function View_DisableUserFormComponent_1(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 4, 'div', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_DisableUserFormComponent_2)), directiveDef(3, 802816, null, 0, NgForOf, [ViewContainerRef, TemplateRef, IterableDiffers], { ngForOf: [0, 'ngForOf'], ngForTrackBy: [1, 'ngForTrackBy'] }, null), (_l()(),
                textDef(-1, null, ['\n    ']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = _co.fields.accounts;
            var currVal_1 = _co.trackByFn;
            _ck(_v, 3, 0, currVal_0, currVal_1);
        }, null);
    }
    function View_DisableUserFormComponent_5(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 8, 'label', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n          '])), (_l()(), elementDef(2, 0, null, null, 5, 'input', [['type', 'checkbox']], [[2, 'ng-untouched', null],
                [2, 'ng-touched', null], [2, 'ng-pristine', null], [2, 'ng-dirty',
                    null], [2, 'ng-valid', null], [2, 'ng-invalid', null],
                [2, 'ng-pending', null]], [[null, 'ngModelChange'], [null,
                    'change'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                if (('change' === en)) {
                    var pd_0 = (nodeValue(_v, 3).onChange($event.target.checked) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 3).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_2 = ((_v.parent.context.$implicit.checked = $event) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, null, null)), directiveDef(3, 16384, null, 0, CheckboxControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [CheckboxControlValueAccessor]), directiveDef(5, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(7, 16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(8, null, ['', '\n        ']))], function (_ck, _v) {
            var currVal_7 = _v.parent.context.$implicit.userName;
            var currVal_8 = _v.parent.context.$implicit.checked;
            _ck(_v, 5, 0, currVal_7, currVal_8);
        }, function (_ck, _v) {
            var currVal_0 = nodeValue(_v, 7).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 7).ngClassTouched;
            var currVal_2 = nodeValue(_v, 7).ngClassPristine;
            var currVal_3 = nodeValue(_v, 7).ngClassDirty;
            var currVal_4 = nodeValue(_v, 7).ngClassValid;
            var currVal_5 = nodeValue(_v, 7).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 7).ngClassPending;
            _ck(_v, 2, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
            var currVal_9 = _v.parent.context.$implicit.userName;
            _ck(_v, 8, 0, currVal_9);
        });
    }
    function View_DisableUserFormComponent_4(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 7, 'div', [['ngModelGroup',
                    'users']], [[2, 'ng-untouched', null], [2, 'ng-touched', null], [2,
                    'ng-pristine', null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
                [2, 'ng-invalid', null], [2, 'ng-pending', null]], null, null, null, null)), directiveDef(1, 212992, null, 0, NgModelGroup, [[1, ControlContainer], [8, null], [8, null]], { name: [0, 'name'] }, null), providerDef(2048, null, ControlContainer, null, [NgModelGroup]), directiveDef(3, 16384, null, 0, NgControlStatusGroup, [ControlContainer], null, null), (_l()(), textDef(-1, null, ['\n        '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_DisableUserFormComponent_5)), directiveDef(6, 16384, null, 0, NgIf, [ViewContainerRef,
                TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), textDef(-1, null, ['\n      ']))], function (_ck, _v) {
            var currVal_7 = 'users';
            _ck(_v, 1, 0, currVal_7);
            var currVal_8 = (_v.context.$implicit.userName != null);
            _ck(_v, 6, 0, currVal_8);
        }, function (_ck, _v) {
            var currVal_0 = nodeValue(_v, 3).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 3).ngClassTouched;
            var currVal_2 = nodeValue(_v, 3).ngClassPristine;
            var currVal_3 = nodeValue(_v, 3).ngClassDirty;
            var currVal_4 = nodeValue(_v, 3).ngClassValid;
            var currVal_5 = nodeValue(_v, 3).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 3).ngClassPending;
            _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
        });
    }
    function View_DisableUserFormComponent_3(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 4, 'div', [['class',
                    'users']], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['\n      '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_DisableUserFormComponent_4)), directiveDef(3, 802816, null, 0, NgForOf, [ViewContainerRef, TemplateRef, IterableDiffers], { ngForOf: [0, 'ngForOf'], ngForTrackBy: [1, 'ngForTrackBy'] }, null), (_l()(),
                textDef(-1, null, ['\n    ']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = _co.users;
            var currVal_1 = _co.trackByFn;
            _ck(_v, 3, 0, currVal_0, currVal_1);
        }, null);
    }
    function View_DisableUserFormComponent_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 1, 'h2', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, [' Disable User Form '])), (_l()(), textDef(-1, null, ['\n\n'])), (_l()(), elementDef(3, 0, null, null, 75, 'form', [['novalidate',
                    '']], [[2, 'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                    null], [2, 'ng-dirty', null], [2, 'ng-valid', null], [2,
                    'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                    'submit'], [null, 'reset']], function (_v, en, $event) {
                var ad = true;
                if (('submit' === en)) {
                    var pd_0 = (nodeValue(_v, 5).onSubmit($event) !== false);
                    ad = (pd_0 && ad);
                }
                if (('reset' === en)) {
                    var pd_1 = (nodeValue(_v, 5).onReset() !== false);
                    ad = (pd_1 && ad);
                }
                return ad;
            }, null, null)), directiveDef(4, 16384, null, 0, NgNoValidate, [], null, null), directiveDef(5, 16384, [['disableForm', 4]], 0, NgForm, [[8, null], [8, null]], null, null), providerDef(2048, null, ControlContainer, null, [NgForm]), directiveDef(7, 16384, null, 0, NgControlStatusGroup, [ControlContainer], null, null), (_l()(), textDef(-1, null, ['\n\n  '])), (_l()(), elementDef(9, 0, null, null, 7, 'fieldset', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(11, 0, null, null, 1, 'legend', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['Type de compte'])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_DisableUserFormComponent_1)), directiveDef(15, 16384, null, 0, NgIf, [ViewContainerRef,
                TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n\n  '])), (_l()(), elementDef(18, 0, null, null, 7, 'fieldset', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(20, 0, null, null, 1, 'legend', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['Compte utilisateur a desactiver'])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_DisableUserFormComponent_3)), directiveDef(24, 16384, null, 0, NgIf, [ViewContainerRef, TemplateRef], { ngIf: [0, 'ngIf'] }, null),
            (_l()(), textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n\n\n  '])), (_l()(), elementDef(27, 0, null, null, 47, 'fieldset', [], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(29, 0, null, null, 1, 'legend', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Action'])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(32, 0, null, null, 11, 'div', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n      '])),
            (_l()(), elementDef(34, 0, null, null, 8, 'label', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Nouveau mot de passe\n        '])), (_l()(), elementDef(36, 0, null, null, 5, 'input', [['name', 'password'], ['type', 'text']], [[2, 'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                    null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
                [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                    'ngModelChange'], [null, 'input'], [null, 'blur'], [null,
                    'compositionstart'], [null, 'compositionend']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('input' === en)) {
                    var pd_0 = (nodeValue(_v, 37)._handleInput($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 37).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('compositionstart' === en)) {
                    var pd_2 = (nodeValue(_v, 37)._compositionStart() !== false);
                    ad = (pd_2 && ad);
                }
                if (('compositionend' === en)) {
                    var pd_3 = (nodeValue(_v, 37)._compositionEnd($event.target.value) !== false);
                    ad = (pd_3 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_4 = ((_co.password = $event) !== false);
                    ad = (pd_4 && ad);
                }
                return ad;
            }, null, null)), directiveDef(37, 16384, null, 0, DefaultValueAccessor, [Renderer2, ElementRef, [2, COMPOSITION_BUFFER_MODE]], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [DefaultValueAccessor]), directiveDef(39, 671744, null, 0, NgModel, [[2,
                    ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(41, 16384, null, 0, NgControlStatus, [NgControl], null, null),
            (_l()(), textDef(-1, null, ['\n      '])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), textDef(-1, null, ['\n\n    '])), (_l()(), elementDef(45, 0, null, null, 8, 'label', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(47, 0, null, null, 5, 'input', [['name', 'disableGoogle'], ['type', 'checkbox']], [[2, 'ng-untouched', null],
                [2, 'ng-touched', null], [2, 'ng-pristine', null], [2, 'ng-dirty',
                    null], [2, 'ng-valid', null], [2, 'ng-invalid', null],
                [2, 'ng-pending', null]], [[null, 'ngModelChange'], [null,
                    'change'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('change' === en)) {
                    var pd_0 = (nodeValue(_v, 48).onChange($event.target.checked) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 48).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_2 = ((_co.disableGoogle = $event) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, null, null)), directiveDef(48, 16384, null, 0, CheckboxControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [CheckboxControlValueAccessor]), directiveDef(50, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(52, 16384, null, 0, NgControlStatus, [NgControl], null, null),
            (_l()(), textDef(-1, null, ['Gapps - Retirer des boucles\n    '])), (_l()(),
                textDef(-1, null, ['\n    '])), (_l()(), elementDef(55, 0, null, null, 8, 'label', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n      '])),
            (_l()(), elementDef(57, 0, null, null, 5, 'input', [['name', 'changePassword'],
                ['type', 'checkbox']], [[2, 'ng-untouched', null], [2, 'ng-touched', null],
                [2, 'ng-pristine', null], [2, 'ng-dirty', null], [2, 'ng-valid',
                    null], [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null, 'ngModelChange'], [null, 'change'], [null,
                    'blur']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('change' === en)) {
                    var pd_0 = (nodeValue(_v, 58).onChange($event.target.checked) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 58).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_2 = ((_co.changePassword = $event) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, null, null)), directiveDef(58, 16384, null, 0, CheckboxControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [CheckboxControlValueAccessor]), directiveDef(60, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(62, 16384, null, 0, NgControlStatus, [NgControl], null, null),
            (_l()(), textDef(-1, null, ['Gapps - Changer le mot de passe\n    '])),
            (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(65, 0, null, null, 8, 'label', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n      '])),
            (_l()(), elementDef(67, 0, null, null, 5, 'input', [['name', 'disableSugarAccount'],
                ['type', 'checkbox']], [[2, 'ng-untouched', null], [2, 'ng-touched', null],
                [2, 'ng-pristine', null], [2, 'ng-dirty', null], [2, 'ng-valid',
                    null], [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null, 'ngModelChange'], [null, 'change'], [null,
                    'blur']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('change' === en)) {
                    var pd_0 = (nodeValue(_v, 68).onChange($event.target.checked) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 68).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_2 = ((_co.disableSugarAccount = $event) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, null, null)), directiveDef(68, 16384, null, 0, CheckboxControlValueAccessor, [Renderer2, ElementRef], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [CheckboxControlValueAccessor]), directiveDef(70, 671744, null, 0, NgModel, [[2, ControlContainer], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(72, 16384, null, 0, NgControlStatus, [NgControl], null, null),
            (_l()(), textDef(-1, null, ['Sugar - Desactiver le compte\n    '])), (_l()(),
                textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n\n  '])),
            (_l()(), elementDef(76, 0, null, null, 1, 'button', [], [[8,
                    'disabled', 0]], null, null, null, null)),
            (_l()(), textDef(-1, null, ['Desactiver l\'utilisateur'])), (_l()(), textDef(-1, null, ['\n'])), (_l()(), textDef(-1, null, ['\n'])), (_l()(),
                elementDef(80, 0, null, null, 2, 'pre', [], null, null, null, null, null)), (_l()(), textDef(81, null, ['  ', '\n'])), pipeDef(0, JsonPipe, []), (_l()(),
                textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_7 = ((_co.fields != null) && (_co.fields.accounts != null));
            _ck(_v, 15, 0, currVal_7);
            var currVal_8 = (_co.users != null);
            _ck(_v, 24, 0, currVal_8);
            var currVal_16 = 'password';
            var currVal_17 = _co.password;
            _ck(_v, 39, 0, currVal_16, currVal_17);
            var currVal_25 = 'disableGoogle';
            var currVal_26 = _co.disableGoogle;
            _ck(_v, 50, 0, currVal_25, currVal_26);
            var currVal_34 = 'changePassword';
            var currVal_35 = _co.changePassword;
            _ck(_v, 60, 0, currVal_34, currVal_35);
            var currVal_43 = 'disableSugarAccount';
            var currVal_44 = _co.disableSugarAccount;
            _ck(_v, 70, 0, currVal_43, currVal_44);
        }, function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = nodeValue(_v, 7).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 7).ngClassTouched;
            var currVal_2 = nodeValue(_v, 7).ngClassPristine;
            var currVal_3 = nodeValue(_v, 7).ngClassDirty;
            var currVal_4 = nodeValue(_v, 7).ngClassValid;
            var currVal_5 = nodeValue(_v, 7).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 7).ngClassPending;
            _ck(_v, 3, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
            var currVal_9 = nodeValue(_v, 41).ngClassUntouched;
            var currVal_10 = nodeValue(_v, 41).ngClassTouched;
            var currVal_11 = nodeValue(_v, 41).ngClassPristine;
            var currVal_12 = nodeValue(_v, 41).ngClassDirty;
            var currVal_13 = nodeValue(_v, 41).ngClassValid;
            var currVal_14 = nodeValue(_v, 41).ngClassInvalid;
            var currVal_15 = nodeValue(_v, 41).ngClassPending;
            _ck(_v, 36, 0, currVal_9, currVal_10, currVal_11, currVal_12, currVal_13, currVal_14, currVal_15);
            var currVal_18 = nodeValue(_v, 52).ngClassUntouched;
            var currVal_19 = nodeValue(_v, 52).ngClassTouched;
            var currVal_20 = nodeValue(_v, 52).ngClassPristine;
            var currVal_21 = nodeValue(_v, 52).ngClassDirty;
            var currVal_22 = nodeValue(_v, 52).ngClassValid;
            var currVal_23 = nodeValue(_v, 52).ngClassInvalid;
            var currVal_24 = nodeValue(_v, 52).ngClassPending;
            _ck(_v, 47, 0, currVal_18, currVal_19, currVal_20, currVal_21, currVal_22, currVal_23, currVal_24);
            var currVal_27 = nodeValue(_v, 62).ngClassUntouched;
            var currVal_28 = nodeValue(_v, 62).ngClassTouched;
            var currVal_29 = nodeValue(_v, 62).ngClassPristine;
            var currVal_30 = nodeValue(_v, 62).ngClassDirty;
            var currVal_31 = nodeValue(_v, 62).ngClassValid;
            var currVal_32 = nodeValue(_v, 62).ngClassInvalid;
            var currVal_33 = nodeValue(_v, 62).ngClassPending;
            _ck(_v, 57, 0, currVal_27, currVal_28, currVal_29, currVal_30, currVal_31, currVal_32, currVal_33);
            var currVal_36 = nodeValue(_v, 72).ngClassUntouched;
            var currVal_37 = nodeValue(_v, 72).ngClassTouched;
            var currVal_38 = nodeValue(_v, 72).ngClassPristine;
            var currVal_39 = nodeValue(_v, 72).ngClassDirty;
            var currVal_40 = nodeValue(_v, 72).ngClassValid;
            var currVal_41 = nodeValue(_v, 72).ngClassInvalid;
            var currVal_42 = nodeValue(_v, 72).ngClassPending;
            _ck(_v, 67, 0, currVal_36, currVal_37, currVal_38, currVal_39, currVal_40, currVal_41, currVal_42);
            var currVal_45 = !_co.enableAdd;
            _ck(_v, 76, 0, currVal_45);
            var currVal_46 = unwrapValue(_v, 81, 0, nodeValue(_v, 82).transform(nodeValue(_v, 5).value));
            _ck(_v, 81, 0, currVal_46);
        });
    }
    function View_DisableUserFormComponent_Host_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 1, 'mv-app-disable-user-form', [], null, null, null, View_DisableUserFormComponent_0, RenderType_DisableUserFormComponent)), directiveDef(1, 114688, null, 0, DisableUserFormComponent, [FieldsService, ActivatedRoute, SugarService], null, null)], function (_ck, _v) {
            _ck(_v, 1, 0);
        }, null);
    }
    var DisableUserFormComponentNgFactory = createComponentFactory('mv-app-disable-user-form', DisableUserFormComponent, View_DisableUserFormComponent_Host_0, {}, {}, []);

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    /* tslint:disable */
    var styles$7 = ['table[_ngcontent-%COMP%] {\n  border-collapse: collapse;\n  width: 100%;\n}\n\ntd[_ngcontent-%COMP%], th[_ngcontent-%COMP%] {\n  border: 1px solid #dddddd;\n  text-align: left;\n  padding: 8px;\n}\n\ntr[_ngcontent-%COMP%]:nth-child(even) {\n  background-color: #dddddd;\n}'];

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    var styles_RolesComponent = [styles$7];
    var RenderType_RolesComponent = createRendererType2({ encapsulation: 0,
        styles: styles_RolesComponent, data: {} });
    function View_RolesComponent_2(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 13, 'tr', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n    '])), (_l()(), elementDef(2, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(3, null, ['', ''])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(5, 0, null, null, 1, 'td', [], null, null, null, null, null)),
            (_l()(), textDef(6, null, ['', ''])), (_l()(), textDef(-1, null, ['\n    '])),
            (_l()(), elementDef(8, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(9, null, ['', ''])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(),
                elementDef(11, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(12, null, ['', ''])), (_l()(), textDef(-1, null, ['\n  ']))], null, function (_ck, _v) {
            var currVal_0 = _v.context.$implicit.name;
            _ck(_v, 3, 0, currVal_0);
            var currVal_1 = _v.context.$implicit.description;
            _ck(_v, 6, 0, currVal_1);
            var currVal_2 = _v.context.$implicit.id;
            _ck(_v, 9, 0, currVal_2);
            var currVal_3 = _v.context.$implicit.type;
            _ck(_v, 12, 0, currVal_3);
        });
    }
    function View_RolesComponent_1(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 20, 'table', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n  '])), (_l()(), elementDef(2, 0, null, null, 18, 'tbody', [], null, null, null, null, null)), (_l()(), elementDef(3, 0, null, null, 13, 'tr', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n    '])), (_l()(), elementDef(5, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Name'])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(8, 0, null, null, 1, 'th', [], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['Description'])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(11, 0, null, null, 1, 'th', [], null, null, null, null, null)),
            (_l()(), textDef(-1, null, ['Id'])), (_l()(), textDef(-1, null, ['\n    '])),
            (_l()(), elementDef(14, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Type'])), (_l()(), textDef(-1, null, ['\n  '])), (_l()(),
                textDef(-1, null, ['\n  '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_RolesComponent_2)), directiveDef(19, 802816, null, 0, NgForOf, [ViewContainerRef, TemplateRef, IterableDiffers], { ngForOf: [0, 'ngForOf'], ngForTrackBy: [1, 'ngForTrackBy'] }, null), (_l()(),
                textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = _co.rolesFromSugar;
            var currVal_1 = _co.trackByFn;
            _ck(_v, 19, 0, currVal_0, currVal_1);
        }, null);
    }
    function View_RolesComponent_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 1, 'h2', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['Sugar Roles'])), (_l()(), textDef(-1, null, ['\n\n'])), (_l()(), anchorDef(16777216, null, null, 1, null, View_RolesComponent_1)), directiveDef(4, 16384, null, 0, NgIf, [ViewContainerRef,
                TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = (_co.rolesFromSugar && (_co.rolesFromSugar != undefined));
            _ck(_v, 4, 0, currVal_0);
        }, null);
    }
    function View_RolesComponent_Host_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 1, 'mv-app-roles', [], null, null, null, View_RolesComponent_0, RenderType_RolesComponent)), directiveDef(1, 114688, null, 0, RolesComponent, [SugarService], null, null)], function (_ck, _v) {
            _ck(_v, 1, 0);
        }, null);
    }
    var RolesComponentNgFactory = createComponentFactory('mv-app-roles', RolesComponent, View_RolesComponent_Host_0, {}, {}, []);

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    /* tslint:disable */
    var styles$8 = ['table[_ngcontent-%COMP%] {\n  border-collapse: collapse;\n  width: 100%;\n}\n\nthead[_ngcontent-%COMP%]    > td[_ngcontent-%COMP%], th[_ngcontent-%COMP%] {\n  border: 1px solid #dddddd;\n  text-align: left;\n  padding: 8px;\n  background-color: #dddddd;\n}\n\ntbody[_ngcontent-%COMP%]    > tr[_ngcontent-%COMP%]:nth-child(even) {\n  background-color: #dddddd;\n}\n\ntextarea[_ngcontent-%COMP%] {\n  width: 100%;\n}'];

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    var styles_ImportComponent = [styles$8];
    var RenderType_ImportComponent = createRendererType2({ encapsulation: 0,
        styles: styles_ImportComponent, data: {} });
    function View_ImportComponent_2(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 70, 'tr', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), elementDef(2, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(3, null, ['', '.'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(5, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(6, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(8, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(9, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(11, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(12, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(14, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(15, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(17, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(18, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(20, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(21, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(23, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(24, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(26, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(27, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(29, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(30, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(32, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(33, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(35, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(36, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(38, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(39, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(41, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(42, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(44, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(45, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(47, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(48, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(50, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(51, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(53, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(54, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(56, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(57, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(59, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(60, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(62, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(63, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(65, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(66, null, ['', ''])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(68, 0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(69, null, ['', ''])), (_l()(), textDef(-1, null, ['\n    ']))], null, function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = (_co.users.indexOf(_v.context.$implicit) + 1);
            _ck(_v, 3, 0, currVal_0);
            var currVal_1 = _v.context.$implicit.firstname;
            _ck(_v, 6, 0, currVal_1);
            var currVal_2 = _v.context.$implicit.lastname;
            _ck(_v, 9, 0, currVal_2);
            var currVal_3 = _v.context.$implicit.id;
            _ck(_v, 12, 0, currVal_3);
            var currVal_4 = _v.context.$implicit.functionId;
            _ck(_v, 15, 0, currVal_4);
            var currVal_5 = _v.context.$implicit.serviceId;
            _ck(_v, 18, 0, currVal_5);
            var currVal_6 = _v.context.$implicit.officeId;
            _ck(_v, 21, 0, currVal_6);
            var currVal_7 = _v.context.$implicit.tourplanID;
            _ck(_v, 24, 0, currVal_7);
            var currVal_8 = _v.context.$implicit.email;
            _ck(_v, 27, 0, currVal_8);
            var currVal_9 = _v.context.$implicit.phoneWork;
            _ck(_v, 30, 0, currVal_9);
            var currVal_10 = _v.context.$implicit.phoneAsterisk;
            _ck(_v, 33, 0, currVal_10);
            var currVal_11 = _v.context.$implicit.password;
            _ck(_v, 36, 0, currVal_11);
            var currVal_12 = _v.context.$implicit.managerId;
            _ck(_v, 39, 0, currVal_12);
            var currVal_13 = _v.context.$implicit.userName;
            _ck(_v, 42, 0, currVal_13);
            var currVal_14 = _v.context.$implicit.isAdmin;
            _ck(_v, 45, 0, currVal_14);
            var currVal_15 = _v.context.$implicit.apiPortalUser;
            _ck(_v, 48, 0, currVal_15);
            var currVal_16 = _v.context.$implicit.status;
            _ck(_v, 51, 0, currVal_16);
            var currVal_17 = _v.context.$implicit.assignationNotification;
            _ck(_v, 54, 0, currVal_17);
            var currVal_18 = _v.context.$implicit.employeeStatus;
            _ck(_v, 57, 0, currVal_18);
            var currVal_19 = _v.context.$implicit.groupUser;
            _ck(_v, 60, 0, currVal_19);
            var currVal_20 = _v.context.$implicit.numberOfTeams;
            _ck(_v, 63, 0, currVal_20);
            var currVal_21 = _v.context.$implicit.leadsMin;
            _ck(_v, 66, 0, currVal_21);
            var currVal_22 = _v.context.$implicit.leadsMax;
            _ck(_v, 69, 0, currVal_22);
        });
    }
    function View_ImportComponent_1(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 81, 'table', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n  '])), (_l()(), elementDef(2, 0, null, null, 72, 'thead', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(4, 0, null, null, 69, 'tr', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(6, 0, null, null, 0, 'th', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), elementDef(8, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['First name'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(11, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Last name'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(14, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Id'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(17, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Function Id'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(20, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Service Id'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(23, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Office Id'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(26, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Tourplan Id'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(29, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Email'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(32, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Phone Work'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(35, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Phone Asterisk'])), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), elementDef(38, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Password'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(41, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Manager ID'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(44, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Username'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(47, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['IsAdmin?'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(50, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['API User?'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(53, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Status'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(56, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Notification'])), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), elementDef(59, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Employee Status'])), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), elementDef(62, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Group User'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(65, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Number Of Teams'])), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), elementDef(68, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Leads Min'])), (_l()(), textDef(-1, null, ['\n      '])), (_l()(), elementDef(71, 0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['Leads Max'])), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), textDef(-1, null, ['\n  '])), (_l()(),
                textDef(-1, null, ['\n  '])), (_l()(), elementDef(76, 0, null, null, 4, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n    '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_ImportComponent_2)), directiveDef(79, 802816, null, 0, NgForOf, [ViewContainerRef, TemplateRef, IterableDiffers], { ngForOf: [0, 'ngForOf'], ngForTrackBy: [1, 'ngForTrackBy'] }, null), (_l()(),
                textDef(-1, null, ['\n  '])), (_l()(), textDef(-1, null, ['\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_0 = _co.users;
            var currVal_1 = _co.trackByFn;
            _ck(_v, 79, 0, currVal_0, currVal_1);
        }, null);
    }
    function View_ImportComponent_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 1, 'h2', [], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['Import'])), (_l()(), textDef(-1, null, ['\n\n'])),
            (_l()(), elementDef(3, 0, null, null, 5, 'textarea', [['cols', '100'],
                ['name', 'csv'], ['rows', '4']], [[2, 'ng-untouched', null], [2, 'ng-touched',
                    null], [2, 'ng-pristine', null], [2, 'ng-dirty', null],
                [2, 'ng-valid', null], [2, 'ng-invalid', null], [2, 'ng-pending',
                    null]], [[null, 'ngModelChange'], [null, 'input'],
                [null, 'blur'], [null, 'compositionstart'], [null,
                    'compositionend']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('input' === en)) {
                    var pd_0 = (nodeValue(_v, 4)._handleInput($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 4).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('compositionstart' === en)) {
                    var pd_2 = (nodeValue(_v, 4)._compositionStart() !== false);
                    ad = (pd_2 && ad);
                }
                if (('compositionend' === en)) {
                    var pd_3 = (nodeValue(_v, 4)._compositionEnd($event.target.value) !== false);
                    ad = (pd_3 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_4 = ((_co.csv = $event) !== false);
                    ad = (pd_4 && ad);
                }
                return ad;
            }, null, null)), directiveDef(4, 16384, null, 0, DefaultValueAccessor, [Renderer2, ElementRef, [2, COMPOSITION_BUFFER_MODE]], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [DefaultValueAccessor]), directiveDef(6, 671744, [['textArea', 4]], 0, NgModel, [[8, null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(8, 16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(),
                textDef(-1, null, ['\n'])), (_l()(), elementDef(10, 0, null, null, 0, 'br', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n'])), (_l()(), elementDef(12, 0, null, null, 0, 'br', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n'])), (_l()(), elementDef(14, 0, null, null, 1, 'button', [], null, [[null, 'click']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('click' === en)) {
                    var pd_0 = (_co.parse(_co.csv) !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)), (_l()(), textDef(-1, null, ['Parse'])),
            (_l()(), textDef(-1, null, ['\n'])), (_l()(), elementDef(17, 0, null, null, 0, 'br', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n'])),
            (_l()(), elementDef(19, 0, null, null, 0, 'br', [], null, null, null, null, null)), (_l()(), textDef(-1, null, ['\n'])), (_l()(), anchorDef(16777216, null, null, 1, null, View_ImportComponent_1)), directiveDef(22, 16384, null, 0, NgIf, [ViewContainerRef, TemplateRef], { ngIf: [0, 'ngIf'] }, null),
            (_l()(), textDef(-1, null, ['\n\n\n\n']))], function (_ck, _v) {
            var _co = _v.component;
            var currVal_7 = 'csv';
            var currVal_8 = _co.csv;
            _ck(_v, 6, 0, currVal_7, currVal_8);
            var currVal_9 = (_co.users && (_co.users != undefined));
            _ck(_v, 22, 0, currVal_9);
        }, function (_ck, _v) {
            var currVal_0 = nodeValue(_v, 8).ngClassUntouched;
            var currVal_1 = nodeValue(_v, 8).ngClassTouched;
            var currVal_2 = nodeValue(_v, 8).ngClassPristine;
            var currVal_3 = nodeValue(_v, 8).ngClassDirty;
            var currVal_4 = nodeValue(_v, 8).ngClassValid;
            var currVal_5 = nodeValue(_v, 8).ngClassInvalid;
            var currVal_6 = nodeValue(_v, 8).ngClassPending;
            _ck(_v, 3, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
        });
    }
    function View_ImportComponent_Host_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 1, 'mv-import', [], null, null, null, View_ImportComponent_0, RenderType_ImportComponent)), directiveDef(1, 114688, null, 0, ImportComponent, [ParserService], null, null)], function (_ck, _v) {
            _ck(_v, 1, 0);
        }, null);
    }
    var ImportComponentNgFactory = createComponentFactory('mv-import', ImportComponent, View_ImportComponent_Host_0, {}, {}, []);

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    var styles_AppComponent = [];
    var RenderType_AppComponent = createRendererType2({ encapsulation: 2, styles: styles_AppComponent,
        data: {} });
    function View_AppComponent_0(_l) {
        return viewDef(0, [(_l()(), textDef(-1, null, ['\n    '])), (_l()(), elementDef(1, 0, null, null, 4, 'div', [['class', 'content'], ['id', 'mv-users']], null, null, null, null, null)), (_l()(),
                textDef(-1, null, ['\n      '])), (_l()(), elementDef(3, 16777216, null, null, 1, 'router-outlet', [], null, null, null, null, null)), directiveDef(4, 212992, null, 0, RouterOutlet, [ChildrenOutletContexts, ViewContainerRef, ComponentFactoryResolver, [8,
                    null], ChangeDetectorRef], null, null), (_l()(),
                textDef(-1, null, ['\n    '])), (_l()(), textDef(-1, null, ['\n  ']))], function (_ck, _v) {
            _ck(_v, 4, 0);
        }, null);
    }
    function View_AppComponent_Host_0(_l) {
        return viewDef(0, [(_l()(), elementDef(0, 0, null, null, 1, 'mv-users', [], null, null, null, View_AppComponent_0, RenderType_AppComponent)),
            directiveDef(1, 49152, null, 0, AppComponent, [], null, null)], null, null);
    }
    var AppComponentNgFactory = createComponentFactory('mv-users', AppComponent, View_AppComponent_Host_0, {}, {}, []);

    /**
     * @fileoverview This file is generated by the Angular template compiler.
     * Do not edit.
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
     */
    var AppModuleNgFactory = createNgModuleFactory(AppModule, [AppComponent], function (_l) {
        return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, [CreateUserFormComponentNgFactory, UsersComponentNgFactory, UserComponentNgFactory,
                        DisableUserFormComponentNgFactory, RolesComponentNgFactory, ImportComponentNgFactory,
                        AppComponentNgFactory]], [3, ComponentFactoryResolver], NgModuleRef]),
            moduleProvideDef(4352, LOCALE_ID, 'fr-FR', []), moduleProvideDef(4608, NgLocalization, NgLocaleLocalization, [LOCALE_ID]), moduleProvideDef(5120, APP_ID, _appIdRandomProviderFactory, []), moduleProvideDef(5120, IterableDiffers, _iterableDiffersFactory, []),
            moduleProvideDef(5120, KeyValueDiffers, _keyValueDiffersFactory, []), moduleProvideDef(4608, DomSanitizer, DomSanitizerImpl, [DOCUMENT]), moduleProvideDef(6144, Sanitizer, null, [DomSanitizer]),
            moduleProvideDef(4608, HAMMER_GESTURE_CONFIG, HammerGestureConfig, []),
            moduleProvideDef(5120, EVENT_MANAGER_PLUGINS, function (p0_0, p1_0, p2_0, p2_1) {
                return [new DomEventsPlugin(p0_0), new KeyEventsPlugin(p1_0),
                    new HammerGesturesPlugin(p2_0, p2_1)];
            }, [DOCUMENT, DOCUMENT, DOCUMENT, HAMMER_GESTURE_CONFIG]), moduleProvideDef(4608, EventManager, EventManager, [EVENT_MANAGER_PLUGINS, NgZone]),
            moduleProvideDef(135680, DomSharedStylesHost, DomSharedStylesHost, [DOCUMENT]),
            moduleProvideDef(4608, DomRendererFactory2, DomRendererFactory2, [EventManager,
                DomSharedStylesHost]), moduleProvideDef(5120, AnimationDriver, instantiateSupportedAnimationDriver, []),
            moduleProvideDef(5120, AnimationStyleNormalizer, instantiateDefaultStyleNormalizer, []), moduleProvideDef(4608, AnimationEngine, InjectableAnimationEngine, [AnimationDriver, AnimationStyleNormalizer]),
            moduleProvideDef(5120, RendererFactory2, instantiateRendererFactory, [DomRendererFactory2, AnimationEngine,
                NgZone]), moduleProvideDef(6144, SharedStylesHost, null, [DomSharedStylesHost]),
            moduleProvideDef(4608, Testability, Testability, [NgZone]), moduleProvideDef(4608, Meta, Meta, [DOCUMENT]), moduleProvideDef(4608, Title, Title, [DOCUMENT]),
            moduleProvideDef(4608, AnimationBuilder, BrowserAnimationBuilder, [RendererFactory2,
                DOCUMENT$1]), moduleProvideDef(4608, RadioControlRegistry, RadioControlRegistry, []), moduleProvideDef(4608, HttpXsrfTokenExtractor, HttpXsrfCookieExtractor, [DOCUMENT, PLATFORM_ID, XSRF_COOKIE_NAME]),
            moduleProvideDef(4608, HttpXsrfInterceptor, HttpXsrfInterceptor, [HttpXsrfTokenExtractor, XSRF_HEADER_NAME]), moduleProvideDef(5120, HTTP_INTERCEPTORS, function (p0_0) {
                return [p0_0];
            }, [HttpXsrfInterceptor]), moduleProvideDef(4608, BrowserXhr, BrowserXhr, []), moduleProvideDef(6144, XhrFactory, null, [BrowserXhr]), moduleProvideDef(4608, HttpXhrBackend, HttpXhrBackend, [XhrFactory]), moduleProvideDef(6144, HttpBackend, null, [HttpXhrBackend]),
            moduleProvideDef(5120, HttpHandler, interceptingHandler, [HttpBackend, [2,
                    HTTP_INTERCEPTORS]]), moduleProvideDef(4608, HttpClient, HttpClient, [HttpHandler]), moduleProvideDef(5120, ActivatedRoute, rootRoute, [Router]),
            moduleProvideDef(4608, NoPreloading, NoPreloading, []), moduleProvideDef(6144, PreloadingStrategy, null, [NoPreloading]), moduleProvideDef(135680, RouterPreloader, RouterPreloader, [Router, NgModuleFactoryLoader,
                Compiler, Injector, PreloadingStrategy]), moduleProvideDef(4608, PreloadAllModules, PreloadAllModules, []), moduleProvideDef(5120, ROUTER_INITIALIZER, getBootstrapListener, [RouterInitializer]), moduleProvideDef(5120, APP_BOOTSTRAP_LISTENER, function (p0_0) {
                return [p0_0];
            }, [ROUTER_INITIALIZER]), moduleProvideDef(4608, FieldsService, FieldsService, [HttpClient]), moduleProvideDef(4608, ParserService, ParserService, []),
            moduleProvideDef(4608, SugarService, SugarService, [HttpClient]), moduleProvideDef(4608, SugarResolverService, SugarResolverService, [SugarService]),
            moduleProvideDef(4608, SwitchVoxService, SwitchVoxService, [HttpClient]),
            moduleProvideDef(512, CommonModule, CommonModule, []), moduleProvideDef(1024, ErrorHandler, errorHandler, []), moduleProvideDef(1024, NgProbeToken, function () {
                return [routerNgProbeToken()];
            }, []), moduleProvideDef(512, RouterInitializer, RouterInitializer, [Injector]), moduleProvideDef(1024, APP_INITIALIZER, function (p0_0, p0_1, p1_0) {
                return [_createNgProbe(p0_0, p0_1), getAppInitializer(p1_0)];
            }, [[2, NgProbeToken$1], [2, NgProbeToken], RouterInitializer]), moduleProvideDef(512, ApplicationInitStatus, ApplicationInitStatus, [[2, APP_INITIALIZER]]), moduleProvideDef(131584, ApplicationRef_, ApplicationRef_, [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver,
                ApplicationInitStatus]), moduleProvideDef(2048, ApplicationRef, null, [ApplicationRef_]), moduleProvideDef(512, ApplicationModule, ApplicationModule, [ApplicationRef]),
            moduleProvideDef(512, BrowserModule, BrowserModule, [[3, BrowserModule]]),
            moduleProvideDef(512, BrowserAnimationsModule, BrowserAnimationsModule, []),
            moduleProvideDef(512, InternalFormsSharedModule, InternalFormsSharedModule, []), moduleProvideDef(512, FormsModule, FormsModule, []), moduleProvideDef(512, HttpClientXsrfModule, HttpClientXsrfModule, []), moduleProvideDef(512, HttpClientModule, HttpClientModule, []), moduleProvideDef(1024, ROUTER_FORROOT_GUARD, provideForRootGuard, [[3, Router]]), moduleProvideDef(512, UrlSerializer, DefaultUrlSerializer, []), moduleProvideDef(512, ChildrenOutletContexts, ChildrenOutletContexts, []),
            moduleProvideDef(256, APP_BASE_HREF, '/', []), moduleProvideDef(256, ROUTER_CONFIGURATION, {}, []), moduleProvideDef(1024, LocationStrategy, provideLocationStrategy, [PlatformLocation,
                [2, APP_BASE_HREF], ROUTER_CONFIGURATION]), moduleProvideDef(512, Location, Location, [LocationStrategy]), moduleProvideDef(512, Compiler, Compiler, []), moduleProvideDef(512, NgModuleFactoryLoader, SystemJsNgModuleLoader, [Compiler, [2, SystemJsNgModuleLoaderConfig]]), moduleProvideDef(1024, ROUTES, function () {
                return [[{ path: 'users/:id', component: CreateUserFormComponent, resolve: { userData: SugarResolverService } },
                        { path: 'create', component: CreateUserFormComponent }, { path: 'users',
                            component: UsersComponent }, { path: 'user', component: UserComponent },
                        { path: 'disable/:id', component: DisableUserFormComponent }, { path: 'disable',
                            component: DisableUserFormComponent }, { path: 'roles', component: RolesComponent },
                        { path: 'import', component: ImportComponent }, { path: '**', redirectTo: 'users' }]];
            }, []), moduleProvideDef(1024, Router, setupRouter, [ApplicationRef, UrlSerializer,
                ChildrenOutletContexts, Location, Injector, NgModuleFactoryLoader,
                Compiler, ROUTES, ROUTER_CONFIGURATION, [2, UrlHandlingStrategy],
                [2, RouteReuseStrategy]]), moduleProvideDef(512, RouterModule, RouterModule, [[2, ROUTER_FORROOT_GUARD], [2, Router]]), moduleProvideDef(512, AppModule, AppModule, []),
            moduleProvideDef(256, XSRF_COOKIE_NAME, 'XSRF-TOKEN', []), moduleProvideDef(256, XSRF_HEADER_NAME, 'X-XSRF-TOKEN', [])]);
    });

    var isEnabledProdMode = Config.get("enableProdMode");
    if (true === isEnabledProdMode) {
        enableProdMode();
    }
    platformBrowser()
        .bootstrapModuleFactory(AppModuleNgFactory);

}());
